#pragma once

// Rocket League (1.31) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

namespace SDK
{
//---------------------------------------------------------------------------
//Constants
//---------------------------------------------------------------------------

#undef AF_MAX
#undef PF_MAX

#define CONST_UnrealUnitsPerMeter                                100
#define CONST_MaxLoadoutSets                                     10
#define CONST_MeshRadius                                         15.0f
#define CONST_MeshWidth                                          15.0f
#define CONST_MAX_REPLICATED_VOTERS                              8
#define CONST_PlayerCountIrrelevant                              "NO_COUNT"
#define CONST_MAX_NAMEPLATES                                     8

//---------------------------------------------------------------------------
//Enums
//---------------------------------------------------------------------------

// Enum TAGame._AITypes_TA.EAITraitValue
enum class EAITraitValue
{
	AITraitValue_Low               = 0,
	AITraitValue_Medium            = 1,
	AITraitValue_High              = 2,
	AITraitValue_MAX               = 3
};


// Enum TAGame._AITypes_TA.EBTStatus
enum class EBTStatus
{
	BTStatus_Fail                  = 0,
	BTStatus_Success               = 1,
	BTStatus_Running               = 2,
	BTStatus_MAX                   = 3
};


// Enum TAGame._AITypes_TA.EAITeam
enum class EAITeam
{
	AITeam_Self                    = 0,
	AITeam_Enemy                   = 1,
	AITeam_Any                     = 2,
	AITeam_MAX                     = 3
};


// Enum TAGame._Types_TA.EExperimentalMapStatus
enum class EExperimentalMapStatus
{
	EMS_Default                    = 0,
	EMS_OnlyExperimentalPlaylist   = 1,
	EMS_Any                        = 2,
	EMS_MAX                        = 3
};


// Enum TAGame._Types_TA.EMirrorFieldType
enum class EMirrorFieldType
{
	MFT_None                       = 0,
	MFT_X                          = 1,
	MFT_Y                          = 2,
	MFT_XY                         = 3,
	MFT_TeamIndex                  = 4,
	MFT_MAX                        = 5
};


// Enum TAGame._Types_TA.EUIMenuState
enum class EUIMenuState
{
	UIMS_StartMenu                 = 0,
	UIMS_MainMenu                  = 1,
	UIMS_MAX                       = 2
};


// Enum TAGame._Types_TA.EPartyChatCommands
enum class EPartyChatCommands
{
	EPartyChat_Message             = 0,
	EPartyChat_Clear               = 1,
	EPartyChat_Repopulated         = 2,
	EPartyChat_MAX                 = 3
};


// Enum TAGame._Types_TA.EChatChannel
enum class EChatChannel
{
	EChatChannel_Match             = 0,
	EChatChannel_Team              = 1,
	EChatChannel_Party             = 2,
	EChatChannel_MAX               = 3
};


// Enum TAGame._Types_TA.ESkinType
enum class ESkinType
{
	EST_Default                    = 0,
	EST_Animated                   = 1,
	EST_AnimatedPrimaryOnly        = 2,
	EST_MAX                        = 3
};


// Enum TAGame._Types_TA.EKeySelection
enum class EKeySelection
{
	KS_Oldest                      = 0,
	KS_Newest                      = 1,
	KS_ShowKeyPicker               = 2,
	KS_MAX                         = 3
};


// Enum TAGame._Types_TA.EProductQuality
enum class EProductQuality
{
	EPQ_Common                     = 0,
	EPQ_Uncommon                   = 1,
	EPQ_Rare                       = 2,
	EPQ_VeryRare                   = 3,
	EPQ_Import                     = 4,
	EPQ_Exotic                     = 5,
	EPQ_BlackMarket                = 6,
	EPQ_Premium                    = 7,
	EPQ_Limited                    = 8,
	EPQ_MAX                        = 9
};


// Enum TAGame._Types_TA.EUnlockMethod
enum class EUnlockMethod
{
	UnlockMethod_Default           = 0,
	UnlockMethod_Drop              = 1,
	UnlockMethod_Special           = 2,
	UnlockMethod_Reward            = 3,
	UnlockMethod_DLC               = 4,
	UnlockMethod_Never             = 5,
	UnlockMethod_MAX               = 6
};


// Enum TAGame._Types_TA.EPaintAttributeType
enum class EPaintAttributeType
{
	PaintAttributeType_Primary     = 0,
	PaintAttributeType_LightAccent = 1,
	PaintAttributeType_DarkAccent  = 2,
	PaintAttributeType_Emissive    = 3,
	PaintAttributeType_MAX         = 4
};


// Enum TAGame._Types_TA.EChallengeState
enum class EChallengeState
{
	ChallengeState_None            = 0,
	ChallengeState_Active          = 1,
	ChallengeState_Unlocked        = 2,
	ChallengeState_MAX             = 3
};


// Enum TAGame._Types_TA.ECustomMatchSettingsType
enum class ECustomMatchSettingsType
{
	CustomMatchSettingsType_PrivateMatch = 0,
	CustomMatchSettingsType_LocalMatch = 1,
	CustomMatchSettingsType_TourCreate = 2,
	CustomMatchSettingsType_MAX    = 3
};


// Enum TAGame._Types_TA.EReportPlayerReason
enum class EReportPlayerReason
{
	ReportPlayerReason_Harrassment = 0,
	ReportPlayerReason_UnsportsmanlikeConduct = 1,
	ReportPlayerReason_Cheating    = 2,
	ReportPlayerReason_MAX         = 3
};


// Enum TAGame._Types_TA.EEditingType
enum class EEditingType
{
	ET_FreeCam                     = 0,
	ET_Ball                        = 1,
	ET_Car                         = 2,
	ET_MAX                         = 3
};


// Enum TAGame._Types_TA.EEquippableProductSlot
enum class EEquippableProductSlot
{
	EPS_Skin                       = 0,
	EPS_Wheels                     = 1,
	EPS_Boost                      = 2,
	EPS_Hat                        = 3,
	EPS_Antenna                    = 4,
	EPS_MAX                        = 5
};


// Enum TAGame._Types_TA.EEquipAction
enum class EEquipAction
{
	EquipAction_Both               = 0,
	EquipAction_Team0              = 1,
	EquipAction_Team1              = 2,
	EquipAction_MAX                = 3
};


// Enum TAGame._Types_TA.EHistory
enum class EHistory
{
	H_None                         = 0,
	H_Add                          = 1,
	H_Remove                       = 2,
	H_MAX                          = 3
};


// Enum TAGame._Types_TA.EHistoryType
enum class EHistoryType
{
	HT_None                        = 0,
	HT_Undo                        = 1,
	HT_Redo                        = 2,
	HT_MAX                         = 3
};


// Enum TAGame._Types_TA.EPawnType
enum class EPawnType
{
	PT_Player                      = 0,
	PT_Spectator                   = 1,
	PT_Editor                      = 2,
	PT_MAX                         = 3
};


// Enum TAGame._Types_TA.ESaveGameResult
enum class ESaveGameResult
{
	SaveGameResult_Pending         = 0,
	SaveGameResult_Success         = 1,
	SaveGameResult_UserNotSignedIn = 2,
	SaveGameResult_Error           = 3,
	SaveGameResult_NoSpace         = 4,
	SaveGameResult_MAX             = 5
};


// Enum TAGame._Types_TA.EProductThumbnailSize
enum class EProductThumbnailSize
{
	PTS_Garage                     = 0,
	PTS_Drop                       = 1,
	PTS_Preview                    = 2,
	PTS_MAX                        = 3
};


// Enum TAGame._Types_TA.EProductAttachmentSocket
enum class EProductAttachmentSocket
{
	PAS_Hat                        = 0,
	PAS_Front                      = 1,
	PAS_Antenna                    = 2,
	PAS_UnderGlow                  = 3,
	PAS_Root                       = 4,
	PAS_MAX                        = 5
};


// Enum TAGame._Types_TA.ETAStatType
enum class ETAStatType
{
	StatType_Private               = 0,
	StatType_Unranked              = 1,
	StatType_Ranked                = 2,
	StatType_MAX                   = 3
};


// Enum TAGame._Types_TA.EBallHitType
enum class EBallHitType
{
	HitType_Item0                  = 0,
	HitType_Item1                  = 1,
	HitType_Item2                  = 2,
	HitType_Car                    = 3,
	HitType_MAX                    = 4
};


// Enum TAGame._Types_TA.EVoteStatus
enum class EVoteStatus
{
	VOTE_Pending                   = 0,
	VOTE_Yes                       = 1,
	VOTE_No                        = 2,
	VOTE_MAX                       = 3
};


// Enum TAGame._Types_TA.ETrainingTag
enum class ETrainingTag
{
	Tag_Aerials                    = 0,
	Tag_Bounces                    = 1,
	Tag_Shots                      = 2,
	Tag_Saves                      = 3,
	Tag_Clears                     = 4,
	Tag_Rebounds                   = 5,
	Tag_Redirects                  = 6,
	Tag_Freestyles                 = 7,
	Tag_Dribbles                   = 8,
	Tag_AirDribbles                = 9,
	Tag_Kickoffs                   = 10,
	Tag_WallShots                  = 11,
	Tag_LongShots                  = 12,
	Tag_CloseShots                 = 13,
	Tag_AngleShots                 = 14,
	Tag_BackwardsShots             = 15,
	Tag_Offense                    = 16,
	Tag_Defense                    = 17,
	Tag_PinchShots                 = 18,
	Tag_MAX                        = 19
};


// Enum TAGame._Types_TA.EDifficulty
enum class EDifficulty
{
	D_Easy                         = 0,
	D_Medium                       = 1,
	D_Hard                         = 2,
	D_MAX                          = 3
};


// Enum TAGame._Types_TA.ETrainingType
enum class ETrainingType
{
	Training_None                  = 0,
	Training_Aerial                = 1,
	Training_Goalie                = 2,
	Training_Striker               = 3,
	Training_MAX                   = 4
};


// Enum TAGame._Types_TA.EDemolishSpeed
enum class EDemolishSpeed
{
	DemolishSpeed_Supersonic       = 0,
	DemolishSpeed_None             = 1,
	DemolishSpeed_MAX              = 2
};


// Enum TAGame._Types_TA.EDemolishTarget
enum class EDemolishTarget
{
	DemolishTarget_OtherTeam       = 0,
	DemolishTarget_Everyone        = 1,
	DemolishTarget_None            = 2,
	DemolishTarget_MAX             = 3
};


// Enum TAGame._Types_TA.EProductFilterLogLevel
enum class EProductFilterLogLevel
{
	ProductFilterLogLevel_Filtered = 0,
	ProductFilterLogLevel_UnFiltered = 1,
	ProductFilterLogLevel_MAX      = 2
};


// Enum TAGame._Types_TA.EProductTradeRestriction
enum class EProductTradeRestriction
{
	ProductTradeRestriction_P2P    = 0,
	ProductTradeRestriction_TradeIn = 1,
	ProductTradeRestriction_MAX    = 2
};


// Enum TAGame._Types_TA.EControllerSoundMode
enum class EControllerSoundMode
{
	CSM_Multiplayer                = 0,
	CSM_On                         = 1,
	CSM_Off                        = 2,
	CSM_MAX                        = 3
};


// Enum TAGame._Types_TA.EVoiceFilter
enum class EVoiceFilter
{
	VoiceFilter_All                = 0,
	VoiceFilter_Preset             = 1,
	VoiceFilter_Team               = 2,
	VoiceFilter_Friends            = 3,
	VoiceFilter_None               = 4,
	VoiceFilter_MAX                = 5
};


// Enum TAGame._Types_TA.EPaintTeam
enum class EPaintTeam
{
	PaintTeam_Blue                 = 0,
	PaintTeam_Orange               = 1,
	PaintTeam_None                 = 2,
	PaintTeam_MAX                  = 3
};


// Enum TAGame._Types_TA.SearchStatusOwner
enum class SearchStatusOwner
{
	StatusOwner_None               = 0,
	StatusOwner_Matchmaking        = 1,
	StatusOwner_PrivateMatch       = 2,
	StatusOwner_Lan                = 3,
	StatusOwner_Tournaments        = 4,
	StatusOwner_MAX                = 5
};


// Enum TAGame._Types_TA.EWheelPosition
enum class EWheelPosition
{
	WP_FrontLeft                   = 0,
	WP_FrontRight                  = 1,
	WP_BackLeft                    = 2,
	WP_BackRight                   = 3,
	WP_MAX                         = 4
};


// Enum TAGame.AchievementManager_TA.EAchievementType
enum class EAchievementType
{
	AT_Game                        = 0,
	AT_EXP0                        = 1,
	AT_DLC0                        = 2,
	AT_DLC1                        = 3,
	AT_DLC2                        = 4,
	AT_XBO0                        = 5,
	AT_DLC3                        = 6,
	AT_DLC4                        = 7,
	AT_DLC5                        = 8,
	AT_MAX                         = 9
};


// Enum TAGame.AchievementManager_TA.EAchievementGame
enum class EAchievementGame
{
	AG_Virtuoso                    = 0,
	AG_Stocked                     = 1,
	AG_FarFarAway                  = 2,
	AG_SuperVictorious             = 3,
	AG_Champion                    = 4,
	AG_TheStreak                   = 5,
	AG_HelensPride                 = 6,
	AG_BattleCarCollector          = 7,
	AG_DropsintheBucket            = 8,
	AG_Rocketeer                   = 9,
	AG_GreaseMonkey                = 10,
	AG_PitchVeteran                = 11,
	AG_RidersBlock                 = 12,
	AG_BreakShot                   = 13,
	AG_Turbocharger                = 14,
	AG_DrillSergeant               = 15,
	AG_MinutetoWinit               = 16,
	AG_SpeedDemon                  = 17,
	AG_PickMeUp                    = 18,
	AG_WallCrawler                 = 19,
	AG_TeamPlayer                  = 20,
	AG_SARPBCForever               = 21,
	AG_FeatherinYourRecap          = 22,
	AG_Winner                      = 23,
	AG_CleanSheet                  = 24,
	AG_TripleThreat                = 25,
	AG_DoubleUp                    = 26,
	AG_SinglesClub                 = 27,
	AG_PerfectStart                = 28,
	AG_StillAShowOff               = 29,
	AG_KnowTheDrill                = 30,
	AG_Traveler                    = 31,
	AG_Tinkerer                    = 32,
	AG_FirstTimer                  = 33,
	AG_BarrasBravas                = 34,
	AG_Friendly                    = 35,
	AG_MAX                         = 36
};


// Enum TAGame.AchievementManager_TA.EAchievementEXP0
enum class EAchievementEXP0
{
	AEXP0_SkyHigh                  = 0,
	AEXP0_AllFours                 = 1,
	AEXP0_Gladiator                = 2,
	AEXP0_MAX                      = 3
};


// Enum TAGame.AchievementManager_TA.EAchievementDLC0
enum class EAchievementDLC0
{
	ADLC0_WinningIsWinning         = 0,
	ADLC0_AnInchAnd62Miles         = 1,
	ADLC0_RideOrDie                = 2,
	ADLC0_DontLookBack             = 3,
	ADLC0_FamilyNotFriends         = 4,
	ADLC0_DriftKing                = 5,
	ADLC0_MAX                      = 6
};


// Enum TAGame.AchievementManager_TA.EAchievementDLC1
enum class EAchievementDLC1
{
	ADLC1_SurvivalOfTheFittest     = 0,
	ADLC1_Heartbreaker             = 1,
	ADLC1_NaturalProgression       = 2,
	ADLC1_Throwback                = 3,
	ADLC1_HotShotPartTwo           = 4,
	ADLC1_MAX                      = 5
};


// Enum TAGame.AchievementManager_TA.EAchievementDLC2
enum class EAchievementDLC2
{
	ADLC2_MyWorldIsFire            = 0,
	ADLC2_Spectacular              = 1,
	ADLC2_Savage                   = 2,
	ADLC2_Ruthless                 = 3,
	ADLC2_PsychoMasterExploder     = 4,
	ADLC2_MAX                      = 5
};


// Enum TAGame.AchievementManager_TA.EAchievementXBO0
enum class EAchievementXBO0
{
	AXBO0_NiceHat                  = 0,
	AXBO0_MarcusVMasterChief       = 1,
	AXBO0_MAX                      = 2
};


// Enum TAGame.AchievementManager_TA.EAchievementDLC5
enum class EAchievementDLC5
{
	ADLC5_RegisteredVoter          = 0,
	ADLC5_Metaverse                = 1,
	ADLC5_BraveTheElements         = 2,
	ADLC5_DamageControl            = 3,
	ADLC5_FullCourse               = 4,
	ADLC5_BuckminsterX10           = 5,
	ADLC5_MAX                      = 6
};


// Enum TAGame.AchievementManager_TA.EAchievementDLC4
enum class EAchievementDLC4
{
	ADLC4_GG                       = 0,
	ADLC4_Trifecta                 = 1,
	ADLC4_InfinitePower            = 2,
	ADLC4_StoppedCold              = 3,
	ADLC4_SeaTurtle                = 4,
	ADLC4_GetUpMrBubbles           = 5,
	ADLC4_RocketGenocider          = 6,
	ADLC4_MAX                      = 7
};


// Enum TAGame.AchievementManager_TA.EAchievementDLC3
enum class EAchievementDLC3
{
	ADLC3_MadScientist             = 0,
	ADLC3_IcingTheCake             = 1,
	ADLC3_LeftWingRightWing        = 2,
	ADLC3_FastBreak                = 3,
	ADLC3_BuzzerBeater             = 4,
	ADLC3_BuddingArtist            = 5,
	ADLC3_OneBetter                = 6,
	ADLC3_Certifiable              = 7,
	ADLC3_MAX                      = 8
};


// Enum TAGame.ActivityFeedManager_TA.EActivityFeedType
enum class EActivityFeedType
{
	AF_UnlockedBody                = 0,
	AF_DrivenDistance              = 1,
	AF_ScoredGoal                  = 2,
	AF_BlockedShot                 = 3,
	AF_WonGame                     = 4,
	AF_MVPScore                    = 5,
	AF_DefeatedFriend              = 6,
	AF_CompletedRegularSeason      = 7,
	AF_WonChampionship             = 8,
	AF_UnlockedItem                = 9,
	AF_UnlockedSweetTooth          = 10,
	AF_MAX                         = 11
};


// Enum TAGame.PitchTekDrawingComponent_TA.EPitchTekDecalType
enum class EPitchTekDecalType
{
	PTDT_Ball                      = 0,
	PTDT_Car                       = 1,
	PTDT_MAX                       = 2
};


// Enum TAGame.BTLock.ELockScope
enum class ELockScope
{
	LockScope_Local                = 0,
	LockScope_Global               = 1,
	LockScope_MAX                  = 2
};


// Enum TAGame.CameraState_ReplayAutoCam_TA.ECountDownFocus
enum class ECountDownFocus
{
	CDF_None                       = 0,
	CDF_Pan                        = 1,
	CDF_Rotate                     = 2,
	CDF_MAX                        = 3
};


// Enum TAGame.GFxData_LocalPlayer_TA.ESplitScreenPosition
enum class ESplitScreenPosition
{
	SSP_Center                     = 0,
	SSP_Left                       = 1,
	SSP_Right                      = 2,
	SSP_Top                        = 3,
	SSP_Bottom                     = 4,
	SSP_TopLeft                    = 5,
	SSP_TopRight                   = 6,
	SSP_BottomLeft                 = 7,
	SSP_BottomRight                = 8,
	SSP_MAX                        = 9
};


// Enum TAGame.GameEvent_Tutorial_TA.ERotationType
enum class ERotationType
{
	Rot_Auto                       = 0,
	Rot_AutoAim                    = 1,
	Rot_AutoForward                = 2,
	Rot_AutoArch                   = 3,
	Rot_World                      = 4,
	Rot_MapCenter                  = 5,
	Rot_MAX                        = 6
};


// Enum TAGame.GFxData_OnlineMatchStatus_TA.SearchMessageType
enum class SearchMessageType
{
	MessageType_Status             = 0,
	MessageType_Warning            = 1,
	MessageType_MAX                = 2
};


// Enum TAGame.GFxData_UserSetting_TA.EUserSettingType
enum class EUserSettingType
{
	UserSettingType_List           = 0,
	UserSettingType_Boolean        = 1,
	UserSettingType_Scalar         = 2,
	UserSettingType_MAX            = 3
};


// Enum TAGame.GFxEngine_TA.ESoundStatePriority
enum class ESoundStatePriority
{
	SSP_None                       = 0,
	SSP_BeginRound                 = 1,
	SSP_Pause                      = 2,
	SSP_MAX                        = 3
};


// Enum TAGame.ProductAsset_Wheel_TA.EMeshMirrorMode
enum class EMeshMirrorMode
{
	MeshMirrorMode_Mirror          = 0,
	MeshMirrorMode_Rotate          = 1,
	MeshMirrorMode_MAX             = 2
};


// Enum TAGame.Profile_TA.EProfileVersion
enum class EProfileVersion
{
	ProfileVersion_Initial         = 0,
	ProfileVersion_LoadoutPlayerTitle = 1,
	ProfileVersion_SaveReplayInput = 2,
	ProfileVersion_SaveReplayInput2 = 3,
	ProfileVersion_ChatRebind      = 4,
	ProfileVersion_SaveReplayInput3 = 5,
	ProfileVersion_DingoChatFix    = 6,
	ProfileVersion_CustomMatchSettings = 7,
	ProfileVersion_ChatSettings    = 8,
	ProfileVersion_TeamLoadouts    = 9,
	ProfileVersion_CarColors       = 10,
	ProfileVersion_ChatGamepadBindingConsoleOnly = 11,
	ProfileVersion_PaintFinishInLoadouts = 12,
	ProfileVersion_MAX             = 13
};


// Enum TAGame.Replay_TA.EReplayVersion
enum class EReplayVersion
{
	ReplayVersion_Base             = 0,
	ReplayVersion_OnlineLoadout    = 1,
	ReplayVersion_CameraSettings   = 2,
	ReplayVersion_TeamLoadouts     = 3,
	ReplayVersion_MatchType        = 4,
	ReplayVersion_ActorName        = 5,
	ReplayVersion_MAX              = 6
};


// Enum TAGame.Replay_TA.EReplayState
enum class EReplayState
{
	ReplayState_Idle               = 0,
	ReplayState_Recording          = 1,
	ReplayState_Playing            = 2,
	ReplayState_MAX                = 3
};


// Enum TAGame.SaveData_TA.ESaveDataVersion
enum class ESaveDataVersion
{
	SaveDataVersion_Initial        = 0,
	SaveDataVersion_LightShafts    = 1,
	SaveDataVersion_MAX            = 2
};


// Enum TAGame.SkelControlSingleBoneCopy_TA.ECopyAxis
enum class ECopyAxis
{
	CopyAxis_X                     = 0,
	CopyAxis_Y                     = 1,
	CopyAxis_Z                     = 2,
	CopyAxis_Pitch                 = 3,
	CopyAxis_Yaw                   = 4,
	CopyAxis_Roll                  = 5,
	CopyAxis_MAX                   = 6
};


// Enum TAGame.Tutorial_TA.ETutorialOutput
enum class ETutorialOutput
{
	TutorialOutput_Ended           = 0,
	TutorialOutput_Completed       = 1,
	TutorialOutput_Failed          = 2,
	TutorialOutput_ScreenFadedIn   = 3,
	TutorialOutput_ScreenFadedOut  = 4,
	TutorialOutput_AllMessagesDisplayed = 5,
	TutorialOutput_Started         = 6,
	TutorialOutput_MAX             = 7
};


// Enum TAGame.Tutorial_TA.ETutorialStatus
enum class ETutorialStatus
{
	TutorialStatus_None            = 0,
	TutorialStatus_Failed          = 1,
	TutorialStatus_Completed       = 2,
	TutorialStatus_MAX             = 3
};


// Enum TAGame.Tutorial_TA.EPlayerDriveType
enum class EPlayerDriveType
{
	PlayerDriveType_All            = 0,
	PlayerDriveType_Player         = 1,
	PlayerDriveType_Bot            = 2,
	PlayerDriveType_MAX            = 3
};


// Enum TAGame.BreakOutActor_Platform_TA.EBreakoutDamageState
enum class EBreakoutDamageState
{
	DamageState_Start              = 0,
	DamageState_Damaged            = 1,
	DamageState_Broken             = 2,
	DamageState_MAX                = 3
};


// Enum TAGame.DistributionFloatSpeed_TA.ESpeedDistributionSpace
enum class ESpeedDistributionSpace
{
	SDD_Forward                    = 0,
	SDD_Side                       = 1,
	SDD_Up                         = 2,
	SDD_World                      = 3,
	SDD_MAX                        = 4
};


// Enum TAGame.ForceVolume_TA.EForceDirection
enum class EForceDirection
{
	EFD_VolumeRotation             = 0,
	EFD_ActorVelocity              = 1,
	EFD_Custom                     = 2,
	EFD_MAX                        = 3
};


// Enum TAGame.InterpTrackSkelControlRotation_TA.ERotationAxis
enum class ERotationAxis
{
	ROTAXIS_Yaw                    = 0,
	ROTAXIS_Pitch                  = 1,
	ROTAXIS_Roll                   = 2,
	ROTAXIS_MAX                    = 3
};


// Enum TAGame.ProductAttribute_Trademark_TA.ETrademarkGlyph
enum class ETrademarkGlyph
{
	TrademarkGlyph_TradeMark       = 0,
	TrademarkGlyph_Registered      = 1,
	TrademarkGlyph_Copyright       = 2,
	TrademarkGlyph_MAX             = 3
};


// Enum TAGame.GameEditor_Ring_TA.EDetectionType
enum class EDetectionType
{
	DT_Ball                        = 0,
	DT_Player                      = 1,
	DT_MAX                         = 2
};


// Enum TAGame.GameEvent_TrainingEditor_TA.EPlayTestType
enum class EPlayTestType
{
	PlayTest_LoopRound             = 0,
	PlayTest_IncrementRound        = 1,
	PlayTest_IncrementRoundLoop    = 2,
	PlayTest_MAX                   = 3
};


// Enum TAGame.SaveData_GameEditor_Training_TA.ETrainingSaveType
enum class ETrainingSaveType
{
	ETS_MyTraining                 = 0,
	ETS_Favorited                  = 1,
	ETS_Downloaded                 = 2,
	ETS_MAX                        = 3
};


// Enum TAGame.GFxData_MapPrefs_TA.EMapPrefType
enum class EMapPrefType
{
	MapPrefType_None               = 0,
	MapPrefType_Like               = 1,
	MapPrefType_Dislike            = 2,
	MapPrefType_MAX                = 3
};


// Enum TAGame.GFxData_ProductFilter_TA.EProductFilterType
enum class EProductFilterType
{
	ProductFilterType_TradeIn      = 0,
	ProductFilterType_P2P          = 1,
	ProductFilterType_MAX          = 2
};


// Enum TAGame.GFxData_TrainingModeBrowser_TA.ETrainingModeSearchTypes
enum class ETrainingModeSearchTypes
{
	TMST_AllPublic                 = 0,
	TMST_FeaturedOnly              = 1,
	TMST_MAX                       = 2
};


// Enum TAGame.SpecialPickup_Spring_TA.ESpringState
enum class ESpringState
{
	SpringState_Traveling          = 0,
	SpringState_PostHit            = 1,
	SpringState_MAX                = 2
};


// Enum TAGame.SpecialPickup_BallFreeze_TA.BallFreezeState
enum class BallFreezeState
{
	STATE_Freezing                 = 0,
	STATE_Frozen                   = 1,
	STATE_MAX                      = 2
};


// Enum TAGame.SpecialPickup_GrapplingHook_TA.ERopeState
enum class ERopeState
{
	RopeState_Traveling            = 0,
	RopeState_Attached             = 1,
	RopeState_MAX                  = 2
};


// Enum TAGame.StaticMeshRBActor_TA.EApplyForceTo
enum class EApplyForceTo
{
	EAF_None                       = 0,
	EAF_Any                        = 1,
	EAF_CarOnly                    = 2,
	EAF_BallOnly                   = 3,
	EAF_MAX                        = 4
};



//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class TAGame._AITypes_TA
// 0x0000 (0x003C - 0x003C)
class U_AITypes_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame._AITypes_TA");
		return ptr;
	}

};


// Class TAGame._Types_TA
// 0x0030 (0x006C - 0x003C)
class U_Types_TA : public UObject
{
public:
	struct FScriptDelegate                             __AssetLoadedDelegate__Delegate;                  		// 0x003C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x003C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __ProductThumbnailRenderedDelegate__Delegate;     		// 0x004C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x004C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __MapImageLoadedDelegate__Delegate;               		// 0x005C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x005C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame._Types_TA");
		return ptr;
	}


	struct FLoadoutTeamPaint STATIC_GetLoadoutPaint(const struct FLoadoutData& InLoadoutData);
	int STATIC_GetRandomColorID(class UCarColorSet_TA* Set);
	void STATIC_InitColorSet(class UCarColorSet_TA* Set, TArray<struct FGFxTeamColor>* OutColors);
	struct FString STATIC_ProductQualityToString(TEnumAsByte<enum class EProductQuality> Quality);
	bool STATIC_TeamPaintsAreDifferent(struct FLoadoutData* A, struct FLoadoutData* B);
	bool STATIC_OnlineProductsAreDifferent();
	bool STATIC_ProductsAreDifferent(TArray<int>* A, TArray<int>* B);
	bool STATIC_LoadoutsAreDifferent(struct FLoadoutData* A, struct FLoadoutData* B);
	float STATIC_UpdateInputValue(const struct FInputRate& Rate, float DesiredValue, float OldValue, float DeltaTime);
	struct FClientLoadoutData STATIC_ConvertToClientLoadout(struct FLoadoutData* FromData);
	void MapImageLoadedDelegate(const struct FMapImageLoadResult& Result);
	void ProductThumbnailRenderedDelegate(const struct FProductThumbnailResult& Result);
	void AssetLoadedDelegate(const struct FAssetLoadResult& Result);
	struct FRandomWeight STATIC_PickWeightedRandom(TArray<struct FRandomWeight> Arr, int* Index);
	bool STATIC_VehicleInputHasChangedForKick(struct FVehicleInputs* NewInput, struct FVehicleInputs* OldInput);
};


// Class TAGame.AIController_TA
// 0x01C8 (0x0550 - 0x0388)
class AAIController_TA : public AAIController
{
public:
	class ACar_TA*                                     Car;                                              		// 0x0388(0x0004) (CPF_Transient)
	class AVehicle_TA*                                 Vehicle;                                          		// 0x038C(0x0004) (CPF_Transient)
	class UBTComponent*                                BT;                                               		// 0x0390(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UBTProxyType*                                SelfProxyType;                                    		// 0x0394(0x0004) (CPF_Edit)
	class UBTProxyType*                                NoneProxyType;                                    		// 0x0398(0x0004) (CPF_Edit)
	class UBTProxyType*                                DebugProxyType;                                   		// 0x039C(0x0004) (CPF_Edit)
	class UBTProxyType*                                TeamCarsProxyType;                                		// 0x03A0(0x0004) (CPF_Edit)
	class UBTProxyType*                                EnemyCarsProxyType;                               		// 0x03A4(0x0004) (CPF_Edit)
	class UBTProxyType*                                OtherCarsProxyType;                               		// 0x03A8(0x0004) (CPF_Edit)
	class UBTProxyType*                                BoostPillsProxyType;                              		// 0x03AC(0x0004) (CPF_Edit)
	class UBTProxyType*                                SelectedProxyType;                                		// 0x03B0(0x0004) (CPF_Edit)
	class UBTTarget*                                   SelfTarget;                                       		// 0x03B4(0x0004) (CPF_Edit)
	class UBTTarget*                                   NoneTarget;                                       		// 0x03B8(0x0004) (CPF_Edit)
	class UBTTarget*                                   IteratorTarget;                                   		// 0x03BC(0x0004) (CPF_Edit)
	class UBTTarget*                                   TeamCarsTarget;                                   		// 0x03C0(0x0004) (CPF_Edit)
	class UBTTarget*                                   SelectedTarget;                                   		// 0x03C4(0x0004) (CPF_Edit)
	class UBTTarget*                                   ContextTarget;                                    		// 0x03C8(0x0004) (CPF_Transient)
	class UBTNode*                                     DebugBTNode;                                      		// 0x03CC(0x0004) (CPF_Edit)
	class UBTLockCollection*                           Locks;                                            		// 0x03D0(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	struct FSkillRange                                 SkillSteerError;                                  		// 0x03D4(0x000C) (CPF_Edit)
	struct FSkillRange                                 SkillSteerSpeed;                                  		// 0x03E0(0x000C) (CPF_Edit)
	struct FSkillRange                                 SkillThrottleSpeed;                               		// 0x03EC(0x000C) (CPF_Edit)
	class AGameEvent_TA*                               GameEvent;                                        		// 0x03F8(0x0004) (CPF_Transient)
	class AAIManager_TA*                               AIManager;                                        		// 0x03FC(0x0004) (CPF_Transient)
	TArray<struct FNamedEvent>                         QueuedEvents;                                     		// 0x0400(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FVehicleInputs                              Input;                                            		// 0x040C(0x0020) (CPF_Transient)
	struct FVector                                     ForwardDir;                                       		// 0x042C(0x000C) (CPF_Transient)
	struct FRotator                                    ForwardRotation;                                  		// 0x0438(0x000C) (CPF_Transient)
	struct FVector                                     GroundNormal;                                     		// 0x0444(0x000C) (CPF_Transient)
	TArray<struct FCachedProxyData>                    CachedProxyDatas;                                 		// 0x0450(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FCachedTargetData>                   CachedTargetDatas;                                		// 0x045C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FMap_Mirror                                 TargetFilterMap;                                  		// 0x0468(0x003C) (CPF_Native, CPF_Transient)
	TArray<class UBTNode*>                             CachedTargetFilters;                              		// 0x04A4(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FVector                                     DebugDriveDestination;                            		// 0x04B0(0x000C) (CPF_Transient)
	struct FCachedObstaclesData                        CachedObstacles;                                  		// 0x04BC(0x0024) (CPF_Native, CPF_Transient)
	struct FAITraits                                   Traits;                                           		// 0x04E0(0x0008) (CPF_Transient)
	TArray<class ACar_TA*>                             TeamCars;                                         		// 0x04E8(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class ACar_TA*>                             EnemyCars;                                        		// 0x04F4(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class ACar_TA*>                             OtherCars;                                        		// 0x0500(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	unsigned long                                      bForceUpdateConditions : 1;                       		// 0x050C(0x0004) (CPF_Const, CPF_Transient)
	unsigned long                                      bCanUseBoost : 1;                                 		// 0x050C(0x0004) (CPF_Transient)
	unsigned long                                      bBeingReplaced : 1;                               		// 0x050C(0x0004) (CPF_Transient)
	class UAIRole_TA*                                  TestRole;                                         		// 0x0510(0x0004)
	class UGameShare_TA*                               GameShare;                                        		// 0x0514(0x0004) (CPF_Transient)
	class AActor*                                      SelectedActor;                                    		// 0x0518(0x0004) (CPF_Const, CPF_Transient)
	float                                              FieldScalar;                                      		// 0x051C(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventNamedEvent__Delegate;                      		// 0x0520(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0520(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSkillChanged__Delegate;                    		// 0x0530(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0530(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTraitsChanged__Delegate;                   		// 0x0540(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0540(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AIController_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void SetSelectedActor(class AActor* NewActor);
	void AllTargets(class UBTTarget* Target, struct FBTProxyData* OutData);
	bool GetObstacleInRadius(const struct FVector& Destination, float Radius, struct FVector* HitLocation);
	bool GetObstacle(const struct FVector& Destination, struct FVector* HitLocation);
	bool GetProxyDataInternal(class UBTProxyType* Type, int Index, struct FBTProxyData* OutData);
	bool GetIndexedProxyData(class UBTProxyType* Type, int Index, struct FBTProxyData* OutData);
	bool GetProxyData(class UBTProxyType* Type, struct FBTProxyData* OutData);
	bool GetIndexedTargetData(class UBTTarget* Target, int Index, struct FBTProxyData* OutData);
	bool GetTargetData(class UBTTarget* Target, struct FBTProxyData* OutData);
	struct FBTProxyData CreateVehicleProxyData(class AVehicle_TA* InVehicle);
	struct FBTProxyData CreateProxyData(class AActor* A, float Radius);
	float GetDriveTime(float Distance);
	float GetDriveDistance(const struct FBTProxyData& Proxy);
	struct FVector FlattenOffset(const struct FVector& Offset, float* Height);
	struct FVector FlattenDestination(const struct FVector& Destination);
	struct FBTProxyData FlattenPhysics(struct FBTProxyData* ProxyData);
	float GetClosestTime2D(float MaxTime, struct FBTProxyData* A, struct FBTProxyData* B);
	bool WillImpact2D(struct FBTProxyData* A, struct FBTProxyData* B, float* CollideTime);
	void AdvancePhysics(float Time, struct FBTProxyData* PhysicsData);
	void PredictPhysics(float Time, float GroundZ, struct FBTProxyData* PhysicsData);
	void PredictLanding(float GroundZ, struct FBTProxyData* Data, float* Time);
	struct FVector AdvanceLocation(float Time, struct FVector* Loc, struct FVector* Vel, struct FVector* Accel);
	void DebugDriveTo(const struct FVector& Destination);
	void DoNothing();
	void AbortBT();
	void OnNamedEvent(const struct FName& EventName, class AActor* Sender);
	void Destroyed();
	void OnCarSetup(class ACar_TA* InCar);
	void SetCar();
	void UnPossess();
	void Possess(class APawn* inPawn, bool bVehicleTransition);
	void SetSkill(float NewSkill);
	void ReInitBT();
	void SetTraits(const struct FAITraits& InTraits);
	void HandleOtherCarDestroyed(class APawn_X* InCar);
	void HandleOtherCarDemolished(class ACar_TA* Victim, const struct FDemolishData& Data);
	void HandleOtherCarTeamChanged(class ACar_TA* InCar);
	void HandleCarSpawned(class AGameEvent_TA* InGameEvent, class ACar_TA* InCar);
	void Init(class AGameEvent_TA* InGameEvent);
	void PreBeginPlay();
	void EventTraitsChanged(class AAIController_TA* AI);
	void EventSkillChanged(class AAIController_TA* AI);
	void EventNamedEvent(class AAIController_TA* AI, const struct FName& EventName, class AActor* Sender);
};


// Class TAGame.AIManager_TA
// 0x0028 (0x0214 - 0x01EC)
class AAIManager_TA : public AActor
{
public:
	unsigned long                                      bFlushAILogEachLine : 1;                          		// 0x01EC(0x0004) (CPF_Edit, CPF_Const, CPF_Config)
	unsigned long                                      bOutputLogToWindow : 1;                           		// 0x01EC(0x0004) (CPF_Edit, CPF_Const, CPF_Config)
	unsigned long                                      bPauseForDirtyTrees : 1;                          		// 0x01EC(0x0004) (CPF_Transient)
	class UBTLockCollection*                           Locks;                                            		// 0x01F0(0x0004) (CPF_Edit, CPF_Const, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class AGameEvent_TA*                               GameEvent;                                        		// 0x01F4(0x0004) (CPF_Transient)
	TArray<class AAIController_TA*>                    Bots;                                             		// 0x01F8(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FCachedNavMeshLocation>              CachedNavMeshLocations;                           		// 0x0204(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class AFileLog*                                    AILogFile;                                        		// 0x0210(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AIManager_TA");
		return ptr;
	}


	void Destroyed();
	void RemoveBot(class AAIController_TA* Bot);
	void AddBot(class AAIController_TA* Bot);
	void Init(class AGameEvent_TA* InGameEvent);
	void AILog(class UObject* Sender, const struct FString& Message, bool bVerbose);
};


// Class TAGame.AnimNodeBlend_TA
// 0x000F (0x0100 - 0x00F1)
class UAnimNodeBlend_TA : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                               		// 0x00F1(0x0003) MISSED OFFSET
	float                                              BlendSpeed;                                       		// 0x00F4(0x0004) (CPF_Edit)
	float                                              Position;                                         		// 0x00F8(0x0004) (CPF_Transient)
	float                                              DesiredPosition;                                  		// 0x00FC(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AnimNodeBlend_TA");
		return ptr;
	}

};


// Class TAGame.AnimNodeBlendBoost_TA
// 0x0004 (0x0108 - 0x0104)
class UAnimNodeBlendBoost_TA : public UAnimNodeBlend
{
public:
	float                                              BlendTime;                                        		// 0x0104(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AnimNodeBlendBoost_TA");
		return ptr;
	}

};


// Class TAGame.AnimNodeBlendSpeed_TA
// 0x0008 (0x0144 - 0x013C)
class UAnimNodeBlendSpeed_TA : public UAnimNodeAimOffset
{
public:
	float                                              BlendRate;                                        		// 0x013C(0x0004) (CPF_Edit)
	float                                              MaxSpeed;                                         		// 0x0140(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AnimNodeBlendSpeed_TA");
		return ptr;
	}

};


// Class TAGame.AssetProfiler_TA
// 0x0054 (0x0240 - 0x01EC)
class AAssetProfiler_TA : public AActor
{
public:
	float                                              TimePerAsset;                                     		// 0x01EC(0x0004) (CPF_Edit)
	float                                              TimeBetweenAssets;                                		// 0x01F0(0x0004) (CPF_Edit)
	TArray<class UProductSlot_TA*>                     Slots;                                            		// 0x01F4(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	struct FRenderProfile                              CurrentProfile;                                   		// 0x0200(0x001C) (CPF_Transient)
	TArray<struct FAssetProfile>                       AssetProfiles;                                    		// 0x021C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	int                                                CurrentProductID;                                 		// 0x0228(0x0004) (CPF_Transient)
	class UProductAsset_TA*                            CurrentProduct;                                   		// 0x022C(0x0004) (CPF_Transient)
	class UProductDatabase_TA*                         ProductsDB;                                       		// 0x0230(0x0004) (CPF_Transient)
	TArray<class ACarPreviewActor_TA*>                 Cars;                                             		// 0x0234(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AssetProfiler_TA");
		return ptr;
	}


	int SortRenderThread(const struct FAssetProfile& A, const struct FAssetProfile& B);
	int SortGPU(const struct FAssetProfile& A, const struct FAssetProfile& B);
	void Finish();
	void StopRecording();
	void StartRecording();
	void StartNextAsset();
	void EquipProduct(class UProductAsset_TA* Asset);
	class UProductAsset_TA* EquipProductID(int ProductID);
	bool ShouldProfileProduct(class UProductAsset_TA* Product);
	void PrintAsset(const struct FString& AssetName, float AssetTime);
	void UpdateProfileTimes(struct FRenderProfile* Profile);
	void GatherCars();
	void DisableVSync();
	void SetupPlayers();
	void PostBeginPlay();
};


// Class TAGame.AttachmentBehavior_TA
// 0x000C (0x0048 - 0x003C)
class UAttachmentBehavior_TA : public UObject
{
public:
	class UProductAsset_TA*                            Asset;                                            		// 0x003C(0x0004) (CPF_Transient)
	class UActorComponent*                             Component;                                        		// 0x0040(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	unsigned long                                      bPreview : 1;                                     		// 0x0044(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AttachmentBehavior_TA");
		return ptr;
	}


	class UCarMeshComponent_TA* GetMesh();
	void SetPreviewing(bool bPreviewing);
	void OnInit();
	void Init(class UProductAsset_TA* InAsset, class UActorComponent* InComponent);
};


// Class TAGame.RimSpinner_TA
// 0x0030 (0x0078 - 0x0048)
class URimSpinner_TA : public UAttachmentBehavior_TA
{
public:
	float                                              AccelRate;                                        		// 0x0048(0x0004) (CPF_Edit)
	float                                              DecelRate;                                        		// 0x004C(0x0004) (CPF_Edit)
	float                                              MaxSpeed;                                         		// 0x0050(0x0004) (CPF_Edit)
	struct FName                                       BoneControlName;                                  		// 0x0054(0x0008) (CPF_Edit)
	float                                              SpinScale;                                        		// 0x005C(0x0004) (CPF_Transient)
	int                                                WheelIndex;                                       		// 0x0060(0x0004) (CPF_Transient)
	float                                              CurrentSpeed;                                     		// 0x0064(0x0004) (CPF_Transient)
	int                                                CurrentRotation;                                  		// 0x0068(0x0004) (CPF_Transient)
	class USkelControlSingleBone*                      SpinBoneController;                               		// 0x006C(0x0004) (CPF_Transient)
	class USkelControlSingleBone*                      WheelBoneController;                              		// 0x0070(0x0004) (CPF_Transient)
	class UWheel_TA*                                   Wheel;                                            		// 0x0074(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RimSpinner_TA");
		return ptr;
	}


	void HandleAttached(class UCarMeshComponent_TA* Mesh);
	void OnInit();
};


// Class TAGame.BallRadiusVolume_TA
// 0x0014 (0x0200 - 0x01EC)
class ABallRadiusVolume_TA : public AActor
{
public:
	float                                              Radius;                                           		// 0x01EC(0x0004) (CPF_Edit)
	class UDrawSphereComponent*                        PreviewRadius;                                    		// 0x01F0(0x0004) (CPF_Const, CPF_ExportObject, CPF_Component, CPF_EditInline)
	TArray<class ABall_TA*>                            Inradius;                                         		// 0x01F4(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallRadiusVolume_TA");
		return ptr;
	}


	void RemoveBall(class ABall_TA* Ball);
	void AddBall(class ABall_TA* Ball);
	void Tick(float DeltaTime);
};


// Class TAGame.RBActor_TA
// 0x01BC (0x0688 - 0x04CC)
class ARBActor_TA : public APawn_X
{
public:
	struct FPointer                                    VfTable_IITickNotify_TA;                          		// 0x04CC(0x0004) (CPF_Const, CPF_Native, CPF_NoExport)
	float                                              MaxLinearSpeed;                                   		// 0x04D0(0x0004) (CPF_Edit, CPF_Const)
	float                                              MaxAngularSpeed;                                  		// 0x04D4(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bDisableSleeping : 1;                             		// 0x04D8(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bReplayActor : 1;                                 		// 0x04D8(0x0004) (CPF_Const, CPF_Net, CPF_Transient)
	unsigned long                                      bFrozen : 1;                                      		// 0x04D8(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bAutoInitFXEffects : 1;                           		// 0x04D8(0x0004) (CPF_Const)
	unsigned long                                      bIgnoreSyncing : 1;                               		// 0x04D8(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bPhysInitialized : 1;                             		// 0x04D8(0x0004) (CPF_Transient)
	struct FNetworkSyncSettingsData                    NetworkSyncSettings;                              		// 0x04DC(0x001C) (CPF_Edit)
	struct FReplicatedRBState                          OldRBState;                                       		// 0x04F8(0x0038) (CPF_Const, CPF_Transient)
	struct FReplicatedRBState                          RBState;                                          		// 0x0530(0x0038) (CPF_Const, CPF_Transient)
	struct FReplicatedRBState                          ReplicatedRBState;                                		// 0x0568(0x0038) (CPF_Const, CPF_Net, CPF_Transient)
	struct FReplicatedRBState                          ClientCorrectionRBState;                          		// 0x05A0(0x0038) (CPF_Const, CPF_Transient)
	struct FWorldContactData                           WorldContact;                                     		// 0x05D8(0x0028) (CPF_Const, CPF_Transient)
	struct FVector                                     SyncErrorLocation;                                		// 0x0600(0x000C) (CPF_Const, CPF_Transient)
	float                                              SyncErrorAngle;                                   		// 0x060C(0x0004) (CPF_Const, CPF_Transient)
	struct FVector                                     SyncErrorAxis;                                    		// 0x0610(0x000C) (CPF_Const, CPF_Transient)
	class UAkParamGroup*                               Ak;                                               		// 0x061C(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class AFXActor_X*                                  FXActorArchetype;                                 		// 0x0620(0x0004) (CPF_Edit)
	class AFXActor_X*                                  FXActor;                                          		// 0x0624(0x0004) (CPF_Transient)
	class UImpactEffectsComponent_TA*                  ImpactEffectsComponent;                           		// 0x0628(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	TArray<struct FAccumulatedRigidBodyCollision>      RBCollisions;                                     		// 0x062C(0x000C) (CPF_Const, CPF_Transient, CPF_Component, CPF_NeedCtorLink)
	class UClass*                                      RBHistoryClass;                                   		// 0x0638(0x0004) (CPF_Edit)
	class URBHistory_TA*                               RBHistory;                                        		// 0x063C(0x0004) (CPF_Const, CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	int                                                LastRBCollisionsFrame;                            		// 0x0640(0x0004) (CPF_Const, CPF_Transient)
	class UReplayComponent_TA*                         Replay;                                           		// 0x0644(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	struct FWeldingInfo                                WeldedInfo;                                       		// 0x0648(0x0020) (CPF_Net, CPF_Transient)
	class ARBActor_TA*                                 WeldedActor;                                      		// 0x0668(0x0004) (CPF_Transient)
	class ARBActor_TA*                                 WeldedTo;                                         		// 0x066C(0x0004) (CPF_Transient)
	float                                              PreWeldMass;                                      		// 0x0670(0x0004) (CPF_Transient)
	struct FPointer                                    Constraint2D;                                     		// 0x0674(0x0004) (CPF_Native, CPF_Transient)
	struct FScriptDelegate                             __EventRigidBodyCollision__Delegate;              		// 0x0678(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0678(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RBActor_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void SetMass(float NewMass);
	void SetConstrained3D(const struct FVector& LinearLower, const struct FVector& LinearUpper, const struct FVector& AngularLower, const struct FVector& AngularUpper);
	void SetConstrained2D(bool bConstrain2D);
	void InitCCD();
	void SetPhysicsState(const struct FReplicatedRBState& NewState);
	void SetFrozen(bool bEnabled);
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	bool TakeDamage_X(class UDamageComponent_X* Damage);
	void SetDyingPhysics();
	void SetMaxAngularSpeed(float NewMaxSpeed);
	void SetMaxLinearSpeed(float NewMaxSpeed);
	void OnRigidBodyCollision(const struct FAccumulatedRigidBodyCollision& Collision);
	void AddTorque(const struct FVector& Torque, TEnumAsByte<enum class EForceMode> ForceMode);
	void AddForce(const struct FVector& Force, TEnumAsByte<enum class EForceMode> ForceMode);
	void PreAsyncTick(float DeltaTime);
	void TextArchetypeReloaded();
	void SetWelding(const struct FWeldingInfo& Welding);
	void UnWeldRBActor(class ARBActor_TA* Other);
	void WeldRBActor(class ARBActor_TA* Other, const struct FVector& WeldOffset, const struct FRotator& WeldRotation);
	void OnRBPhysInit();
	void ReInitRBPhys();
	void TerminateRBPhys();
	void SetCurrentRBState(struct FReplicatedRBState* NewRBState);
	struct FVector GetCurrentRBLocation();
	struct FReplicatedRBState GetCurrentRBState();
	int GetPhysicsFrame();
	float GetPhysicsTime();
	void PopFXState(class UFXActorEvent_X* Event);
	void PushFXState(class UFXActorEvent_X* Event);
	void InitFX();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventRigidBodyCollision(class ARBActor_TA* RBActor, const struct FAccumulatedRigidBodyCollision& Collision);
};


// Class TAGame.Ball_TA
// 0x0164 (0x07EC - 0x0688)
class ABall_TA : public ARBActor_TA
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x0688(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class AFXActor_X*                                  EndOfGameFXArchetype;                             		// 0x068C(0x0004) (CPF_Edit)
	class AExplosion_X*                                ExplosionArchetype;                               		// 0x0690(0x0004) (CPF_Edit)
	class AExplosion_X*                                NoGoalExplosionArchetype;                         		// 0x0694(0x0004) (CPF_Edit)
	class UBallCamTarget_TA*                           BallCamTarget;                                    		// 0x0698(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	unsigned long                                      bNextCamTargetOnExplode : 1;                      		// 0x069C(0x0004)
	unsigned long                                      bNotifyGroundHit : 1;                             		// 0x069C(0x0004) (CPF_Transient)
	unsigned long                                      bEndOfGameHidden : 1;                             		// 0x069C(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bPredictionOnGround : 1;                          		// 0x069C(0x0004) (CPF_Const, CPF_Transient)
	unsigned long                                      bCanBeAttached : 1;                               		// 0x069C(0x0004) (CPF_Transient)
	unsigned long                                      bBallDemolish : 1;                                		// 0x069C(0x0004) (CPF_Transient)
	unsigned long                                      bNewFalling : 1;                                  		// 0x069C(0x0004) (CPF_Transient)
	unsigned long                                      bItemFreeze : 1;                                  		// 0x069C(0x0004) (CPF_Transient)
	float                                              Radius;                                           		// 0x06A0(0x0004) (CPF_Transient)
	float                                              VisualRadius;                                     		// 0x06A4(0x0004)
	TArray<struct FBallHitInfo>                        Touches;                                          		// 0x06A8(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	float                                              LastCalculateCarHit;                              		// 0x06B4(0x0004) (CPF_Transient)
	struct FVector                                     InitialLocation;                                  		// 0x06B8(0x000C) (CPF_Transient)
	struct FRotator                                    InitialRotation;                                  		// 0x06C4(0x000C) (CPF_Transient)
	float                                              LastHitWorldTime;                                 		// 0x06D0(0x0004) (CPF_Transient)
	float                                              ReplicatedBallScale;                              		// 0x06D4(0x0004) (CPF_Net)
	class UStaticMesh*                                 ReplicatedBallMesh;                               		// 0x06D8(0x0004) (CPF_Net)
	float                                              ReplicatedWorldBounceScale;                       		// 0x06DC(0x0004) (CPF_Net)
	float                                              ReplicatedBallGravityScale;                       		// 0x06E0(0x0004) (CPF_Net)
	float                                              ReplicatedBallMaxLinearSpeedScale;                		// 0x06E4(0x0004) (CPF_Net)
	float                                              ReplicatedAddedCarBounceScale;                    		// 0x06E8(0x0004) (CPF_Net)
	float                                              AdditionalCarGroundBounceScaleZ;                  		// 0x06EC(0x0004)
	float                                              AdditionalCarGroundBounceScaleXY;                 		// 0x06F0(0x0004)
	unsigned char                                      HitTeamNum;                                       		// 0x06F4(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData00[0x3];                               		// 0x06F5(0x0003) MISSED OFFSET
	class AGameEvent_Soccar_TA*                        GameEvent;                                        		// 0x06F8(0x0004) (CPF_Net, CPF_Transient)
	struct FExplosionData                              ReplicatedExplosionData;                          		// 0x06FC(0x0010) (CPF_Net, CPF_Transient, CPF_Component)
	class AExplosion_X*                                Explosion;                                        		// 0x070C(0x0004) (CPF_Transient)
	float                                              ExplosionTime;                                    		// 0x0710(0x0004) (CPF_Transient)
	struct FVector                                     OldLocation;                                      		// 0x0714(0x000C) (CPF_Transient)
	class UMaterialInterface*                          FadeMaterial;                                     		// 0x0720(0x0004)
	float                                              PredictionTimestep;                               		// 0x0724(0x0004) (CPF_Edit)
	TArray<struct FPredictedPosition>                  PredictedPositions;                               		// 0x0728(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	float                                              LastPredictionTime;                               		// 0x0734(0x0004) (CPF_Const, CPF_Transient)
	float                                              BallSloMoRadius;                                  		// 0x0738(0x0004) (CPF_Transient)
	float                                              BallSloMoDuration;                                		// 0x073C(0x0004) (CPF_Transient)
	float                                              BallSloMoDilation;                                		// 0x0740(0x0004) (CPF_Transient)
	float                                              BallSloMoCooldown;                                		// 0x0744(0x0004) (CPF_Transient)
	float                                              BallSloMoNext;                                    		// 0x0748(0x0004) (CPF_Transient)
	float                                              BallSloMoDiffSpeed;                               		// 0x074C(0x0004) (CPF_Transient)
	class ACar_TA*                                     BallBelongsTo;                                    		// 0x0750(0x0004) (CPF_Net, CPF_Transient)
	int                                                BallTouchScore;                                   		// 0x0754(0x0004) (CPF_Net, CPF_Transient)
	struct FGoalPenetrationData                        GoalPenetration;                                  		// 0x0758(0x0020) (CPF_Transient, CPF_Component)
	float                                              GroundForce;                                      		// 0x0778(0x0004) (CPF_Edit)
	class ACar_TA*                                     CurrentAffector;                                  		// 0x077C(0x0004) (CPF_Transient)
	class UBallTrajectoryComponent_TA*                 TrajectoryComponent;                              		// 0x0780(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UPitchTekDrawingComponent_TA*                PitchTekComponent;                                		// 0x0784(0x0004) (CPF_Const, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class AFXActor_X*                                  OverrideExplosionFX;                              		// 0x0788(0x0004) (CPF_Net, CPF_Transient)
	struct FScriptDelegate                             __EventCarTouch__Delegate;                        		// 0x078C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x078C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventHitWorld__Delegate;                        		// 0x079C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x079C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventHitGround__Delegate;                       		// 0x07AC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x07AC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventHitGoal__Delegate;                         		// 0x07BC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x07BC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameEventSet__Delegate;                    		// 0x07CC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData05[0x4];                               		// 0x07CC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventExploded__Delegate;                        		// 0x07DC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData06[0x4];                               		// 0x07DC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Ball_TA");
		return ptr;
	}


	void PredictGroundPosition(int MaxIterations, struct FBallPredictionInfo* PredictionInfo);
	void PredictPosition(float Time, struct FBallPredictionInfo* PredictionInfo);
	bool CanEverShowTrajectory();
	bool IsTrajectoryEnabled();
	struct FVector GetTrajectoryStartVelocity();
	struct FVector GetTrajectoryStartLocation();
	void UpdateTrajectoryPredictionPoints(bool bForceUpdate);
	void UpdateTrajectoryEnabled();
	bool ShouldDrawTrajectory();
	float GetAdditionalCarBounceScaleZ(class ACar_TA* Car);
	void SpawnEndOfGameFX();
	void SetTouchScoreValue(int NewValue);
	void SetEndOfGameHidden();
	void SetOverrideExplosionFX(class AFXActor_X* InExplosionFX);
	void InitExplosionFX(class AExplosion_X* InExplosion, class UGoal_TA* ExplosionGoal);
	void Explode(class UGoal_TA* ExplosionGoal, const struct FVector& ExplodeLocation);
	void Destroyed();
	bool ShouldDemolish(class ACar_TA* Car);
	void DoDestroy();
	void DoExplode();
	void OnRigidBodyCollision(const struct FAccumulatedRigidBodyCollision& Collision);
	void Tick(float DeltaTime);
	void RestoreTimeDilation();
	void GetBallTimeDilation();
	void Launch(const struct FVector& LaunchPosition, const struct FVector& LaunchDirection);
	void OnCarTouch(class ACar_TA* HitCar, TEnumAsByte<enum class EBallHitType> HitType);
	void AttachToCar(class ACar_TA* HitCar);
	void RecordCarHit(class ACar_TA* HitCar, const struct FVector& HitLocation, const struct FVector& HitNormal, TEnumAsByte<enum class EBallHitType> HitType);
	void Reset();
	void OnHitWorld(const struct FVector& HitLoc, const struct FVector& HitNormal, class UPhysicalMaterial* PhysMat);
	bool IsGroundMaterial(class UPhysicalMaterial* PhysMat);
	bool IsGroundHit(const struct FVector& HitNormal);
	void FellOutOfWorld(class UClass* dmgType);
	bool IsRoundActive();
	void OnHitGoal(class UGoal_TA* Goal, const struct FVector& HitLoc);
	void SetGameEvent(class AGameEvent_Soccar_TA* SoccarGame);
	void TurnOff();
	void PostBeginPlay();
	void PreBeginPlay();
	void SetBallSloMoDiffSpeed(float InDiffSpeed);
	void SetBallSloMoRadius(float Inradius);
	void SetBallSloMoCooldown(float InCooldown);
	void SetBallSloMoDilation(float InDilation);
	void SetBallSloMoDuration(float InDuration);
	void SetBallMesh(class UStaticMesh* NewMesh);
	void SetWorldBounceScale(float NewScale);
	void SetCarBounceScale(float NewScale);
	void SetBallMaxLinearSpeedScale(float InMaxLinearSpeedScale);
	void SetBallGravityScale(float InBallGravityScale);
	void SetBallScale(float NewScale);
	void ReplicatedEvent(const struct FName& VarName);
	void EventExploded(class ABall_TA* Ball);
	void EventGameEventSet(class ABall_TA* Ball);
	void EventHitGoal(class ABall_TA* Ball, class UGoal_TA* Goal);
	void EventHitGround(class ABall_TA* Ball, const struct FVector& HitLoc, const struct FVector& HitNormal);
	void EventHitWorld(class ABall_TA* Ball, const struct FVector& HitLoc, const struct FVector& HitNormal);
	void EventCarTouch(class ABall_TA* Ball, class ACar_TA* HitCar, TEnumAsByte<enum class EBallHitType> HitType);
};


// Class TAGame.BallTrajectoryComponent_TA
// 0x0054 (0x00C0 - 0x006C)
class UBallTrajectoryComponent_TA : public UActorComponent_X
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x006C(0x0004) (CPF_Transient)
	unsigned long                                      bCalculatePoints : 1;                             		// 0x006C(0x0004) (CPF_Transient)
	TArray<struct FVector>                             TrajectoryPoints;                                 		// 0x0070(0x000C) (CPF_NeedCtorLink)
	struct FTrajectorySetup                            TrajectorySettings;                               		// 0x007C(0x0014)
	float                                              TotalPathDistance;                                		// 0x0090(0x0004) (CPF_Transient)
	struct FVector                                     StartLocation;                                    		// 0x0094(0x000C) (CPF_Transient)
	struct FVector                                     StartVelocity;                                    		// 0x00A0(0x000C) (CPF_Transient)
	float                                              TrajectoryUpdateTime;                             		// 0x00AC(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventTrajectoryEnabledChanged__Delegate;        		// 0x00B0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x00B0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallTrajectoryComponent_TA");
		return ptr;
	}


	int GetTrajectoryFXCount();
	void DestroyFXs();
	void SetupFXs();
	class APlayerController_TA* GetPlayer(int LocalPlayerNum);
	TArray<class APlayerController_TA*> GetViewers();
	void CheckShouldShowTrajectory();
	float GetTrajectoryScale();
	void UpdateTrajectoryPrediction(bool bForceUpdate);
	void OnEnabledChanged();
	void SetEnable(bool bEnable);
	void HandleGameStateChanged(class AGameEvent_TA* InGameEvent);
	void OnGameEventSet(class ABall_TA* Ball);
	void HandlePlayerAimAssistChanged(class UProfile_TA* Profile);
	void HandleLocalPlayersChanged(class AGameEvent_TA* InGameEvent);
	void Detached();
	void BeginPlay();
	void EventTrajectoryEnabledChanged(class ABall_TA* Ball);
};


// Class TAGame.BallTrajectoryComponent_Line_TA
// 0x0008 (0x00C8 - 0x00C0)
class UBallTrajectoryComponent_Line_TA : public UBallTrajectoryComponent_TA
{
public:
	unsigned long                                      bTrajectoryPointsNeedUpdated : 1;                 		// 0x00C0(0x0004) (CPF_Transient)
	struct FColor                                      LineColor;                                        		// 0x00C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallTrajectoryComponent_Line_TA");
		return ptr;
	}


	void DestroyFX(int Index);
	void CreateFX(int Index, TArray<class APlayerController_TA*>* Viewers);
	void DestroyFXs();
	void SetupFXs();
};


// Class TAGame.BallTrajectoryComponent_Beam_TA
// 0x0010 (0x00D8 - 0x00C8)
class UBallTrajectoryComponent_Beam_TA : public UBallTrajectoryComponent_Line_TA
{
public:
	TArray<struct FTrajectoryFX>                       TrajectoryFXs;                                    		// 0x00C8(0x000C) (CPF_Transient, CPF_Component, CPF_NeedCtorLink)
	class UParticleSystem*                             ParticleBeamArchetype;                            		// 0x00D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallTrajectoryComponent_Beam_TA");
		return ptr;
	}


	int GetTrajectoryFXCount();
	void DestroyFX(int Index);
	void DestroyFXs();
	void CreateFX(int Index, TArray<class APlayerController_TA*>* Viewers);
};


// Class TAGame.BallTrajectoryComponent_Spline_TA
// 0x001C (0x00E4 - 0x00C8)
class UBallTrajectoryComponent_Spline_TA : public UBallTrajectoryComponent_Line_TA
{
public:
	TArray<struct FTrajectorySplineFX>                 TrajectoryFXs;                                    		// 0x00C8(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class ASplineLoftActorSpawnable_TA*                SplineArchetype;                                  		// 0x00D4(0x0004)
	float                                              TangentMultiplier;                                		// 0x00D8(0x0004)
	float                                              PulseMultiplier;                                  		// 0x00DC(0x0004)
	float                                              MinInterpSpeed;                                   		// 0x00E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallTrajectoryComponent_Spline_TA");
		return ptr;
	}


	int GetTrajectoryFXCount();
	void DestroyFX(int Index);
	void DestroyFXs();
	void CreateFX(int Index, TArray<class APlayerController_TA*>* Viewers);
	void SetupFXs();
};


// Class TAGame.BallTrajectoryComponent_Mesh_TA
// 0x0034 (0x00F4 - 0x00C0)
class UBallTrajectoryComponent_Mesh_TA : public UBallTrajectoryComponent_TA
{
public:
	TArray<struct FMeshInfo>                           InterpMeshes;                                     		// 0x00C0(0x000C) (CPF_Component, CPF_NeedCtorLink)
	class UMaterialInstanceConstant*                   MIC;                                              		// 0x00CC(0x0004) (CPF_Transient)
	class UStaticMesh*                                 StaticMesh;                                       		// 0x00D0(0x0004)
	struct FColor                                      BeamColor_Max;                                    		// 0x00D4(0x0004)
	struct FColor                                      BeamColor_Mid;                                    		// 0x00D8(0x0004)
	struct FColor                                      BeamColor_Min;                                    		// 0x00DC(0x0004)
	float                                              MinInterpSpeed;                                   		// 0x00E0(0x0004)
	float                                              MeshScale;                                        		// 0x00E4(0x0004)
	float                                              MeshMoveSpeed;                                    		// 0x00E8(0x0004)
	float                                              MeshRotateSpeed;                                  		// 0x00EC(0x0004)
	float                                              TrajectoryPlayTestScale;                          		// 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallTrajectoryComponent_Mesh_TA");
		return ptr;
	}


	struct FLinearColor GetBeamColor(float VelocityPower);
	void HandleVelocityStartSpeedChanged(class ABall_GameEditor_TA* Ball);
	void SetupBallEditorMaterial();
	float GetTrajectoryScale();
	float GetMeshScale(int MeshIndex);
	int GetTrajectoryFXCount();
	void DestroyFXs();
	void SetupFXs();
};


// Class TAGame.BoostMesh_TA
// 0x0020 (0x005C - 0x003C)
class UBoostMesh_TA : public UObject
{
public:
	struct FRandomRange                                FadeInTime;                                       		// 0x003C(0x0008) (CPF_Edit)
	struct FRandomRange                                FadeOutTime;                                      		// 0x0044(0x0008) (CPF_Edit)
	TArray<struct FAnimatedMaterialMesh>               MaterialParams;                                   		// 0x004C(0x000C) (CPF_Edit, CPF_Component, CPF_NeedCtorLink)
	float                                              MaxMaterialTime;                                  		// 0x0058(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BoostMesh_TA");
		return ptr;
	}


	void ApplyPaint(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint);
	void ApplyLinearColorParameter(class UActorComponent* Component, const struct FName& Param, const struct FLinearColor& InColor);
	void ApplyColorParameter(class UActorComponent* Component, const struct FName& Param, const struct FVector& Value, float Alpha);
	void ApplyVectorParameter(class UActorComponent* Component, const struct FName& Param, const struct FVector& Value);
	void ApplyFloatParameter(class UActorComponent* Component, const struct FName& Param, float Value);
	void ApplyMaterialOverride(class UMaterialInterface* Override, int Index);
	void FadeOut();
	void FadeIn();
	void ResetElapsedTime(float Value);
	void CopyBoostMeshDistributionParameters(class AFXActor_Boost_TA* Archetype);
	void Update(float DeltaTime);
	void Initialize(class AFXActor_X* FXActor);
};


// Class TAGame.BreakOutActor_Platform_TA
// 0x0084 (0x0270 - 0x01EC)
class ABreakOutActor_Platform_TA : public AActor
{
public:
	int                                                Sides;                                            		// 0x01EC(0x0004) (CPF_Edit)
	unsigned long                                      bPrimaryPlayerStart : 1;                          		// 0x01F0(0x0004) (CPF_Edit)
	int                                                TeamIndex;                                        		// 0x01F4(0x0004) (CPF_Edit)
	int                                                MaxDamage;                                        		// 0x01F8(0x0004) (CPF_Edit)
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x01FC(0x0004) (CPF_Edit, CPF_Const, CPF_ExportObject, CPF_EditConst, CPF_Component, CPF_EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0200(0x0004) (CPF_Edit, CPF_Const, CPF_ExportObject, CPF_EditConst, CPF_Component, CPF_EditInline)
	class AFXActor_X*                                  FXArchetype;                                      		// 0x0204(0x0004) (CPF_Edit)
	float                                              NeighborRadius;                                   		// 0x0208(0x0004) (CPF_Edit)
	TArray<class ABreakOutActor_Platform_TA*>          Neighbors;                                        		// 0x020C(0x000C) (CPF_Edit, CPF_EditConst, CPF_NeedCtorLink)
	float                                              LastHitTime;                                      		// 0x0218(0x0004)
	struct FBreakoutDamageState                        DamageState;                                      		// 0x021C(0x0018) (CPF_Net)
	class AFXActor_X*                                  FXActor;                                          		// 0x0234(0x0004)
	struct FBreakoutDamageState                        PreReplayState;                                   		// 0x0238(0x0018) (CPF_Transient)
	struct FScriptDelegate                             __EventDamageStateChanged__Delegate;              		// 0x0250(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0250(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDamaged__Delegate;                         		// 0x0260(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0260(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BreakOutActor_Platform_TA");
		return ptr;
	}


	void SetPreReplayState();
	void SavePreReplayState();
	void STATIC_GatherNeighbors(class ABreakOutActor_Platform_TA* Start, int Iterations, TArray<class ABreakOutActor_Platform_TA*>* ToDamage);
	void HandleTeamColorsChanged(class ATeam_TA* Team);
	void HandleTeamRemoved(class UObject* TeamObj);
	void HandleTeamAdded(class UObject* TeamObj);
	bool IsBroken();
	bool IsDamaged();
	void Reset();
	void SetDamageState(unsigned char InDamageState, class APRI_TA* InDamageCauser, const struct FVector& InLocation, bool bDirectDamage, bool bImmediate);
	void IncreaseDamage(class APRI_TA* DamageCauser, const struct FVector& FromLocation, bool bDirectDamage);
	bool NeighborDamage(class ABall_TA* Ball, int InDamage, const struct FVector& HitLocation);
	bool OnBallHit(class ABall_TA* Ball, int InDamage, const struct FVector& HitNormal, const struct FVector& InVelocity, const struct FVector& HitLocation);
	void ReInitPhysics();
	void ReInitPhysicsDelayed();
	void InitFX();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventDamaged(class ABreakOutActor_Platform_TA* Platform, class APRI_TA* PRI, class ABall_TA* Ball);
	void EventDamageStateChanged(class ABreakOutActor_Platform_TA* Platform, const struct FBreakoutDamageState& InState);
};


// Class TAGame.BTComponent
// 0x004C (0x0094 - 0x0048)
class UBTComponent : public UComponent
{
public:
	class UBTNode*                                     Root;                                             		// 0x0048(0x0004) (CPF_Edit, CPF_Const)
	TEnumAsByte<enum class EBTStatus>                  RootStatus;                                       		// 0x004C(0x0001) (CPF_Const, CPF_Transient)
	unsigned char                                      UnknownData00[0x3];                               		// 0x004D(0x0003) MISSED OFFSET
	class AAIController_TA*                            AI;                                               		// 0x0050(0x0004) (CPF_Transient)
	unsigned long                                      bPrintStatusLogs : 1;                             		// 0x0054(0x0004) (CPF_Edit)
	unsigned long                                      bDirtyStatusLogs : 1;                             		// 0x0054(0x0004) (CPF_Transient)
	unsigned long                                      bEvaluatingConditions : 1;                        		// 0x0054(0x0004) (CPF_Const, CPF_Transient)
	unsigned long                                      bPauseNextTick : 1;                               		// 0x0054(0x0004) (CPF_Transient)
	TArray<struct FBTStatusLog>                        StatusLogs;                                       		// 0x0058(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	int                                                StatusLogsIndex;                                  		// 0x0064(0x0004) (CPF_Const, CPF_Transient)
	TArray<int>                                        StatusLogsStack;                                  		// 0x0068(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	class UDebugDrawer_X*                              CanvasDrawer;                                     		// 0x0074(0x0004) (CPF_Transient)
	TArray<struct FBTDynamicLinkData>                  DynamicLinks;                                     		// 0x0078(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventDynamicLinksChanged__Delegate;             		// 0x0084(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0084(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTComponent");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	struct FColor GetStatusColor(TEnumAsByte<enum class EBTStatus> Status);
	struct FString GetDepthSpaces(float Depth);
	void SetDynamicLink(const struct FName& LinkName, class UBTNode* Node);
	void SetRoot(class UBTNode* NewRootArchetype);
	void Abort();
	void Tick(float DeltaTime);
	void Init(class AAIController_TA* ForAI);
	void EventDynamicLinksChanged(class UBTComponent* BT);
};


// Class TAGame.BTLockCollection
// 0x002C (0x0074 - 0x0048)
class UBTLockCollection : public UComponent
{
public:
	TArray<struct FTimedLock>                          Locks;                                            		// 0x0048(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventLockSet__Delegate;                         		// 0x0054(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0054(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLockExpired__Delegate;                     		// 0x0064(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0064(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTLockCollection");
		return ptr;
	}


	void UpdateLocks();
	float GetTimeRemaining(const struct FName& LockName);
	bool IsNameLocked(const struct FName& LockName);
	void RemoveNamedLock(const struct FName& LockName);
	void AddNamedLock(const struct FName& LockName, float ForHowLong);
	void EventLockExpired(const struct FName& LockName);
	void EventLockSet(const struct FName& LockName);
};


// Class TAGame.BTNode
// 0x0014 (0x0050 - 0x003C)
class UBTNode : public UObject
{
public:
	TArray<class UBTDecorator*>                        Decorators;                                       		// 0x003C(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)
	unsigned long                                      bDebugPause : 1;                                  		// 0x0048(0x0004) (CPF_Edit)
	unsigned long                                      bDebug : 1;                                       		// 0x0048(0x0004) (CPF_Edit)
	class AAIController_TA*                            AI;                                               		// 0x004C(0x0004) (CPF_Const, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTNode");
		return ptr;
	}


	void SetStatusString(const struct FString& msg);
};


// Class TAGame.BTCondition
// 0x000C (0x005C - 0x0050)
class UBTCondition : public UBTNode
{
public:
	float                                              UpdateDelay;                                      		// 0x0050(0x0004) (CPF_Edit)
	unsigned long                                      bFlipResult : 1;                                  		// 0x0054(0x0004) (CPF_Edit)
	unsigned long                                      bDirty : 1;                                       		// 0x0054(0x0004) (CPF_Const, CPF_Transient)
	unsigned long                                      CachedResult : 1;                                 		// 0x0054(0x0004) (CPF_Const, CPF_Transient)
	float                                              NextUpdateTime;                                   		// 0x0058(0x0004) (CPF_Const, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTCondition");
		return ptr;
	}


	bool ShouldProcessTeam(TEnumAsByte<enum class EAITeam> CheckTeam, int ActorTeam);
	bool ShouldProcessActor(TEnumAsByte<enum class EAITeam> CheckTeam, class AActor* CheckActor);
	void SetDirty();
	bool GetResult();
	void OnInit();
};


// Class TAGame.BTC_Any
// 0x0004 (0x0060 - 0x005C)
class UBTC_Any : public UBTCondition
{
public:
	class UBTTarget*                                   Targets;                                          		// 0x005C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Any");
		return ptr;
	}

};


// Class TAGame.BTC_NotAny
// 0x0004 (0x0060 - 0x005C)
class UBTC_NotAny : public UBTCondition
{
public:
	class UBTTarget*                                   Targets;                                          		// 0x005C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_NotAny");
		return ptr;
	}

};


// Class TAGame.BTC_ProxyBase
// 0x0048 (0x00A4 - 0x005C)
class UBTC_ProxyBase : public UBTCondition
{
public:
	class UBTTarget*                                   Self;                                             		// 0x005C(0x0004) (CPF_Edit)
	float                                              SelfPredictionTime;                               		// 0x0060(0x0004) (CPF_Edit)
	struct FBTProxyData                                SelfData;                                         		// 0x0064(0x0040) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_ProxyBase");
		return ptr;
	}

};


// Class TAGame.BTC_TargetBase
// 0x00CC (0x0170 - 0x00A4)
class UBTC_TargetBase : public UBTC_ProxyBase
{
public:
	class UBTTarget*                                   Target;                                           		// 0x00A4(0x0004) (CPF_Edit)
	float                                              TargetPredictionTime;                             		// 0x00A8(0x0004) (CPF_Edit)
	unsigned long                                      bFlattenToDrivePlane : 1;                         		// 0x00AC(0x0004) (CPF_Edit)
	struct FBTProxyData                                TargetData;                                       		// 0x00B0(0x0040) (CPF_Transient)
	struct FBTProxyData                                SelfData3D;                                       		// 0x00F0(0x0040) (CPF_Transient)
	struct FBTProxyData                                TargetData3D;                                     		// 0x0130(0x0040) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_TargetBase");
		return ptr;
	}

};


// Class TAGame.BTC_Target
// 0x0048 (0x01B8 - 0x0170)
class UBTC_Target : public UBTC_TargetBase
{
public:
	float                                              DistanceGreaterThan;                              		// 0x0170(0x0004) (CPF_Edit)
	float                                              DistanceLessThan;                                 		// 0x0174(0x0004) (CPF_Edit)
	float                                              HeightGreaterThan;                                		// 0x0178(0x0004) (CPF_Edit)
	float                                              HeightLessThan;                                   		// 0x017C(0x0004) (CPF_Edit)
	float                                              SpeedGreaterThan;                                 		// 0x0180(0x0004) (CPF_Edit)
	float                                              SpeedLessThan;                                    		// 0x0184(0x0004) (CPF_Edit)
	float                                              SpeedTowardsGreaterThan;                          		// 0x0188(0x0004) (CPF_Edit)
	float                                              SpeedTowardsLessThan;                             		// 0x018C(0x0004) (CPF_Edit)
	float                                              SideSpeedGreaterThan;                             		// 0x0190(0x0004) (CPF_Edit)
	float                                              SideSpeedLessThan;                                		// 0x0194(0x0004) (CPF_Edit)
	float                                              RelativeSpeedGreaterThan;                         		// 0x0198(0x0004) (CPF_Edit)
	float                                              RelativeSpeedLessThan;                            		// 0x019C(0x0004) (CPF_Edit)
	float                                              RelativeSpeedTowardsGreaterThan;                  		// 0x01A0(0x0004) (CPF_Edit)
	float                                              RelativeSpeedTowardsLessThan;                     		// 0x01A4(0x0004) (CPF_Edit)
	float                                              RelativeSideSpeedGreaterThan;                     		// 0x01A8(0x0004) (CPF_Edit)
	float                                              RelativeSideSpeedLessThan;                        		// 0x01AC(0x0004) (CPF_Edit)
	float                                              AngleGreaterThan;                                 		// 0x01B0(0x0004) (CPF_Edit)
	float                                              AngleLessThan;                                    		// 0x01B4(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Target");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_SelectActor
// 0x0004 (0x0060 - 0x005C)
class UBTC_SelectActor : public UBTCondition
{
public:
	class UBTTarget*                                   Targets;                                          		// 0x005C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_SelectActor");
		return ptr;
	}

};


// Class TAGame.BTConditionalNode
// 0x0024 (0x0074 - 0x0050)
class UBTConditionalNode : public UBTNode
{
public:
	TArray<class UBTNode*>                             PreConditions;                                    		// 0x0050(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)
	TArray<class UBTNode*>                             Conditions;                                       		// 0x005C(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)
	TArray<class UBTNode*>                             SuccessConditions;                                		// 0x0068(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTConditionalNode");
		return ptr;
	}

};


// Class TAGame.BTAction
// 0x000C (0x0080 - 0x0074)
class UBTAction : public UBTConditionalNode
{
public:
	float                                              FinishTime;                                       		// 0x0074(0x0004) (CPF_Edit)
	float                                              AbortTime;                                        		// 0x0078(0x0004) (CPF_Edit)
	float                                              StartTime;                                        		// 0x007C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction");
		return ptr;
	}


	float GetRunningTime();
	TEnumAsByte<enum class EBTStatus> OnExecute();
	void OnStarted();
	TEnumAsByte<enum class EBTStatus> OnStart();
	void OnInit();
};


// Class TAGame.BTAction_Target
// 0x0088 (0x0108 - 0x0080)
class UBTAction_Target : public UBTAction
{
public:
	class UBTTarget*                                   Target;                                           		// 0x0080(0x0004) (CPF_Edit)
	float                                              TargetPredictionTime;                             		// 0x0084(0x0004) (CPF_Edit)
	struct FBTProxyData                                SelfData;                                         		// 0x0088(0x0040) (CPF_Transient)
	struct FBTProxyData                                TargetData;                                       		// 0x00C8(0x0040) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_Target");
		return ptr;
	}


	TEnumAsByte<enum class EBTStatus> OnTargetExecute();
	TEnumAsByte<enum class EBTStatus> OnExecute();
};


// Class TAGame.BTNodeParent
// 0x0010 (0x0084 - 0x0074)
class UBTNodeParent : public UBTConditionalNode
{
public:
	TArray<class UBTNode*>                             Children;                                         		// 0x0074(0x000C) (CPF_Const, CPF_NeedCtorLink)
	int                                                RunningChild;                                     		// 0x0080(0x0004) (CPF_Const, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTNodeParent");
		return ptr;
	}

};


// Class TAGame.BTExecutor
// 0x0000 (0x0084 - 0x0084)
class UBTExecutor : public UBTNodeParent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTExecutor");
		return ptr;
	}

};


// Class TAGame.BTRandomSelector
// 0x0018 (0x009C - 0x0084)
class UBTRandomSelector : public UBTNodeParent
{
public:
	TArray<float>                                      ChildWeights;                                     		// 0x0084(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<int>                                        RemainingChildren;                                		// 0x0090(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTRandomSelector");
		return ptr;
	}

};


// Class TAGame.BTSelector
// 0x0000 (0x0084 - 0x0084)
class UBTSelector : public UBTNodeParent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTSelector");
		return ptr;
	}

};


// Class TAGame.BTEvaluator
// 0x0000 (0x0084 - 0x0084)
class UBTEvaluator : public UBTSelector
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTEvaluator");
		return ptr;
	}

};


// Class TAGame.BTSequence
// 0x0000 (0x0084 - 0x0084)
class UBTSequence : public UBTNodeParent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTSequence");
		return ptr;
	}

};


// Class TAGame.BTDecorator
// 0x0004 (0x0054 - 0x0050)
class UBTDecorator : public UBTNode
{
public:
	class UBTNode*                                     Child;                                            		// 0x0050(0x0004) (CPF_Edit, CPF_Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTDecorator");
		return ptr;
	}

};


// Class TAGame.BTDeco_Success
// 0x0000 (0x0054 - 0x0054)
class UBTDeco_Success : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTDeco_Success");
		return ptr;
	}

};


// Class TAGame.BTDynamicLink
// 0x0010 (0x0064 - 0x0054)
class UBTDynamicLink : public UBTDecorator
{
public:
	struct FName                                       LinkName;                                         		// 0x0054(0x0008) (CPF_Edit, CPF_Const)
	unsigned long                                      bUnlinkedSuccess : 1;                             		// 0x005C(0x0004) (CPF_Edit)
	class UBTNode*                                     ChildArchetype;                                   		// 0x0060(0x0004) (CPF_Const, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTDynamicLink");
		return ptr;
	}


	void SetChildArchetype(class UBTNode* NewChildArchetype);
	void HandleDynamicLinksChanged(class UBTComponent* BT);
	void Init();
};


// Class TAGame.BTLock
// 0x001C (0x0070 - 0x0054)
class UBTLock : public UBTDecorator
{
public:
	TEnumAsByte<enum class ELockScope>                 LockScope;                                        		// 0x0054(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0055(0x0003) MISSED OFFSET
	struct FName                                       LockName;                                         		// 0x0058(0x0008) (CPF_Edit)
	float                                              Time;                                             		// 0x0060(0x0004) (CPF_Edit)
	float                                              RandomTime;                                       		// 0x0064(0x0004) (CPF_Edit)
	class UBTLockCollection*                           Locks;                                            		// 0x0068(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	float                                              LockTime;                                         		// 0x006C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTLock");
		return ptr;
	}

};


// Class TAGame.BTWeight
// 0x0004 (0x0058 - 0x0054)
class UBTWeight : public UBTDecorator
{
public:
	float                                              Weight;                                           		// 0x0054(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTWeight");
		return ptr;
	}

};


// Class TAGame.BTProxyType
// 0x0004 (0x0040 - 0x003C)
class UBTProxyType : public UObject
{
public:
	unsigned long                                      bStatic : 1;                                      		// 0x003C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTProxyType");
		return ptr;
	}

};


// Class TAGame.BTTarget
// 0x0028 (0x0064 - 0x003C)
class UBTTarget : public UObject
{
public:
	class UBTProxyType*                                Type;                                             		// 0x003C(0x0004) (CPF_Edit)
	struct FVector                                     LocalOffset;                                      		// 0x0040(0x000C) (CPF_Edit)
	struct FVector                                     WorldOffset;                                      		// 0x004C(0x000C) (CPF_Edit)
	TArray<class UBTNode*>                             Filters;                                          		// 0x0058(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTTarget");
		return ptr;
	}

};


// Class TAGame.BugReport_TA
// 0x0004 (0x013C - 0x0138)
class UBugReport_TA : public UBugReport_X
{
public:
	class UReplay_TA*                                  Replay;                                           		// 0x0138(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BugReport_TA");
		return ptr;
	}


	class UReplay_TA* GetReplay();
};


// Class TAGame.BuildInfo_TA
// 0x0028 (0x0064 - 0x003C)
class UBuildInfo_TA : public UObject
{
public:
	struct FString                                     VersionString;                                    		// 0x003C(0x000C) (CPF_NeedCtorLink)
	int                                                Changelist;                                       		// 0x0048(0x0004)
	struct FString                                     Branch;                                           		// 0x004C(0x000C) (CPF_NeedCtorLink)
	struct FString                                     Label;                                            		// 0x0058(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BuildInfo_TA");
		return ptr;
	}

};


// Class TAGame.CarColorSet_TA
// 0x004C (0x0088 - 0x003C)
class UCarColorSet_TA : public UObject
{
public:
	TArray<struct FLinearColor>                        Grayscales;                                       		// 0x003C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FLinearColor>                        H;                                                		// 0x0048(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FLinearColor>                        SV;                                               		// 0x0054(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	int                                                DefaultId;                                        		// 0x0060(0x0004) (CPF_Edit)
	struct FLinearColor                                ColorBlindColor;                                  		// 0x0064(0x0010) (CPF_Edit)
	int                                                HueCount;                                         		// 0x0074(0x0004) (CPF_Edit, CPF_Const, CPF_EditConst)
	int                                                ValueCount;                                       		// 0x0078(0x0004) (CPF_Edit, CPF_Const, CPF_EditConst)
	TArray<struct FLinearColor>                        Colors;                                           		// 0x007C(0x000C) (CPF_Edit, CPF_Const, CPF_EditConst, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarColorSet_TA");
		return ptr;
	}


	int GetClosestID(const struct FLinearColor& InColor);
	struct FLinearColor GetFontColor(int ColorID);
	TArray<struct FLinearColor> GetStadiumColors(int ColorID);
	struct FLinearColor GetColor(int ColorID);
};


// Class TAGame.CarComponent_TA
// 0x0038 (0x0224 - 0x01EC)
class ACarComponent_TA : public AActor
{
public:
	class AFXActor_X*                                  FXActorArchetype;                                 		// 0x01EC(0x0004) (CPF_Edit)
	class UFXActorEvent_X*                             FXEvent;                                          		// 0x01F0(0x0004) (CPF_Edit)
	unsigned long                                      bAutoActivate : 1;                                		// 0x01F4(0x0004) (CPF_Edit)
	unsigned long                                      bSimulateComponent : 1;                           		// 0x01F4(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bCreated : 1;                                     		// 0x01F4(0x0004) (CPF_Transient)
	unsigned long                                      bActive : 1;                                      		// 0x01F4(0x0004) (CPF_Transient)
	unsigned long                                      bRemovedFromCar : 1;                              		// 0x01F4(0x0004) (CPF_Transient)
	unsigned char                                      ComponentData;                                    		// 0x01F8(0x0001) (CPF_Transient)
	unsigned char                                      ReplicatedActive;                                 		// 0x01F9(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData00[0x2];                               		// 0x01FA(0x0002) MISSED OFFSET
	class APRI_TA*                                     Activator;                                        		// 0x01FC(0x0004) (CPF_Transient)
	class AVehicle_TA*                                 Vehicle;                                          		// 0x0200(0x0004) (CPF_Net)
	class ACar_TA*                                     Car;                                              		// 0x0204(0x0004) (CPF_Transient)
	float                                              ActivityTime;                                     		// 0x0208(0x0004) (CPF_Transient)
	float                                              ReplicatedActivityTime;                           		// 0x020C(0x0004) (CPF_Net, CPF_Transient)
	class AFXActor_X*                                  FXActor;                                          		// 0x0210(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventActivationChanged__Delegate;               		// 0x0214(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0214(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void FellOutOfWorld(class UClass* dmgType);
	void HandleCarDestroyed(class APawn_X* InCar);
	void Destroyed();
	float GetInactiveTime();
	float GetActiveTime();
	void ApplyForces(float ActiveTime);
	void PrePhysicsStep(float DeltaTime);
	void RemoveFromCar();
	bool CanDeactivate();
	bool ConditionalDeactivate();
	bool CanActivate();
	bool ConditionalActivate();
	void SetActive(bool bNewActive);
	void Deactivate();
	void Activate();
	void RemoveFX();
	void ReInitFX();
	void InitFX();
	void UnregisterCarEvents();
	void RegisterCarEvents();
	void OnCreated();
	void HandleVehicleSetup(class ACar_TA* InCar);
	void OnVehicleSetupComplete();
	void Create(class ACar_TA* OwnerCar, class APRI_TA* InActivator);
	void ArchetypeCreateFor(class ACar_TA* OwnerCar);
	void ClientUpdateActive();
	void ReplicatedEvent(const struct FName& VarName);
	void EventActivationChanged(class ACarComponent_TA* CarComponent);
};


// Class TAGame.CarComponent_Boost_TA
// 0x0048 (0x026C - 0x0224)
class ACarComponent_Boost_TA : public ACarComponent_TA
{
public:
	float                                              BoostConsumptionRate;                             		// 0x0224(0x0004) (CPF_Edit)
	float                                              MaxBoostAmount;                                   		// 0x0228(0x0004) (CPF_Edit)
	float                                              StartBoostAmount;                                 		// 0x022C(0x0004) (CPF_Edit, CPF_Net)
	float                                              CurrentBoostAmount;                               		// 0x0230(0x0004) (CPF_Edit, CPF_Net)
	float                                              BoostModifier;                                    		// 0x0234(0x0004) (CPF_Edit, CPF_Net)
	float                                              LastBoostAmountRequestTime;                       		// 0x0238(0x0004) (CPF_Transient)
	float                                              LastBoostAmount;                                  		// 0x023C(0x0004) (CPF_Transient)
	float                                              BoostForce;                                       		// 0x0240(0x0004) (CPF_Edit)
	float                                              MinBoostTime;                                     		// 0x0244(0x0004) (CPF_Edit)
	float                                              RechargeRate;                                     		// 0x0248(0x0004) (CPF_Net)
	float                                              RechargeDelay;                                    		// 0x024C(0x0004) (CPF_Net)
	int                                                UnlimitedBoostRefCount;                           		// 0x0250(0x0004) (CPF_Edit, CPF_Net)
	unsigned long                                      bUnlimitedBoost : 1;                              		// 0x0254(0x0004) (CPF_Transient)
	unsigned long                                      bNoBoost : 1;                                     		// 0x0254(0x0004) (CPF_Edit, CPF_Net)
	unsigned long                                      bOnlyApplyRechargeToMyHalf : 1;                   		// 0x0254(0x0004) (CPF_Transient)
	unsigned long                                      bOnlyApplyRechargeToOpposingHalf : 1;             		// 0x0254(0x0004) (CPF_Transient)
	unsigned long                                      bDemolishOnEmptyMyHalf : 1;                       		// 0x0254(0x0004) (CPF_Transient)
	unsigned long                                      bDemolishOnEmptyOpposingHalf : 1;                 		// 0x0254(0x0004) (CPF_Transient)
	unsigned long                                      bCachedOnyMyHalf : 1;                             		// 0x0254(0x0004) (CPF_Transient)
	unsigned char                                      ReplicatedBoostAmount;                            		// 0x0258(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0259(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __EventBoostAmountChanged__Delegate;              		// 0x025C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0259(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_Boost_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void ReadReplicatedBoostAmount();
	void SetReplicatedBoostAmount();
	void ApplyForces(float ActiveTime);
	void PrePhysicsStep(float DeltaTime);
	void PrePhysicsStepNative(float DeltaTime);
	void ClientGiveBoost(float Amount);
	void ConfirmBoostAmount();
	void ClientFixBoostAmount(float TimeStamp, float Amount);
	void ServerConfirmBoostAmount(float TimeStamp, float Amount);
	void SetMutatorRechargeSettings(bool bApplyToMyHalf, bool bApplyToOpposingHalf, bool bDemolishEmptyMyHalf, bool bDemolishEmptyOpposingHalf);
	void SetRechargeDelay(float InRechargeDelay);
	void SetRechargeRate(float InRechargeRate);
	void SetNoBoost(bool Enabled);
	void SetUnlimitedBoost(bool Enabled);
	void SetBoostModifier(float Modifier);
	void SetBoostAmount(float Amount);
	void GiveBoost(float Amount);
	void GiveStartingBoost();
	void GiveFullBoost();
	float GetPercentBoostFull();
	bool IsFull();
	void RemoveFromCar();
	bool CanDeactivate();
	bool CanActivate();
	void InitFX();
	void OnCreated();
	void ReplicatedEvent(const struct FName& VarName);
	void EventBoostAmountChanged(class ACarComponent_Boost_TA* Boost);
};


// Class TAGame.CarComponent_Dodge_TA
// 0x0064 (0x0288 - 0x0224)
class ACarComponent_Dodge_TA : public ACarComponent_TA
{
public:
	float                                              DodgeInputThreshold;                              		// 0x0224(0x0004) (CPF_Edit)
	float                                              SideDodgeImpulse;                                 		// 0x0228(0x0004) (CPF_Edit)
	float                                              SideDodgeImpulseMaxSpeedScale;                    		// 0x022C(0x0004) (CPF_Edit)
	float                                              ForwardDodgeImpulse;                              		// 0x0230(0x0004) (CPF_Edit)
	float                                              ForwardDodgeImpulseMaxSpeedScale;                 		// 0x0234(0x0004) (CPF_Edit)
	float                                              BackwardDodgeImpulse;                             		// 0x0238(0x0004) (CPF_Edit)
	float                                              BackwardDodgeImpulseMaxSpeedScale;                		// 0x023C(0x0004) (CPF_Edit)
	float                                              SideDodgeTorque;                                  		// 0x0240(0x0004) (CPF_Edit)
	float                                              ForwardDodgeTorque;                               		// 0x0244(0x0004) (CPF_Edit)
	float                                              DodgeTorqueTime;                                  		// 0x0248(0x0004) (CPF_Edit)
	float                                              MinDodgeTorqueTime;                               		// 0x024C(0x0004) (CPF_Edit)
	float                                              DodgeZDamping;                                    		// 0x0250(0x0004) (CPF_Edit)
	float                                              DodgeZDampingDelay;                               		// 0x0254(0x0004) (CPF_Edit)
	float                                              DodgeZDampingUpTime;                              		// 0x0258(0x0004) (CPF_Edit)
	float                                              DodgeImpulseScale;                                		// 0x025C(0x0004) (CPF_Edit)
	float                                              DodgeTorqueScale;                                 		// 0x0260(0x0004) (CPF_Edit)
	class UFXActorEvent_X*                             JumpEvent;                                        		// 0x0264(0x0004) (CPF_Edit)
	class UFXActorEvent_X*                             DoubleJumpEvent;                                  		// 0x0268(0x0004) (CPF_Edit)
	class UFXActorEvent_X*                             DodgeEvent;                                       		// 0x026C(0x0004) (CPF_Edit)
	struct FVector                                     DodgeTorque;                                      		// 0x0270(0x000C) (CPF_Net, CPF_Transient)
	struct FVector                                     DodgeDirection;                                   		// 0x027C(0x000C) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_Dodge_TA");
		return ptr;
	}


	void ApplyTorqueForces(float ActiveTime);
	void ApplyDodgeImpulse();
	struct FVector GetDodgeImpulse(const struct FVector& DodgeDir);
	void ApplyForces(float ActiveTime);
	bool CanActivate();
	void OnCreated();
};


// Class TAGame.CertifiedStat_TA
// 0x0010 (0x004C - 0x003C)
class UCertifiedStat_TA : public UObject
{
public:
	class UClass*                                      StatClass;                                        		// 0x003C(0x0004) (CPF_Edit)
	TArray<int>                                        RankThresholds;                                   		// 0x0040(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CertifiedStat_TA");
		return ptr;
	}


	struct FString GetRankLabel(int StatValue);
	int GetRank(int StatValue);
	struct FString GetDescription();
	int GetID();
};


// Class TAGame.CertifiedStatDatabase_TA
// 0x004C (0x0088 - 0x003C)
class UCertifiedStatDatabase_TA : public UObject
{
public:
	TArray<class UCertifiedStat_TA*>                   Stats;                                            		// 0x003C(0x000C) (CPF_Edit, CPF_Const, CPF_EditConst, CPF_NeedCtorLink)
	struct FMap_Mirror                                 StatNameToStatID;                                 		// 0x0048(0x003C) (CPF_Const, CPF_Native)
	unsigned long                                      bClickToRebuild : 1;                              		// 0x0084(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CertifiedStatDatabase_TA");
		return ptr;
	}


	class UCertifiedStat_TA* GetStatByName(const struct FName& StatName);
	class UCertifiedStat_TA* GetStat(int Id);
	struct FName GetStatName(int StatId);
	int GetStatId(const struct FName& StatName);
};


// Class TAGame.CollisionTestComponent_TA
// 0x0043 (0x00A8 - 0x0065)
class UCollisionTestComponent_TA : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                               		// 0x0065(0x0003) MISSED OFFSET
	class AActor*                                      LineStart;                                        		// 0x0068(0x0004) (CPF_Edit)
	class AActor*                                      LineEnd;                                          		// 0x006C(0x0004) (CPF_Edit)
	class AActor*                                      ArchetypeToSpawn;                                 		// 0x0070(0x0004) (CPF_Edit)
	struct FVector                                     CachedCenter;                                     		// 0x0074(0x000C) (CPF_Const)
	struct FVector                                     CachedStart;                                      		// 0x0080(0x000C) (CPF_Const)
	struct FVector                                     CachedEnd;                                        		// 0x008C(0x000C) (CPF_Const)
	float                                              Speed;                                            		// 0x0098(0x0004) (CPF_Edit)
	float                                              Step;                                             		// 0x009C(0x0004) (CPF_Edit)
	float                                              Time;                                             		// 0x00A0(0x0004) (CPF_Edit)
	unsigned long                                      bEnabled : 1;                                     		// 0x00A4(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CollisionTestComponent_TA");
		return ptr;
	}

};


// Class TAGame.CrowdActorSettings_TA
// 0x00BC (0x00F8 - 0x003C)
class UCrowdActorSettings_TA : public UObject
{
public:
	float                                              NoiseRiseRate;                                    		// 0x003C(0x0004) (CPF_Edit)
	float                                              NoiseFallRate;                                    		// 0x0040(0x0004) (CPF_Edit)
	struct FRandomRange                                IdleNoise;                                        		// 0x0044(0x0008) (CPF_Edit)
	struct FRandomRange                                IdleNoiseDuration;                                		// 0x004C(0x0008) (CPF_Edit)
	class UCrowdNoiseModifier_TA*                      CountdownStartNoise;                              		// 0x0054(0x0004) (CPF_Edit, CPF_EditInline)
	class UCrowdNoiseModifier_TA*                      CountdownEndNoise;                                		// 0x0058(0x0004) (CPF_Edit, CPF_EditInline)
	class UCrowdNoiseModifier_TA*                      OvertimeStartNoise;                               		// 0x005C(0x0004) (CPF_Edit, CPF_EditInline)
	class UCrowdNoiseModifier_TA*                      TimeAlmostOutNoise;                               		// 0x0060(0x0004) (CPF_Edit, CPF_EditInline)
	TArray<struct FStatCrowdNoise>                     StatNoises;                                       		// 0x0064(0x000C) (CPF_Edit, CPF_EditFixedSize, CPF_NeedCtorLink)
	class UAkSoundCue*                                 RandomChantsSound;                                		// 0x0070(0x0004) (CPF_Edit)
	struct FRandomRange                                RandomChantsDelay;                                		// 0x0074(0x0008) (CPF_Edit)
	unsigned long                                      UpdateStatNoises : 1;                             		// 0x007C(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           BallGoalDistanceNoiseCurve;                       		// 0x0080(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	struct FVector                                     GoalDotDirection;                                 		// 0x0090(0x000C) (CPF_Edit)
	float                                              MinGoalDotAngle;                                  		// 0x009C(0x0004) (CPF_Edit)
	TArray<struct FBallHitCrowdNoise>                  BallHitNoises;                                    		// 0x00A0(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	float                                              BallHitNoiseDelay;                                		// 0x00AC(0x0004) (CPF_Edit)
	TArray<class UAkSoundCue*>                         CountDownSoundList;                               		// 0x00B0(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<class UAkSoundCue*>                         RoundCountDownSoundList;                          		// 0x00BC(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UAkSoundCue*                                 OneMinRemaining;                                  		// 0x00C8(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 ThirtySecondsRemaining;                           		// 0x00CC(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 CrowdStingerWin;                                  		// 0x00D0(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 CrowdStingerLose;                                 		// 0x00D4(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 CrowdStingerForfeit;                              		// 0x00D8(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 CrowdStartOverTimeSound;                          		// 0x00DC(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 MatchEndedEncore;                                 		// 0x00E0(0x0004) (CPF_Edit)
	float                                              MatchEndedEncoreDelay;                            		// 0x00E4(0x0004) (CPF_Edit)
	struct FCrowdDefenseSettings                       DefenseChant;                                     		// 0x00E8(0x0010) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CrowdActorSettings_TA");
		return ptr;
	}

};


// Class TAGame.CrowdNoiseModifier_TA
// 0x0014 (0x0050 - 0x003C)
class UCrowdNoiseModifier_TA : public UObject
{
public:
	float                                              ValueMin;                                         		// 0x003C(0x0004) (CPF_Edit)
	float                                              ValueMax;                                         		// 0x0040(0x0004) (CPF_Edit)
	float                                              DurationMin;                                      		// 0x0044(0x0004) (CPF_Edit)
	float                                              DurationMax;                                      		// 0x0048(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 OneShotSound;                                     		// 0x004C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CrowdNoiseModifier_TA");
		return ptr;
	}

};


// Class TAGame.DecalComponent_Constrained_TA
// 0x0008 (0x0348 - 0x0340)
class UDecalComponent_Constrained_TA : public UDecalComponent
{
public:
	float                                              WorldZ;                                           		// 0x0340(0x0004) (CPF_Edit)
	unsigned long                                      bAttachedRotation : 1;                            		// 0x0344(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DecalComponent_Constrained_TA");
		return ptr;
	}

};


// Class TAGame.DistributionFloatSpeed_TA
// 0x0010 (0x007D - 0x006D)
class UDistributionFloatSpeed_TA : public UDistributionFloatParameterBase
{
public:
	unsigned char                                      UnknownData00[0x3];                               		// 0x006D(0x0003) MISSED OFFSET
	struct FVector                                     VelocityScale;                                    		// 0x0070(0x000C) (CPF_Edit)
	TEnumAsByte<enum class ESpeedDistributionSpace>    VelocitySpace;                                    		// 0x007C(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DistributionFloatSpeed_TA");
		return ptr;
	}

};


// Class TAGame.DistributionFloatSteer_TA
// 0x0003 (0x0070 - 0x006D)
class UDistributionFloatSteer_TA : public UDistributionFloatParameterBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DistributionFloatSteer_TA");
		return ptr;
	}

};


// Class TAGame.DLCPack_TA
// 0x003C (0x0078 - 0x003C)
class UDLCPack_TA : public UObject
{
public:
	TEnumAsByte<enum class EGameVersion>               GameVersion;                                      		// 0x003C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x003D(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<enum class EConsoleType>>       UnlockedPlatforms;                                		// 0x0040(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UProductSlot_TA*                             LabelSlot;                                        		// 0x004C(0x0004) (CPF_Edit)
	int                                                SteamID;                                          		// 0x0050(0x0004) (CPF_Edit)
	struct FString                                     PS4ID;                                            		// 0x0054(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	struct FString                                     XboxOneID;                                        		// 0x0060(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<class UProduct_TA*>                         Products;                                         		// 0x006C(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DLCPack_TA");
		return ptr;
	}


	int GetDLCLabelSlotProductID(int SubIdx);
};


// Class TAGame.EngineAudioComponent_TA
// 0x0038 (0x00A4 - 0x006C)
class UEngineAudioComponent_TA : public UActorComponent_X
{
public:
	class UAkPlaySoundComponent*                       EngineAudio;                                      		// 0x006C(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UAkPlaySoundComponent*                       ExhaustAudio;                                     		// 0x0070(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UEngineAudioProfile_TA*                      Profile;                                          		// 0x0074(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 BlowoffSound;                                     		// 0x0078(0x0004) (CPF_Transient)
	class UMaxActorsGroup_TA*                          MaxActorsGroup;                                   		// 0x007C(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class AVehicle_TA*                                 Car;                                              		// 0x0080(0x0004) (CPF_Transient)
	struct FCarStateData                               OldCarState;                                      		// 0x0084(0x0010) (CPF_Transient)
	float                                              AvgWheelForwardSpeed;                             		// 0x0094(0x0004) (CPF_Transient)
	float                                              AvgWheelSideSpeed;                                		// 0x0098(0x0004) (CPF_Transient)
	float                                              FullThrottleTime;                                 		// 0x009C(0x0004) (CPF_Transient)
	struct FPointer                                    NativeState;                                      		// 0x00A0(0x0004) (CPF_Const, CPF_Native, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioComponent_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	struct FName GetNativeStateName();
	void DestroyNativeState();
	void HandleSplitScreenTypeChanged(class UGameViewportClient_TA* ViewportClient);
	void HandleDisabled();
	void HandleEnabled();
	void Detached();
	void Attached();
};


// Class TAGame.EngineAudioProfile_TA
// 0x005C (0x0098 - 0x003C)
class UEngineAudioProfile_TA : public UObject
{
public:
	TArray<struct FAudioGear>                          Gears;                                            		// 0x003C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	float                                              GearSwitchTime;                                   		// 0x0048(0x0004) (CPF_Edit)
	float                                              RPMAccelStart;                                    		// 0x004C(0x0004) (CPF_Edit)
	float                                              RPMAccelEnd;                                      		// 0x0050(0x0004) (CPF_Edit)
	float                                              RPMAccelClutched;                                 		// 0x0054(0x0004) (CPF_Edit)
	float                                              RPMDecelClutched;                                 		// 0x0058(0x0004) (CPF_Edit)
	float                                              RPMMaxClutched;                                   		// 0x005C(0x0004) (CPF_Edit)
	float                                              MaxWheelSpeed;                                    		// 0x0060(0x0004) (CPF_Edit)
	float                                              RPMAccelFactor;                                   		// 0x0064(0x0004) (CPF_Edit)
	float                                              RPMDecelFactor;                                   		// 0x0068(0x0004) (CPF_Edit)
	float                                              RPMAccelBoostStart;                               		// 0x006C(0x0004) (CPF_Edit)
	float                                              RPMAccelBoostEnd;                                 		// 0x0070(0x0004) (CPF_Edit)
	float                                              RPMShiftUpBoost;                                  		// 0x0074(0x0004) (CPF_Edit)
	float                                              RPMMaxLoad;                                       		// 0x0078(0x0004) (CPF_Edit)
	float                                              EngineLoadSmoothFactor;                           		// 0x007C(0x0004) (CPF_Edit)
	float                                              AirMaxThrottleTime;                               		// 0x0080(0x0004) (CPF_Edit)
	float                                              RevLimitRPM;                                      		// 0x0084(0x0004) (CPF_Edit)
	float                                              RevLimitRPMDecel;                                 		// 0x0088(0x0004) (CPF_Edit)
	float                                              WheelForwardSpeedInterpRate;                      		// 0x008C(0x0004) (CPF_Edit)
	float                                              WheelSideSpeedInterpRate;                         		// 0x0090(0x0004) (CPF_Edit)
	float                                              BlowoffThrottleTime;                              		// 0x0094(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioProfile_TA");
		return ptr;
	}

};


// Class TAGame.EngineShare_TA
// 0x0078 (0x0158 - 0x00E0)
class UEngineShare_TA : public UEngineShare_X
{
public:
	unsigned long                                      bEnableClientPrediction : 1;                      		// 0x00E0(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bClientPhysicsUpdate : 1;                         		// 0x00E0(0x0004) (CPF_Const, CPF_Transient)
	unsigned long                                      bDisableClientCorrections : 1;                    		// 0x00E0(0x0004) (CPF_Transient)
	unsigned long                                      bColorBlind : 1;                                  		// 0x00E0(0x0004) (CPF_Transient)
	class UReplayManager_TA*                           ReplayManager;                                    		// 0x00E4(0x0004) (CPF_Transient)
	class USaveGameManager_TA*                         SystemSaveGameManager;                            		// 0x00E8(0x0004) (CPF_Transient)
	class UAdManager_TA*                               AdManager;                                        		// 0x00EC(0x0004) (CPF_Transient)
	class UOnlineProductStore_TA*                      OnlineProductStore;                               		// 0x00F0(0x0004) (CPF_Transient)
	float                                              PhysicsFramerate;                                 		// 0x00F4(0x0004) (CPF_Edit, CPF_Const)
	int                                                MaxPhysicsSubsteps;                               		// 0x00F8(0x0004) (CPF_Edit, CPF_Const)
	int                                                MaxUploadedClientFrames;                          		// 0x00FC(0x0004) (CPF_Edit)
	int                                                MaxClientReplayFrames;                            		// 0x0100(0x0004) (CPF_Const, CPF_Transient)
	int                                                PhysicsFrame;                                     		// 0x0104(0x0004) (CPF_Const, CPF_Transient)
	float                                              RenderAlpha;                                      		// 0x0108(0x0004) (CPF_Const, CPF_Transient)
	int                                                ReplicatedPhysicsFrame;                           		// 0x010C(0x0004) (CPF_Const, CPF_Transient)
	int                                                DirtyPhysicsFrame;                                		// 0x0110(0x0004) (CPF_Const, CPF_Transient)
	TArray<TScriptInterface<class UITickNotify_TA>>    TickNotifies;                                     		// 0x0114(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	int                                                TickNotifyIndex;                                  		// 0x0120(0x0004) (CPF_Const, CPF_Transient)
	struct FString                                     ShellArchetypePath;                               		// 0x0124(0x000C) (CPF_Const, CPF_Config, CPF_NeedCtorLink)
	class USystemSettingsManager_TA*                   SystemSettingsManager;                            		// 0x0130(0x0004) (CPF_Transient)
	float                                              LastBugReportTime;                                		// 0x0134(0x0004) (CPF_Const, CPF_Transient)
	struct FScriptDelegate                             __EventPreAsyncTick__Delegate;                    		// 0x0138(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0138(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventColorBlindChanged__Delegate;               		// 0x0148(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0148(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineShare_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void SetColorBlind(bool bIsColorBlind);
	float GetBulletFixedDeltaTime();
	void RunPhysicsStep(int BulletSceneIndex, float DeltaTime);
	void DrawBuildInfo(class UCanvas* C);
	void UpdateReplicatedPhysicsFrame(int ServerFrame, float Ping);
	void STATIC_DebugDedicatedServer(float ForHowLong);
	float GetPhysicsTime();
	void SetTickNotify(const TScriptInterface<class UITickNotify_TA>& Obj, bool bNotify);
	class UObject* STATIC_LoadStandaloneObject(class UClass* ExpectedClass, const struct FName& ObjectName, int LoadFlags);
	void InitOnlineGame(class UOnlineSubsystem* NewOnlineSubsystem);
	void RecordAppStart();
	void Init();
	class USaveGameManager_TA* GetSystemSaveGameManager();
	struct FString STATIC_GetVersionString();
	void EventColorBlindChanged();
	void EventPreAsyncTick(float DeltaTime);
};


// Class TAGame.Errors_TA
// 0x0050 (0x00A4 - 0x0054)
class UErrors_TA : public UErrorsList_X
{
public:
	class UErrorType_X*                                WebServer;                                        		// 0x0054(0x0004) (CPF_Const)
	class UErrorType_X*                                ReplayImport;                                     		// 0x0058(0x0004) (CPF_Const)
	class UErrorType_X*                                ReplayExport;                                     		// 0x005C(0x0004) (CPF_Const)
	class UErrorType_X*                                ReplayNoReplay;                                   		// 0x0060(0x0004) (CPF_Const)
	class UErrorType_X*                                ReplayExportNoSpace;                              		// 0x0064(0x0004) (CPF_Const)
	class UErrorType_X*                                UpdateRequired;                                   		// 0x0068(0x0004) (CPF_Const)
	class UErrorType_X*                                TrialLogin;                                       		// 0x006C(0x0004) (CPF_Const)
	class UErrorType_X*                                TradeInMaxed;                                     		// 0x0070(0x0004) (CPF_Const)
	class UErrorType_X*                                TransactionInProgress;                            		// 0x0074(0x0004) (CPF_Const)
	class UErrorType_X*                                OrderNotFound;                                    		// 0x0078(0x0004) (CPF_Const)
	class UErrorType_X*                                InventoryOutOfSync;                               		// 0x007C(0x0004) (CPF_Const)
	class UErrorType_X*                                TimedOut;                                         		// 0x0080(0x0004) (CPF_Const)
	class UErrorType_X*                                TrainingModeNotFound;                             		// 0x0084(0x0004) (CPF_Const)
	class UErrorType_X*                                TrainingModeInvalidFavoritedCodes;                		// 0x0088(0x0004) (CPF_Const)
	class UErrorType_X*                                TrainingModeListPlayerTrainingFailed;             		// 0x008C(0x0004) (CPF_Const)
	class UErrorType_X*                                TrainingModeAddFailed;                            		// 0x0090(0x0004) (CPF_Const)
	class UErrorType_X*                                TrainingModeUpdateFailed;                         		// 0x0094(0x0004) (CPF_Const)
	class UErrorType_X*                                CodeIsNotValid;                                   		// 0x0098(0x0004) (CPF_Const)
	class UErrorType_X*                                CodeHasBeenRedeemed;                              		// 0x009C(0x0004) (CPF_Const)
	class UErrorType_X*                                CodeMaxIncorrectAttempts;                         		// 0x00A0(0x0004) (CPF_Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Errors_TA");
		return ptr;
	}

};


// Class TAGame.FeatureFilterTest_TA
// 0x0004 (0x0040 - 0x003C)
class UFeatureFilterTest_TA : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4];                               		// 0x003C(0x0004) UNKNOWN PROPERTY: ObjectProperty TAGame.FeatureFilterTest_TA.Subject

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FeatureFilterTest_TA");
		return ptr;
	}


	int GetImplementationMacro();
	void Test();
};


// Class TAGame.FlockActor_TA
// 0x0058 (0x0244 - 0x01EC)
class AFlockActor_TA : public AActor
{
public:
	class UStaticMesh*                                 AgentMesh;                                        		// 0x01EC(0x0004) (CPF_Edit, CPF_Const)
	class UInstancedStaticMeshComponent*               FlockInstancedMesh;                               		// 0x01F0(0x0004) (CPF_Const, CPF_ExportObject, CPF_Component, CPF_EditInline)
	int                                                FlockSize;                                        		// 0x01F4(0x0004) (CPF_Edit)
	float                                              SeperationWeight;                                 		// 0x01F8(0x0004) (CPF_Edit)
	struct FVector                                     FlockRadius;                                      		// 0x01FC(0x000C) (CPF_Edit)
	float                                              AgentSpeed;                                       		// 0x0208(0x0004) (CPF_Edit)
	float                                              SeperationIdealDistance;                          		// 0x020C(0x0004) (CPF_Edit)
	class ASplineActor*                                Spline;                                           		// 0x0210(0x0004) (CPF_Edit)
	float                                              SpawnSpreadDistanceAlongSpline;                   		// 0x0214(0x0004) (CPF_Edit)
	unsigned long                                      bRestartTimerEnabled : 1;                         		// 0x0218(0x0004) (CPF_Edit)
	unsigned long                                      UpdateFlockMovement : 1;                          		// 0x0218(0x0004) (CPF_Edit)
	unsigned long                                      ResetFlockOnToggleUpdateMovement : 1;             		// 0x0218(0x0004) (CPF_Edit)
	float                                              WaitTimeInSeconds;                                		// 0x021C(0x0004) (CPF_Edit)
	float                                              MinAgentScale;                                    		// 0x0220(0x0004) (CPF_Edit)
	float                                              MaxAgentScale;                                    		// 0x0224(0x0004) (CPF_Edit)
	float                                              CurrentRestartTime;                               		// 0x0228(0x0004)
	TArray<struct FFlockAgent>                         Agents;                                           		// 0x022C(0x000C) (CPF_NeedCtorLink)
	struct FVector                                     AverageAgentPosition;                             		// 0x0238(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FlockActor_TA");
		return ptr;
	}

};


// Class TAGame.ForceVolume_TA
// 0x0014 (0x022C - 0x0218)
class AForceVolume_TA : public AVolume
{
public:
	struct FPointer                                    VfTable_IITickNotify_TA;                          		// 0x0218(0x0004) (CPF_Const, CPF_Native, CPF_NoExport)
	TEnumAsByte<enum class EForceDirection>            ForceDirection;                                   		// 0x021C(0x0001) (CPF_Edit)
	TEnumAsByte<enum class EForceMode>                 ConstantForceMode;                                		// 0x021D(0x0001) (CPF_Edit)
	TEnumAsByte<enum class EForceMode>                 EnterForceMode;                                   		// 0x021E(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x1];                               		// 0x021F(0x0001) MISSED OFFSET
	float                                              ConstantForce;                                    		// 0x0220(0x0004) (CPF_Edit)
	float                                              EnterForce;                                       		// 0x0224(0x0004) (CPF_Edit)
	class AActor*                                      CustomForceDirection;                             		// 0x0228(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ForceVolume_TA");
		return ptr;
	}


	void UnTouch(class AActor* Other);
	struct FVector GetForceDirection(class ARBActor_TA* RB);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PrePhysicsStep(float DeltaTime);
};


// Class TAGame.FpsBucketRecorder_TA
// 0x000F (0x0074 - 0x0065)
class UFpsBucketRecorder_TA : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                               		// 0x0065(0x0003) MISSED OFFSET
	TArray<struct FFpsBucketData>                      Buckets;                                          		// 0x0068(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FpsBucketRecorder_TA");
		return ptr;
	}


	TArray<struct FFpsBucketData> GetAverages();
};


// Class TAGame.FXActor_TA
// 0x0004 (0x024C - 0x0248)
class AFXActor_TA : public AFXActor_X
{
public:
	class UFXActorEvent_X*                             HideWorldUIState;                                 		// 0x0248(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_TA");
		return ptr;
	}


	void HandleHideWorldUIChanged(class UGameShare_TA* G);
	void SetCarActorParam(class ACar_TA* InCar);
	void PostBeginPlay();
};


// Class TAGame.FXActor_Boost_TA
// 0x0078 (0x02C4 - 0x024C)
class AFXActor_Boost_TA : public AFXActor_TA
{
public:
	TArray<struct FParticleParameterSet>               ParametersPerExtraBoostSockets;                   		// 0x024C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FParticleBodyParameterSet>           BodyParticleParameters;                           		// 0x0258(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UAkSoundCue*                                 DryFireSound;                                     		// 0x0264(0x0004) (CPF_Edit)
	struct FLinearColor                                CarBoostGlowColor;                                		// 0x0268(0x0010) (CPF_Edit)
	TArray<struct FAnimatedMaterialMesh>               BoostMeshMaterialParams;                          		// 0x0278(0x000C) (CPF_Edit, CPF_Component, CPF_NeedCtorLink)
	TArray<struct FBoostMeshMaterialOverride>          BoostMeshMaterialOverrides;                       		// 0x0284(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UBoostMesh_TA*                               BoostMeshArchetype;                               		// 0x0290(0x0004) (CPF_Edit)
	class UBoostMesh_TA*                               BoostMesh;                                        		// 0x0294(0x0004) (CPF_Transient)
	struct FRandomRange                                BoostMeshFadeInTime;                              		// 0x0298(0x0008) (CPF_Edit)
	struct FRandomRange                                BoostMeshFadeOutTime;                             		// 0x02A0(0x0008) (CPF_Edit)
	TArray<struct FPreviewParticleOverride>            PreviewParticleOverrides;                         		// 0x02A8(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	unsigned long                                      bWasBoosting : 1;                                 		// 0x02B4(0x0004) (CPF_Transient)
	unsigned long                                      bWasInputBoosting : 1;                            		// 0x02B4(0x0004) (CPF_Transient)
	float                                              MaxBoostMeshMaterialTime;                         		// 0x02B8(0x0004) (CPF_Transient)
	class AVehicle_TA*                                 Vehicle;                                          		// 0x02BC(0x0004) (CPF_Transient)
	class ACarPreviewActor_TA*                         CarPreview;                                       		// 0x02C0(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_Boost_TA");
		return ptr;
	}


	void HandleCarDemolished(class ACar_TA* Car, const struct FDemolishData& Data);
	void ApplyPaint(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint);
	void ApplyPreviewParticleOverrides();
	void StopAllEffects();
	void BoostMeshFadeOut();
	void BoostMeshFadeIn();
	void ResetBoostMeshElapsedTime(float Value);
	void CopyBoostMeshDistributionParameters(class AFXActor_Boost_TA* Archetype);
	void UpdateBoostMeshMaterials(float DeltaTime);
	void InitializeBoostMesh();
	void CreateBoostMeshMaterials(class AFXActor_X* FXActor);
	void Inherit(class AFXActor_X* Other);
	void TickFX(float DeltaTime);
	void CopyFrom(class AFXActor_X* Other);
	void SetBodyParticleParams(class AFXActor_X* BodyFXActor);
	void InitExtraBoostComponents(class UProductAsset_Body_TA* BodyAsset);
	void DuplicateAttachment(class UProductAsset_Body_TA* BodyAsset, int AttachmentIdx);
	void SetParticleParams(const struct FName& AttachmentName, TArray<struct FParticleSysParam> Params);
	void SetAttachmentActor(class AActor* AttachToActor);
};


// Class TAGame.FXActor_Car_TA
// 0x00A4 (0x02F0 - 0x024C)
class AFXActor_Car_TA : public AFXActor_TA
{
public:
	class UEffectsMap_X*                               WheelEffectsMap;                                  		// 0x024C(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 AkWheelImpactSound;                               		// 0x0250(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 AkWheelDriveSound;                                		// 0x0254(0x0004) (CPF_Edit)
	float                                              MinImpactMomentum;                                		// 0x0258(0x0004) (CPF_Edit)
	struct FName                                       AkImpactTypeKey;                                  		// 0x025C(0x0008) (CPF_Edit)
	struct FName                                       AkImpactIntensityKey;                             		// 0x0264(0x0008) (CPF_Edit)
	class UCameraShake*                                WheelImpactShake;                                 		// 0x026C(0x0004) (CPF_Edit)
	class UForceFeedbackWaveform*                      WheelImpactForceFeedback;                         		// 0x0270(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           ShakeScaleCurve;                                  		// 0x0274(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	class UParticleSystem*                             SupersonicWheelTemplate;                          		// 0x0284(0x0004) (CPF_Edit)
	float                                              BoostGlowRate;                                    		// 0x0288(0x0004) (CPF_Edit)
	class UShakeComponent_X*                           ShakeComponent;                                   		// 0x028C(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class AVehicle_TA*                                 Vehicle;                                          		// 0x0290(0x0004) (CPF_Transient)
	unsigned long                                      bThrottle : 1;                                    		// 0x0294(0x0004) (CPF_Transient)
	unsigned long                                      bInAir : 1;                                       		// 0x0294(0x0004) (CPF_Transient)
	unsigned long                                      bBrake : 1;                                       		// 0x0294(0x0004) (CPF_Transient)
	unsigned long                                      bWasBoosting : 1;                                 		// 0x0294(0x0004) (CPF_Transient)
	unsigned long                                      bWasBoostFlying : 1;                              		// 0x0294(0x0004) (CPF_Transient)
	unsigned long                                      bDisabled : 1;                                    		// 0x0294(0x0004) (CPF_Transient)
	class UFXActorEvent_X*                             ThrottleState;                                    		// 0x0298(0x0004)
	class UFXActorEvent_X*                             SuperSonicState;                                  		// 0x029C(0x0004)
	class UFXActorEvent_X*                             InAirState;                                       		// 0x02A0(0x0004)
	class UFXActorEvent_X*                             BoostState;                                       		// 0x02A4(0x0004)
	class UFXActorEvent_X*                             BoostPreviewState;                                		// 0x02A8(0x0004)
	class UFXActorEvent_X*                             BoostFlyState;                                    		// 0x02AC(0x0004)
	TArray<class UFXActorEvent_X*>                     TeamStates;                                       		// 0x02B0(0x000C) (CPF_NeedCtorLink)
	class UPhysicalMaterial*                           ContactPhysMat;                                   		// 0x02BC(0x0004) (CPF_Transient)
	class UPhysicalMaterialProperty_TA*                ContactPhysMatProp;                               		// 0x02C0(0x0004) (CPF_Transient)
	TArray<struct FWheelFX>                            WheelEffects;                                     		// 0x02C4(0x000C) (CPF_Transient, CPF_Component, CPF_NeedCtorLink)
	class UParticleSystem*                             WheelEffectsParticle;                             		// 0x02D0(0x0004) (CPF_Transient)
	class UCarMeshComponent_TA*                        CarMesh;                                          		// 0x02D4(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class UMaxActorsGroup_TA*                          MaxActorsGroup;                                   		// 0x02D8(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	float                                              BoostGlow;                                        		// 0x02DC(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventWheelEffectChanged__Delegate;              		// 0x02E0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x02E0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_Car_TA");
		return ptr;
	}


	void PlayWheelLandCameraShake(float ImpactSpeed);
	void SetWheelEffectActive(int WheelIdx, bool bEffectActive);
	void SetContactPhysMat(class UPhysicalMaterial* NewPhysMat);
	void UpdateContactPhysMat();
	void PlaySpawnFX(class ACar_TA* Car);
	void SetBraking(bool bNewBraking);
	void TickFX(float DeltaTime);
	void HandleTeamChanged(class ACar_TA* InCar);
	void HandleSuperSonicChanged(class ACar_TA* InCar);
	void HandleVehicleSetup(class ACar_TA* Car);
	void StopWheelEffects();
	void StopAllEffects();
	void HandleDisabled();
	void HandleEnabled();
	void Destroyed();
	void PostBeginPlay();
	void EventWheelEffectChanged(int WheelIdx);
};


// Class TAGame.GameData_TA
// 0x0110 (0x014C - 0x003C)
class UGameData_TA : public UObject
{
public:
	class UProductDatabase_TA*                         Products;                                         		// 0x003C(0x0004) (CPF_Edit, CPF_Const)
	class UXPManager_TA*                               XPManager;                                        		// 0x0040(0x0004) (CPF_Edit)
	int                                                MaxTeamSize;                                      		// 0x0044(0x0004) (CPF_Edit, CPF_Const)
	TArray<class UProductSlot_TA*>                     ProductSlots;                                     		// 0x0048(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)
	class UProductSlot_TA*                             BodySlot;                                         		// 0x0054(0x0004)
	class UProductSlot_TA*                             SkinSlot;                                         		// 0x0058(0x0004)
	class UProductSlot_TA*                             WheelSlot;                                        		// 0x005C(0x0004)
	class UProductSlot_TA*                             BoostSlot;                                        		// 0x0060(0x0004)
	class UProductSlot_TA*                             AntennaSlot;                                      		// 0x0064(0x0004)
	class UProductSlot_TA*                             HatSlot;                                          		// 0x0068(0x0004)
	class UProductSlot_TA*                             FrontSlot;                                        		// 0x006C(0x0004)
	class UProductSlot_TA*                             PaintFinishSlot;                                  		// 0x0070(0x0004)
	class UProductSlot_TA*                             BotSlot;                                          		// 0x0074(0x0004)
	class UProductSlot_TA*                             LogoSlot;                                         		// 0x0078(0x0004)
	class UProductSlot_TA*                             UnderGlowSlot;                                    		// 0x007C(0x0004)
	class UProductSlot_TA*                             PremiumInventorySlot;                             		// 0x0080(0x0004)
	class UProductSlot_TA*                             CustomFinishSlot;                                 		// 0x0084(0x0004)
	TArray<struct FString>                             TeamArchetypePaths;                               		// 0x0088(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)
	TArray<class ATeam_TA*>                            TeamArchetypes;                                   		// 0x0094(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     GameModeListPath;                                 		// 0x00A0(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)
	class UGameModeList_TA*                            GameModeList;                                     		// 0x00AC(0x0004) (CPF_Const, CPF_Transient)
	struct FLoadoutData                                DefaultLoadouts[0x2];                             		// 0x00B0(0x0034) (CPF_Const, CPF_NeedCtorLink)
	struct FClientLoadoutData                          DefaultClientLoadout;                             		// 0x0118(0x000C) (CPF_Const, CPF_NeedCtorLink)
	class UCarColorSet_TA*                             CustomColorSet;                                   		// 0x0124(0x0004)
	class UCarColorSet_TA*                             ClubColorSet;                                     		// 0x0128(0x0004)
	class UMapList_TA*                                 MapList;                                          		// 0x012C(0x0004) (CPF_Edit)
	class UGlobalLookupTexture_TA*                     GlobalLookupTexture;                              		// 0x0130(0x0004)
	TArray<class UClass*>                              OnlineProductAttributes;                          		// 0x0134(0x000C) (CPF_Const, CPF_NeedCtorLink)
	class USkinOverrideTable_TA*                       SkinOverrideTable;                                		// 0x0140(0x0004) (CPF_Edit, CPF_Const)
	class UPaintDatabase_TA*                           PaintDB;                                          		// 0x0144(0x0004) (CPF_Edit, CPF_Const)
	class UCertifiedStatDatabase_TA*                   CertifiedStatDB;                                  		// 0x0148(0x0004) (CPF_Edit, CPF_Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameData_TA");
		return ptr;
	}


	bool STATIC_CanProductBeInSlot(class UProduct_TA* Product, class UProductSlot_TA* Slot);
	class UProductDatabase_TA* STATIC_GetProductDB(TEnumAsByte<enum class EEdition> Edition);
	void STATIC_SetDefaultTeamColors();
	void STATIC_SetGlobalTeamColors(TArray<struct FLinearColor> Colors);
};


// Class TAGame.GameEngine_TA
// 0x0000 (0x07DC - 0x07DC)
class UGameEngine_TA : public UGameEngine_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEngine_TA");
		return ptr;
	}


	struct FString STATIC_GetBuildInfo(const struct FString& Key);
	float STATIC_GetAbsoluteTime();
};


// Class TAGame.GameEvent_TA
// 0x02AC (0x0498 - 0x01EC)
class AGameEvent_TA : public AActor
{
public:
	class UMatchType_TA*                               MatchType;                                        		// 0x01EC(0x0004) (CPF_Edit)
	class UClass*                                      MatchTypeClass;                                   		// 0x01F0(0x0004) (CPF_Edit, CPF_Net)
	struct FName                                       EventType;                                        		// 0x01F4(0x0008) (CPF_Edit, CPF_Const)
	struct FName                                       MatchTypeName;                                    		// 0x01FC(0x0008) (CPF_Edit, CPF_Const)
	unsigned char                                      GameMode;                                         		// 0x0204(0x0001) (CPF_Const, CPF_Transient)
	unsigned char                                      ReplicatedStateIndex;                             		// 0x0205(0x0001) (CPF_Const, CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData00[0x2];                               		// 0x0206(0x0002) MISSED OFFSET
	class ACar_TA*                                     CarArchetype;                                     		// 0x0208(0x0004) (CPF_Edit)
	int                                                CountdownTime;                                    		// 0x020C(0x0004) (CPF_Edit)
	int                                                FinishTime;                                       		// 0x0210(0x0004) (CPF_Edit)
	unsigned long                                      bMultiplayer : 1;                                 		// 0x0214(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bFillWithAI : 1;                                  		// 0x0214(0x0004) (CPF_Edit)
	unsigned long                                      bAllowReadyUp : 1;                                		// 0x0214(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bRestartingMatch : 1;                             		// 0x0214(0x0004)
	unsigned long                                      bHasLeaveMatchPenalty : 1;                        		// 0x0214(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bCanVoteToForfeit : 1;                            		// 0x0214(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bDisableAimAssist : 1;                            		// 0x0214(0x0004) (CPF_Const)
	int                                                MinPlayers;                                       		// 0x0218(0x0004) (CPF_Edit)
	int                                                MaxPlayers;                                       		// 0x021C(0x0004) (CPF_Edit)
	TArray<class AActor*>                              SpawnPoints;                                      		// 0x0220(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class AAIManager_TA*                               AIManagerArchetype;                               		// 0x022C(0x0004) (CPF_Edit)
	class AAIManager_TA*                               AIManager;                                        		// 0x0230(0x0004) (CPF_Transient)
	class AAIController_TA*                            BotArchetype;                                     		// 0x0234(0x0004) (CPF_Edit)
	float                                              BotSkill;                                         		// 0x0238(0x0004) (CPF_Net, CPF_Transient)
	int                                                RespawnTime;                                      		// 0x023C(0x0004) (CPF_Edit)
	TArray<class UMutator_TA*>                         DefaultMutators;                                  		// 0x0240(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<class UMutator_TA*>                         Mutators;                                         		// 0x024C(0x000C) (CPF_NeedCtorLink)
	float                                              MatchTimeDilation;                                		// 0x0258(0x0004) (CPF_Edit)
	class AHUD*                                        HUDArchetype;                                     		// 0x025C(0x0004) (CPF_Edit)
	TArray<struct FPlayerRespawnTime>                  PlayersAwaitingRespawn;                           		// 0x0260(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class APlayerController_TA*                        Activator;                                        		// 0x026C(0x0004) (CPF_Transient)
	class ACar_TA*                                     ActivatorCar;                                     		// 0x0270(0x0004) (CPF_Net, CPF_Transient)
	TArray<class AController*>                         Players;                                          		// 0x0274(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class APRI_TA*>                             PRIs;                                             		// 0x0280(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class ACar_TA*>                             Cars;                                             		// 0x028C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class APlayerController_TA*>                LocalPlayers;                                     		// 0x0298(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	int                                                StartPointIndex;                                  		// 0x02A4(0x0004) (CPF_Transient)
	TArray<struct FName>                               DeprecatedIndexToState;                           		// 0x02A8(0x000C) (CPF_Const, CPF_NeedCtorLink)
	struct FName                                       ReplicatedStateName;                              		// 0x02B4(0x0008) (CPF_Net, CPF_Transient)
	class UMessage_TA*                                 GameFullMessage;                                  		// 0x02BC(0x0004)
	class UMessage_TA*                                 OtherActiveMessage;                               		// 0x02C0(0x0004)
	class UMessage_TA*                                 NotEnoughPlayersMessage;                          		// 0x02C4(0x0004)
	class UMessage_TA*                                 TooManyPlayersMessage;                            		// 0x02C8(0x0004)
	class UMessage_TA*                                 NotPartyLeaderMessage;                            		// 0x02CC(0x0004)
	TArray<class UMessage_TA*>                         CountdownMessages;                                		// 0x02D0(0x000C) (CPF_NeedCtorLink)
	class UMessage_TA*                                 GoMessage;                                        		// 0x02DC(0x0004)
	TArray<class UMessage_TA*>                         ReplacingBotCountdownMessages;                    		// 0x02E0(0x000C) (CPF_NeedCtorLink)
	class UMessage_TA*                                 ReplacingBotGoMessage;                            		// 0x02EC(0x0004)
	TArray<struct FPlayerChatMessage>                  ChatHistory;                                      		// 0x02F0(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	int                                                GameStateTimeRemaining;                           		// 0x02FC(0x0004) (CPF_Transient)
	int                                                ReplicatedGameStateTimeRemaining;                 		// 0x0300(0x0004) (CPF_Net, CPF_Transient)
	float                                              IdleKickTime;                                     		// 0x0304(0x0004) (CPF_Edit)
	float                                              IdleKickWarningTime;                              		// 0x0308(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           BotSkillByPlayerSkillCurve;                       		// 0x030C(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FUniqueNetId>                        BannedPlayers;                                    		// 0x031C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class APRI_TA*                                     GameOwner;                                        		// 0x0328(0x0004) (CPF_Net, CPF_Transient)
	struct FCustomMatchSettings                        MatchSettings;                                    		// 0x032C(0x0060) (CPF_Net, CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     RichPresenceString;                               		// 0x038C(0x000C) (CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventGameStateChanged__Delegate;                		// 0x0398(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0398(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameStateTimeUpdated__Delegate;            		// 0x03A8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x03A8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventFinished__Delegate;                        		// 0x03B8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x03B8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDestroyed__Delegate;                       		// 0x03C8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x03C8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPlayerRestarted__Delegate;                 		// 0x03D8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData05[0x4];                               		// 0x03D8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPlayerAdded__Delegate;                     		// 0x03E8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData06[0x4];                               		// 0x03E8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPlayerRemoved__Delegate;                   		// 0x03F8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData07[0x4];                               		// 0x03F8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCarAdded__Delegate;                        		// 0x0408(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData08[0x4];                               		// 0x0408(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCarRemoved__Delegate;                      		// 0x0418(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData09[0x4];                               		// 0x0418(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPenaltyChanged__Delegate;                  		// 0x0428(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData10[0x4];                               		// 0x0428(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCanVoteForfeitChanged__Delegate;           		// 0x0438(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData11[0x4];                               		// 0x0438(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCountDownTimeUpdated__Delegate;            		// 0x0448(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData12[0x4];                               		// 0x0448(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameOwnerUpdated__Delegate;                		// 0x0458(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData13[0x4];                               		// 0x0458(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventMatchTypeSet__Delegate;                    		// 0x0468(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData14[0x4];                               		// 0x0468(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLocalPlayersChanged__Delegate;             		// 0x0478(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData15[0x4];                               		// 0x0478(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventMatchSettingsChanged__Delegate;            		// 0x0488(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData16[0x4];                               		// 0x0488(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	bool ShouldShowBallIndicator();
	class UGameMode_TA* GetGameMode();
	void HandlePlayerBanStatusResponse(class URPC_GetBanStatus_TA* RPC);
	class APlayerController_TA* FindPCForUniqueID(const struct FUniqueNetId& PlayerID);
	void CheckForBannedPlayers();
	bool AllowSplitScreenPlayer();
	void AddPlayerChatMessage(const struct FUniqueNetId& PlayerID, TEnumAsByte<enum class EChatChannel> ChatChannel, class ATeamInfo* Team, const struct FString& Message);
	void ConditionalStartSpectatorMatch();
	struct FString LocalizePresence(const struct FString& GameDataString);
	void GetPresenceStatus(struct FString* Out_PresenceString, struct FString* Out_GameDataString);
	struct FName GetMatchTypeName();
	bool IsPlayingOffline();
	bool IsPlayingPrivate();
	bool IsPlayingPublic();
	bool IsOnlineMultiplayer();
	void CreateMatchType(const struct FString& Options);
	bool AllPlayersSelectedTeam();
	bool CanQueSaveReplay();
	void ForceMatchStart();
	void ConditionalStartMatch();
	bool DisableStatXP();
	bool GiveExtraXP();
	void GenerateItemDrops();
	void SaveLocalPlayerStats();
	bool CanUseBallCam();
	bool HandleNextGame();
	struct FName GetDesiredSoundGameMode();
	void UpdateSoundGameMode();
	void UpdateSoundState();
	struct FName GetDesiredSoundState();
	void SetMaxPlayers(int InMaxPlayers);
	void SetRestartingMatch(bool bRestart);
	TScriptInterface<class UIOnlineGameHost_X> STATIC_GetOnlineGameHost();
	class UOnlineGameLanServer_X* STATIC_GetOnlineGameLanServer();
	class UOnlineGameDedicatedServer_TA* GetOnlineGameDedicatedServer();
	bool ShouldBeFullScreen();
	bool IsFinished();
	void OnAllPlayersReady();
	void CheckPlayersReady();
	void SetAllowReadyUp(bool bAllow, bool bReadySpectators);
	bool IsPlayerIdle(class APlayerController* PC, float Time);
	bool IsConnectionIdle(class UNetConnection* NetConnection, float Time);
	void KickSplitscreenIdlers();
	void KickIdlers();
	void StopIdleKickTimer();
	void StartIdleKickTimer(float OffsetTime);
	void BroadcastCountdownMessage(int Seconds);
	void BroadcastGoMessage();
	bool AllowShutdown();
	bool AllowScoreboard();
	void HandleCarAddCarComponent(class UObject* O);
	float GetRealDeltaTime(float ElapsedTime);
	void SetTimeDilation(float NewTimeDilation);
	void ClearRespawnList();
	void RemovePlayerFromRespawnList(class AController* C);
	int GetRespawnTime();
	void AddControllerToRespawnList(class AController* InController);
	void AddPlayerToRespawnList(class APawn* Car);
	void HandleCarDemolished(class ACar_TA* Car, const struct FDemolishData& Data);
	void HandleCarDestroyed(class APawn_X* Car);
	void RemoveCar(class ACar_TA* Car);
	void AddCar(class ACar_TA* Car);
	void TickRespawnTime(float DeltaTime);
	void Tick(float DeltaTime);
	void SetBotSkill(float NewSkill);
	class AAIController_TA* SpawnBot();
	class UProductAsset_Bot_TA* ChooseBotAsset(class AAIController_TA* Bot);
	bool MoveToGround(class AActor* Mover, float HeightCheck);
	void SetAllDriving(bool bDriving);
	void Destroyed();
	void OnFinished();
	void StartEvent();
	void StartCountDown();
	void OnGameStateTimeLapsed();
	void OnGameStateTimeUpdated();
	void UpdateGameStateTime();
	void SetGameStateTimeRemaining(int StateTime, bool bFromReplication);
	void SetGameStateTime(int StateTime);
	void GotoGameState(const struct FName& StateName);
	void OnPlayerRestarted(class ACar_TA* PlayerCar);
	void TeleportCar(class ACar_TA* PlayerCar);
	void OnCarSpawned(class ACar_TA* NewCar);
	class ACar_TA* SpawnCar(class AController* NewPlayer, const struct FVector& SpawnLoc, const struct FRotator& SpawnRot);
	bool SpotIsEncroached(const struct FVector& Spot);
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
	void RandomizeSpawnPoints();
	bool RestartPlayer(class AController* NewPlayer);
	bool PlayerCanRestart(class AController* aPlayer);
	void RestartPlayers();
	void RemoveLocalPlayer(class APlayerController_TA* Player);
	void AddLocalPlayer(class APlayerController_TA* Player);
	void RemovePRI(class APRI_TA* PRI);
	void AddPRI(class APRI_TA* PRI);
	void BanPlayerID(const struct FUniqueNetId& PlayerID);
	void BanConnection(class UNetConnection* Connection);
	void OnPlayerRemoved(class AController* OldPlayer);
	void RemovePlayer(class AController* Player);
	int GetMaxHumans();
	int GetNumHumans();
	void AddPlayers(TArray<class AController*> PlayersToAdd);
	bool ReplacePlayer(class APRI_TA* NewPlayer, struct FVector* CarLocation, struct FRotator* CarRotation, struct FVector* CarVelocity);
	bool ReplaceBot(class APRI_TA* PRI, class APRI_TA* Replace, struct FVector* CarLocation, struct FRotator* CarRotation, struct FVector* CarVelocity);
	bool FindBotReplacement(class APRI_TA* PRI);
	void UpdateBotCount();
	void TimerUpdateBotCount();
	void HandleSelectedLoadout(class APRI_TA* PlayerPRI);
	void OnPlayerAdded(class AController* NewPlayer);
	bool AddPlayer(class AController* Player, class UMessage_TA** ErrorMsg);
	bool IsAIDebugger(class AController* C);
	void OnInit();
	void HandleAverageSkillChanged(class UOnlineGameDedicatedServer_X* Server);
	void InitBotSkill();
	void MutateObject(class UObject* O);
	void InitMutators();
	void Init(class APlayerController_TA* InActivator);
	void InitGame(const struct FString& Options);
	bool PlayerCanStartEvent(class APlayerController_TA* InActivator, class UMessage_TA** ErrorMsg);
	class UOnlineGame_Base_X* GetOnlineGame();
	void NotifyKismetGameStateChanged();
	void OnGameStateChanged();
	void OnCanVoteForfeitChanged();
	void SetCanVoteToForfeit(bool bCanVote);
	void UpdateCanVoteToForfeit();
	void OnPenaltyChanged();
	void SetHasLeaveMatchPenalty(bool bEnabled);
	class UGameSettingPlaylist_X* GetPlaylist();
	bool ShouldHaveLeaveMatchPenalty();
	void ConditionalSetLeaveMatchPenalty();
	class UGameMetrics_TA* GetMetrics();
	void HandlePrivateMatchSettingsChanged(class UOnlineGameDedicatedServer_X* Server, const struct FCustomMatchSettings& NewSettings);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
	void EventMatchSettingsChanged(class AGameEvent_TA* GameEvent, const struct FCustomMatchSettings& NewMatchSettings);
	void EventLocalPlayersChanged(class AGameEvent_TA* GameEvent);
	void EventMatchTypeSet(class AGameEvent_TA* GameEvent);
	void EventGameOwnerUpdated(class AGameEvent_TA* GameEvent, class APRI_TA* NewGameOwner);
	void EventCountDownTimeUpdated(class AGameEvent_TA* GameEvent, int Seconds);
	void EventCanVoteForfeitChanged(class AGameEvent_TA* GameEvent);
	void EventPenaltyChanged(class AGameEvent_TA* GameEvent);
	void EventCarRemoved(class AGameEvent_TA* GameEvent, class ACar_TA* Car);
	void EventCarAdded(class AGameEvent_TA* GameEvent, class ACar_TA* Car);
	void EventPlayerRemoved(class AGameEvent_TA* GameEvent, class APRI_TA* PRI);
	void EventPlayerAdded(class AGameEvent_TA* GameEvent, class APRI_TA* PRI);
	void EventPlayerRestarted(class AGameEvent_TA* GameEvent, class ACar_TA* PlayerCar);
	void EventDestroyed(class AGameEvent_TA* GameEvent);
	void EventFinished(class AGameEvent_TA* GameEvent);
	void EventGameStateTimeUpdated(class AGameEvent_TA* GameEvent);
	void EventGameStateChanged(class AGameEvent_TA* GameEvent);
};


// Class TAGame.GameMode_TA
// 0x0024 (0x0060 - 0x003C)
class UGameMode_TA : public UObject
{
public:
	class AGameInfo*                                   GameArchetype;                                    		// 0x003C(0x0004) (CPF_Edit)
	class UMapSet_TA*                                  MapSet;                                           		// 0x0040(0x0004) (CPF_Edit)
	TArray<struct FName>                               DisallowedMutatorCategories;                      		// 0x0044(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UClass*                                      GameInfoClass;                                    		// 0x0050(0x0004)
	struct FString                                     GameArchetypePath;                                		// 0x0054(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameMode_TA");
		return ptr;
	}

};


// Class TAGame.GameModeList_TA
// 0x000C (0x0048 - 0x003C)
class UGameModeList_TA : public UObject
{
public:
	TArray<class UGameMode_TA*>                        GameModes;                                        		// 0x003C(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameModeList_TA");
		return ptr;
	}


	class UGameMode_TA* GetGameModeForClass(class UClass* GameInfoClass);
	class UMapSet_TA* GetMapSet(int GameModeIndex);
	struct FString GetGameURL(int GameModeIndex);
};


// Class TAGame.GameShare_TA
// 0x00A4 (0x00E0 - 0x003C)
class UGameShare_TA : public UObject
{
public:
	class UObjectListComponent_X*                      BallCamTargetList;                                		// 0x003C(0x0004) (CPF_Edit, CPF_Const, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UObjectListComponent_X*                      GameEventList;                                    		// 0x0040(0x0004) (CPF_Edit, CPF_Const, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UObjectListComponent_X*                      VehiclePickupList;                                		// 0x0044(0x0004) (CPF_Edit, CPF_Const, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UObjectListComponent_X*                      LocalFXList;                                      		// 0x0048(0x0004) (CPF_Edit, CPF_Const, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UMaxActorsGroup_TA*                          CarEngineAudioGroup;                              		// 0x004C(0x0004) (CPF_Edit, CPF_Const, CPF_ExportObject, CPF_Component, CPF_EditInline)
	TArray<class UMaterialInstance*>                   BallPositionMaterialInstances;                    		// 0x0050(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class AVehiclePickup_Boost_TA*>             ActiveBoostPills;                                 		// 0x005C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	unsigned long                                      bHideWorldUI : 1;                                 		// 0x0068(0x0004) (CPF_Transient)
	TArray<class ACar_TA*>                             Cars;                                             		// 0x006C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class ACarPreviewActor_TA*>                 CarPreviewActors;                                 		// 0x0078(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UAkSoundSource*>                      SoundSourcePool;                                  		// 0x0084(0x000C) (CPF_Const, CPF_ExportObject, CPF_Transient, CPF_Component, CPF_NeedCtorLink, CPF_EditInline)
	struct FScriptDelegate                             __EventHideWorldUIChanged__Delegate;              		// 0x0090(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0090(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCarAdded__Delegate;                        		// 0x00A0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x00A0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCarRemoved__Delegate;                      		// 0x00B0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x00B0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCarPreviewActorAdded__Delegate;            		// 0x00C0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x00C0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCarPreviewActorRemoved__Delegate;          		// 0x00D0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x00D0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameShare_TA");
		return ptr;
	}


	void RemoveCarPreviewActor(class ACarPreviewActor_TA* PreviewCar);
	void AddCarPreviewActor(class ACarPreviewActor_TA* PreviewCar);
	void RemoveCar(class ACar_TA* Car);
	void AddCar(class ACar_TA* Car);
	void SetWorldUIHidden(bool bHidden);
	void NotifyHideWorldUIChanged(const struct FScriptDelegate& Callback);
	void EventCarPreviewActorRemoved(class UGameShare_TA* GameShare, class ACarPreviewActor_TA* PreviewCar);
	void EventCarPreviewActorAdded(class UGameShare_TA* GameShare, class ACarPreviewActor_TA* PreviewCar);
	void EventCarRemoved(class UGameShare_TA* GameShare, class ACar_TA* Car);
	void EventCarAdded(class UGameShare_TA* GameShare, class ACar_TA* Car);
	void EventHideWorldUIChanged(class UGameShare_TA* GameShare);
	class UAkSoundSource* GetPooledSoundSource();
};


// Class TAGame.GFxEngine_TA
// 0x0014 (0x00FC - 0x00E8)
class UGFxEngine_TA : public UGFxEngine_X
{
public:
	TArray<struct FSoundStateItem>                     UISoundStates;                                    		// 0x00E8(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	unsigned long                                      bViewingOnlineScene : 1;                          		// 0x00F4(0x0004) (CPF_Transient)
	class ULoadingScreen_TA*                           LoadingScreen;                                    		// 0x00F8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxEngine_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	int UISoundStatePrioritySort(const struct FSoundStateItem& A, const struct FSoundStateItem& B);
	void UpdateUISoundState();
	void OnShellDestroyed(class UGFxShell_X* Shell);
	void OnGameSessionEnded();
	TEnumAsByte<enum class ESoundStatePriority> GetSoundStatePriority(const struct FName& StateName);
	void ClearUISoundState(class UGFxShell_X* Shell);
	void PopUISoundState(const struct FName& StateName, class UGFxShell_X* Shell);
	void PushUISoundState(const struct FName& StateName, class UGFxShell_X* Shell);
	void Init();
};


// Class TAGame.GlobalLookupTexture_TA
// 0x0068 (0x01A8 - 0x0140)
class UGlobalLookupTexture_TA : public UScriptedTexture
{
public:
	struct FIntVector                                  EnvironmentAPosition;                             		// 0x0140(0x0008) (CPF_Edit, CPF_Const)
	struct FIntVector                                  EnvironmentBPosition;                             		// 0x0148(0x0008) (CPF_Edit, CPF_Const)
	struct FIntVector                                  SunlightPosition;                                 		// 0x0150(0x0008) (CPF_Edit, CPF_Const)
	struct FIntVector                                  WorldLightPosition;                               		// 0x0158(0x0008) (CPF_Edit, CPF_Const)
	int                                                TeamsPositionX;                                   		// 0x0160(0x0004) (CPF_Edit, CPF_Const)
	int                                                PlayersPositionX;                                 		// 0x0164(0x0004) (CPF_Edit, CPF_Const)
	TArray<struct FLinearColor>                        TopTeamColors;                                    		// 0x0168(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FLinearColor>                        BottomTeamColors;                                 		// 0x0174(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UObject*>                             Players;                                          		// 0x0180(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FLinearColor>                        TopPlayerColors;                                  		// 0x018C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FLinearColor>                        BottomPlayerColors;                               		// 0x0198(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	unsigned long                                      bDebug : 1;                                       		// 0x01A4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GlobalLookupTexture_TA");
		return ptr;
	}


	void OnRender(class UCanvas* Canvas);
	struct FLinearColor STATIC_GetFullBrightColor(const struct FLinearColor& InColor, float ValueScale);
	void Update();
	void SetTeamColors(int Team, const struct FLinearColor& Primary, const struct FLinearColor& Secondary);
	void RemovePlayer(class UObject* Player);
	float AddPlayer(class UObject* Player, const struct FLinearColor& Primary, const struct FLinearColor& Secondary);
};


// Class TAGame.Goal_TA
// 0x00BC (0x0128 - 0x006C)
class UGoal_TA : public UActorComponent_X
{
public:
	class AActor*                                      GoalOrientation;                                  		// 0x006C(0x0004) (CPF_Edit, CPF_Const)
	TArray<class AActor*>                              OverrideGoalIndicatorOrientations;                		// 0x0070(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	unsigned char                                      TeamNum;                                          		// 0x007C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x007D(0x0003) MISSED OFFSET
	class AFXActor_X*                                  ScoreFX;                                          		// 0x0080(0x0004) (CPF_Edit)
	struct FString                                     GoalIndicatorArchetype;                           		// 0x0084(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)
	unsigned long                                      bNoGoalIndicator : 1;                             		// 0x0090(0x0004) (CPF_Edit)
	unsigned long                                      bOnlyGoalsFromDirection : 1;                      		// 0x0090(0x0004) (CPF_Edit)
	unsigned long                                      bShowFocusExtent : 1;                             		// 0x0090(0x0004) (CPF_Edit)
	class AActor*                                      GoalDirection;                                    		// 0x0094(0x0004) (CPF_Edit, CPF_Const)
	int                                                PointsToAward;                                    		// 0x0098(0x0004) (CPF_Edit)
	struct FVector                                     AutoCamFocusExtent;                               		// 0x009C(0x000C) (CPF_Edit)
	struct FVector                                     GoalFocusLocationOffset;                          		// 0x00A8(0x000C) (CPF_Edit)
	float                                              MaxGoalScorerAttachRadius;                        		// 0x00B4(0x0004) (CPF_Edit)
	struct FVector                                     GoalScoredDotDirection;                           		// 0x00B8(0x000C) (CPF_Edit)
	float                                              MinAttachGoalToScorerDot;                         		// 0x00C4(0x0004) (CPF_Edit)
	struct FVector                                     Location;                                         		// 0x00C8(0x000C) (CPF_Transient)
	struct FVector                                     Direction;                                        		// 0x00D4(0x000C) (CPF_Transient)
	struct FRotator                                    Rotation;                                         		// 0x00E0(0x000C) (CPF_Transient)
	struct FVector                                     LocalMin;                                         		// 0x00EC(0x000C) (CPF_Transient)
	struct FVector                                     LocalMax;                                         		// 0x00F8(0x000C) (CPF_Transient)
	struct FVector                                     LocalExtent;                                      		// 0x0104(0x000C) (CPF_Transient)
	struct FVector                                     WorldCenter;                                      		// 0x0110(0x000C) (CPF_Transient)
	struct FVector                                     WorldExtent;                                      		// 0x011C(0x000C) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Goal_TA");
		return ptr;
	}


	struct FVector GetGoalFocusExtentCenter();
	void BeginPlay();
};


// Class TAGame.GroundStaticMeshActor_TA
// 0x0004 (0x0208 - 0x0204)
class AGroundStaticMeshActor_TA : public AStaticMeshActor
{
public:
	float                                              HideLocationOffset;                               		// 0x0204(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GroundStaticMeshActor_TA");
		return ptr;
	}

};


// Class TAGame.IdenticalProductCache_TA
// 0x003C (0x0084 - 0x0048)
class UIdenticalProductCache_TA : public UComponent
{
public:
	struct FMap_Mirror                                 Products;                                         		// 0x0048(0x003C) (CPF_Const, CPF_Native, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IdenticalProductCache_TA");
		return ptr;
	}


	TArray<class UOnlineProduct_TA*> GetUniqueProducts();
	int GetQuantity(class UOnlineProduct_TA* Product);
	void Clear();
	void Remove(class UOnlineProduct_TA* OnlineProduct);
	void Add(class UOnlineProduct_TA* OnlineProduct);
};


// Class TAGame.ImpactEffectsComponent_TA
// 0x00E8 (0x0154 - 0x006C)
class UImpactEffectsComponent_TA : public UActorComponent_X
{
public:
	int                                                SoundPriority;                                    		// 0x006C(0x0004) (CPF_Edit)
	class UEffectsMap_X*                               ImpactEffectsMap;                                 		// 0x0070(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 AkImpactSound;                                    		// 0x0074(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 AkSlideSound;                                     		// 0x0078(0x0004) (CPF_Edit)
	float                                              AkSlideSoundDelay;                                		// 0x007C(0x0004) (CPF_Edit)
	struct FName                                       AkImpactTypeKey;                                  		// 0x0080(0x0008) (CPF_Edit)
	struct FName                                       AkImpactIntensityKey;                             		// 0x0088(0x0008) (CPF_Edit)
	float                                              MinImpactMomentum;                                		// 0x0090(0x0004) (CPF_Edit)
	float                                              MinImpactDelay;                                   		// 0x0094(0x0004) (CPF_Edit)
	class UCameraShake*                                ImpactCameraShake;                                		// 0x0098(0x0004) (CPF_Edit)
	class UForceFeedbackWaveform*                      ImpactForceFeedback;                              		// 0x009C(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           ShakeScaleCurve;                                  		// 0x00A0(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	float                                              LastWorldImpactTime;                              		// 0x00B0(0x0004) (CPF_Transient)
	float                                              LastActorImpactTime;                              		// 0x00B4(0x0004) (CPF_Transient)
	float                                              SlideTime;                                        		// 0x00B8(0x0004) (CPF_Transient)
	class UParticleSystemComponent*                    SlideParticleComponent;                           		// 0x00BC(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class UAkPlaySoundComponent*                       SlideAudioComponent;                              		// 0x00C0(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class UShakeComponent_X*                           ShakeComponent;                                   		// 0x00C4(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	struct FCollisionEffectData                        LastCollisionEffectData;                          		// 0x00C8(0x0044) (CPF_Transient)
	struct FCollisionEffectData                        SlideCollisionEffectData;                         		// 0x010C(0x0044) (CPF_Transient)
	class UPhysicalMaterialProperty_TA*                SlidePhysMatProp;                                 		// 0x0150(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ImpactEffectsComponent_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	class UParticleSystemComponent* PlayPooledParticle(class UParticleSystem* Template, const struct FVector& Location, const struct FRotator& Rotation, class AActor* AttachTo);
	void HandleCollision(struct FAccumulatedRigidBodyCollision* Collision);
};


// Class TAGame.InputRecorder_TA
// 0x0034 (0x0220 - 0x01EC)
class AInputRecorder_TA : public AActor
{
public:
	struct FPointer                                    VfTable_IITickNotify_TA;                          		// 0x01EC(0x0004) (CPF_Const, CPF_Native, CPF_NoExport)
	float                                              MaxRecordTime;                                    		// 0x01F0(0x0004) (CPF_Edit)
	unsigned long                                      bRecording : 1;                                   		// 0x01F4(0x0004) (CPF_Transient)
	unsigned long                                      bPlaying : 1;                                     		// 0x01F4(0x0004) (CPF_Transient)
	TArray<struct FReplicatedRBState>                  CarStates;                                        		// 0x01F8(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FReplicatedRBState>                  BallStates;                                       		// 0x0204(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FVehicleInputs>                      Inputs;                                           		// 0x0210(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	int                                                InputIndex;                                       		// 0x021C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.InputRecorder_TA");
		return ptr;
	}


	void Finished();
	struct FReplicatedRBState GetBallState();
	struct FReplicatedRBState GetCarState();
	class ABall_TA* GetBall();
	class ACar_TA* GetCar();
	void StartPlayback();
	void StopRecord();
	void HandleDestroyed(class APawn_X* P);
	void StartRecord();
};


// Class TAGame.InterpTrackAnimControlWithSensibleDefault_TA
// 0x0000 (0x00B8 - 0x00B8)
class UInterpTrackAnimControlWithSensibleDefault_TA : public UInterpTrackAnimControl
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.InterpTrackAnimControlWithSensibleDefault_TA");
		return ptr;
	}

};


// Class TAGame.InterpTrackSkelControlRotation_TA
// 0x0009 (0x009D - 0x0094)
class UInterpTrackSkelControlRotation_TA : public UInterpTrackFloatBase
{
public:
	struct FName                                       SkelControlName;                                  		// 0x0094(0x0008) (CPF_Edit)
	TEnumAsByte<enum class ERotationAxis>              RotAxis;                                          		// 0x009C(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.InterpTrackSkelControlRotation_TA");
		return ptr;
	}

};


// Class TAGame.ITickNotify_TA
// 0x0000 (0x003C - 0x003C)
class UITickNotify_TA : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ITickNotify_TA");
		return ptr;
	}

};


// Class TAGame.LightCurveType_TA
// 0x0004 (0x0040 - 0x003C)
class ULightCurveType_TA : public UObject
{
public:
	int                                                ParameterValue;                                   		// 0x003C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LightCurveType_TA");
		return ptr;
	}

};


// Class TAGame.LocalPlayer_TA
// 0x0040 (0x0420 - 0x03E0)
class ULocalPlayer_TA : public ULocalPlayer_X
{
public:
	class USaveGameManager_TA*                         SaveGameManager;                                  		// 0x03E0(0x0004)
	class UProfile_TA*                                 Profile;                                          		// 0x03E4(0x0004) (CPF_Transient)
	TEnumAsByte<enum class ESplitScreenPosition>       SplitScreenPosition;                              		// 0x03E8(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData00[0x3];                               		// 0x03E9(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                               		// 0x03E9(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.LocalPlayer_TA.SuspendingEventToken
	unsigned char                                      UnknownData02[0x8];                               		// 0x03F4(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.LocalPlayer_TA.SignoutStartedEventToken
	unsigned long                                      bOpenedStartMenu : 1;                             		// 0x03FC(0x0004) (CPF_Transient)
	unsigned long                                      bPendingBroadcastLoadout : 1;                     		// 0x03FC(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventProfileSet__Delegate;                      		// 0x0400(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x0400(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSplitScreenPositionChanged__Delegate;      		// 0x0410(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x0410(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LocalPlayer_TA");
		return ptr;
	}


	void HandleNewEula(class UOnlineLegalText_X* Eula);
	void CheckForRankedReconnect();
	void SetOpenedStartMenu(bool bOpen);
	void HandleOnlineLoginChanged(class UOnlinePlayerAuthentication_X* Auth);
	void HandleGameDataSelected(int PlaylistId, int MutatorIndex);
	void HandleGameStateChanged(class AGameEvent_TA* GameEvent);
	void ClearLoginDelegates();
	void OnContinueWithNoUser(class UGFxModal_X* Modal);
	void OnShowAccountPicker(class UGFxModal_X* Modal);
	void OnLoginCancelled();
	void OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<enum class EOnlineServerConnectionStatus> ErrorCode);
	void OnControllerPairingChanged(int NewLocalUserNum, int PreviousLocalUserNum);
	void OnLoginChange(unsigned char LocalUserNum);
	void SetCurrentUser();
	void ForceSaveGame();
	bool STATIC_IsControllerAssociatedWithLoggedInUser(unsigned char LocalUserNum);
	void GetUserXUID();
	bool IsUserLoggedIn();
	void UnregisterUserStatusChangeFunctions();
	void RegisterUserStatusChangeFunctions();
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	TEnumAsByte<enum class ESplitScreenPosition> GetSplitScreenPosition(class UGameViewportClient* InViewportClient);
	void HandleSplitScreenTypeChanged(class UGameViewportClient_TA* InViewportClient);
	void SetProfile(class UProfile_TA* NewProfile);
	void SetDefaultProfile();
	void HandleSaveDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* SaveData, class UError_X* Error);
	void HandleLocalPlayerLeave(class ULocalPlayer* Player);
	void OnRemoved();
	void OnCreated();
	struct FUniqueNetId GetUniqueNetId();
	struct FString GetNickname();
	void EventSplitScreenPositionChanged(class ULocalPlayer_TA* LocalPlayer);
	void EventProfileSet(class ULocalPlayer_TA* LocalPlayer);
};


// Class TAGame.MapData_TA
// 0x0030 (0x006C - 0x003C)
class UMapData_TA : public UObject
{
public:
	class UTexture2D*                                  Thumbnail;                                        		// 0x003C(0x0004) (CPF_Edit)
	class UMapData_TA*                                 VariantOf;                                        		// 0x0040(0x0004) (CPF_Edit)
	TEnumAsByte<enum class EWeatherVariant>            WeatherVariant;                                   		// 0x0044(0x0001) (CPF_Edit)
	TEnumAsByte<enum class EGameVersion>               GameVersion;                                      		// 0x0045(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x2];                               		// 0x0046(0x0002) MISSED OFFSET
	float                                              RandomWeight;                                     		// 0x0048(0x0004) (CPF_Edit)
	struct FScriptDelegate                             OnImageLoadedDelegate;                            		// 0x004C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x004C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FString                                     AssetPath;                                        		// 0x005C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class UTexture2D*                                  LargeImage;                                       		// 0x0068(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapData_TA");
		return ptr;
	}


	void LoadLargeMapImage(const struct FScriptDelegate& OnLoaded);
	class UMapData_TA* STATIC_PickPreferredRandomMap(int NumPlayers, TArray<class UMapData_TA*>* Maps, TArray<struct FName>* Likes, TArray<struct FName>* Dislikes);
	TArray<class UMapData_TA*> STATIC_GetMapTypes(TArray<class UMapData_TA*> Maps);
	int STATIC_GetWeightedIndex(TArray<float> PreferredWeights);
	TArray<float> STATIC_GetPreferredWeights(int NumPlayers, TArray<class UMapData_TA*>* Maps, TArray<struct FName>* Likes, TArray<struct FName>* Dislikes);
	TArray<float> STATIC_GetWeightsFromPoints(TArray<class UMapData_TA*> Maps, TArray<int> Points, int NumPlayers);
	TArray<int> STATIC_GetPoints(TArray<class UMapData_TA*> Maps, TArray<struct FName> Likes, TArray<struct FName> Dislikes);
	TArray<class UMapData_TA*> STATIC_GetNonVariantMaps(TArray<class UMapData_TA*>* Maps);
	class UMapData_TA* STATIC_PickRandomMap(TArray<class UMapData_TA*> Maps);
	struct FString GetLocalizedVariantName();
	struct FString GetLocalizedBaseName();
	struct FString GetLocalizedName();
};


// Class TAGame.MapList_TA
// 0x0054 (0x0090 - 0x003C)
class UMapList_TA : public UObject
{
public:
	TArray<class UMapData_TA*>                         AllMaps;                                          		// 0x003C(0x000C) (CPF_Edit, CPF_EditConst, CPF_NeedCtorLink)
	TArray<class UMapData_TA*>                         SortedMaps;                                       		// 0x0048(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FName>                               AdditionalCookedMaps;                             		// 0x0054(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FMapGroup>                           MapGroups;                                        		// 0x0060(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FMapGroup>                           GeneratedMapGroups;                               		// 0x006C(0x000C) (CPF_Edit, CPF_EditConst, CPF_NeedCtorLink)
	class UMapSet_TA*                                  SelectableMaps;                                   		// 0x0078(0x0004) (CPF_Edit)
	class UMapSet_TA*                                  SeasonMaps;                                       		// 0x007C(0x0004) (CPF_Edit)
	class UMapSet_TA*                                  SeasonPlayoffsMaps;                               		// 0x0080(0x0004) (CPF_Edit)
	TArray<class UMapSet_TA*>                          AllMapSets;                                       		// 0x0084(0x000C) (CPF_Edit, CPF_EditConst, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapList_TA");
		return ptr;
	}


	TArray<class UMapData_TA*> GetSortedMaps(TArray<class UMapData_TA*> UnsortedMaps);
	class UMapData_TA* GetMap(const struct FName& MapName);
};


// Class TAGame.MapSet_TA
// 0x0040 (0x007C - 0x003C)
class UMapSet_TA : public UObject
{
public:
	TArray<class UMapSet_TA*>                          IncludeSets;                                      		// 0x003C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<class UMapSet_TA*>                          ExcludeSets;                                      		// 0x0048(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<class UMapData_TA*>                         IncludeMaps;                                      		// 0x0054(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<class UMapData_TA*>                         ExcludeMaps;                                      		// 0x0060(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<class UMapData_TA*>                         Maps;                                             		// 0x006C(0x000C) (CPF_Edit, CPF_EditConst, CPF_NeedCtorLink)
	class UMapSelector_TA*                             MapSelector;                                      		// 0x0078(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapSet_TA");
		return ptr;
	}


	class UMapData_TA* GetRandomMap();
	class UMapSelector_TA* GetMapSelector();
};


// Class TAGame.MatchBroadcast_TA
// 0x0020 (0x020C - 0x01EC)
class AMatchBroadcast_TA : public AActor
{
public:
	class AGameEvent_Soccar_TA*                        GameEvent;                                        		// 0x01EC(0x0004) (CPF_Net, CPF_Transient)
	TArray<class APlayerReplicationInfo*>              RecordedPlayers;                                  		// 0x01F0(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventLog__Delegate;                             		// 0x01FC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x01FC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchBroadcast_TA");
		return ptr;
	}


	void ClientAppendLog(const struct FString& EventJson);
	void STATIC_RecordFunction();
	int GetPlayerID(class APlayerReplicationInfo* PRI);
	void RecordMatchEnd();
	void RecordOvertime();
	void RecordPlayerStat(int PlayerID, const struct FName& Stat);
	void RecordPlayerAttackStat(int AttackerID, int VictimID, const struct FName& Stat, const struct FVector& AttackerLocation, const struct FVector& AttackerVelocity, const struct FRotator& AttackerRotation);
	void RecordPlayerHitBallStat(int PlayerID, const struct FName& Stat, float HitTime, const struct FVector& CarLocation, const struct FVector& CarVelocity, const struct FRotator& CarRotation, const struct FVector& BallLocation, const struct FVector& BallVelocity);
	void RecordGoalScored(int AttackingTeam, int DefendingTeam, const struct FVector& BallLocation, const struct FVector& BallVelocity);
	void RecordPlayerScoreHit(int PlayerID, float HitTime, const struct FVector& CarLocation, const struct FVector& CarVelocity, const struct FRotator& CarRotation, const struct FVector& BallLocation, const struct FVector& BallVelocity);
	void RecordTeamScore(int Team, int Score);
	void RecordLeaveTeam(int PlayerID);
	void RecordJoinTeam(int PlayerID, int Team);
	void RecordLeaveGame(int PlayerID);
	void RecordJoinGame(int PlayerID, const struct FUniqueNetId& PlayerNetId, const struct FString& PlayerName);
	void RecordStart(const struct FString& MapName);
	float GetGameTimeSeconds();
	void HandleScoreUpdated(class ATeam_TA* Team);
	void RecordInitialScores();
	void RecordInitialPlayers();
	void RecordStartEvents();
	void HandleMatchEnded(class AGameEvent_Soccar_TA* G);
	void HandleOvertime(class AGameEvent_Soccar_TA* G);
	void HandleStat(class AStatFactory_TA* Factory, class APRI_TA* PRI, class UStatEvent_TA* StatEvent, class ABall_TA* Ball, int BallHitIndex, class APRI_TA* Victim);
	void HandleGoalScored(class AGameEvent_Soccar_TA* G, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIdx);
	void HandleTeamChanged(class APRI_X* PRI);
	void HandlePlayerRemoved(class AGameEvent_TA* G, class APRI_TA* PRI);
	void HandlePlayerAdded(class AGameEvent_TA* G, class APRI_TA* PRI);
	void StopRecording();
	void StartRecording();
	void HandleStatFactory(class AGameEvent_Soccar_TA* G);
	void HandleTeamsCreated(class AGameEvent_Team_TA* G);
	void Destroyed();
	void Init(class AGameEvent_Soccar_TA* InGameEvent);
	void ReplicatedEvent(const struct FName& VarName);
	void EventLog(class AMatchBroadcast_TA* Broadcast, const struct FString& EventJson);
};


// Class TAGame.MatchLog_TA
// 0x0004 (0x0040 - 0x003C)
class UMatchLog_TA : public UObject
{
public:
	struct FPointer                                    Log;                                              		// 0x003C(0x0004) (CPF_Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchLog_TA");
		return ptr;
	}


	void Append(const struct FString& EventJson);
	void Init(const struct FString& Filename);
};


// Class TAGame.MaterialParamsSet_TA
// 0x0024 (0x0060 - 0x003C)
class UMaterialParamsSet_TA : public UObject
{
public:
	TArray<struct FMaterialTextureParam>               TextureParameters;                                		// 0x003C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FMaterialVectorParam>                VectorParameters;                                 		// 0x0048(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FMaterialScalarParam>                ScalarParameters;                                 		// 0x0054(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MaterialParamsSet_TA");
		return ptr;
	}


	void Apply(class UMaterialInstanceConstant* MatInst);
};


// Class TAGame.MatineeExporter_TA
// 0x003C (0x0228 - 0x01EC)
class AMatineeExporter_TA : public AActor
{
public:
	struct FString                                     Filename;                                         		// 0x01EC(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	float                                              RecordTime;                                       		// 0x01F8(0x0004) (CPF_Edit)
	TArray<class UClass*>                              RecordClasses;                                    		// 0x01FC(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct AMatineeExporter_TA_FActorHistory>   Actors;                                           		// 0x0208(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	float                                              LastMessageTime;                                  		// 0x0214(0x0004) (CPF_Transient)
	class UReplay_TA*                                  Replay;                                           		// 0x0218(0x0004) (CPF_Transient)
	float                                              StartReplayTime;                                  		// 0x021C(0x0004) (CPF_Transient)
	float                                              StartWorldTime;                                   		// 0x0220(0x0004) (CPF_Transient)
	unsigned long                                      bRecordFrame : 1;                                 		// 0x0224(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatineeExporter_TA");
		return ptr;
	}


	class USequenceAction* CreateSetReplayCameraAction();
	class USequenceEvent* CreateReplayTimeEvent();
	void Export();
	void HandleFrame(class UReplay_TA* InReplay);
	void HandleFirstFrame(class UReplay_TA* InReplay);
	void PostBeginPlay();
};


// Class TAGame.MaxActorsGroup_TA
// 0x002C (0x0074 - 0x0048)
class UMaxActorsGroup_TA : public UComponent
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x0048(0x0004) (CPF_Const, CPF_Native, CPF_NoExport)
	int                                                MaxActors;                                        		// 0x004C(0x0004) (CPF_Edit, CPF_Const)
	float                                              UpdateDelay;                                      		// 0x0050(0x0004) (CPF_Edit, CPF_Const)
	float                                              NextUpdateTime;                                   		// 0x0054(0x0004) (CPF_Const, CPF_Transient)
	TArray<struct FMaxActorCallback>                   Actors;                                           		// 0x0058(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	struct FScriptDelegate                             __OnToggledDelegate__Delegate;                    		// 0x0064(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0064(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MaxActorsGroup_TA");
		return ptr;
	}


	struct FString GetEnabledActorsString();
	void RemoveListener(class AActor* CheckActor, const struct FScriptDelegate& OnEnabled, const struct FScriptDelegate& OnDisabled);
	void AddListener(class AActor* CheckActor, const struct FScriptDelegate& OnEnabled, const struct FScriptDelegate& OnDisabled);
	void OnToggledDelegate();
};


// Class TAGame.Message_TA
// 0x0068 (0x00A4 - 0x003C)
class UMessage_TA : public UObject
{
public:
	struct FName                                       Type;                                             		// 0x003C(0x0008) (CPF_Edit, CPF_Const)
	class UAkSoundCue*                                 Sound;                                            		// 0x0044(0x0004) (CPF_Edit, CPF_Const)
	struct FString                                     Key;                                              		// 0x0048(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)
	struct FString                                     Section;                                          		// 0x0054(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)
	struct FString                                     LocalizedMessage;                                 		// 0x0060(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FName>                               ParamNames;                                       		// 0x006C(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FString>                             ParamTokens;                                      		// 0x0078(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	struct FMessagePacket                              Packet;                                           		// 0x0084(0x0010) (CPF_Transient, CPF_NeedCtorLink)
	struct FMessagePacket                              DefaultPacket;                                    		// 0x0094(0x0010) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Message_TA");
		return ptr;
	}


	struct FString GetObjectText(class UObject* O);
	void Trigger(class APlayerController_TA* Receiver, const struct FMessagePacket& InPacket);
	struct FMessagePacket GetPacket();
	void BroadcastLocal(TArray<class AController*> Receivers);
	void Broadcast(TArray<class AController*> Receivers);
	void SendTo(class APlayerController_TA* Receiver);
	class UMessage_TA* SetInt(const struct FName& ParamName, int Value);
	class UMessage_TA* SetObject(const struct FName& ParamName, class UObject* Value);
	class UMessage_TA* Set(const struct FName& ParamName, const struct FString& Value);
	struct FString GetText(const struct FMessagePacket& InPacket);
};


// Class TAGame.NavigationHandle_TA
// 0x000C (0x0160 - 0x0154)
class UNavigationHandle_TA : public UNavigationHandle
{
public:
	struct FVector                                     OldDriveLocation;                                 		// 0x0154(0x000C) (CPF_Const, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NavigationHandle_TA");
		return ptr;
	}


	void GetNextDriveDestination(const struct FVector& CurrentDestination, struct FVector* OutDestination);
	bool PathCache_Empty();
};


// Class TAGame.Note_Linked_TA
// 0x0008 (0x0200 - 0x01F8)
class ANote_Linked_TA : public ANote
{
public:
	class ANote_Linked_TA*                             NextNote;                                         		// 0x01F8(0x0004) (CPF_Edit)
	class ANote_Linked_TA*                             PrevNote;                                         		// 0x01FC(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Note_Linked_TA");
		return ptr;
	}

};


// Class TAGame.NxForceFieldCapsule_TA
// 0x0028 (0x0254 - 0x022C)
class ANxForceFieldCapsule_TA : public ANxForceField
{
public:
	class UDrawCapsuleComponent*                       InnerDrawComponent;                               		// 0x022C(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UDrawCapsuleComponent*                       OuterDrawComponent;                               		// 0x0230(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	float                                              InnerRadius;                                      		// 0x0234(0x0004) (CPF_Edit)
	float                                              OuterRadius;                                      		// 0x0238(0x0004) (CPF_Edit)
	float                                              Length;                                           		// 0x023C(0x0004) (CPF_Edit)
	float                                              InnerStrength;                                    		// 0x0240(0x0004) (CPF_Edit)
	float                                              OuterStrength;                                    		// 0x0244(0x0004) (CPF_Edit)
	float                                              InnerMaxSpeed;                                    		// 0x0248(0x0004) (CPF_Edit)
	float                                              OuterMaxSpeed;                                    		// 0x024C(0x0004) (CPF_Edit)
	struct FPointer                                    Kernel;                                           		// 0x0250(0x0004) (CPF_Const, CPF_Native, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NxForceFieldCapsule_TA");
		return ptr;
	}


	void DoInitRBPhys();
};


// Class TAGame.OnlineProduct_TA
// 0x0020 (0x005C - 0x003C)
class UOnlineProduct_TA : public UObject
{
public:
	int                                                ProductID;                                        		// 0x003C(0x0004)
	unsigned char                                      UnknownData00[0x8];                               		// 0x0040(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.OnlineProduct_TA.InstanceID
	TArray<class UProductAttribute_TA*>                Attributes;                                       		// 0x0048(0x000C) (CPF_NeedCtorLink)
	int                                                SeriesID;                                         		// 0x0054(0x0004)
	int                                                TradeHold;                                        		// 0x0058(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineProduct_TA");
		return ptr;
	}


	void STATIC_SortByTradeHoldAscending(TArray<class UOnlineProduct_TA*>* Products);
	void STATIC_SortByTradeHoldDescending(TArray<class UOnlineProduct_TA*>* Products);
	bool RequiresDynamicThumbnail();
	struct FString GetSortLabel();
	struct FString GetDebugString();
	int OnlineProductHash();
	void GetPaintedColorAttribute(struct FString* ProductPaintColorName, int* ProductPaintColor);
	TEnumAsByte<enum class EProductQuality> GetQuality();
	TArray<class UProductAttribute_TA*> GetReplicatedAttributes();
	bool HasReplicatedAttributes();
	TArray<class UProductAttribute_TA*> GetAttributes();
	class UProductAttribute_TA* GetAttribute(class UClass* AttributeClass);
	int SortAttributesDelegate(class UProductAttribute_TA* A, class UProductAttribute_TA* B);
	struct FOnlineProductData InstanceOnlineProductData(bool bReplicatedAttributesOnly);
	void Init(struct FOnlineProductData* OnlineData);
	class UOnlineProduct_TA* STATIC_CreateOnlineProduct(struct FOnlineProductData* ProductData);
	void STATIC_ProcessOnlineData(TArray<class UOnlineProduct_TA*>* OutProducts, TArray<struct FOnlineProductData>* InProductData);
};


// Class TAGame.PaintDatabase_TA
// 0x004C (0x0088 - 0x003C)
class UPaintDatabase_TA : public UObject
{
public:
	TArray<class UProductPaint_TA*>                    Paints;                                           		// 0x003C(0x000C) (CPF_Edit, CPF_Const, CPF_EditConst, CPF_NeedCtorLink)
	struct FMap_Mirror                                 PaintNameToPaintID;                               		// 0x0048(0x003C) (CPF_Const, CPF_Native)
	unsigned long                                      bClickToRebuild : 1;                              		// 0x0084(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PaintDatabase_TA");
		return ptr;
	}


	class UProductPaint_TA* GetPaintByName(const struct FName& PaintName);
	class UProductPaint_TA* GetPaint(int Id);
	struct FName GetPaintName(int PaintID);
	int GetPaintID(const struct FName& PaintName);
};


// Class TAGame.PhysicalMaterialProperty_TA
// 0x0010 (0x004C - 0x003C)
class UPhysicalMaterialProperty_TA : public UPhysicalMaterialPropertyBase
{
public:
	float                                              TireFrictionScale;                                		// 0x003C(0x0004) (CPF_Edit)
	struct FName                                       AkSwitchValue;                                    		// 0x0040(0x0008) (CPF_Edit)
	unsigned long                                      bStickyWheels : 1;                                		// 0x0048(0x0004) (CPF_Edit)
	unsigned long                                      bConsiderForGround : 1;                           		// 0x0048(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PhysicalMaterialProperty_TA");
		return ptr;
	}

};


// Class TAGame.PitchTekDrawingComponent_TA
// 0x002F (0x0094 - 0x0065)
class UPitchTekDrawingComponent_TA : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                               		// 0x0065(0x0003) MISSED OFFSET
	struct FVector                                     PreviousOwnerPosition;                            		// 0x0068(0x000C) (CPF_Transient)
	TEnumAsByte<enum class EPitchTekDecalType>         DecalType;                                        		// 0x0074(0x0001)
	unsigned char                                      UnknownData01[0x3];                               		// 0x0075(0x0003) MISSED OFFSET
	TArray<struct FWheelContactData>                   WheelContacts;                                    		// 0x0078(0x000C) (CPF_Transient, CPF_Component, CPF_NeedCtorLink)
	struct FPitchTekCarBodyContactData                 CarBodyContactData;                               		// 0x0084(0x0010) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PitchTekDrawingComponent_TA");
		return ptr;
	}


	void QueueJumpBlastDecal(const struct FVector& JumpBlastLocation);
	void QueueDemolitionExplosionDecal(const struct FVector& DemolitionExplosionLocation);
	void QueueGoalExplosionDecal(const struct FVector& GoalExplosionLocation);
};


// Class TAGame.PlayerControllerBase_TA
// 0x0030 (0x0650 - 0x0620)
class APlayerControllerBase_TA : public APlayerController_X
{
public:
	float                                              SpectatorCameraAccel;                             		// 0x0620(0x0004) (CPF_Edit)
	struct FVector                                     SpectatorVelXY;                                   		// 0x0624(0x000C) (CPF_Transient)
	float                                              SpectatorVelZ;                                    		// 0x0630(0x0004) (CPF_Transient)
	class UPostProcessManager_TA*                      PostProcessManagerArchetype;                      		// 0x0634(0x0004) (CPF_Edit)
	class UPostProcessManager_TA*                      PostProcessManager;                               		// 0x0638(0x0004) (CPF_Transient)
	int                                                SpectatorPitchDir;                                		// 0x063C(0x0004) (CPF_Transient)
	int                                                SwivelPitchDir;                                   		// 0x0640(0x0004) (CPF_Transient)
	class ASpectatorVolume_TA*                         SpectatorVolume;                                  		// 0x0644(0x0004) (CPF_Transient)
	class UAchievementManager_TA*                      AchievementManagerArchetype;                      		// 0x0648(0x0004)
	class UAchievementManager_TA*                      AchievementManager;                               		// 0x064C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerControllerBase_TA");
		return ptr;
	}


	struct FVector UpdateSpectatorLocation(const struct FVector& CurrentLocation, float DeltaTime, bool bAlwaysClamp);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	bool FindSpectatorVolumeLocation(const struct FVector& CurrentLocation, const struct FVector& NextLocation, struct FVector* NewLocation);
	struct FVector ClampSpectatorLocation(const struct FVector& NewLocation);
	void SetWorldSelectionUpdate(bool bAllowUpdate);
	void SetWorldSelectionAllowed(bool bAllowSelection);
	void SetPlayerInput(class UClass* NewInputClass);
	void StartSplitscreenMatch(const struct FName& SelectedMapName, int GameMode, const struct FString& SelectedGameTags, int SelectedMaxPlayerCount);
	void ClientRemoveSSPlayer(const struct FString& Reason, const struct FString& Title);
	void OnGameInviteAccepted(const struct FString& ErrorString, struct FOnlineGameSearchResult* InviteResult);
	void UpdateSpectatorViewRotation(float DeltaTime);
	struct FRotator GetSpectatorViewRotationDeltaRotation(float DeltaTime);
	bool PartyLobbyMessage_TA(const struct FUniqueNetId& InSenderId, const struct FString& PlayerName, const struct FString& Message, bool bIsLocalPlayer, TEnumAsByte<enum class EPartyChatCommands> PartyChatCommand);
	void Say_TA(const struct FString& Message, TEnumAsByte<enum class EChatChannel> ChatChannel, bool bPreset);
	void ServerSay_TA(const struct FString& Message, TEnumAsByte<enum class EChatChannel> ChatChannel, bool bPreset);
	void RepopulateChatHistory();
	bool InviteHasEnoughSpace(class UOnlineGameSettings* InviteSettings);
	class USaveData_TA* GetSaveData();
	class UProfile_TA* GetProfile();
	class ULocalPlayer_TA* GetLocalPlayer();
	void InitProfileSettings(bool bJustReceivedPlayer);
	void Destroyed();
	void ReceivedPlayer();
	void HandleUniqueIdChanged(class APRI_X* PRI);
	void CreateServerAchievementManager();
	void PostBeginPlay();
};


// Class TAGame.PlayerController_TA
// 0x01DC (0x082C - 0x0650)
class APlayerController_TA : public APlayerControllerBase_TA
{
public:
	struct FClientData                                 Client;                                           		// 0x0650(0x002C) (CPF_Transient, CPF_NeedCtorLink)
	struct FClientStatsData                            ClientStats;                                      		// 0x067C(0x000C) (CPF_Transient)
	class ACar_TA*                                     Car;                                              		// 0x0688(0x0004) (CPF_Transient)
	class APRI_TA*                                     PRI;                                              		// 0x068C(0x0004) (CPF_Transient)
	struct FVehicleInputs                              VehicleInput;                                     		// 0x0690(0x0020) (CPF_Transient)
	unsigned long                                      bReceivedServerShutdownMessage : 1;               		// 0x06B0(0x0004) (CPF_Transient)
	unsigned long                                      bPendingIdleKick : 1;                             		// 0x06B0(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bJumpPressed : 1;                                 		// 0x06B0(0x0004)
	unsigned long                                      bBoostPressed : 1;                                		// 0x06B0(0x0004)
	unsigned long                                      bHandbrakePressed : 1;                            		// 0x06B0(0x0004)
	struct FString                                     LoginURL;                                         		// 0x06B4(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TEnumAsByte<enum class EVoiceFilter>               VoiceFilter;                                      		// 0x06C0(0x0001) (CPF_Transient)
	TEnumAsByte<enum class EVoiceFilter>               ChatFilter;                                       		// 0x06C1(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData00[0x2];                               		// 0x06C2(0x0002) MISSED OFFSET
	struct FChatSpamData                               ChatSpam;                                         		// 0x06C4(0x0018) (CPF_Edit)
	class ULightBarComponent_TA*                       LightBar;                                         		// 0x06DC(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UAimAssistComponent_TA*                      AimAssist;                                        		// 0x06E0(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UGameMusicComponent_TA*                      MusicComponent;                                   		// 0x06E4(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UListenerLocationComponent_TA*               ListenerLocationComponent;                        		// 0x06E8(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UAudioPriorityComponent_TA*                  AudioPriorityComponent;                           		// 0x06EC(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class APRI_TA*                                     FollowTarget;                                     		// 0x06F0(0x0004) (CPF_Transient)
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x06F4(0x0004) (CPF_Edit)
	class ACamera*                                     SpectatorCameraArchetype;                         		// 0x06F8(0x0004) (CPF_Edit)
	class AHUD*                                        SpectatorHUDArchetype;                            		// 0x06FC(0x0004) (CPF_Edit)
	class UClass*                                      SpectatorInputClass;                              		// 0x0700(0x0004) (CPF_Edit)
	class ACamera*                                     EditorCameraArchetype;                            		// 0x0704(0x0004) (CPF_Edit)
	class AHUD*                                        EditorHUDArchetype;                               		// 0x0708(0x0004) (CPF_Edit)
	class UClass*                                      EditorInputClass;                                 		// 0x070C(0x0004) (CPF_Edit)
	TScriptInterface<class UInterface_GameEditor_TA>   MoveActor;                                        		// 0x0710(0x0008)
	struct FVector                                     MoveActorGrabOffset;                              		// 0x0718(0x000C)
	float                                              MoveActorGrabIncrement;                           		// 0x0724(0x0004)
	float                                              MinMoveActorGrabDistance;                         		// 0x0728(0x0004)
	float                                              MouseIncrementSpeed;                              		// 0x072C(0x0004)
	float                                              BallVelocityIncrementAmount;                      		// 0x0730(0x0004)
	int                                                BallVelocityIncrementFireCount;                   		// 0x0734(0x0004)
	float                                              BallVelocityIncrementFireCountMax;                		// 0x0738(0x0004)
	float                                              BallVelocityIncrementSpeedDefault;                		// 0x073C(0x0004)
	float                                              BallVelocityIncrementSpeedMax;                    		// 0x0740(0x0004)
	float                                              CrosshairTraceDistance;                           		// 0x0744(0x0004)
	class AActor*                                      TracedCrosshairActor;                             		// 0x0748(0x0004)
	TArray<struct FCrosshairExtentInfo>                CrosshairTraceExtents;                            		// 0x074C(0x000C) (CPF_NeedCtorLink)
	TScriptInterface<class UInterface_GameEditor_TA>   RotatedActor;                                     		// 0x0758(0x0008)
	struct FVector                                     RotateActorCameraLocationOffset;                  		// 0x0760(0x000C)
	struct FVector                                     RotateActorCameraRotationOffset;                  		// 0x076C(0x000C)
	int                                                RotateActorCameraSide;                            		// 0x0778(0x0004)
	float                                              DesiredCameraSide;                                		// 0x077C(0x0004)
	float                                              PawnTypeChangedTime;                              		// 0x0780(0x0004)
	int                                                SelectedSpawnArchetype;                           		// 0x0784(0x0004)
	struct FVehicleInputs                              DebugInputs;                                      		// 0x0788(0x0020) (CPF_Transient)
	float                                              DelayBetweenMovePackets;                          		// 0x07A8(0x0004) (CPF_Edit)
	float                                              TimeSinceLastMovePacket;                          		// 0x07AC(0x0004) (CPF_Transient)
	class UPlatformMetrics_TA*                         PlatformMetrics;                                  		// 0x07B0(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	float                                              MouseXDeadZone;                                   		// 0x07B4(0x0004)
	float                                              MouseYDeadZone;                                   		// 0x07B8(0x0004)
	float                                              MouseXDeadZoneAir;                                		// 0x07BC(0x0004)
	float                                              MouseYDeadZoneAir;                                		// 0x07C0(0x0004)
	struct FVehicleInputs                              LastInputs;                                       		// 0x07C4(0x0020)
	class APRI_TA*                                     PendingViewPRI;                                   		// 0x07E4(0x0004) (CPF_Transient)
	class UNetworkJitterSettings_TA*                   JitterSettings;                                   		// 0x07E8(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventLaunchAccountPicker__Delegate;             		// 0x07EC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x07EC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPendingIdleKickChanged__Delegate;          		// 0x07FC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x07FC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventMuteChanged__Delegate;                     		// 0x080C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x080C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTrainingEditorActorModified__Delegate;     		// 0x081C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x081C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerController_TA");
		return ptr;
	}


	void ServerCreateMatchBroadcast(class AGameEvent_Soccar_TA* GameEvent);
	void ClampMoveActorGrabOffset();
	void RevertToDefaultCameraHUDInput();
	void SetCameraHUDInput(class ACamera* InCameraArchetype, class AHUD* InHUDArchetype, class UClass* InPlayerInputClass);
	void SwitchToEditPawn();
	void ToggleEditorRound();
	void ToggleBetweenCarAndEditPawn();
	void Interact();
	void StopMovement(bool bOnlyIfNoAccel);
	struct FVector GetRotateActorCameraOffset(float DeltaTime, bool bSnap);
	void RestoreEditorPawnOrientation();
	void BackupEditorPawnOrientation();
	bool EditorPawnDeSerialize(class UJsonObject* Data);
	struct FString EditorPawnSerialize();
	void UpdateRotatedActorOrientation(float DeltaTime);
	void OnOpenPauseMenu();
	void ResetMouseCenter();
	float CalculateMouseAxis(float Center, float CurrentLocation, float Deadzone, float MaxDist);
	struct FVector CalculateMouseAccelInput(float XDeadZone, float YDeadZone, float XMaxDist, float YMaxDist, struct FVector* CurrentLocation);
	void ShowAccountPicker();
	void QueSaveReplay();
	void SetFollowTarget(class APRI_TA* InTarget);
	void FollowPlayer(class APRI_TA* InPlayer);
	void ClientGroupSkillUpdated(int Playlist, const struct FUniqueNetIdGroup4& Players, const struct FTierSkillRating& Rating);
	void ClientSkillUpdated(const struct FPlayerSkillRating& Rating, int Playlist);
	void GetHearSoundTransform(struct FVector* OutLocation, struct FRotator* OutRotation);
	void ServerReportPlayer(TEnumAsByte<enum class EReportPlayerReason> Reason, const struct FUniqueNetId& PlayerID, const struct FString& PlayerName);
	void HandleLocalStatEvent(class APRI_TA* InPRI, class UStatEvent_TA* StatEvent, int Count);
	void OnPendingIdleKickChanged();
	void SetPendingIdleKick(bool bPending);
	void ClientSplitscreenJoinResponse(const struct FUniqueNetId& PlayerID, bool bAllow);
	void ServerRequestSplitscreenJoin(const struct FUniqueNetId& PlayerID, const struct FString& PlayerName);
	bool PreClientTravel(const struct FString& PendingURL, TEnumAsByte<enum class ETravelType> TravelType, bool bIsSeamlessTravel);
	void KickTrialPlayer();
	void NotifyGoalScored(int ScoredOnTeam);
	void Destroyed();
	void SetGameHUDArchetype(class AHUD* InArchetype);
	bool ShouldBeMuted(class APlayerController_TA* Other);
	bool IsCommunicationFiltered(TEnumAsByte<enum class EVoiceFilter> Filter, class APlayerController_TA* Other, bool bPreset);
	void RefreshMutedPlayers(bool bForceRefresh);
	void ServerUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void ServerMutePlayer(const struct FUniqueNetId& PlayerNetId);
	void GameplayUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void GameplayMutePlayer(const struct FUniqueNetId& PlayerNetId);
	struct FString GetDebugMutePlayerName(const struct FUniqueNetId& PlayerNetId);
	void ServerSetChatFilter(TEnumAsByte<enum class EVoiceFilter> InVoiceFilter);
	void ServerSetVoiceFilter(TEnumAsByte<enum class EVoiceFilter> InVoiceFilter);
	bool IsExplictlyMuted(const struct FUniqueNetId& PlayerNetId);
	void HandlePRIUniqueIdChanged(class APRI_X* InPRI);
	void ReplicateMutedPlayers();
	void DebugAI();
	void ClientNotifyChatDisabled(float Time);
	void ChatMessage_TA(class APlayerReplicationInfo* InPRI, const struct FString& Message, TEnumAsByte<enum class EChatChannel> ChatChannel, bool bPreset);
	void ServerSay_TA(const struct FString& Message, TEnumAsByte<enum class EChatChannel> ChatChannel, bool bPreset);
	void Say_TA(const struct FString& Message, TEnumAsByte<enum class EChatChannel> ChatChannel, bool bPreset);
	bool CanChatWith(class APlayerController_TA* Other, bool bPreset);
	bool AllowTextMessage(const struct FString& msg);
	void PushToTalkEnd();
	void PushToTalk();
	void HandleJoinGameMigrationCompleted(bool bSuccess, const struct FString& FailReason);
	void ClientNotifyServerShutdown();
	void ClientUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void ClientMutePlayer(const struct FUniqueNetId& PlayerNetId, bool bAddToMuteList);
	void GetOnlineStatus(struct FString* PresenceString, struct FString* GameDataString);
	void ClientSetOnlineStatus();
	void HandleGameDataSelected(int PlaylistId, int MutatorIndex);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	class AGameEvent_TA* GetGameEvent();
	void ClientArbitratedMatchEnded();
	void BannedKick();
	void NoReservationKick();
	void IdleKick();
	void ClientUseItem(const struct FVector& UseLocation, const struct FRotator& UseRotation);
	void ServerTeleportCar(const struct FVector& SpawnLocation, const struct FRotator& NewRotation);
	void TeleportCar(const struct FVector& SpawnLocation, const struct FRotator& NewRotation);
	void ReceiveMessage(const struct FMessagePacket& Packet);
	void ServerUsePickup(class ARBActor_TA* Target);
	void UsePickup();
	void ToggleHandbrake(bool bHandbrake);
	void PlayerWantsToLaunchBall(bool bBoost);
	void ToggleBoost(bool bBoost);
	void ToggleJump(bool bJump);
	void TargetSelectLeft();
	void TargetSelectRight();
	void ReleaseRearCamera();
	void PressRearCamera();
	void ReleaseSecondaryCamera();
	void PressSecondaryCamera();
	void ReadyUp();
	void SwitchTeam();
	void SetDefaultCameraMode();
	void ResetCameraMode();
	struct FName GetCameraMode();
	void SetCameraMode(const struct FName& NewCamMode);
	void ProcessMove_TA(const struct FVehicleInputs& NewInput);
	void ZeroMoveInput();
	bool ModifiedAirRotationByMouseInput(class UPlayerInput_TA* InputTA, float DeadZoneX, float DeadZoneY);
	bool UpdateMouseGroundSteer(class UPlayerInput_TA* InputTA, float DeltaTime, float Deadzone, float MaxDist, float BrakingSpeed);
	bool UpdateMouseGroundThrottle(class UPlayerInput_TA* InputTA, float DeltaTime, float Deadzone, float MaxDist);
	void PlayerMove(float DeltaTime);
	void IgnoreMoveInput(bool bNewMoveInput);
	void ClientUpdatePing(float TimeStamp, int InClientFrame);
	void SendClientAdjustment();
	TArray<struct FClientFrameData> STATIC_MergeFrames(TArray<struct FClientFrameData>* ArrayA, TArray<struct FClientFrameData>* ArrayB);
	void UpdateClientInputBuffer();
	void ServerMove_TA(const struct FClientPacketData& Packet);
	void ReplicateMovePacket();
	void PostAsyncTick(float DeltaTime);
	void PrePhysicsStep();
	void ProcessEmptyClientFrame();
	void ProcessClientFrame();
	bool UpdateLastActiveTime(const struct FVehicleInputs& TestInput);
	void HandleAddBoostComponent(class UObject* BoostObj);
	void OnPawnChange(class APawn* OldPawn, class APawn* NewPawn);
	void HandleSetProfile(class ULocalPlayer_TA* LocalPlayer);
	class UProductMetrics_TA* GetProductMetrics();
	void ReplicateLoadout();
	void ReplicateCameraRotation();
	void SetUsingFreecam(bool bFreecam);
	void SetUsingBehindView(bool bBehindView);
	void SetUsingSecondaryCamera(bool bSecondaryCamera);
	void ReplicateCameraSettings();
	void HandlePawnTypeChanged(class APRI_TA* InPRI);
	void HandlePendingViewCarSet(class APRI_TA* InPRI);
	void HandleReplaceBot(class APRI_TA* InPRI);
	void HandleTeamChanged(class APRI_X* InPRI);
	void HandleGameEventChanged(class APRI_TA* InPRI);
	void HandlePRICameraChanged(class APRI_TA* InPRI);
	void SetupLightBarTeam();
	void ReplicateTotalXP();
	void HandleXPUpdated(class UProfile_TA* Profile);
	void HandlePersistentCameraSet(class APRI_TA* InPRI);
	void OnReceivedPRI();
	void InitProfileSettings(bool bJustReceivedPlayer);
	void ClientSetLevelSessionID(const struct FGuid& Id);
	void ReplicateLevelSessionID();
	void ReceivedPlayer();
	void InitFromGRI(class AGRI_X* GRI);
	void HandleGRISpawned(class AGRI_X* GRI);
	void PostBeginPlay();
	void PreBeginPlay();
	void ReplicatedEvent(const struct FName& EventName);
	void EventTrainingEditorActorModified();
	void EventMuteChanged(class APlayerController_TA* PC, const struct FUniqueNetId& PlayerID, bool bMuted);
	void EventPendingIdleKickChanged(class APlayerController_TA* PC);
	void EventLaunchAccountPicker(int ControllerId);
};


// Class TAGame.PremiumSkin_TA
// 0x0044 (0x0080 - 0x003C)
class UPremiumSkin_TA : public UObject
{
public:
	class UMaterialInstanceConstant*                   MIC;                                              		// 0x003C(0x0004) (CPF_Edit)
	TEnumAsByte<enum class EProductQuality>            Quality;                                          		// 0x0040(0x0001) (CPF_Edit)
	TEnumAsByte<enum class ESkinType>                  SkinType;                                         		// 0x0041(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x2];                               		// 0x0042(0x0002) MISSED OFFSET
	struct FMaterialParams                             SkinParameters;                                   		// 0x0044(0x0024) (CPF_Edit, CPF_NeedCtorLink)
	class UTexture2D*                                  Thumbnail;                                        		// 0x0068(0x0004) (CPF_Edit)
	TArray<class UPremiumSkinSet_TA*>                  SkinSets;                                         		// 0x006C(0x000C) (CPF_Edit, CPF_EditConst, CPF_NeedCtorLink)
	class UProductAsset_Skin_TA*                       AssetTemplate;                                    		// 0x0078(0x0004) (CPF_ExportObject, CPF_NeedCtorLink, CPF_EditInline)
	class UProductTemplate_TA*                         ProductTemplate;                                  		// 0x007C(0x0004) (CPF_ExportObject, CPF_NeedCtorLink, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PremiumSkin_TA");
		return ptr;
	}

};


// Class TAGame.PremiumSkinSet_TA
// 0x0010 (0x004C - 0x003C)
class UPremiumSkinSet_TA : public UObject
{
public:
	class UProductAsset_Body_TA*                       Body;                                             		// 0x003C(0x0004) (CPF_Edit)
	TArray<struct FPremiumSkinSetItem>                 Skins;                                            		// 0x0040(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PremiumSkinSet_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_TA
// 0x0034 (0x0070 - 0x003C)
class UProductAsset_TA : public UObject
{
public:
	class UProductTemplate_TA*                         Product;                                          		// 0x003C(0x0004) (CPF_Edit, CPF_EditInline)
	class UTexture2D*                                  Thumbnail;                                        		// 0x0040(0x0004) (CPF_Edit, CPF_Const, CPF_DuplicateTransient)
	class UThumbnailRenderer_TA*                       ThumbnailRenderer;                                		// 0x0044(0x0004) (CPF_Edit)
	struct FVector                                     ThumbnailCameraTranslationOffset;                 		// 0x0048(0x000C) (CPF_Edit, CPF_Const)
	struct FRotator                                    ThumbnailCameraRotationOffset;                    		// 0x0054(0x000C) (CPF_Edit, CPF_Const)
	struct FRotator                                    ThumbnailProductRotation;                         		// 0x0060(0x000C) (CPF_Edit, CPF_Const)
	unsigned long                                      bForceRebuildThumbnail : 1;                       		// 0x006C(0x0004) (CPF_Edit, CPF_Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_TA");
		return ptr;
	}


	bool CheckIsPaintable();
	void ModifyThumbnailScene(class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* Attributes);
	struct FString CheckCanSave();
	class UProduct_TA* GetProduct();
};


// Class TAGame.ProductAsset_Body_TA
// 0x01C4 (0x0234 - 0x0070)
class UProductAsset_Body_TA : public UProductAsset_TA
{
public:
	class USkeletalMesh*                               Mesh;                                             		// 0x0070(0x0004) (CPF_Edit)
	class UAnimTree*                                   AnimTreeTemplate;                                 		// 0x0074(0x0004) (CPF_Edit)
	TArray<class UAnimSet*>                            AnimSets;                                         		// 0x0078(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UPhysicsAsset*                               PhysicsAsset;                                     		// 0x0084(0x0004) (CPF_Edit)
	struct FVehicleAxleSettings                        FrontAxle;                                        		// 0x0088(0x0028) (CPF_Edit)
	struct FVehicleAxleSettings                        BackAxle;                                         		// 0x00B0(0x0028) (CPF_Edit)
	TArray<struct FVehicleAxleSettings>                AdditionalAxles;                                  		// 0x00D8(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	float                                              MassScale;                                        		// 0x00E4(0x0004) (CPF_Edit)
	float                                              BallHitZDamping;                                  		// 0x00E8(0x0004) (CPF_Edit)
	struct FSimpleSpringSettings                       ChassisSpring;                                    		// 0x00EC(0x0050) (CPF_Edit)
	float                                              ChassisRotationScale;                             		// 0x013C(0x0004) (CPF_Edit)
	float                                              ChassisTranslationScale;                          		// 0x0140(0x0004) (CPF_Edit)
	float                                              SuspensionTravelMax;                              		// 0x0144(0x0004) (CPF_Edit)
	float                                              SuspensionTravelMin;                              		// 0x0148(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 EngineSound;                                      		// 0x014C(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 ExhaustSound;                                     		// 0x0150(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 BlowoffSound;                                     		// 0x0154(0x0004) (CPF_Edit)
	class UEngineAudioProfile_TA*                      EngineAudioProfile;                               		// 0x0158(0x0004) (CPF_Edit)
	class AFXActor_X*                                  FXActor;                                          		// 0x015C(0x0004) (CPF_Edit)
	int                                                SkinMaterialIndex;                                		// 0x0160(0x0004) (CPF_Edit)
	int                                                BrakelightMaterialIndex;                          		// 0x0164(0x0004) (CPF_Edit)
	int                                                ChassisMaterialIndex;                             		// 0x0168(0x0004) (CPF_Edit)
	TArray<struct FName>                               BoostEmitterSockets;                              		// 0x016C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	float                                              BoostFlapsAngle;                                  		// 0x0178(0x0004) (CPF_Edit)
	TArray<class UProductAsset_TA*>                    ForcedProducts;                                   		// 0x017C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	struct FTeamPaintFinish                            ForcedPaintFinishes[0x2];                         		// 0x0188(0x0008) (CPF_Edit)
	struct FLinearColor                                ForcedTeamColors[0x2];                            		// 0x0198(0x0010) (CPF_Edit)
	struct FLinearColor                                ForcedCustomColor;                                		// 0x01B8(0x0010) (CPF_Edit)
	TArray<class UProduct_TA*>                         AdditionalUnlocks2;                               		// 0x01C8(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FProductAttachment>                  Attachments;                                      		// 0x01D4(0x000C) (CPF_Edit, CPF_Component, CPF_NeedCtorLink)
	TArray<struct FParticleSysParam>                   BoostParticleParameters;                          		// 0x01E0(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UParticleSystem*                             SupersonicWheelTemplate;                          		// 0x01EC(0x0004) (CPF_Edit)
	class AFXActor_X*                                  DemolishFX;                                       		// 0x01F0(0x0004) (CPF_Edit)
	class AFXActor_X*                                  SpawnFX;                                          		// 0x01F4(0x0004) (CPF_Edit)
	class AFXActor_X*                                  ExitFX;                                           		// 0x01F8(0x0004) (CPF_Edit)
	float                                              WheelPreviewAnimTranslateScale;                   		// 0x01FC(0x0004) (CPF_Edit)
	struct FMaterialParams                             SkinParameters;                                   		// 0x0200(0x0024) (CPF_Edit, CPF_NeedCtorLink)
	class UProductAsset_Wheel_TA*                      ThumbnailWheelAsset;                              		// 0x0224(0x0004) (CPF_Edit)
	TArray<struct FSkeletalMeshLODDistanceInfo>        LODDistanceInfo;                                  		// 0x0228(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Body_TA");
		return ptr;
	}


	bool HasBone(const struct FName& InBoneName);
	void FixPhysicsBoxTranslation();
	struct FClientLoadoutData GetForcedLoadout();
	void ModifyThumbnailScene(class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* Attributes);
	struct FString CheckCanSave();
};


// Class TAGame.ProductAsset_Bot_TA
// 0x0020 (0x0090 - 0x0070)
class UProductAsset_Bot_TA : public UProductAsset_TA
{
public:
	TArray<class UProduct_TA*>                         LoadoutProducts2;                                 		// 0x0070(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	int                                                BlueTeamColorID;                                  		// 0x007C(0x0004) (CPF_Edit)
	int                                                OrangeTeamColorID;                                		// 0x0080(0x0004) (CPF_Edit)
	int                                                CustomColorID;                                    		// 0x0084(0x0004) (CPF_Edit)
	struct FAITraits                                   Traits;                                           		// 0x0088(0x0008) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Bot_TA");
		return ptr;
	}


	struct FLoadoutData GetLoadout(int TeamIndex);
};


// Class TAGame.ProductAsset_Container_TA
// 0x0000 (0x0070 - 0x0070)
class UProductAsset_Container_TA : public UProductAsset_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Container_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_Pack_TA
// 0x0000 (0x0070 - 0x0070)
class UProductAsset_Pack_TA : public UProductAsset_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Pack_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_PaintFinish_TA
// 0x004C (0x00BC - 0x0070)
class UProductAsset_PaintFinish_TA : public UProductAsset_TA
{
public:
	class ULightCurveType_TA*                          LightCurveType;                                   		// 0x0070(0x0004) (CPF_Edit)
	class UTexture*                                    DetailNormal;                                     		// 0x0074(0x0004) (CPF_Edit)
	float                                              SpecularTint;                                     		// 0x0078(0x0004) (CPF_Edit)
	float                                              RimLightTint;                                     		// 0x007C(0x0004) (CPF_Edit)
	float                                              DiffuseDetailNormalStrength;                      		// 0x0080(0x0004) (CPF_Edit)
	float                                              SpecularDetailNormalStrength;                     		// 0x0084(0x0004) (CPF_Edit)
	float                                              SpecularStrength;                                 		// 0x0088(0x0004) (CPF_Edit)
	float                                              EnvironmentStrength;                              		// 0x008C(0x0004) (CPF_Edit)
	float                                              SparkleStrength;                                  		// 0x0090(0x0004) (CPF_Edit)
	float                                              PearlescentStrength;                              		// 0x0094(0x0004) (CPF_Edit)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                           		// 0x0098(0x000C) (CPF_Edit, CPF_Const, CPF_EditConst, CPF_NeedCtorLink)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                            		// 0x00A4(0x000C) (CPF_Edit, CPF_Const, CPF_EditConst, CPF_NeedCtorLink)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                            		// 0x00B0(0x000C) (CPF_Edit, CPF_Const, CPF_EditConst, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_PaintFinish_TA");
		return ptr;
	}


	void ModifyThumbnailScene(class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* Attributes);
	void STATIC_SetPaintFinishParametersOnMaterial(class UMaterialInstance* MatInst, class UProductAsset_PaintFinish_TA* Finish, const struct FString& Prefix);
};


// Class TAGame.ProductAsset_Skin_TA
// 0x0050 (0x00C0 - 0x0070)
class UProductAsset_Skin_TA : public UProductAsset_TA
{
public:
	class UMaterialInterface*                          Skin;                                             		// 0x0070(0x0004) (CPF_Edit)
	class UProductAsset_Body_TA*                       Body;                                             		// 0x0074(0x0004) (CPF_Edit)
	struct FMaterialParams                             SkinParameters;                                   		// 0x0078(0x0024) (CPF_Edit, CPF_NeedCtorLink)
	TEnumAsByte<enum class ESkinType>                  SkinType;                                         		// 0x009C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x009D(0x0003) MISSED OFFSET
	struct FLinearColor                                ThumbnailTeamColor;                               		// 0x00A0(0x0010) (CPF_Edit)
	struct FLinearColor                                ThumbnailCustomColor;                             		// 0x00B0(0x0010) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Skin_TA");
		return ptr;
	}


	void ModifyThumbnailScene(class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* Attributes);
	struct FString CheckCanSave();
};


// Class TAGame.ProductAsset_Wheel_TA
// 0x0040 (0x00B0 - 0x0070)
class UProductAsset_Wheel_TA : public UProductAsset_TA
{
public:
	TEnumAsByte<enum class EMeshMirrorMode>            MirrorMode;                                       		// 0x0070(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0071(0x0003) MISSED OFFSET
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0074(0x0004) (CPF_Edit)
	class UStaticMesh*                                 RearStaticMesh;                                   		// 0x0078(0x0004) (CPF_Edit)
	class USkeletalMesh*                               SkeletalMesh;                                     		// 0x007C(0x0004) (CPF_Edit)
	class USkeletalMesh*                               RearSkeletalMesh;                                 		// 0x0080(0x0004) (CPF_Edit)
	class UAnimTree*                                   AnimTree;                                         		// 0x0084(0x0004) (CPF_Edit)
	class UStaticMesh*                                 CollisionMesh;                                    		// 0x0088(0x0004) (CPF_Edit)
	TArray<class UAttachmentBehavior_TA*>              Behaviors;                                        		// 0x008C(0x000C) (CPF_Edit, CPF_NeedCtorLink, CPF_EditInline)
	struct FWheelAttachment                            Attachment;                                       		// 0x0098(0x0018) (CPF_Edit, CPF_Component, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Wheel_TA");
		return ptr;
	}


	struct FVector GetMeshBoxExtent(TEnumAsByte<enum class EWheelPosition> WheelPos);
	void ModifyThumbnailScene(class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* Attributes);
	struct FString CheckCanSave();
};


// Class TAGame.ProductAttribute_TA
// 0x0018 (0x0054 - 0x003C)
class UProductAttribute_TA : public UObject
{
public:
	struct FName                                       Typename;                                         		// 0x003C(0x0008) (CPF_Const)
	unsigned long                                      bReplicated : 1;                                  		// 0x0044(0x0004) (CPF_Const)
	unsigned long                                      bRequiresDynamicThumbnail : 1;                    		// 0x0044(0x0004) (CPF_Const)
	struct FString                                     Label;                                            		// 0x0048(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_TA");
		return ptr;
	}


	struct FString GetSortLabel();
	struct FString GetTypeHashID();
	struct FString GetHashID();
	struct FString GetOnlineProductAttributeValue();
	struct FOnlineProductAttribute InstanceOnlineProductAttribute();
	void ApplyToObject(class UProductAsset_TA* Asset, class UObject* Target);
	void STATIC_ApplyAttributes(class UProductAsset_TA* Asset, class UObject* Target, TArray<class UProductAttribute_TA*>* Attributes);
	void STATIC_ApplyLoadout(class UProductAsset_TA* Asset, class UObject* Target, struct FClientLoadoutOnlineData* OnlineProduct);
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* OtherAttributes);
	bool Init(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* OtherAttributes);
};


// Class TAGame.ProductAttribute_Certified_TA
// 0x0020 (0x0074 - 0x0054)
class UProductAttribute_Certified_TA : public UProductAttribute_TA
{
public:
	struct FName                                       ValueKeyName;                                     		// 0x0054(0x0008) (CPF_Const)
	class UCertifiedStat_TA*                           CertifiedStat;                                    		// 0x005C(0x0004) (CPF_Transient)
	int                                                StatValue;                                        		// 0x0060(0x0004)
	struct FScriptDelegate                             __EventRankedUp__Delegate;                        		// 0x0064(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0064(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Certified_TA");
		return ptr;
	}


	struct FString GetSortLabel();
	struct FString GetHashID();
	struct FString GetTypeHashID();
	struct FString GetDescription();
	struct FString GetRankLabel();
	int GetRank();
	void AddStatValue(int InValue);
	struct FString GetOnlineProductAttributeValue();
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* Attributes);
	void EventRankedUp(class UProductAttribute_Certified_TA* CertifiedAttribute);
};


// Class TAGame.ProductAttribute_Licensed_TA
// 0x0000 (0x0054 - 0x0054)
class UProductAttribute_Licensed_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Licensed_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Painted_TA
// 0x0004 (0x0058 - 0x0054)
class UProductAttribute_Painted_TA : public UProductAttribute_TA
{
public:
	int                                                PaintID;                                          		// 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Painted_TA");
		return ptr;
	}


	struct FString GetSortLabel();
	struct FString GetHashID();
	struct FString GetTypeHashID();
	void STATIC_ApplyToBoost(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class AFXActor_Boost_TA* BoostFX);
	struct FLinearColor STATIC_GetPaintColor(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, TEnumAsByte<enum class EPaintAttributeType> PaintType);
	void STATIC_ApplyToSetParameter(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, const TScriptInterface<class UISetParameter>& Target);
	void STATIC_ApplyToBody(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class UMeshComponent* Mesh);
	void STATIC_ApplyToMesh(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class UMeshComponent* Mesh, bool bSkinAsset);
	void STATIC_ApplyPaintToObject(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class UObject* Target, bool bSkinAsset);
	void ApplyToObject(class UProductAsset_TA* Asset, class UObject* Target);
	struct FString GetOnlineProductAttributeValue();
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* Attributes);
	class UProductAttribute_Painted_TA* STATIC_CreateInstance(int InPaintID);
};


// Class TAGame.ProductAttribute_PaintSettings_TA
// 0x0044 (0x0098 - 0x0054)
class UProductAttribute_PaintSettings_TA : public UProductAttribute_TA
{
public:
	TArray<class UMaterialInterface*>                  PaintableMaterials;                               		// 0x0054(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	unsigned long                                      bPaintParticles : 1;                              		// 0x0060(0x0004) (CPF_Edit)
	unsigned long                                      bPaintBody : 1;                                   		// 0x0060(0x0004) (CPF_Edit)
	struct FName                                       PaintParameterName;                               		// 0x0064(0x0008) (CPF_Edit)
	TEnumAsByte<enum class EPaintAttributeType>        PaintType;                                        		// 0x006C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x006D(0x0003) MISSED OFFSET
	TArray<struct FPaintAttributeParameter>            PaintAdditionalParameters;                        		// 0x0070(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	float                                              PaintEmissiveMultiplier;                          		// 0x007C(0x0004) (CPF_Edit)
	TArray<class UProductPaint_TA*>                    IncludePaints;                                    		// 0x0080(0x000C) (CPF_Edit, CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	TArray<class UProductPaint_TA*>                    ExcludePaints;                                    		// 0x008C(0x000C) (CPF_Edit, CPF_EditConst, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_PaintSettings_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_PlatformExclusive_TA
// 0x0010 (0x0064 - 0x0054)
class UProductAttribute_PlatformExclusive_TA : public UProductAttribute_TA
{
public:
	TArray<TEnumAsByte<enum class EConsoleType>>       InclusiveConsoles;                                		// 0x0054(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UProduct_TA*                                 ReplacementProduct;                               		// 0x0060(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_PlatformExclusive_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_QualityProductDBOverride_TA
// 0x0001 (0x0055 - 0x0054)
class UProductAttribute_QualityProductDBOverride_TA : public UProductAttribute_TA
{
public:
	TEnumAsByte<enum class EProductQuality>            QualityOverride;                                  		// 0x0054(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_QualityProductDBOverride_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_UnlockMethod_TA
// 0x0001 (0x0055 - 0x0054)
class UProductAttribute_UnlockMethod_TA : public UProductAttribute_TA
{
public:
	TEnumAsByte<enum class EUnlockMethod>              UnlockMethod;                                     		// 0x0054(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_UnlockMethod_TA");
		return ptr;
	}

};


// Class TAGame.ProductDatabase_Builder_TA
// 0x0004 (0x0040 - 0x003C)
class UProductDatabase_Builder_TA : public UObject
{
public:
	unsigned long                                      bPrime : 1;                                       		// 0x003C(0x0004) (CPF_Edit)
	unsigned long                                      bClickToBuildMarked : 1;                          		// 0x003C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductDatabase_Builder_TA");
		return ptr;
	}

};


// Class TAGame.ProductDatabase_TA
// 0x0084 (0x00C0 - 0x003C)
class UProductDatabase_TA : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C(0x0004) (CPF_Const, CPF_Native, CPF_NoExport)
	unsigned long                                      bDebug : 1;                                       		// 0x0040(0x0004) (CPF_Edit)
	unsigned long                                      bLoadingAssetAsync : 1;                           		// 0x0040(0x0004) (CPF_Const, CPF_Transient)
	unsigned long                                      bAssetLoadedThisFrame : 1;                        		// 0x0040(0x0004) (CPF_Const, CPF_Transient)
	TArray<class UProduct_TA*>                         Products_New;                                     		// 0x0044(0x000C) (CPF_Edit, CPF_Const, CPF_EditConst, CPF_NeedCtorLink)
	TArray<class UDLCPack_TA*>                         DLCPacks;                                         		// 0x0050(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<class UProductAsset_TA*>                    AlwaysLoadedAssets;                               		// 0x005C(0x000C) (CPF_Edit, CPF_EditConst, CPF_NeedCtorLink)
	struct FMap_Mirror                                 ProductNameToProductID;                           		// 0x0068(0x003C) (CPF_Const, CPF_Native)
	TArray<struct FAssetLoadRequest>                   LoadAssetQue;                                     		// 0x00A4(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FTemporaryProduct>                   TemporaryProducts;                                		// 0x00B0(0x000C) (CPF_Transient, CPF_Config, CPF_NeedCtorLink)
	class UProductThumbnailQueue_TA*                   ThumbnailQueue;                                   		// 0x00BC(0x0004) (CPF_Const, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductDatabase_TA");
		return ptr;
	}


	class UOnlineProduct_TA* STATIC_FindProductByProductID(int ProductID, TArray<class UOnlineProduct_TA*>* OnlineProducts);
	class UOnlineProduct_TA* STATIC_FindProductByInstanceID(TArray<class UOnlineProduct_TA*>* OnlineProducts);
	void STATIC_DisplaySort(TArray<struct FSortedProductData>* SortedProducts);
	bool STATIC_ContainsOnlineProducts();
	bool STATIC_StaticIsOnlineQuality(TEnumAsByte<enum class EProductQuality> Quality);
	bool STATIC_IsOnlineUnlock(TEnumAsByte<enum class EUnlockMethod> UnlockMethod);
	bool STATIC_IsOnlineID();
	void FlushAsyncLoading();
	bool DoesPlayerOwnProduct(int ProductID, struct FUniqueNetId* PlayerID);
	void RemoveIncompatibleProducts(TArray<int>* OutProducts);
	void RemoveIncompatibleLoadout(struct FLoadoutData* Loadout);
	int ReplaceIncompatibleProduct(int ProductID, TArray<int>* EquippedProducts);
	bool IsProductCompatible(int ProductID, TArray<int>* EquippedProducts);
	void ConvertProductIDs(TArray<int>* ProductIDs, TArray<class UProduct_TA*>* OutProducts);
	void CancelLoadAsset(int ProductID, class UObject* Listener);
	void CancelLoadAssets(class UObject* Listener);
	void LoadAssetByNameAsync(const struct FName& AssetName, const struct FScriptDelegate& OnLoaded);
	void LoadAssetAsync(int ProductID, const struct FScriptDelegate& OnLoaded);
	class UProductAsset_TA* LoadAssetByName(const struct FName& AssetName);
	class UProductAsset_TA* LoadAsset(int ProductID);
	TArray<class UProduct_TA*> GetAllProductsBySlot(class UProductSlot_TA* Slot);
	void AllProductsBySlot(class UProductSlot_TA* Slot, class UProduct_TA** Product);
	void AllProducts(class UProduct_TA** Product);
	class UProduct_TA* GetProductByName(const struct FName& ProductName);
	class UProduct_TA* GetProduct(int Id);
	struct FName GetProductName(int ProductID);
	int GetProductID(const struct FName& ProductName);
};


// Class TAGame.ProductFilter_TA
// 0x0000 (0x003C - 0x003C)
class UProductFilter_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductFilter_TA");
		return ptr;
	}


	void STATIC_AddLogLevel(TEnumAsByte<enum class EProductFilterLogLevel> LogLevel, struct FProductFilter* Filter);
	struct FString STATIC_GetFilterLogString(const struct FProductFilter& Filter);
	void STATIC_SortProductIDs(class UProfile_TA* Profile);
	void STATIC_FilterProducts(struct FProductFilter* Filter);
};


// Class TAGame.ProductLoader_TA
// 0x0020 (0x0068 - 0x0048)
class UProductLoader_TA : public UComponent
{
public:
	TArray<class UProductAsset_TA*>                    Products;                                         		// 0x0048(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	int                                                NumLoadingProducts;                               		// 0x0054(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventAllProductsLoaded__Delegate;               		// 0x0058(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0058(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductLoader_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void CancelLoad();
	void OnAllProductsLoaded();
	void HandleProductLoaded(const struct FAssetLoadResult& Result);
	class UProductAsset_TA* AllProducts(class UClass* ProductClass, class UProductAsset_TA** Asset);
	class UProductAsset_TA* GetProduct(class UClass* ProductClass);
	class UProductAsset_TA* GetProductByID(int ProductID);
	class UProductAsset_TA* GetProductBySlot(class UProductSlot_TA* Slot);
	void LoadClientLoadout(struct FClientLoadoutData* NewLoadout);
	void LoadLoadout(struct FLoadoutData* NewLoadout);
	void FilterItemsForDedicatedServer(TArray<int>* ProductIDs);
	void LoadProducts(TArray<int> ProductIDs);
	void EventAllProductsLoaded(class UProductLoader_TA* Loader);
};


// Class TAGame.ProductPaint_TA
// 0x004C (0x0088 - 0x003C)
class UProductPaint_TA : public UObject
{
public:
	struct FString                                     Label;                                            		// 0x003C(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_EditConst, CPF_NeedCtorLink)
	struct FLinearColor                                PaintColor;                                       		// 0x0048(0x0010) (CPF_Edit)
	struct FLinearColor                                EmissiveColor;                                    		// 0x0058(0x0010) (CPF_Edit)
	struct FLinearColor                                LightAccentColor;                                 		// 0x0068(0x0010) (CPF_Edit)
	struct FLinearColor                                DarkAccentColor;                                  		// 0x0078(0x0010) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductPaint_TA");
		return ptr;
	}


	struct FLinearColor GetPaintColorByType(TEnumAsByte<enum class EPaintAttributeType> PaintType);
	int GetID();
};


// Class TAGame.ProductSlot_TA
// 0x0040 (0x007C - 0x003C)
class UProductSlot_TA : public UObject
{
public:
	struct FString                                     Label;                                            		// 0x003C(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     AnimatedLabel;                                    		// 0x0048(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Description;                                      		// 0x0054(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	int                                                SlotIndex;                                        		// 0x0060(0x0004) (CPF_Const, CPF_Transient)
	class UProduct_TA*                                 DefaultProduct_New;                               		// 0x0064(0x0004) (CPF_Edit)
	class UProductTemplate_TA*                         ProductTemplate;                                  		// 0x0068(0x0004) (CPF_Edit, CPF_Const, CPF_EditInline)
	class UProductAsset_TA*                            ProductAssetTemplate;                             		// 0x006C(0x0004) (CPF_Edit, CPF_Const, CPF_EditInline)
	class UTexture*                                    Icon;                                             		// 0x0070(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bReplicated : 1;                                  		// 0x0074(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bAlwaysCooked : 1;                                		// 0x0074(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bDedicatedServerRelevant : 1;                     		// 0x0074(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bAlwaysLoaded : 1;                                		// 0x0074(0x0004) (CPF_Edit, CPF_Const)
	float                                              DropWeight;                                       		// 0x0078(0x0004) (CPF_Edit, CPF_Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductSlot_TA");
		return ptr;
	}


	int GetDefaultProductID();
};


// Class TAGame.ProductTemplate_TA
// 0x0054 (0x0090 - 0x003C)
class UProductTemplate_TA : public UObject
{
public:
	class UProductSlot_TA*                             Slot;                                             		// 0x003C(0x0004) (CPF_Edit)
	TEnumAsByte<enum class EGameVersion>               GameVersion;                                      		// 0x0040(0x0001) (CPF_Edit)
	TEnumAsByte<enum class EUnlockMethod>              UnlockMethod;                                     		// 0x0041(0x0001) (CPF_Edit)
	TEnumAsByte<enum class EProductQuality>            Quality;                                          		// 0x0042(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x1];                               		// 0x0043(0x0001) MISSED OFFSET
	class UProductAsset_Pack_TA*                       Folder;                                           		// 0x0044(0x0004) (CPF_Edit)
	class UDLCPack_TA*                                 DLC;                                              		// 0x0048(0x0004) (CPF_Const)
	class UClass*                                      StatClass;                                        		// 0x004C(0x0004) (CPF_Edit)
	class UProduct_TA*                                 RequiredProduct;                                  		// 0x0050(0x0004) (CPF_Edit)
	struct FProductReplacement2                        PlatformReplacement;                              		// 0x0054(0x0010) (CPF_NeedCtorLink)
	TArray<TEnumAsByte<enum class EConsoleType>>       PlatformExclusive;                                		// 0x0064(0x000C) (CPF_NeedCtorLink)
	TArray<TEnumAsByte<enum class EProductTradeRestriction>> TradeRestrictions;                                		// 0x0070(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<class UProductAttribute_TA*>                Attributes;                                       		// 0x007C(0x000C) (CPF_Edit, CPF_NeedCtorLink, CPF_EditInline)
	unsigned long                                      bLocalized : 1;                                   		// 0x0088(0x0004) (CPF_Edit)
	unsigned long                                      bAutoGenerateDLCPack : 1;                         		// 0x0088(0x0004) (CPF_Edit)
	unsigned long                                      bLicensed : 1;                                    		// 0x0088(0x0004)
	int                                                SortPriority;                                     		// 0x008C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductTemplate_TA");
		return ptr;
	}

};


// Class TAGame.Product_TA
// 0x0018 (0x00A8 - 0x0090)
class UProduct_TA : public UProductTemplate_TA
{
public:
	struct FName                                       AssetPackageName;                                 		// 0x0090(0x0008) (CPF_Edit, CPF_Const)
	struct FString                                     AssetPath;                                        		// 0x0098(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)
	unsigned long                                      bReplaced : 1;                                    		// 0x00A4(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bPack : 1;                                        		// 0x00A4(0x0004) (CPF_Edit, CPF_Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Product_TA");
		return ptr;
	}


	struct FString GetLongLabel();
	struct FString GetDisplayLabelSlot();
	TEnumAsByte<enum class EProductQuality> GetQuality();
	bool IsPlatformExclusive();
	bool IsLicensed();
	bool IsSchematic();
	bool IsContainerKey();
	bool IsContainer();
	bool CanEquip();
	TArray<class UProductAttribute_TA*> GetAttributes();
	class UProductAttribute_TA* GetAttribute(class UClass* AttributeClass);
	TArray<TEnumAsByte<enum class EConsoleType>> GetPlatforms();
	void LoadAssetAsync(const struct FScriptDelegate& Callback);
	class UProductAsset_TA* LoadAsset();
	struct FString GetTrademarkLabel();
	struct FString GetLabel();
	int GetID();
	int GetPackID();
};


// Class TAGame.ProductThumbnail_TA
// 0x000C (0x0048 - 0x003C)
class UProductThumbnail_TA : public UObject
{
public:
	class UTexture*                                    Texture;                                          		// 0x003C(0x0004) (CPF_Transient)
	class UTextureRenderTarget2D*                      RenderTarget;                                     		// 0x0040(0x0004) (CPF_Transient)
	int                                                RenderCount;                                      		// 0x0044(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductThumbnail_TA");
		return ptr;
	}


	void ResetRenderCount();
};


// Class TAGame.ProductThumbnailQueue_TA
// 0x003C (0x0078 - 0x003C)
class UProductThumbnailQueue_TA : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C(0x0004) (CPF_Const, CPF_Native, CPF_NoExport)
	TArray<int>                                        ThumbnailSizes;                                   		// 0x0040(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)
	float                                              RenderDelay;                                      		// 0x004C(0x0004) (CPF_Edit)
	int                                                ThumbnailPurgeThreshold;                          		// 0x0050(0x0004) (CPF_Edit)
	int                                                RenderCountMax;                                   		// 0x0054(0x0004) (CPF_Edit)
	unsigned long                                      bDebug : 1;                                       		// 0x0058(0x0004) (CPF_Edit)
	unsigned long                                      bCreatedThumbnailScene : 1;                       		// 0x0058(0x0004) (CPF_Const, CPF_Transient)
	TArray<struct FRenderThumbnailScene>               SceneQue;                                         		// 0x005C(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FRenderThumbnailRequest>             Requests;                                         		// 0x0068(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	int                                                ThumbnailsCreatedSinceLastPurge;                  		// 0x0074(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductThumbnailQueue_TA");
		return ptr;
	}


	void CancelRenderThumbnail(class UProductAsset_TA* Asset, class UOnlineProduct_TA* OnlineProduct, TEnumAsByte<enum class EProductThumbnailSize> Size);
	void CancelRenderThumbnails(class UObject* Listener);
	void RenderThumbnail(class UProductAsset_TA* Asset, class UOnlineProduct_TA* OnlineProduct, TEnumAsByte<enum class EProductThumbnailSize> Size, const struct FScriptDelegate& OnRendered);
};


// Class TAGame.PSC_Constrained_TA
// 0x0008 (0x0318 - 0x0310)
class UPSC_Constrained_TA : public UParticleSystemComponent
{
public:
	float                                              WorldZ;                                           		// 0x0310(0x0004) (CPF_Edit)
	unsigned long                                      bAttachedRotation : 1;                            		// 0x0314(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PSC_Constrained_TA");
		return ptr;
	}

};


// Class TAGame.Pylon_Soccar_TA
// 0x0074 (0x0400 - 0x038C)
class APylon_Soccar_TA : public APylon
{
public:
	class UAkSoundCue*                                 InGameMusicCue;                                   		// 0x038C(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 GoalScoreSound;                                   		// 0x0390(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 GoalScoreVO;                                      		// 0x0394(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 GameStartStinger;                                 		// 0x0398(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 GoalScoreStinger;                                 		// 0x039C(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 EpicSaveStinger;                                  		// 0x03A0(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 OvertimeStinger;                                  		// 0x03A4(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 WinStinger;                                       		// 0x03A8(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 LoseStinger;                                      		// 0x03AC(0x0004) (CPF_Edit)
	float                                              GoalScoreStingerDelay;                            		// 0x03B0(0x0004) (CPF_Edit)
	struct FRotator                                    FieldOrientation;                                 		// 0x03B4(0x000C) (CPF_Edit, CPF_EditConst)
	struct FVector                                     FieldSize;                                        		// 0x03C0(0x000C) (CPF_Edit, CPF_EditConst)
	struct FVector                                     FieldExtent;                                      		// 0x03CC(0x000C) (CPF_Edit, CPF_EditConst)
	struct FVector                                     FieldCenter;                                      		// 0x03D8(0x000C) (CPF_Edit, CPF_EditConst)
	TArray<class UGoal_TA*>                            Goals;                                            		// 0x03E4(0x000C) (CPF_Edit, CPF_ExportObject, CPF_EditConst, CPF_Component, CPF_NeedCtorLink, CPF_EditInline)
	TArray<class APlayerStart*>                        SpawnPoints;                                      		// 0x03F0(0x000C) (CPF_Edit, CPF_EditConst, CPF_NeedCtorLink)
	float                                              GroundZ;                                          		// 0x03FC(0x0004) (CPF_Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Pylon_Soccar_TA");
		return ptr;
	}


	struct FVector ClampToField(const struct FVector& V);
};


// Class TAGame.Ball_Breakout_TA
// 0x00A8 (0x0894 - 0x07EC)
class ABall_Breakout_TA : public ABall_TA
{
public:
	TArray<struct FBreakoutDamage>                     DamageAtTime;                                     		// 0x07EC(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<int>                                        DamageForceLevels;                                		// 0x07F8(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	unsigned long                                      bClearTeamOnDamage : 1;                           		// 0x0804(0x0004)
	unsigned long                                      bCanDamageOwnTeam : 1;                            		// 0x0804(0x0004)
	float                                              MinDamageVelocity;                                		// 0x0808(0x0004)
	float                                              MinDamageTime;                                    		// 0x080C(0x0004)
	int                                                MinImpactSpeedForCharge;                          		// 0x0810(0x0004)
	float                                              DoubleTapTime;                                    		// 0x0814(0x0004)
	float                                              ForceAccumDecayPerSecond;                         		// 0x0818(0x0004)
	float                                              ForceAccumMax;                                    		// 0x081C(0x0004)
	float                                              ForceAccumRecent;                                 		// 0x0820(0x0004) (CPF_Transient)
	unsigned char                                      LastTeamTouch;                                    		// 0x0824(0x0001) (CPF_Net)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0825(0x0003) MISSED OFFSET
	class ACar_TA*                                     LastCarTouch;                                     		// 0x0828(0x0004)
	int                                                LastDamage;                                       		// 0x082C(0x0004)
	float                                              LastDamageTime;                                   		// 0x0830(0x0004)
	int                                                DamageIndex;                                      		// 0x0834(0x0004) (CPF_Net)
	float                                              AbsorbedForce;                                    		// 0x0838(0x0004) (CPF_Transient)
	struct FAppliedBreakoutDamage                      AppliedDamage;                                    		// 0x083C(0x0018) (CPF_Net)
	struct FScriptDelegate                             __EventDamageIndexChanged__Delegate;              		// 0x0854(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0854(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLastTeamTouchChanged__Delegate;            		// 0x0864(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0864(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventHitNoDamage__Delegate;                     		// 0x0874(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x0874(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventAppliedDamage__Delegate;                   		// 0x0884(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x0884(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Ball_Breakout_TA");
		return ptr;
	}


	float GetDamagePercent();
	bool WillDamage();
	int GetDamageIndexForForce(float Force);
	int GetDamageIndexForTime(float Time);
	void Tick(float DeltaTime);
	void SetLastTeamTouch(unsigned char InLastTeamTouch);
	void ForceDamageIndex(int InIndex);
	void SetDamageIndex(int InIndex);
	void OnRigidBodyCollision(const struct FAccumulatedRigidBodyCollision& Collision);
	void OnCarTouch(class ACar_TA* HitCar, TEnumAsByte<enum class EBallHitType> HitType);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventAppliedDamage(class ABall_Breakout_TA* Ball, const struct FAppliedBreakoutDamage& Damage);
	void EventHitNoDamage(class ABall_Breakout_TA* Ball);
	void EventLastTeamTouchChanged(class ABall_Breakout_TA* Ball, unsigned char InLastTeamTouch);
	void EventDamageIndexChanged(class ABall_Breakout_TA* Ball, int InDamageIndex);
};


// Class TAGame.Ball_Trajectory_TA
// 0x0074 (0x0860 - 0x07EC)
class ABall_Trajectory_TA : public ABall_TA
{
public:
	TArray<struct FVector>                             AccurateTrajectoryPoints;                         		// 0x07EC(0x000C) (CPF_NeedCtorLink)
	TArray<struct FVector>                             AllPoints;                                        		// 0x07F8(0x000C) (CPF_NeedCtorLink)
	float                                              LastCalculateTime;                                		// 0x0804(0x0004)
	float                                              FixedDeltaTime;                                   		// 0x0808(0x0004)
	float                                              TotalPathDistance;                                		// 0x080C(0x0004)
	int                                                FrameCount;                                       		// 0x0810(0x0004)
	int                                                TotalStepCount;                                   		// 0x0814(0x0004)
	int                                                TotalFrameCount;                                  		// 0x0818(0x0004)
	int                                                CurrentStepCount;                                 		// 0x081C(0x0004)
	int                                                StepToPutAPointAt;                                		// 0x0820(0x0004)
	struct FVector                                     LastLocation;                                     		// 0x0824(0x000C)
	struct FVector                                     LastVelocity;                                     		// 0x0830(0x000C)
	struct FVector                                     LastAngularVelocity;                              		// 0x083C(0x000C)
	struct FTrajectorySetup                            TrajectorySettings;                               		// 0x0848(0x0014)
	class UBallTrajectoryComponent_TA*                 TrajectoryComponentToUpdate;                      		// 0x085C(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Ball_Trajectory_TA");
		return ptr;
	}


	bool CalculateTrajectory(const struct FTrajectorySetup& Settings, float TrajectoryScale, class UBallTrajectoryComponent_TA* InTrajectoryComponent, const struct FVector& StartLocation, const struct FVector& LaunchVelocity, const struct FVector& InAngularVelocity, bool bForceUpdate);
	bool CanEverShowTrajectory();
	void PostBeginPlay();
};


// Class TAGame.Vehicle_TA
// 0x00E0 (0x0768 - 0x0688)
class AVehicle_TA : public ARBActor_TA
{
public:
	class UVehicleSim_TA*                              VehicleSim;                                       		// 0x0688(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	float                                              StickyForceGround;                                		// 0x068C(0x0004) (CPF_Edit)
	float                                              StickyForceWall;                                  		// 0x0690(0x0004) (CPF_Edit)
	float                                              AutoFlipTorque;                                   		// 0x0694(0x0004) (CPF_Edit)
	float                                              AutoFlipForce;                                    		// 0x0698(0x0004) (CPF_Edit)
	struct FSuperSonicData                             SuperSonicSettings;                               		// 0x069C(0x0010) (CPF_Edit)
	unsigned long                                      bDriving : 1;                                     		// 0x06AC(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bReplicatedHandbrake : 1;                         		// 0x06AC(0x0004) (CPF_Const, CPF_Net, CPF_Transient)
	unsigned long                                      bOnGround : 1;                                    		// 0x06AC(0x0004) (CPF_Transient)
	unsigned long                                      bSuperSonic : 1;                                  		// 0x06AC(0x0004) (CPF_Transient)
	unsigned long                                      bPodiumMode : 1;                                  		// 0x06AC(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bDebugNetworkWhenDriving : 1;                     		// 0x06AC(0x0004)
	struct FVehicleInputs                              Input;                                            		// 0x06B0(0x0020) (CPF_Const, CPF_Transient)
	unsigned char                                      ReplicatedThrottle;                               		// 0x06D0(0x0001) (CPF_Const, CPF_Net, CPF_Transient)
	unsigned char                                      ReplicatedSteer;                                  		// 0x06D1(0x0001) (CPF_Const, CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData00[0x2];                               		// 0x06D2(0x0002) MISSED OFFSET
	class AAIController_TA*                            AIController;                                     		// 0x06D4(0x0004) (CPF_Transient)
	class APlayerController_TA*                        PlayerController;                                 		// 0x06D8(0x0004) (CPF_Transient)
	class APRI_TA*                                     PRI;                                              		// 0x06DC(0x0004) (CPF_Transient)
	class UObjectListComponent_X*                      CarComponents;                                    		// 0x06E0(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	int                                                VehicleUpdateTag;                                 		// 0x06E4(0x0004) (CPF_Const, CPF_Transient)
	struct FBallInteractionSettings                    BallInteraction;                                  		// 0x06E8(0x002C) (CPF_Edit, CPF_NeedCtorLink)
	struct FCarInteractionSettings                     CarInteraction;                                   		// 0x0714(0x0018) (CPF_Edit)
	struct FVector                                     LocalCollisionOffset;                             		// 0x072C(0x000C) (CPF_Const, CPF_Transient)
	struct FVector                                     LocalCollisionExtent;                             		// 0x0738(0x000C) (CPF_Const, CPF_Transient)
	int                                                LastHitBallFrame;                                 		// 0x0744(0x0004) (CPF_Transient)
	class ACarComponent_Boost_TA*                      BoostComponent;                                   		// 0x0748(0x0004) (CPF_Transient)
	class ACarComponent_Dodge_TA*                      DodgeComponent;                                   		// 0x074C(0x0004) (CPF_Transient)
	class ACarComponent_AirControl_TA*                 AirControlComponent;                              		// 0x0750(0x0004) (CPF_Transient)
	class UPitchTekDrawingComponent_TA*                PitchTekComponent;                                		// 0x0754(0x0004) (CPF_Const, CPF_ExportObject, CPF_Component, CPF_EditInline)
	struct FScriptDelegate                             __EventPRIChanged__Delegate;                      		// 0x0758(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0758(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Vehicle_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void OnSuperSonicChanged();
	void OnGroundChanged();
	float GetForwardSpeed();
	float GetTimeOffGround();
	float GetTimeOnGround();
	struct FVector GetGroundNormal();
	bool IsOnWall();
	bool IsOnGround();
	struct FVector GetGroundLocation();
	int GetNumWheelWorldContacts();
	int GetNumWheelContacts();
	void UpdateNumLocalPlayers(class UGameViewportClient_TA* GVC, int LocalPlayerCount);
	void HandleLocalPlayerLeave(class ULocalPlayer* OldPlayer);
	void HandleLocalPlayerJoin(class ULocalPlayer* NewPlayer);
	void InitAudioSettings(bool bIsLocal, TEnumAsByte<enum class ESplitScreenPosition> SplitScreenPosition);
	void UpdateSplitScreenStatus();
	void ZeroMovementVariables();
	void SetVehicleInput(const struct FVehicleInputs& NewInput);
	void EnablePodiumMode();
	void SetDriving(bool bDrive);
	void OnPRIChanged();
	void OnControllerChanged();
	void UnPossessed();
	void PossessedBy(class AController* C, bool bVehicleTransition);
	void ReplicatedEvent(const struct FName& VarName);
	void EventPRIChanged(class AVehicle_TA* Vehicle);
};


// Class TAGame.RBHistory_TA
// 0x0028 (0x0070 - 0x0048)
class URBHistory_TA : public UComponent
{
public:
	TArray<int>                                        FrameSnapshots;                                   		// 0x0048(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	TArray<unsigned long>                              DirtySnapshots;                                   		// 0x0054(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FRBPhysicsSnapshot>                  RBPhysicsSnapshots;                               		// 0x0060(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	int                                                RecordIndex;                                      		// 0x006C(0x0004) (CPF_Const, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RBHistory_TA");
		return ptr;
	}

};


// Class TAGame.RBVehicleHistory_TA
// 0x003C (0x00AC - 0x0070)
class URBVehicleHistory_TA : public URBHistory_TA
{
public:
	float                                              InputFadeTime;                                    		// 0x0070(0x0004) (CPF_Edit)
	TArray<struct FRBVehicleSnapshot>                  RBVehicleSnapshots;                               		// 0x0074(0x000C) (CPF_Const, CPF_Transient, CPF_Component, CPF_NeedCtorLink)
	TArray<struct FCarComponentHistory>                ComponentHistories;                               		// 0x0080(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	struct FVehicleInputs                              BackupVehicleInputs;                              		// 0x008C(0x0020) (CPF_Const, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RBVehicleHistory_TA");
		return ptr;
	}

};


// Class TAGame.RBVehiclePart_TA
// 0x000C (0x01F8 - 0x01EC)
class ARBVehiclePart_TA : public AActor
{
public:
	int                                                MaxVehicleParts;                                  		// 0x01EC(0x0004) (CPF_Edit, CPF_Const)
	class UAkParamGroup*                               Ak;                                               		// 0x01F0(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UImpactEffectsComponent_TA*                  ImpactEffectsComponent;                           		// 0x01F4(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RBVehiclePart_TA");
		return ptr;
	}


	void SetCollisionComponent(class UPrimitiveComponent* PrimComp);
	void CopyPrimitive(class UPrimitiveComponent* From, class UPrimitiveComponent* To);
	class UVehiclePartSkeletalMeshComponent_TA* CopySkeletalMesh(class USkeletalMeshComponent* InComponent, class UPhysicsAsset* CollisionAsset);
	class UVehiclePartStaticMeshComponent_TA* CopyStaticMesh(class UStaticMeshComponent* InComponent, class URB_BodySetup* BodySetup);
	void RemoveOldVehiclePart();
	void InitFX();
	void PostBeginPlay();
};


// Class TAGame.Replay_TA
// 0x01AC (0x01E8 - 0x003C)
class UReplay_TA : public UObject
{
public:
	struct FString                                     ReplayName;                                       		// 0x003C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                EngineVersion;                                    		// 0x0048(0x0004) (CPF_Const, CPF_Transient)
	int                                                LicenseeVersion;                                  		// 0x004C(0x0004) (CPF_Const, CPF_Transient)
	int                                                ReplayVersion;                                    		// 0x0050(0x0004) (CPF_Const)
	int                                                GameVersion;                                      		// 0x0054(0x0004) (CPF_Const)
	int                                                BuildID;                                          		// 0x0058(0x0004) (CPF_Const)
	int                                                Changelist;                                       		// 0x005C(0x0004) (CPF_Const)
	struct FString                                     BuildVersion;                                     		// 0x0060(0x000C) (CPF_Const, CPF_NeedCtorLink)
	float                                              RecordFPS;                                        		// 0x006C(0x0004) (CPF_Const, CPF_Config, CPF_DataBinding)
	float                                              KeyframeDelay;                                    		// 0x0070(0x0004) (CPF_Const, CPF_Config)
	int                                                MaxChannels;                                      		// 0x0074(0x0004) (CPF_Const, CPF_Config)
	int                                                MaxReplaySizeMB;                                  		// 0x0078(0x0004) (CPF_Const, CPF_Config)
	TArray<class UClass*>                              PlaybackClasses;                                  		// 0x007C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UClass*>                              IgnoreClasses;                                    		// 0x0088(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     Filename;                                         		// 0x0094(0x000C) (CPF_Transient, CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     Id;                                               		// 0x00A0(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FName                                       MapName;                                          		// 0x00AC(0x0008) (CPF_Const, CPF_DataBinding)
	struct FString                                     Date;                                             		// 0x00B4(0x000C) (CPF_Const, CPF_NeedCtorLink, CPF_DataBinding)
	int                                                NumFrames;                                        		// 0x00C0(0x0004) (CPF_Const, CPF_DataBinding)
	struct FName                                       MatchType;                                        		// 0x00C4(0x0008) (CPF_DataBinding)
	struct FString                                     PlayerName;                                       		// 0x00CC(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	unsigned long                                      bFileCorrupted : 1;                               		// 0x00D8(0x0004) (CPF_Const, CPF_DataBinding)
	unsigned long                                      bForceKeyframe : 1;                               		// 0x00D8(0x0004) (CPF_Const, CPF_Transient)
	unsigned long                                      bLoadedNetPackages : 1;                           		// 0x00D8(0x0004) (CPF_Const, CPF_Transient)
	unsigned long                                      bDebug : 1;                                       		// 0x00D8(0x0004) (CPF_Edit, CPF_Transient)
	TArray<unsigned char>                              Data;                                             		// 0x00DC(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FReplayKeyframe>                     KeyFrames;                                        		// 0x00E8(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	TEnumAsByte<enum class EReplayState>               ReplayState;                                      		// 0x00F4(0x0001) (CPF_Const, CPF_Transient)
	unsigned char                                      UnknownData00[0x3];                               		// 0x00F5(0x0003) MISSED OFFSET
	int                                                CurrentFrame;                                     		// 0x00F8(0x0004) (CPF_Const, CPF_Transient)
	int                                                NextKeyframe;                                     		// 0x00FC(0x0004) (CPF_Const, CPF_Transient)
	float                                              CurrentTime;                                      		// 0x0100(0x0004) (CPF_Const, CPF_Transient)
	TArray<struct FReplayActorChannel>                 Channels;                                         		// 0x0104(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	struct FMap_Mirror                                 ChannelsMap;                                      		// 0x0110(0x003C) (CPF_Const, CPF_Native, CPF_Transient)
	class UPackageMap*                                 PackageMap;                                       		// 0x014C(0x0004) (CPF_Const, CPF_Transient)
	TArray<struct FName>                               Levels;                                           		// 0x0150(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	TArray<int>                                        FreeChannels;                                     		// 0x015C(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	float                                              AccumulatedDeltaTime;                             		// 0x0168(0x0004) (CPF_Const, CPF_Transient)
	float                                              TimeToSkipTo;                                     		// 0x016C(0x0004) (CPF_Const, CPF_Transient)
	int                                                FrameToSkipTo;                                    		// 0x0170(0x0004) (CPF_Const, CPF_Transient)
	int                                                PlayersOnlyTicks;                                 		// 0x0174(0x0004) (CPF_Const, CPF_Transient)
	struct FPointer                                    WriterAr;                                         		// 0x0178(0x0004) (CPF_Const, CPF_Native, CPF_Transient)
	struct FPointer                                    ReaderAr;                                         		// 0x017C(0x0004) (CPF_Const, CPF_Native, CPF_Transient)
	TArray<struct FReplayLogItem>                      Logs;                                             		// 0x0180(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FTimelineKeyframe>                   TimelineKeyframes;                                		// 0x018C(0x000C) (CPF_Transient, CPF_NeedCtorLink, CPF_DataBinding)
	struct FScriptDelegate                             __EventPlaybackStopped__Delegate;                 		// 0x0198(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0198(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSpawned__Delegate;                         		// 0x01A8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x01A8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPreTimeSkip__Delegate;                     		// 0x01B8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x01B8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPostTimeSkip__Delegate;                    		// 0x01C8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x01C8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPlayedFrame__Delegate;                     		// 0x01D8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData05[0x4];                               		// 0x01D8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Replay_TA");
		return ptr;
	}


	bool STATIC_IsFromBeforeGameVersion(unsigned char BeforeGameVersion);
	bool STATIC_IsFromBeforeReplayVersion(unsigned char BeforeReplayVersion);
	struct FName GetMapToLoad();
	void SetReplayName(const struct FString& NewName);
	void RemoveTimelineKeyframe(int KeyframeIndex);
	void AddTimelineKeyframe(const struct FName& Type, int frame);
	void STATIC_ReplayLog(class UObject* context, const struct FString& Text);
	void TrimData(int FirstKeyframe, int FirstFrame);
	class UReplay_TA* CreateCopy(float StartTime);
	void ImportReplay(const struct FString& Path);
	void ExportReplay(const struct FString& Path);
	void SkipToFrame(int frame, bool bFlush);
	void SkipToTime(float Time, bool bFlush);
	class AActor* GetPlaybackActor(const struct FName& RecordedActorName);
	float GetReplayTimeSeconds();
	void StopPlayback();
	void StartPlaybackAtFrame(int StartFrame);
	void StartPlaybackAtTimeSeconds(float StartTime);
	void StopRecord();
	void StartRecord();
	void Tick(float DeltaTime);
	void AllReplayActors(class UClass* BaseClass, class AActor** Actor);
	void PreExport();
	void EventPlayedFrame(class UReplay_TA* Replay);
	void EventPostTimeSkip(class UReplay_TA* Replay);
	void EventPreTimeSkip(class UReplay_TA* Replay);
	void EventSpawned(class UReplay_TA* Replay, class AActor* A);
	void EventPlaybackStopped(class UReplay_TA* Replay);
};


// Class TAGame.ReplayComponent_TA
// 0x0007 (0x006C - 0x0065)
class UReplayComponent_TA : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                               		// 0x0065(0x0003) MISSED OFFSET
	unsigned long                                      bRecording : 1;                                   		// 0x0068(0x0004) (CPF_Const, CPF_Transient)
	unsigned long                                      bPlaying : 1;                                     		// 0x0068(0x0004) (CPF_Const, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ReplayComponent_TA");
		return ptr;
	}

};


// Class TAGame.ReplayManager_TA
// 0x008C (0x00C8 - 0x003C)
class UReplayManager_TA : public UObject
{
public:
	struct FString                                     ReplaysPath;                                      		// 0x003C(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)
	class UTickComponent_X*                            TickComponent;                                    		// 0x0048(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	TArray<struct FPointer>                            ExportTasks;                                      		// 0x004C(0x000C) (CPF_Native, CPF_Transient)
	TArray<struct FPointer>                            ClassTasks;                                       		// 0x0058(0x000C) (CPF_Native, CPF_Transient)
	TArray<struct FPointer>                            ImportTasks;                                      		// 0x0064(0x000C) (CPF_Native, CPF_Transient)
	struct FPointer                                    HeadersCountTask;                                 		// 0x0070(0x0004) (CPF_Native, CPF_Transient)
	TArray<struct FPointer>                            HeaderLoadTasks;                                  		// 0x0074(0x000C) (CPF_Native, CPF_Transient)
	TArray<struct FReplayExportCallbackData>           ExportCallbacks;                                  		// 0x0080(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FReplayImportCallbackData>           ImportCallbacks;                                  		// 0x008C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventExportFinished__Delegate;                  		// 0x0098(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0098(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventImportFinished__Delegate;                  		// 0x00A8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x00A8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventHeadersLoaded__Delegate;                   		// 0x00B8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x00B8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ReplayManager_TA");
		return ptr;
	}


	void SetTick(bool bTick);
	void Tick(float DeltaTime);
	void DeleteReplay(const struct FString& Filename);
	void ExportReplay(class UReplay_TA* Replay, const struct FScriptDelegate& Callback);
	void ImportReplay(const struct FString& Filename, const struct FScriptDelegate& Callback, bool bSyncronous);
	void LoadHeader(const struct FString& Filename, const struct FScriptDelegate& Callback);
	void LoadHeaders(const struct FScriptDelegate& Callback);
	struct FString GetReplayFolder();
	void Init();
	class UReplayManager_TA* STATIC_GetInstance();
	bool IsExporting();
	void EventHeadersLoaded(class UReplayManager_TA* Manager, TArray<struct FReplayHeaderLoadResult> Headers);
	void EventImportFinished(class UReplayManager_TA* Manager, class UReplay_TA* Replay, class UError_X* Error);
	void EventExportFinished(class UReplayManager_TA* Manager, const struct FString& Id, class UError_X* Error);
};


// Class TAGame.RPC_TA
// 0x0000 (0x0094 - 0x0094)
class URPC_TA : public URPC_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TA");
		return ptr;
	}

};


// Class TAGame.RPC_AddBuild_TA
// 0x0054 (0x00E8 - 0x0094)
class URPC_AddBuild_TA : public URPC_TA
{
public:
	int                                                Id;                                               		// 0x0094(0x0004)
	int                                                CL;                                               		// 0x0098(0x0004)
	struct FString                                     Branch;                                           		// 0x009C(0x000C) (CPF_NeedCtorLink)
	struct FString                                     BuildVersion;                                     		// 0x00A8(0x000C) (CPF_NeedCtorLink)
	struct FString                                     Label;                                            		// 0x00B4(0x000C) (CPF_NeedCtorLink)
	struct FString                                     FeaturesFilter;                                   		// 0x00C0(0x000C) (CPF_NeedCtorLink)
	int                                                GameVersion;                                      		// 0x00CC(0x0004)
	struct FString                                     Configuration;                                    		// 0x00D0(0x000C) (CPF_NeedCtorLink)
	struct FString                                     Environment;                                      		// 0x00DC(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_AddBuild_TA");
		return ptr;
	}


	void Init();
};


// Class TAGame.SaveGameManager_TA
// 0x0050 (0x00A8 - 0x0058)
class USaveGameManager_TA : public UTickableStateObject_X
{
public:
	class USaveObjectManager_TA*                       SaveObjectManager;                                		// 0x0058(0x0004)
	struct FString                                     SaveDataID;                                       		// 0x005C(0x000C) (CPF_NeedCtorLink)
	class ULocalPlayer_TA*                             Player;                                           		// 0x0068(0x0004) (CPF_Transient)
	class USaveData_TA*                                SaveData;                                         		// 0x006C(0x0004) (CPF_ExportObject, CPF_NeedCtorLink, CPF_EditInline)
	int                                                HardVersion;                                      		// 0x0070(0x0004) (CPF_Const)
	float                                              MinTimeBetweenSaves;                              		// 0x0074(0x0004) (CPF_Config)
	float                                              LastSaveTime;                                     		// 0x0078(0x0004) (CPF_Transient)
	class UError_X*                                    DataLoadError;                                    		// 0x007C(0x0004) (CPF_Transient)
	class UError_X*                                    DataSaveError;                                    		// 0x0080(0x0004) (CPF_Transient)
	unsigned long                                      bDataLoaded : 1;                                  		// 0x0084(0x0004) (CPF_Transient)
	unsigned long                                      bUserIgnoredLoadFailure : 1;                      		// 0x0084(0x0004) (CPF_Transient)
	unsigned long                                      bEnableSaving : 1;                                		// 0x0084(0x0004) (CPF_Transient)
	unsigned long                                      bDisableSaveOSS : 1;                              		// 0x0084(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventDataLoaded__Delegate;                      		// 0x0088(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0088(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDataSaved__Delegate;                       		// 0x0098(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0098(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveGameManager_TA");
		return ptr;
	}


	bool DeleteMount();
	void HandleNoSpaceSystemDialogComplete(bool bContinueWithouSaving);
	void Save_Internal();
	void ClearSaveTimer();
	void SetSaveTimer(float Delay);
	void HandleDataSaved(const struct FSaveObjectResult& Result);
	void Save(bool ForceSave);
	void UserIgnoredLoadFailure(bool bValue);
	void HandleProceedWithDefaultSaveData(struct FLoadObjectResult* StructInitializer__s_2546F990441F3162C858E79EAA5A7D4F);
	void DisableSaving();
	void EnableSaving();
	void HandleDataLoaded(const struct FLoadObjectResult& Result);
	bool Load();
	void NotifyWhenLoaded(const struct FScriptDelegate& Callback);
	void HandlePlayerLoginStatusChange(class UOnlinePlayer_X* OnlinePlayer);
	void Init(class ULocalPlayer_TA* InPlayer);
	struct FString GetSaveFilename();
	void EventDataSaved(class USaveGameManager_TA* Manager, class USaveData_TA* MySaveData, class UError_X* Error);
	void EventDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* MySaveData, class UError_X* Error);
};


// Class TAGame.SaveObjectManager_TA
// 0x0094 (0x00D0 - 0x003C)
class USaveObjectManager_TA : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                          		// 0x003C(0x0004) (CPF_Const, CPF_Native, CPF_NoExport)
	TArray<struct FPointer>                            ImportTasks;                                      		// 0x0040(0x000C) (CPF_Native, CPF_Transient, CPF_AlwaysInit)
	TArray<struct FScriptDelegate>                     ImportCallbacks;                                  		// 0x004C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FPointer>                            ExportTasks;                                      		// 0x0058(0x000C) (CPF_Native, CPF_Transient, CPF_AlwaysInit)
	TArray<struct FPointer>                            ListFilesTasks;                                   		// 0x0064(0x000C) (CPF_Native, CPF_Transient, CPF_AlwaysInit)
	TArray<struct FScriptDelegate>                     ListFilesCallbacks;                               		// 0x0070(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	int                                                KeepNewestSaveFileCount;                          		// 0x007C(0x0004)
	unsigned char                                      UnknownData00[0x8];                               		// 0x0080(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.SaveObjectManager_TA.CurrentUser
	class UObject*                                     SaveData;                                         		// 0x0088(0x0004)
	struct FString                                     SavePath;                                         		// 0x008C(0x000C) (CPF_NeedCtorLink)
	int                                                ControllerId;                                     		// 0x0098(0x0004)
	unsigned long                                      bSaving : 1;                                      		// 0x009C(0x0004) (CPF_Transient)
	unsigned long                                      bPlayerSaveData : 1;                              		// 0x009C(0x0004) (CPF_Edit)
	struct FScriptDelegate                             __EventDataLoaded__Delegate;                      		// 0x00A0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x00A0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDataSaved__Delegate;                       		// 0x00B0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x00B0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnFilesListed__Delegate;                        		// 0x00C0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x00C0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveObjectManager_TA");
		return ptr;
	}


	void CancelGetHeaders(const struct FScriptDelegate& Callback);
	void GetHeaders(int InControllerID, const struct FString& InPath, const struct FString& InPattern, const struct FScriptDelegate& Callback);
	void SetNewFileSaveCount(int Count);
	void HandleSaveResult(TEnumAsByte<enum class ESaveGameResult> Result, struct FSaveObjectResult* StructInitializer__s_327729354958C1690060BB8C078C5770);
	class UError_X* GetSaveError(TEnumAsByte<enum class ESaveGameResult> Result);
	class UError_X* GetLoadError(TEnumAsByte<enum class EBasicLoadResult> InResult);
	void LoadAsync(int ControllerIndex, class UObject* RootObj, const struct FString& PathName, int Version, bool bExactFileMatch, const struct FScriptDelegate& Callback);
	struct FLoadObjectResult Load(int InControllerID, class UObject* RootObj, const struct FString& PathName, int Version, bool bExactFileMatch);
	void SaveAsync(int InControllerID, class UObject* RootObj, const struct FString& PathName, int Version, bool bExactFileMatch);
	struct FSaveObjectResult Save(int InControllerID, class UObject* RootObj, const struct FString& PathName, int Version, bool bExactFileMatch);
	void DecrementSaveManagerCounter();
	void IncrementSaveManagerCounter();
	int STATIC_GetSaveDataSpace(int ControllerIndex);
	struct FString GetPlatformSavePath(const struct FString& DefaultPath, const struct FUniqueNetId& PlayerID);
	bool DeleteMount(int ControllerIndex, const struct FString& PathName);
	bool DeleteFiles(int ControllerIndex, const struct FString& PathName, int KeepNewestFileCount);
	bool IsReadingSaveData();
	void LoadGameDataAsync(int ControllerIndex, class UObject* RootObj, int Version, const struct FString& PathName, bool bExactFileMatch, const struct FScriptDelegate& Callback);
	TEnumAsByte<enum class EBasicLoadResult> LoadGameData(int ControllerIndex, class UObject* RootObj, int Version, const struct FString& PathName, bool bExactFileMatch);
	bool IsDoneSaving();
	bool IsSaving();
	TEnumAsByte<enum class ESaveGameResult> UpdateSaveResult(int ControllerIndex);
	TEnumAsByte<enum class ESaveGameResult> SaveGameDataAsync(int ControllerIndex, class UObject* RootObj, int Version, const struct FString& PathName, bool bExactFileMatch);
	TEnumAsByte<enum class ESaveGameResult> SaveGameData(int ControllerIndex, class UObject* RootObj, int Version, const struct FString& PathName, bool bExactFileMatch);
	void OnFilesListed(TArray<struct FString> Files, TEnumAsByte<enum class EBasicLoadResult> Result);
	void EventDataSaved(const struct FSaveObjectResult& Result);
	void EventDataLoaded(const struct FLoadObjectResult& Result);
};


// Class TAGame.SaveObjectSerializer_TA
// 0x0005 (0x0041 - 0x003C)
class USaveObjectSerializer_TA : public USerializer_X
{
public:
	int                                                Version;                                          		// 0x003C(0x0004) (CPF_Edit)
	TEnumAsByte<enum class EBasicLoadResult>           Result;                                           		// 0x0040(0x0001) (CPF_Const, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveObjectSerializer_TA");
		return ptr;
	}


	class USaveObjectSerializer_TA* SetVersion(int InVersion);
	void DeserializeObject(class UObject* Target, TArray<unsigned char>* InData);
	void SerializeObject(class UObject* Target, TArray<unsigned char>* OutData);
	class USaveObjectSerializer_TA* STATIC_CreateNew(int InVersion);
};


// Class TAGame.SeqEvent_UIStateChange_TA
// 0x0001 (0x0115 - 0x0114)
class USeqEvent_UIStateChange_TA : public USequenceEvent
{
public:
	TEnumAsByte<enum class EUIMenuState>               UIState;                                          		// 0x0114(0x0001) (CPF_Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_UIStateChange_TA");
		return ptr;
	}

};


// Class TAGame.SimpleSpringComponent_TA
// 0x0078 (0x00C0 - 0x0048)
class USimpleSpringComponent_TA : public UComponent
{
public:
	struct FSimpleSpringSettings                       Spring;                                           		// 0x0048(0x0050) (CPF_Edit)
	struct FVector                                     Displacement;                                     		// 0x0098(0x000C) (CPF_Transient)
	struct FVector                                     MassLocation;                                     		// 0x00A4(0x000C) (CPF_Transient)
	struct FVector                                     MassVelocity;                                     		// 0x00B0(0x000C) (CPF_Transient)
	unsigned long                                      bInitialized : 1;                                 		// 0x00BC(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SimpleSpringComponent_TA");
		return ptr;
	}


	void DrawDebug(const struct FRotator& BaseRotation);
	struct FVector GetNormalizedDisplacement();
	void AddForce(const struct FVector& Force);
	void UpdateSpring(float DeltaTime, struct FVector* BaseLocation, struct FRotator* BaseRotation);
	void UpdatePrimitive(float DeltaTime, class UPrimitiveComponent* BaseComponent);
};


// Class TAGame.AntennaComponent_TA
// 0x004C (0x010C - 0x00C0)
class UAntennaComponent_TA : public USimpleSpringComponent_TA
{
public:
	struct FName                                       TopperSocket;                                     		// 0x00C0(0x0008) (CPF_Edit)
	class USkeletalMesh*                               AntennaMesh;                                      		// 0x00C8(0x0004) (CPF_Edit)
	class UMaterialInterface*                          AntennaMaterial;                                  		// 0x00CC(0x0004) (CPF_Edit)
	class UAnimTree*                                   AnimTreeTemplate;                                 		// 0x00D0(0x0004) (CPF_Edit)
	TArray<struct FName>                               BendyBoneControllers;                             		// 0x00D4(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	float                                              BendScale;                                        		// 0x00E0(0x0004)
	float                                              PitchScale;                                       		// 0x00E4(0x0004) (CPF_Edit)
	float                                              RollScale;                                        		// 0x00E8(0x0004) (CPF_Edit)
	float                                              PitchZScale;                                      		// 0x00EC(0x0004) (CPF_Edit)
	float                                              RollZScale;                                       		// 0x00F0(0x0004) (CPF_Edit)
	class UMaterialInstanceConstant*                   TopperMaterial;                                   		// 0x00F4(0x0004) (CPF_Transient)
	float                                              LastTopperWindSpeedParamValue;                    		// 0x00F8(0x0004) (CPF_Transient)
	class USkeletalMeshComponent_TA*                   AntennaSK;                                        		// 0x00FC(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	TArray<class USkelControlSingleBone*>              BendyControls;                                    		// 0x0100(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AntennaComponent_TA");
		return ptr;
	}


	void UpdateSpring(float DeltaTime, struct FVector* BaseLocation, struct FRotator* BaseRotation);
	void SetTopperMaterial(class UMaterialInstanceConstant* InTopperMaterial);
	void InitAntenna(class USkeletalMeshComponent_TA* AttachToMesh);
};


// Class TAGame.SkelControlRotationSpring_TA
// 0x0054 (0x0140 - 0x00EC)
class USkelControlRotationSpring_TA : public USkelControlSingleBone
{
public:
	struct FRotator                                    RotationMin;                                      		// 0x00EC(0x000C) (CPF_Edit)
	struct FRotator                                    RotationMax;                                      		// 0x00F8(0x000C) (CPF_Edit)
	struct FVector                                     SpringToPitch;                                    		// 0x0104(0x000C) (CPF_Edit)
	struct FVector                                     SpringToYaw;                                      		// 0x0110(0x000C) (CPF_Edit)
	struct FVector                                     SpringToRoll;                                     		// 0x011C(0x000C) (CPF_Edit)
	class USimpleSpringComponent_TA*                   SpringComponent;                                  		// 0x0128(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	struct FVector                                     TestSpringForce;                                  		// 0x012C(0x000C) (CPF_Edit)
	float                                              TestSpringDelay;                                  		// 0x0138(0x0004) (CPF_Edit)
	float                                              LastTestSpringTime;                               		// 0x013C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkelControlRotationSpring_TA");
		return ptr;
	}

};


// Class TAGame.SkelControlSingleBoneCopy_TA
// 0x0070 (0x015C - 0x00EC)
class USkelControlSingleBoneCopy_TA : public USkelControlSingleBone
{
public:
	struct FName                                       ControlToCopyName;                                		// 0x00EC(0x0008) (CPF_Edit)
	struct USkelControlSingleBoneCopy_TA_FAxisConversion TranslationX;                                     		// 0x00F4(0x000C) (CPF_Edit)
	struct USkelControlSingleBoneCopy_TA_FAxisConversion TranslationY;                                     		// 0x0100(0x000C) (CPF_Edit)
	struct USkelControlSingleBoneCopy_TA_FAxisConversion TranslationZ;                                     		// 0x010C(0x000C) (CPF_Edit)
	struct USkelControlSingleBoneCopy_TA_FAxisConversion RotationPitch;                                    		// 0x0118(0x000C) (CPF_Edit)
	struct USkelControlSingleBoneCopy_TA_FAxisConversion RotationYaw;                                      		// 0x0124(0x000C) (CPF_Edit)
	struct USkelControlSingleBoneCopy_TA_FAxisConversion RotationRoll;                                     		// 0x0130(0x000C) (CPF_Edit)
	struct FVector                                     TranslationScale;                                 		// 0x013C(0x000C)
	struct FVector                                     RotationScale;                                    		// 0x0148(0x000C)
	unsigned long                                      bConvertedScales : 1;                             		// 0x0154(0x0004)
	class USkelControlSingleBone*                      ControlToCopy;                                    		// 0x0158(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkelControlSingleBoneCopy_TA");
		return ptr;
	}

};


// Class TAGame.SkelControlSingleBoneParameterized_TA
// 0x00A8 (0x0194 - 0x00EC)
class USkelControlSingleBoneParameterized_TA : public USkelControlSingleBone
{
public:
	struct FRawDistributionFloat                       Pitch;                                            		// 0x00EC(0x001C) (CPF_Edit, CPF_Component, CPF_NeedCtorLink)
	struct FRawDistributionFloat                       Yaw;                                              		// 0x0108(0x001C) (CPF_Edit, CPF_Component, CPF_NeedCtorLink)
	struct FRawDistributionFloat                       Roll;                                             		// 0x0124(0x001C) (CPF_Edit, CPF_Component, CPF_NeedCtorLink)
	struct FRawDistributionFloat                       PitchSpeed;                                       		// 0x0140(0x001C) (CPF_Edit, CPF_Component, CPF_NeedCtorLink)
	struct FRawDistributionFloat                       YawSpeed;                                         		// 0x015C(0x001C) (CPF_Edit, CPF_Component, CPF_NeedCtorLink)
	struct FRawDistributionFloat                       RollSpeed;                                        		// 0x0178(0x001C) (CPF_Edit, CPF_Component, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkelControlSingleBoneParameterized_TA");
		return ptr;
	}

};


// Class TAGame.SkelControlTether_TA
// 0x0010 (0x00CC - 0x00BC)
class USkelControlTether_TA : public USkelControlBase
{
public:
	struct FName                                       AnchorBoneName;                                   		// 0x00BC(0x0008) (CPF_Edit)
	float                                              DistanceMin;                                      		// 0x00C4(0x0004) (CPF_Edit)
	float                                              DistanceMax;                                      		// 0x00C8(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkelControlTether_TA");
		return ptr;
	}

};


// Class TAGame.SkeletalMeshActor_NoSlomo_TA
// 0x0000 (0x022C - 0x022C)
class ASkeletalMeshActor_NoSlomo_TA : public ASkeletalMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkeletalMeshActor_NoSlomo_TA");
		return ptr;
	}

};


// Class TAGame.SkeletalMeshActorMAT_Products_TA
// 0x0074 (0x02AC - 0x0238)
class ASkeletalMeshActorMAT_Products_TA : public ASkeletalMeshActorMAT
{
public:
	class UProductAsset_Body_TA*                       BodyAsset;                                        		// 0x0238(0x0004) (CPF_Edit)
	class UProductAsset_Skin_TA*                       SkinAsset;                                        		// 0x023C(0x0004) (CPF_Edit)
	class UProductAsset_PaintFinish_TA*                TeamFinishAsset;                                  		// 0x0240(0x0004) (CPF_Edit)
	class UProductAsset_PaintFinish_TA*                CustomFinishAsset;                                		// 0x0244(0x0004) (CPF_Edit)
	class UProductAsset_Wheel_TA*                      WheelAsset;                                       		// 0x0248(0x0004) (CPF_Edit)
	class UProductAsset_Boost_TA*                      BoostAsset;                                       		// 0x024C(0x0004) (CPF_Edit)
	class UProductAsset_Attachment_TA*                 AntennaAsset;                                     		// 0x0250(0x0004) (CPF_Edit)
	class UProductAsset_Attachment_TA*                 HatAsset;                                         		// 0x0254(0x0004) (CPF_Edit)
	float                                              FrontWheelScale;                                  		// 0x0258(0x0004) (CPF_Edit)
	float                                              BackWheelScale;                                   		// 0x025C(0x0004) (CPF_Edit)
	struct FLinearColor                                TeamColor;                                        		// 0x0260(0x0010) (CPF_Edit)
	struct FLinearColor                                CustomColor;                                      		// 0x0270(0x0010) (CPF_Edit)
	float                                              FakeBoostVelocity;                                		// 0x0280(0x0004) (CPF_Edit)
	float                                              DeactivateBoostVelocity;                          		// 0x0284(0x0004) (CPF_Edit)
	class UCarPreviewMeshComponent_TA*                 CarMeshComp;                                      		// 0x0288(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class USkeletalMeshComponent*                      FLWheelSKComponent;                               		// 0x028C(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class USkeletalMeshComponent*                      FRWheelSKComponent;                               		// 0x0290(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class USkeletalMeshComponent*                      BLWheelSKComponent;                               		// 0x0294(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class USkeletalMeshComponent*                      BRWheelSKComponent;                               		// 0x0298(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UStaticMeshComponent*                        FLWheelSMComponent;                               		// 0x029C(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UStaticMeshComponent*                        FRWheelSMComponent;                               		// 0x02A0(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UStaticMeshComponent*                        BLWheelSMComponent;                               		// 0x02A4(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UStaticMeshComponent*                        BRWheelSMComponent;                               		// 0x02A8(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkeletalMeshActorMAT_Products_TA");
		return ptr;
	}


	bool STATIC_AddUnique_AssetID(class UProductAsset_TA* Asset, TArray<int>* Out_IntList);
	TArray<int> GetAttachedProductIDs();
	void CreateAttachments();
	void UpdateBoost();
	void CreateBoostActor();
	void Tick(float DeltaTime);
	void PostBeginPlay();
};


// Class TAGame.SkeletalMeshComponent_NoSlomo_TA
// 0x0000 (0x063C - 0x063C)
class USkeletalMeshComponent_NoSlomo_TA : public USkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkeletalMeshComponent_NoSlomo_TA");
		return ptr;
	}

};


// Class TAGame.SkeletalMeshComponent_TA
// 0x0008 (0x0644 - 0x063C)
class USkeletalMeshComponent_TA : public USkeletalMeshComponent
{
public:
	float                                              FOVOverride;                                      		// 0x063C(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bIgnoreScriptAttach : 1;                          		// 0x0640(0x0004) (CPF_Const, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkeletalMeshComponent_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	class UParticleSystemComponent* CreateAttachmentPSC(class UParticleSystem* PS);
	class USkeletalMeshComponent_TA* CreateAttachmentSK(class USkeletalMesh* Mesh, class UMaterialInterface* MaterialOverride);
	class UStaticMeshComponent_TA* CreateAttachmentSMC(class UStaticMesh* Mesh, class UMaterialInterface* MaterialOverride, bool bCreateNewMIC);
	void ModifyAttachmentPrimitive(class UPrimitiveComponent* PrimComp);
	void Tick(float DeltaTime);
	void OnDetached();
	void OnAttached();
};


// Class TAGame.CarMeshComponentBase_TA
// 0x009C (0x06E0 - 0x0644)
class UCarMeshComponentBase_TA : public USkeletalMeshComponent_TA
{
public:
	class UProductAsset_Body_TA*                       BodyAsset;                                        		// 0x0644(0x0004)
	class UProductAsset_Skin_TA*                       SkinAsset;                                        		// 0x0648(0x0004)
	class UProductAsset_Wheel_TA*                      WheelAsset;                                       		// 0x064C(0x0004)
	struct FLinearColor                                TeamColorOverride;                                		// 0x0650(0x0010) (CPF_Transient)
	struct FLinearColor                                CustomColorOverride;                              		// 0x0660(0x0010) (CPF_Transient)
	int                                                Team;                                             		// 0x0670(0x0004) (CPF_Transient)
	int                                                TeamColorID;                                      		// 0x0674(0x0004) (CPF_Transient)
	int                                                CustomColorID;                                    		// 0x0678(0x0004) (CPF_Transient)
	class UProductAsset_Logo_TA*                       Logo;                                             		// 0x067C(0x0004) (CPF_Transient)
	unsigned long                                      bSwapLogoColors : 1;                              		// 0x0680(0x0004) (CPF_Transient)
	unsigned long                                      bBoosting : 1;                                    		// 0x0680(0x0004) (CPF_Transient)
	unsigned long                                      bLocalPlayer : 1;                                 		// 0x0680(0x0004)
	class UProductAsset_PaintFinish_TA*                TeamFinish;                                       		// 0x0684(0x0004) (CPF_Transient)
	class UProductAsset_PaintFinish_TA*                CustomFinish;                                     		// 0x0688(0x0004) (CPF_Transient)
	struct FClubColorSet                               ClubColors;                                       		// 0x068C(0x0008) (CPF_Transient)
	TArray<class UAntennaComponent_TA*>                Antennas;                                         		// 0x0694(0x000C) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_NeedCtorLink, CPF_EditInline)
	TArray<class UMeshComponent*>                      WheelMeshes;                                      		// 0x06A0(0x000C) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_NeedCtorLink, CPF_EditInline)
	class AFXActor_X*                                  BodyFX;                                           		// 0x06AC(0x0004) (CPF_Transient)
	TArray<class AFXActor_X*>                          FXActors;                                         		// 0x06B0(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class AFXActor_X*                                  BodyFXActor;                                      		// 0x06BC(0x0004) (CPF_Transient)
	struct FClientLoadoutOnlineData                    ProductAttributes;                                		// 0x06C0(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FName>                               ProductAttachmentSockets;                         		// 0x06CC(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)
	int                                                QueuedTeamFinishID;                               		// 0x06D8(0x0004) (CPF_Transient)
	int                                                QueuedCustomFinishID;                             		// 0x06DC(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarMeshComponentBase_TA");
		return ptr;
	}


	void AttachFXActor(class AFXActor_X* FXActorTemplate);
	void AttachOrnament(class UProductAsset_TA* Asset, struct FProductAttachment* AttachStruct);
	void SetMaterialColorParams(class UMaterialInstanceConstant* MatInst, const struct FLinearColor& PaintColor, const struct FName& ColorParam, const struct FName& FullColorParam);
	void SetMaterialColors(class UMaterialInstanceConstant* MatInst);
	struct FLinearColor GetCorrectedPaintColor(const struct FLinearColor& InColor);
	void SetMeshMaterialColors(class UMeshComponent* Mesh);
	void CreateWheelMICs();
	void SetPaintFinishParameters(class UMeshComponent* Mesh);
	void OnPaintChanged();
	void SetIsLocalPlayer(bool bIsLocal);
	bool IsColorBlind();
	struct FLinearColor GetCustomColor();
	struct FLinearColor GetTeamColor();
	void SetLogo(class UProductAsset_Logo_TA* InLogo, bool bSwapColors);
	void SetCustomFinish(class UProductAsset_PaintFinish_TA* Finish);
	void HandleCustomFinishLoaded(const struct FAssetLoadResult& Result);
	void SetCustomFinishID(int ProductID);
	void SetCustomColorOverride(const struct FLinearColor& NewColor);
	void SetCustomColorID(int ColorID);
	void SetTeamFinish(class UProductAsset_PaintFinish_TA* Finish);
	void HandleTeamFinishLoaded(const struct FAssetLoadResult& Result);
	void SetTeamFinishID(int ProductID);
	void SetClubColors(const struct FClubColorSet& Colors);
	void SetTeamColorOverride(const struct FLinearColor& NewColor);
	void SetTeamColorID(int InTeam, int InColorID);
	void ClearColorOverrides();
	void SetTeamPaint(const struct FLoadoutTeamPaint& Paint);
	void CreateWheelMesh(TEnumAsByte<enum class EWheelPosition> WheelPos, float WheelRadius, float WheelWidth, float WheelOffset, const struct FName& BoneName);
	void AddBehaviors(class UProductAsset_TA* Asset, class UActorComponent* Component, TArray<class UAttachmentBehavior_TA*>* BehaviorArchetypes);
	void CreateWheelMeshes();
	void SetMaterialParameters(int ElementIdx, struct FMaterialParams* Params);
	void InitVisuals();
	void InitAssets();
};


// Class TAGame.CarMeshComponent_TA
// 0x0068 (0x0748 - 0x06E0)
class UCarMeshComponent_TA : public UCarMeshComponentBase_TA
{
public:
	float                                              BoostBlendInTime;                                 		// 0x06E0(0x0004) (CPF_Edit)
	float                                              BoostBlendOutTime;                                		// 0x06E4(0x0004) (CPF_Edit)
	float                                              BoostDriveFlapScale;                              		// 0x06E8(0x0004) (CPF_Edit)
	float                                              WheelSuspensionBlendRate;                         		// 0x06EC(0x0004) (CPF_Edit)
	float                                              WheelSteerBlendRate;                              		// 0x06F0(0x0004) (CPF_Edit)
	TArray<struct FWheelSkelControlSet>                WheelControls;                                    		// 0x06F4(0x000C) (CPF_Transient, CPF_Component, CPF_NeedCtorLink)
	float                                              BoostFlyHeight;                                   		// 0x0700(0x0004) (CPF_Edit)
	TArray<class USkelControlBase*>                    BoostFlyControls;                                 		// 0x0704(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class USimpleSpringComponent_TA*                   ChassisSpringComponent;                           		// 0x0710(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class USkelControlSingleBone*                      ChassisSpringControl;                             		// 0x0714(0x0004) (CPF_Transient)
	TArray<class USkelControlBase*>                    BoostControls;                                    		// 0x0718(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	unsigned long                                      bInAir : 1;                                       		// 0x0724(0x0004) (CPF_Transient)
	unsigned long                                      bBoostFlying : 1;                                 		// 0x0724(0x0004) (CPF_Transient)
	unsigned long                                      bWantsBoostCameraAdjustment : 1;                  		// 0x0724(0x0004) (CPF_Transient)
	float                                              Throttle;                                         		// 0x0728(0x0004) (CPF_Transient)
	TArray<class UAttachmentBehavior_TA*>              Behaviors;                                        		// 0x072C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventAttached__Delegate;                        		// 0x0738(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0738(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarMeshComponent_TA");
		return ptr;
	}


	bool WantsBoostCameraAdjustment();
	class UAttachmentBehavior_TA* AddBehavior(class UProductAsset_TA* Asset, class UActorComponent* Component, class UAttachmentBehavior_TA* BehaviorArchetype);
	void AddBehaviors(class UProductAsset_TA* Asset, class UActorComponent* Component, TArray<class UAttachmentBehavior_TA*>* BehaviorArchetypes);
	void SetBodyFXActor(class AFXActor_X* InBodyFX);
	void OnPaintChanged();
	void InitVisuals();
	void InitAttachments(class UProductLoader_TA* InLoadout);
	void SetLoadout(class UProductLoader_TA* InLoadout);
	void SetProductAttributes(struct FClientLoadoutOnlineData* OnlineLoadout);
	void InitWheelControl(int Idx, const struct FString& Prefix);
	void InitWheelControls();
	void InitBoostControls();
	void ClearAttachments();
	void NotifyWhenAttached(const struct FScriptDelegate& Callback);
	void OnDetached();
	void OnAttached();
	void EventAttached(class UCarMeshComponent_TA* Mesh);
};


// Class TAGame.CarPreviewMeshComponent_TA
// 0x0010 (0x06F0 - 0x06E0)
class UCarPreviewMeshComponent_TA : public UCarMeshComponentBase_TA
{
public:
	class UProductAsset_Boost_TA*                      BoostAsset;                                       		// 0x06E0(0x0004)
	class AFXActor_Boost_TA*                           BoostFX;                                          		// 0x06E4(0x0004) (CPF_Transient)
	class UProductAsset_Attachment_TA*                 AntennaAsset;                                     		// 0x06E8(0x0004)
	class UProductAsset_Attachment_TA*                 HatAsset;                                         		// 0x06EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarPreviewMeshComponent_TA");
		return ptr;
	}


	void InitAttachments();
	void InitFXStatesForActor(class AFXActor_X* FXActor);
	void InitFXStates();
	void InitBoostFX();
	void InitBodyFX();
	void InitFXVisuals();
};


// Class TAGame.SkyLightVolumeComponent_TA
// 0x0050 (0x01D0 - 0x0180)
class USkyLightVolumeComponent_TA : public USkyLightComponent
{
public:
	float                                              BlendDistance;                                    		// 0x0180(0x0004) (CPF_Edit, CPF_Const)
	class ASkyLight*                                   LightToOverride;                                  		// 0x0184(0x0004) (CPF_Edit)
	class UBrushComponent*                             BrushComponent;                                   		// 0x0188(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	unsigned char                                      UnknownData00[0x4];                               		// 0x018C(0x0004) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                              		// 0x0190(0x0040) (CPF_Const, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkyLightVolumeComponent_TA");
		return ptr;
	}


	void SetLowerLightProperties(float NewBrightness, const struct FColor& NewLightColor);
};


// Class TAGame.StatEvent_TA
// 0x004C (0x0088 - 0x003C)
class UStatEvent_TA : public UObject
{
public:
	int                                                Points;                                           		// 0x003C(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bAddToScore : 1;                                  		// 0x0040(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bIsLeaderboardStat : 1;                           		// 0x0040(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bNotifyTicker : 1;                                		// 0x0040(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bCanMute : 1;                                     		// 0x0040(0x0004) (CPF_Edit, CPF_Const)
	unsigned long                                      bCountMultiplied : 1;                             		// 0x0040(0x0004) (CPF_Edit, CPF_Const)
	int                                                MedalThreshold;                                   		// 0x0044(0x0004) (CPF_Edit, CPF_Const)
	int                                                TrophyThreshold;                                  		// 0x0048(0x0004) (CPF_Edit, CPF_Const)
	class UStatGroup_TA*                               Group;                                            		// 0x004C(0x0004) (CPF_Edit, CPF_Const)
	class UTexture*                                    Texture;                                          		// 0x0050(0x0004) (CPF_Edit, CPF_Const)
	struct FName                                       UISound;                                          		// 0x0054(0x0008) (CPF_Edit, CPF_Const)
	class UClass*                                      DisplayProductStatClass;                          		// 0x005C(0x0004) (CPF_Edit, CPF_Const)
	int                                                OnlineMultiplier;                                 		// 0x0060(0x0004)
	struct FString                                     Label;                                            		// 0x0064(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     PluralLabel;                                      		// 0x0070(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Description;                                      		// 0x007C(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatEvent_TA");
		return ptr;
	}


	int GetPoints(class AGameEvent_TA* GameEvent, int Count);
	struct FName GetGroupName();
};


// Class TAGame.StatFactoryBase_TA
// 0x000C (0x01F8 - 0x01EC)
class AStatFactoryBase_TA : public AActor
{
public:
	TArray<class UStatEvent_TA*>                       AllStatEvents;                                    		// 0x01EC(0x000C) (CPF_Const, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatFactoryBase_TA");
		return ptr;
	}

};


// Class TAGame.StatGroup_TA
// 0x0000 (0x003C - 0x003C)
class UStatGroup_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatGroup_TA");
		return ptr;
	}

};


// Class TAGame.StaticMeshComponent_TA
// 0x0004 (0x0270 - 0x026C)
class UStaticMeshComponent_TA : public UStaticMeshComponent
{
public:
	unsigned long                                      bIgnoreScriptAttach : 1;                          		// 0x026C(0x0004) (CPF_Const, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StaticMeshComponent_TA");
		return ptr;
	}


	void SetBoundsScale(float Value);
	void OnDetached();
	void OnAttached();
};


// Class TAGame.BallIndicator_TA
// 0x0018 (0x0288 - 0x0270)
class UBallIndicator_TA : public UStaticMeshComponent_TA
{
public:
	float                                              MinTranslationX;                                  		// 0x0270(0x0004) (CPF_Edit)
	float                                              MaxTranslationX;                                  		// 0x0274(0x0004) (CPF_Edit)
	float                                              MinDistance;                                      		// 0x0278(0x0004) (CPF_Edit)
	float                                              MaxDistance;                                      		// 0x027C(0x0004) (CPF_Edit)
	float                                              ZTranslationOffset;                               		// 0x0280(0x0004) (CPF_Edit)
	class AActor*                                      Ball;                                             		// 0x0284(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallIndicator_TA");
		return ptr;
	}


	void HandleBallRemoved(class UObject* BallObject);
	void HandleBallAdded(class UObject* BallObject);
	void OnDetached();
	void OnAttached();
};


// Class TAGame.NameplateComponent_TA
// 0x0020 (0x0290 - 0x0270)
class UNameplateComponent_TA : public UStaticMeshComponent_TA
{
public:
	struct FInterpCurveFloat                           DistanceScaleCurve;                               		// 0x0270(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	struct FInterpCurveFloat                           FOVScaleCurve;                                    		// 0x0280(0x0010) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NameplateComponent_TA");
		return ptr;
	}


	void TickNameplate();
	void SetPlayerIndex(int Index);
	void SetRenderTexture(class UTextureRenderTarget2D* InTex);
};


// Class TAGame.Team_TA
// 0x011C (0x0324 - 0x0208)
class ATeam_TA : public ATeamInfo
{
public:
	class UCarColorSet_TA*                             CarColorSet;                                      		// 0x0208(0x0004) (CPF_Edit)
	class UCarColorSet_TA*                             CarColorSet_v0;                                   		// 0x020C(0x0004) (CPF_Edit)
	struct FLinearColor                                FontColor;                                        		// 0x0210(0x0010) (CPF_Edit)
	struct FLinearColor                                ColorBlindFontColor;                              		// 0x0220(0x0010) (CPF_Edit)
	struct FColor                                      TeamControllerColor;                              		// 0x0230(0x0004) (CPF_Transient)
	struct FColor                                      TeamScoreStrobeColor;                             		// 0x0234(0x0004) (CPF_Transient)
	class UTeamColorScriptedTexture_TA*                TeamScriptedTexture;                              		// 0x0238(0x0004)
	TArray<struct FLinearColor>                        DefaultColorList;                                 		// 0x023C(0x000C) (CPF_NeedCtorLink)
	TArray<struct FLinearColor>                        ColorBlindColorList;                              		// 0x0248(0x000C) (CPF_NeedCtorLink)
	TArray<struct FLinearColor>                        CurrentColorList;                                 		// 0x0254(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class AGameEvent_Team_TA*                          GameEvent;                                        		// 0x0260(0x0004) (CPF_Net, CPF_Transient)
	TArray<class APRI_TA*>                             Members;                                          		// 0x0264(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     CustomTeamName;                                   		// 0x0270(0x000C) (CPF_Net, CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     SanitizedTeamName;                                		// 0x027C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class UProductAsset_Logo_TA*                       Logo;                                             		// 0x0288(0x0004)
	struct FReplicatedLogoData                         LogoData;                                         		// 0x028C(0x0008) (CPF_Net, CPF_Transient)
	struct FClubColorSet                               ClubColors;                                       		// 0x0294(0x0008) (CPF_Net, CPF_Transient)
	class AVoteActor_TA*                               ForfeitVoteArchetype;                             		// 0x029C(0x0004) (CPF_Edit)
	class AVoteActor_TA*                               ForfeitVote;                                      		// 0x02A0(0x0004) (CPF_Transient)
	unsigned long                                      bForfeit : 1;                                     		// 0x02A4(0x0004) (CPF_Transient)
	TArray<struct FTemporarySpawnSpot>                 TemporarySpawnSpots;                              		// 0x02A8(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventMemberAdded__Delegate;                     		// 0x02B4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x02B4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventMemberRemoved__Delegate;                   		// 0x02C4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x02C4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventColorsChanged__Delegate;                   		// 0x02D4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x02D4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventScoreUpdated__Delegate;                    		// 0x02E4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x02E4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventNameChanged__Delegate;                     		// 0x02F4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x02F4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLogoChanged__Delegate;                     		// 0x0304(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData05[0x4];                               		// 0x0304(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventForfeit__Delegate;                         		// 0x0314(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData06[0x4];                               		// 0x0314(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Team_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void OnClubColorsChanged();
	void SetClubColors(const struct FClubColorSet& Colors);
	void Forfeit();
	void HandleForfeitVoteDestroyed(class AVoteActor_TA* VoteActor);
	void HandleForfeitVoteFinished(class AVoteActor_TA* VoteActor);
	void VoteToForfeit(class APRI_TA* PRI);
	bool IsColorBlind();
	void GetColors(struct FLinearColor* OutFontColor, TArray<struct FLinearColor>* OutColors);
	void NotifyKismetTeamColorChanged();
	void UpdateColors();
	void SetLogo(int LogoID, bool bSwapColors);
	struct FString GetTeamName();
	void HandleTeamNameSanitized(const struct FString& Original, const struct FString& Sanitized);
	void SetCustomTeamName(const struct FString& NewName);
	void SetDefaultColors();
	void SetColorList(TArray<struct FLinearColor> ColorList, bool bAllowMaxBrightness);
	class APRI_TA* GetTeamMemberNamed(const struct FString& PlayerName);
	int GetNumBots();
	int GetNumHumans();
	void OnScoreUpdated();
	void ResetScore();
	void RemovePoints(int Points);
	void SetScore(int Points);
	void ScorePoint(int AdditionalScore);
	void Destroyed();
	void MuteOtherTeam(class ATeam_TA* OtherTeam, bool bMute);
	void MutePlayer(class AController* Other);
	bool GetPlayerReplacementSpot(struct FVector* OutLoc, struct FRotator* OutRot, struct FVector* OutVel);
	void ClearTemporarySpawnSpots();
	void ExpireTemporarySpawnSpots();
	void AddTemporarySpawnSpot(class AActor* AtActor);
	void RemoveFromTeam(class AController* Other);
	bool AddToTeam(class AController* Other);
	void OnGameEventSet();
	void SetGameEvent(class AGameEvent_Team_TA* InGameEvent);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventForfeit(class ATeam_TA* Team);
	void EventLogoChanged(class ATeam_TA* Team);
	void EventNameChanged(class ATeam_TA* Team);
	void EventScoreUpdated(class ATeam_TA* Team);
	void EventColorsChanged(class ATeam_TA* Team);
	void EventMemberRemoved(class ATeam_TA* Team, class APRI_TA* Member);
	void EventMemberAdded(class ATeam_TA* Team, class APRI_TA* Member);
};


// Class TAGame.ThrottleShakeComponent_TA
// 0x000C (0x0150 - 0x0144)
class UThrottleShakeComponent_TA : public UShakeComponent_X
{
public:
	float                                              ThrottleRiseSpeed;                                		// 0x0144(0x0004) (CPF_Edit)
	float                                              ThrottleFallSpeed;                                		// 0x0148(0x0004) (CPF_Edit)
	float                                              Throttle;                                         		// 0x014C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ThrottleShakeComponent_TA");
		return ptr;
	}

};


// Class TAGame.ThumbnailRenderer_TA
// 0x01A8 (0x01E4 - 0x003C)
class UThumbnailRenderer_TA : public UObject
{
public:
	struct FRotator                                    CameraRotation;                                   		// 0x003C(0x000C) (CPF_Edit)
	struct FVector                                     CameraTranslation;                                		// 0x0048(0x000C) (CPF_Edit)
	float                                              CameraFOV;                                        		// 0x0054(0x0004) (CPF_Edit)
	unsigned long                                      bAutoZoomCamera : 1;                              		// 0x0058(0x0004) (CPF_Edit)
	unsigned long                                      bDisableLightEnvironment : 1;                     		// 0x0058(0x0004) (CPF_Edit)
	unsigned long                                      CompressionNone : 1;                              		// 0x0058(0x0004) (CPF_Edit)
	unsigned long                                      bSkipBackground : 1;                              		// 0x0058(0x0004) (CPF_Edit)
	unsigned long                                      bSkipScene : 1;                                   		// 0x0058(0x0004) (CPF_Edit)
	struct FRotator                                    ProductRotation;                                  		// 0x005C(0x000C) (CPF_Edit)
	struct FVector                                     ProductTranslation;                               		// 0x0068(0x000C) (CPF_Edit)
	class UPrefab*                                     ScenePrefab;                                      		// 0x0074(0x0004) (CPF_Edit)
	class UPostProcessChain*                           ScenePostProcessChain;                            		// 0x0078(0x0004) (CPF_Edit)
	struct FPostProcessSettings                        ScenePostProcessSettings;                         		// 0x007C(0x0150) (CPF_Edit, CPF_NeedCtorLink)
	int                                                RenderWidth;                                      		// 0x01CC(0x0004) (CPF_Edit)
	int                                                RenderHeight;                                     		// 0x01D0(0x0004) (CPF_Edit)
	int                                                TextureWidth;                                     		// 0x01D4(0x0004) (CPF_Edit)
	int                                                TextureHeight;                                    		// 0x01D8(0x0004) (CPF_Edit)
	TEnumAsByte<enum class TextureMipGenSettings>      MipGenSettings;                                   		// 0x01DC(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x01DD(0x0003) MISSED OFFSET
	int                                                LODBias;                                          		// 0x01E0(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ThumbnailRenderer_TA");
		return ptr;
	}


	class UTexture2D* RenderScene(class UThumbnailScene_TA* Scene);
	class UThumbnailScene_TA* BuildScene();
};


// Class TAGame.ThumbnailScene_TA
// 0x0030 (0x006C - 0x003C)
class UThumbnailScene_TA : public UObject
{
public:
	TArray<struct FThumbnailComponent>                 SceneComponents;                                  		// 0x003C(0x000C) (CPF_Component, CPF_NeedCtorLink)
	struct FVector                                     ViewTranslation;                                  		// 0x0048(0x000C)
	struct FRotator                                    ViewRotation;                                     		// 0x0054(0x000C)
	unsigned long                                      bForceAllUsedMipsResident : 1;                    		// 0x0060(0x0004)
	class UTexture2D*                                  Background;                                       		// 0x0064(0x0004)
	struct FPointer                                    RenderScene;                                      		// 0x0068(0x0004) (CPF_Const, CPF_Native, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ThumbnailScene_TA");
		return ptr;
	}


	void HideAllMeshes();
	class UActorComponent* GetSceneComponent(class UClass* ComponentClass, const struct FName& Tag);
};


// Class TAGame.VehiclePartStaticMeshComponent_TA
// 0x0004 (0x0270 - 0x026C)
class UVehiclePartStaticMeshComponent_TA : public UStaticMeshComponent
{
public:
	class URB_BodySetup*                               BodySetupOverride;                                		// 0x026C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehiclePartStaticMeshComponent_TA");
		return ptr;
	}

};


// Class TAGame.VehiclePickup_TA
// 0x0044 (0x0230 - 0x01EC)
class AVehiclePickup_TA : public AActor
{
public:
	float                                              RespawnDelay;                                     		// 0x01EC(0x0004) (CPF_Edit)
	class AFXActor_X*                                  FXActorArchetype;                                 		// 0x01F0(0x0004) (CPF_Edit)
	class AFXActor_X*                                  FXActor;                                          		// 0x01F4(0x0004) (CPF_Edit, CPF_EditConst, CPF_DuplicateTransient)
	class UFXActorEvent_X*                             PickedUpEvent;                                    		// 0x01F8(0x0004)
	class UFXActorEvent_X*                             LocalPickedUpEvent;                               		// 0x01FC(0x0004)
	class UCylinderComponent*                          CylinderComponent;                                		// 0x0200(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	struct FPickupData                                 ReplicatedPickupData;                             		// 0x0204(0x0008) (CPF_Net, CPF_Transient)
	unsigned long                                      bPickedUp : 1;                                    		// 0x020C(0x0004) (CPF_Transient)
	unsigned long                                      bNetRelevant : 1;                                 		// 0x020C(0x0004)
	unsigned long                                      bNoPickup : 1;                                    		// 0x020C(0x0004) (CPF_Net, CPF_Transient)
	struct FScriptDelegate                             __EventSpawned__Delegate;                         		// 0x0210(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0210(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPickedUp__Delegate;                        		// 0x0220(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0220(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehiclePickup_TA");
		return ptr;
	}


	void PlayPickedUpFX();
	bool IsTouchingAVehicle();
	void UpdateTickDisabled();
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void SetNetRelevant(bool bRelevant);
	void Respawn();
	void SetPickedUp(bool bNewPickedUp, class ACar_TA* InInstigator);
	void Pickup(class ACar_TA* Car);
	bool CanPickup(class ACar_TA* Car);
	void OnTouch(class ACar_TA* Car);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnPickUp();
	void OnSpawn();
	void SetNoPickup();
	void SetupReplicateNoPickup();
	void InitFX();
	void PostBeginPlay();
	void PreBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventPickedUp(class AVehiclePickup_TA* Pickup);
	void EventSpawned(class AVehiclePickup_TA* Pickup);
};


// Class TAGame.VehicleSim_TA
// 0x008F (0x00F4 - 0x0065)
class UVehicleSim_TA : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                               		// 0x0065(0x0003) MISSED OFFSET
	TArray<class UWheel_TA*>                           Wheels;                                           		// 0x0068(0x000C) (CPF_Edit, CPF_Const, CPF_ExportObject, CPF_Component, CPF_NeedCtorLink, CPF_EditInline)
	struct FInterpCurveFloat                           SteerAngleCurve;                                  		// 0x0074(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	float                                              DriveTorque;                                      		// 0x0084(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           DriveTorqueCurve;                                 		// 0x0088(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	float                                              BrakeTorque;                                      		// 0x0098(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           BrakeTorqueCurve;                                 		// 0x009C(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	struct FInterpCurveFloat                           HandbrakeSteerAngleCurve;                         		// 0x00AC(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	struct FInputRate                                  HandbrakeRate;                                    		// 0x00BC(0x0008) (CPF_Edit)
	float                                              StopThreshold;                                    		// 0x00C4(0x0004) (CPF_Edit)
	float                                              IdleBrakeFactor;                                  		// 0x00C8(0x0004) (CPF_Edit)
	float                                              OppositeBrakeFactor;                              		// 0x00CC(0x0004) (CPF_Edit)
	unsigned long                                      bUseAckermannSteering : 1;                        		// 0x00D0(0x0004) (CPF_Edit)
	unsigned long                                      bWasAttached : 1;                                 		// 0x00D0(0x0004) (CPF_Const, CPF_Transient)
	float                                              OutputThrottle;                                   		// 0x00D4(0x0004) (CPF_Transient)
	float                                              OutputSteer;                                      		// 0x00D8(0x0004) (CPF_Transient)
	float                                              OutputBrake;                                      		// 0x00DC(0x0004) (CPF_Transient)
	float                                              OutputHandbrake;                                  		// 0x00E0(0x0004) (CPF_Transient)
	class AVehicle_TA*                                 Vehicle;                                          		// 0x00E4(0x0004) (CPF_Transient)
	class ACar_TA*                                     Car;                                              		// 0x00E8(0x0004) (CPF_Transient)
	struct FPointer                                    BulletVehicle;                                    		// 0x00EC(0x0004) (CPF_Const, CPF_Native, CPF_Transient)
	struct FPointer                                    BulletRigidBody;                                  		// 0x00F0(0x0004) (CPF_Native, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehicleSim_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	struct FTurningCircle GetMaxTurningCircle(float SteerAmt, float AtSpeed, const struct FVector& AtLocation, const struct FRotator& AtRotation);
	struct FTurningCircle GetMaxTurningCircleAt(float SteerAmt, float AtSpeed, const struct FVector& AtLocation, const struct FRotator& AtRotation);
	void OnDetached();
	void SetupAxle(class UWheel_TA* LeftWheel, class UWheel_TA* RightWheel, const struct FVehicleAxleSettings& Axle);
	void OnAttached();
};


// Class TAGame.VoteActor_TA
// 0x00B0 (0x029C - 0x01EC)
class AVoteActor_TA : public AActor
{
public:
	struct FString                                     Subject;                                          		// 0x01EC(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	int                                                TimeRemaining;                                    		// 0x01F8(0x0004) (CPF_Edit)
	unsigned long                                      bUnanimousVote : 1;                               		// 0x01FC(0x0004) (CPF_Edit)
	unsigned long                                      bFinished : 1;                                    		// 0x01FC(0x0004) (CPF_Net, CPF_Transient)
	TArray<struct FVoter>                              Voters;                                           		// 0x0200(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FVoter                                      ReplicatedVoters[0x8];                            		// 0x020C(0x0008) (CPF_Net, CPF_Transient)
	struct FScriptDelegate                             __EventStarted__Delegate;                         		// 0x024C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x024C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventVotersChanged__Delegate;                   		// 0x025C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x025C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTimeRemainingChanged__Delegate;            		// 0x026C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x026C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventFinished__Delegate;                        		// 0x027C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x027C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDestroyed__Delegate;                       		// 0x028C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x028C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VoteActor_TA");
		return ptr;
	}


	void Destroyed();
	void DestroySelf();
	bool Failed();
	bool Passed();
	int RequiredVotes();
	int NoVotes();
	int YesVotes();
	void FinishVote();
	void CheckFinished();
	void SetVoteStatus(class APRI_TA* PRI, TEnumAsByte<enum class EVoteStatus> Status);
	void OnVotersChanged();
	void RemoveVoter(class APRI_TA* PRI);
	void AddVoter(class APRI_TA* PRI);
	void UpdateTimeRemaining();
	void AddTeam(class ATeam_TA* Team);
	void AddGameEvent(class AGameEvent_TA* GameEvent);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
	void EventDestroyed(class AVoteActor_TA* VoteActor);
	void EventFinished(class AVoteActor_TA* VoteActor);
	void EventTimeRemainingChanged(class AVoteActor_TA* VoteActor);
	void EventVotersChanged(class AVoteActor_TA* VoteActor);
	void EventStarted(class AVoteActor_TA* VoteActor);
};


// Class TAGame.Wheel_TA
// 0x00FC (0x0144 - 0x0048)
class UWheel_TA : public UComponent
{
public:
	float                                              SteerFactor;                                      		// 0x0048(0x0004) (CPF_Edit)
	float                                              WheelRadius;                                      		// 0x004C(0x0004) (CPF_Edit)
	float                                              SuspensionStiffness;                              		// 0x0050(0x0004) (CPF_Edit)
	float                                              SuspensionDampingCompression;                     		// 0x0054(0x0004) (CPF_Edit)
	float                                              SuspensionDampingRelaxation;                      		// 0x0058(0x0004) (CPF_Edit)
	float                                              SuspensionTravel;                                 		// 0x005C(0x0004) (CPF_Edit)
	float                                              ContactForceDistance;                             		// 0x0060(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           LatFrictionCurve;                                 		// 0x0064(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	struct FInterpCurveFloat                           LongFrictionCurve;                                		// 0x0074(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	struct FInterpCurveFloat                           HandbrakeLatFrictionCurve;                        		// 0x0084(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	struct FInterpCurveFloat                           HandbrakeLongFrictionCurve;                       		// 0x0094(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	struct FInterpCurveFloat                           WallFrictionCurve;                                		// 0x00A4(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	struct FName                                       BoneName;                                         		// 0x00B4(0x0008) (CPF_Edit)
	struct FVector                                     BoneOffset;                                       		// 0x00BC(0x000C) (CPF_Edit)
	struct FVector                                     LocalSuspensionRayStart;                          		// 0x00C8(0x000C) (CPF_Const, CPF_Transient)
	struct FVector                                     LocalRestPosition;                                		// 0x00D4(0x000C) (CPF_Const, CPF_Transient)
	class UVehicleSim_TA*                              VehicleSim;                                       		// 0x00E0(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	int                                                WheelIndex;                                       		// 0x00E4(0x0004) (CPF_Const, CPF_Transient)
	struct FWheelContactData                           Contact;                                          		// 0x00E8(0x0044) (CPF_Const, CPF_Transient, CPF_Component)
	unsigned long                                      bDrawDebug : 1;                                   		// 0x012C(0x0004)
	unsigned long                                      bHadContact : 1;                                  		// 0x012C(0x0004) (CPF_Const, CPF_Transient)
	float                                              FrictionCurveInput;                               		// 0x0130(0x0004) (CPF_Const, CPF_Transient)
	struct FScriptDelegate                             __EventContactChanged__Delegate;                  		// 0x0134(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0134(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Wheel_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void UpdatePhysics(float MotorTorque, float BrakeTorque, float SteerAngle, float InHandbrakeAmount);
	struct FVector GetRefWheelLocation();
	float GetSuspensionDistance();
	float GetSteer();
	float GetSpinSpeed();
	struct FVector GetLinearVelocity();
	struct FVector GetBoneLocation();
	void EventContactChanged(class UWheel_TA* Wheel);
};


// Class TAGame.ZPawn
// 0x0018 (0x04E4 - 0x04CC)
class AZPawn : public APawn_X
{
public:
	struct FVector                                     CurrentFloor;                                     		// 0x04CC(0x000C) (CPF_Transient)
	struct FVector                                     TargetFloor;                                      		// 0x04D8(0x000C) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ZPawn");
		return ptr;
	}


	struct FVector GetGravityDirection();
	bool DoJump(bool bUpdating);
	void Tick(float DeltaTime);
	void FaceRotation(const struct FRotator& NewRotation, float DeltaTime);
};


// Class TAGame.AIRole_TA
// 0x000C (0x0048 - 0x003C)
class UAIRole_TA : public UObject
{
public:
	TArray<struct FBTDynamicLinkData>                  DynamicLinks;                                     		// 0x003C(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AIRole_TA");
		return ptr;
	}

};


// Class TAGame.PRI_TA
// 0x03E8 (0x06E8 - 0x0300)
class APRI_TA : public APRI_X
{
public:
	int                                                MatchScore;                                       		// 0x0300(0x0004) (CPF_Net, CPF_Transient)
	int                                                MatchGoals;                                       		// 0x0304(0x0004) (CPF_Net, CPF_Transient)
	int                                                MatchOwnGoals;                                    		// 0x0308(0x0004) (CPF_Transient)
	int                                                MatchAssists;                                     		// 0x030C(0x0004) (CPF_Net, CPF_Transient)
	int                                                MatchSaves;                                       		// 0x0310(0x0004) (CPF_Net, CPF_Transient)
	int                                                MatchShots;                                       		// 0x0314(0x0004) (CPF_Net, CPF_Transient)
	int                                                MatchDemolishes;                                  		// 0x0318(0x0004) (CPF_Transient)
	int                                                MatchBonusXP;                                     		// 0x031C(0x0004) (CPF_Transient)
	int                                                MatchBreakoutDamage;                              		// 0x0320(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bMatchMVP : 1;                                    		// 0x0324(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bMatchAdmin : 1;                                  		// 0x0324(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bLoadoutSet : 1;                                  		// 0x0324(0x0004) (CPF_Transient)
	unsigned long                                      bOnlineLoadoutSet : 1;                            		// 0x0324(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bLoadoutsSet : 1;                                 		// 0x0324(0x0004) (CPF_Transient)
	unsigned long                                      bOnlineLoadoutsSet : 1;                           		// 0x0324(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bTeamPaintSet : 1;                                		// 0x0324(0x0004) (CPF_Transient)
	unsigned long                                      bReady : 1;                                       		// 0x0324(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bBusy : 1;                                        		// 0x0324(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bUsingSecondaryCamera : 1;                        		// 0x0324(0x0004) (CPF_Transient)
	unsigned long                                      bUsingBehindView : 1;                             		// 0x0324(0x0004) (CPF_Transient)
	unsigned long                                      bUsingFreecam : 1;                                		// 0x0324(0x0004) (CPF_Transient)
	unsigned long                                      bIsInSplitScreen : 1;                             		// 0x0324(0x0004) (CPF_Net)
	unsigned long                                      bDeveloper : 1;                                   		// 0x0324(0x0004) (CPF_Transient)
	unsigned long                                      bVoteToForfeitDisabled : 1;                       		// 0x0324(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bUsingItems : 1;                                  		// 0x0324(0x0004) (CPF_Net, CPF_Transient)
	class AGameEvent_TA*                               GameEvent;                                        		// 0x0328(0x0004) (CPF_Transient)
	class AGameEvent_TA*                               ReplicatedGameEvent;                              		// 0x032C(0x0004) (CPF_Net, CPF_Transient)
	class ACar_TA*                                     Car;                                              		// 0x0330(0x0004) (CPF_Transient)
	struct FLoadoutData                                FullLoadouts[0x2];                                		// 0x0334(0x0034) (CPF_Transient, CPF_NeedCtorLink)
	struct FClientLoadoutOnlineData                    FullOnlineLoadout[0x2];                           		// 0x039C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FClientLoadoutData                          ClientLoadout;                                    		// 0x03B4(0x000C) (CPF_Net, CPF_Transient, CPF_NeedCtorLink)
	struct FClientLoadoutOnlineData                    ClientLoadoutOnline;                              		// 0x03C0(0x000C) (CPF_Net, CPF_Transient, CPF_NeedCtorLink)
	struct FClientLoadoutDatas                         ClientLoadouts;                                   		// 0x03CC(0x0018) (CPF_Net, CPF_Transient, CPF_NeedCtorLink)
	struct FClientLoadoutOnlineDatas                   ClientLoadoutsOnline;                             		// 0x03E4(0x001C) (CPF_Net, CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FOnlineProductStat>                  OnlineProductStats;                               		// 0x0400(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FLoadoutTeamPaint                           TeamPaint;                                        		// 0x040C(0x0010) (CPF_Transient)
	TArray<struct FTAPlayerStat>                       MatchStats;                                       		// 0x041C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	int                                                RespawnTimeRemaining;                             		// 0x0428(0x0004) (CPF_Net, CPF_Transient)
	int                                                WaitingStartTime;                                 		// 0x042C(0x0004) (CPF_Transient)
	float                                              TotalGameTimePlayed;                              		// 0x0430(0x0004) (CPF_Transient)
	class ACameraSettingsActor_TA*                     PersistentCamera;                                 		// 0x0434(0x0004) (CPF_Net, CPF_Transient)
	class ACameraSettingsActor_TA*                     Camera;                                           		// 0x0438(0x0004) (CPF_Transient)
	struct FProfileCameraSettings                      CameraSettings;                                   		// 0x043C(0x0018) (CPF_Transient)
	unsigned char                                      CameraPitch;                                      		// 0x0454(0x0001) (CPF_Transient)
	unsigned char                                      CameraYaw;                                        		// 0x0455(0x0001) (CPF_Transient)
	TEnumAsByte<enum class EPawnType>                  PawnType;                                         		// 0x0456(0x0001) (CPF_Net)
	unsigned char                                      UnknownData00[0x1];                               		// 0x0457(0x0001) MISSED OFFSET
	TArray<class UProductStat_TA*>                     ProductStats;                                     		// 0x0458(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FProductStat>                        PendingProductStatValues;                         		// 0x0464(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FUniqueNetId                                PartyLeader;                                      		// 0x0470(0x0030) (CPF_Net)
	int                                                TotalXP;                                          		// 0x04A0(0x0004) (CPF_Net, CPF_Transient)
	struct FString                                     SanitizedPlayerName;                              		// 0x04A4(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FName                                       Title;                                            		// 0x04B0(0x0008) (CPF_Net, CPF_Transient)
	struct FSkillTierData                              SkillTier;                                        		// 0x04B8(0x0008) (CPF_Net, CPF_Transient)
	float                                              NextTimeRestrictedStatEventAllowedTime;           		// 0x04C0(0x0004) (CPF_Transient)
	float                                              LastTimeRestrictedStatEventTime;                  		// 0x04C4(0x0004) (CPF_Transient)
	int                                                TimeTillItem;                                     		// 0x04C8(0x0004) (CPF_Net, CPF_Transient)
	int                                                MaxTimeTillItem;                                  		// 0x04CC(0x0004) (CPF_Net, CPF_Transient)
	int                                                BoostPickups;                                     		// 0x04D0(0x0004) (CPF_Transient)
	int                                                BallTouches;                                      		// 0x04D4(0x0004) (CPF_Transient)
	int                                                CarTouches;                                       		// 0x04D8(0x0004) (CPF_Transient)
	class APRI_TA*                                     ReplacingBotPRI;                                  		// 0x04DC(0x0004) (CPF_Net, CPF_Transient)
	struct FString                                     PrimaryTitle;                                     		// 0x04E0(0x000C) (CPF_NeedCtorLink)
	struct FString                                     PrimaryTitleStat;                                 		// 0x04EC(0x000C) (CPF_NeedCtorLink)
	class UStatEvent_TA*                               PrimaryStatEvent;                                 		// 0x04F8(0x0004)
	int                                                PrimaryStat;                                      		// 0x04FC(0x0004)
	struct FString                                     SecondaryTitle;                                   		// 0x0500(0x000C) (CPF_NeedCtorLink)
	struct FString                                     SecondaryTitleStat;                               		// 0x050C(0x000C) (CPF_NeedCtorLink)
	class UStatEvent_TA*                               SecondaryStatEvent;                               		// 0x0518(0x0004)
	int                                                SecondaryStat;                                    		// 0x051C(0x0004)
	struct FReplicatedStatTitleInfo                    RepStatTitles[0x2];                               		// 0x0520(0x0014) (CPF_Net, CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventGameEventChanged__Delegate;                		// 0x0548(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0548(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventStatEvent__Delegate;                       		// 0x0558(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0558(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSelectedLoadout__Delegate;                 		// 0x0568(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x0568(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventRespawnTimeUpdated__Delegate;              		// 0x0578(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x0578(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventStatTickerMessage__Delegate;               		// 0x0588(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData05[0x4];                               		// 0x0588(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventInvalidPsyonixID__Delegate;                		// 0x0598(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData06[0x4];                               		// 0x0598(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventReadyChanged__Delegate;                    		// 0x05A8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData07[0x4];                               		// 0x05A8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCarSet__Delegate;                          		// 0x05B8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData08[0x4];                               		// 0x05B8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSplitScreenStatusChanged__Delegate;        		// 0x05C8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData09[0x4];                               		// 0x05C8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPersistentCameraSet__Delegate;             		// 0x05D8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData10[0x4];                               		// 0x05D8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCameraChanged__Delegate;                   		// 0x05E8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData11[0x4];                               		// 0x05E8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPartyLeaderChanged__Delegate;              		// 0x05F8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData12[0x4];                               		// 0x05F8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventScorePoint__Delegate;                      		// 0x0608(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData13[0x4];                               		// 0x0608(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventWonMVP__Delegate;                          		// 0x0618(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData14[0x4];                               		// 0x0618(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventStatTitlesSet__Delegate;                   		// 0x0628(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData15[0x4];                               		// 0x0628(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTotalXPChanged__Delegate;                  		// 0x0638(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData16[0x4];                               		// 0x0638(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPawnTypeChanged__Delegate;                 		// 0x0648(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData17[0x4];                               		// 0x0648(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCommittedStats__Delegate;                  		// 0x0658(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData18[0x4];                               		// 0x0658(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventVoteToForfeitDisabled__Delegate;           		// 0x0668(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData19[0x4];                               		// 0x0668(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTitleChanged__Delegate;                    		// 0x0678(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData20[0x4];                               		// 0x0678(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSkillTierChanged__Delegate;                		// 0x0688(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData21[0x4];                               		// 0x0688(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventServerChangeTeamFailed__Delegate;          		// 0x0698(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData22[0x4];                               		// 0x0698(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventScoredGoal__Delegate;                      		// 0x06A8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData23[0x4];                               		// 0x06A8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventReplacingBotChanged__Delegate;             		// 0x06B8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData24[0x4];                               		// 0x06B8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventMatchAdmin__Delegate;                      		// 0x06C8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData25[0x4];                               		// 0x06C8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventServerUnlockedAchievement__Delegate;       		// 0x06D8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData26[0x4];                               		// 0x06D8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PRI_TA");
		return ptr;
	}


	void Destroyed();
	void ClientUnlockAchievement(int AchievementId, TEnumAsByte<enum class EAchievementType> AchievementType);
	void ServerSetPlayerActivatedFX(class AFXActor_X* FX);
	void ServerSetPlayerGoalExplosion(class AFXActor_X* FX);
	void UpdateCarLocalPlayer();
	void OnReplacingBotPRIChanged();
	void OnTeamChanged();
	void ClearBotReplacement();
	void SetBotReplacement(class AAIController_TA* C);
	void ReportCheater(const struct FString& Reason);
	bool ValidateLoadoutTeamPaints();
	bool ValidateLoadoutSlots();
	void ValidateLoadoutDLC();
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void OnVoteToForfeitDisabled();
	void DisablebVoteToForfeit();
	void ServerVoteToForfeit();
	void SetPlayerNameSanitized(const struct FString& Original, const struct FString& Sanitized);
	void SanitizePlayerName(class APRI_X* PRI);
	class UOnlineGame_Base_X* GetOnlineGameBase();
	class UOnlineGame_X* GetOnlineGame();
	void ServerSetTotalXP(int NewXP);
	void OnTotalXPChanged();
	void OnPawnTypeChanged();
	void SetWaitingPlayer(bool B);
	void SetPawnType(TEnumAsByte<enum class EPawnType> NewPawnType);
	bool IsEditor();
	bool IsSpectator();
	void ServerSpectate();
	void ClientChangeTeamFailed(int TeamNum);
	void ServerChangeTeam(int TeamNum);
	void ServerSetVoteStatus(class AVoteActor_TA* VoteActor, TEnumAsByte<enum class EVoteStatus> NewVote);
	void SetPodiumTitle(int Index, const struct FMemberTitleStat& InTitle);
	void ReplicatePodiumTitles();
	void ClearPodiumTitle();
	void OnMatchAdmin();
	void OnMVPChange();
	void NotifyWonMVP();
	bool IsInvalidName();
	bool IsInGameState(const struct FName& StateName);
	bool IsInWarmUpMode();
	void SetReady(bool bNewReady);
	void ServerMatchAdminSetPaused(bool bPause);
	void ServerMatchAdminSetScoreAndTime(int NewScoreTeam0, int NewScoreTeam1, int SecondsRemaining, bool bOverTime, bool bRestartRound);
	bool IsMatchAdmin();
	void ServerReadyUp();
	bool ShouldBroadCastWelcomeMessage(bool bExiting);
	void ClientUpdateOnlineProductStats(const struct FClientOnlineProductStat& ClientStat);
	void UpdateOnlineProductStats();
	void ClientGenerateItemDrop();
	void ClientGiveOnlineReward(const struct FOnlineProductData& Product);
	void HandleOnlineProductDrops(TArray<struct FOnlineProductData>* ProductDrops);
	void GenerateItemDrop();
	void SetWaitingStartTime();
	void ClientNotifyStatTickerMessage(class APRI_TA* Receiver, class APRI_TA* Victim, class UStatEvent_TA* StatEvent);
	void OnRespawnTimeRemainingChanged();
	void SetRespawnTime(int NewTime);
	void OnRep_RepStatTitles();
	void ClientScoredGoal(const struct FVector& BallHitLocation);
	void OnRep_ClientScorePoint();
	void ResetScore();
	void RemovePoints(int Points);
	void ScorePoint(int AdditionalScore);
	void SetStatCount(class UStatEvent_TA* StatEvent, int ForceCount);
	void IncrementStat(class UStatEvent_TA* StatEvent, int Count);
	void ClientNotifyGainedStat(class UStatEvent_TA* StatEvent, int Count);
	void OnGainedStat(class UStatEvent_TA* StatEvent, int Count);
	void GiveScore(class UStatEvent_TA* StatEvent, int Count);
	bool CanAwardTimeRestrictedStatEvent();
	void RecordTimeRestrictedStatEvent();
	void ResetTimeRestrictedStatEvent();
	void CommitMatchStats(class UProfile_TA* Profile);
	void CommitProductStats(class UProfile_TA* Profile);
	void CommitStats();
	void HandleLoadoutLoaded(class UProductLoader_TA* Loadout);
	void InitProductStats();
	void SetCar(class ACar_TA* NewCar);
	bool IsClientPlayerPRI();
	bool IsLocalPlayerPRI();
	void Unregister();
	void AddLocalPlayerToGameEvent();
	void SetReplayGameEvent(class AGameEvent_TA* InGameEvent);
	void SetGameEvent(class AGameEvent_TA* InGameEvent);
	void HandleGameOwnerUpdated(class AGameEvent_TA* InGameEvent, class APRI_TA* NewGameOwner);
	void OnLoadoutsSetInternal();
	bool AreLoadoutsSet();
	void OnLoadoutsOnlineSet();
	void OnLoadoutsSet();
	void Deprecated_OnLoadoutSetInternal();
	bool Deprecated_IsLoadoutSet();
	void Deprecated_OnLoadoutOnlineSet();
	void Deprecated_OnLoadoutSet();
	void SetTestLoadout(const struct FLoadoutData& NewLoadout);
	TArray<struct FOnlineProductData> GetMatchCompleteLoadout();
	void InitCertifiedProductStat(class UOnlineProduct_TA* OnlineProduct);
	void RemoveCertifiedProductStat();
	void InitClientLoadoutOnlineData(TArray<class UOnlineProduct_TA*>* OnlineProducts, struct FClientLoadoutOnlineData* OutClientData);
	void ValidateOnlineLoadout(struct FLoadoutData* OutLoadout, int* bOutLoadoutChanged, TArray<class UOnlineProduct_TA*>* OnlineProducts);
	void InitOnlineLoadout(struct FOnlineProductArray* Loadouts);
	void HandleOnlineLoadoutReceived(class URPC_ProductsLoadoutGet_TA* RPC);
	void SetLoadouts(struct FLoadoutData* Loadouts, struct FOnlineProductArray* OnlineLoadouts);
	void ServerSetLoadout(const struct FServerSetLoadoutParams& Params);
	bool ShouldValidateOnlineProducts();
	void OnSplitScreenStatusChanged();
	void HandleLocalPlayerLeave(class ULocalPlayer* OldPlayer);
	void HandleLocalPlayerJoin(class ULocalPlayer* NewPlayer);
	void ServerSplitScreenStatusChanged(bool bInSplitScreen);
	void UpdateSplitScreenStatus();
	void OnPartyLeaderChanged();
	void ServerSetPartyLeader(const struct FUniqueNetId& InPartyLeader, bool bInParty);
	void SetPartyLeader(const struct FUniqueNetId& InPartyLeader, bool bInParty);
	void HandlePartyStatusChanged(class UOnlineGameParty_X* Party);
	void UpdatePartyStatus();
	void OnSkillTierChanged();
	void ReplicateSkillTier(int NewTier);
	void OnTitleChanged();
	void SetTitle(const struct FName& NewTitle);
	void HandlePlayerTitle(class UOnlineGamePlayerTitles_X* TitlesObj, const struct FUniqueNetId& InPlayerId);
	void UpdateTitle();
	void HandleCameraChanged(class ACameraSettingsActor_TA* Actor);
	void SetCamera(class ACameraSettingsActor_TA* Actor);
	void OnOwnerChanged();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventServerUnlockedAchievement(class APRI_TA* PRI, int AchievementId, TEnumAsByte<enum class EAchievementType> AchievementType);
	void EventMatchAdmin(class APRI_TA* PRI);
	void EventReplacingBotChanged(class APRI_TA* PRI);
	void EventScoredGoal(class APRI_TA* PRI, const struct FVector& BallHitLocation);
	void EventServerChangeTeamFailed(int TeamIndex);
	void EventSkillTierChanged(class APRI_TA* PRI);
	void EventTitleChanged(class APRI_TA* PRI);
	void EventVoteToForfeitDisabled(class APRI_TA* PRI);
	void EventCommittedStats(class APRI_TA* PRI);
	void EventPawnTypeChanged(class APRI_TA* PRI);
	void EventTotalXPChanged(class APRI_TA* PRI);
	void EventStatTitlesSet(class APRI_TA* PRI);
	void EventWonMVP(class APRI_TA* PRI);
	void EventScorePoint(class APRI_TA* PRI, int Points);
	void EventPartyLeaderChanged(class APRI_TA* PRI);
	void EventCameraChanged(class APRI_TA* PRI);
	void EventPersistentCameraSet(class APRI_TA* PRI);
	void EventSplitScreenStatusChanged(class APRI_TA* PRI);
	void EventCarSet(class APRI_TA* PRI);
	void EventReadyChanged(class APRI_TA* PRI);
	void EventInvalidPsyonixID();
	void EventStatTickerMessage(class APRI_TA* Receiver, class APRI_TA* Victim, class UStatEvent_TA* StatEvent);
	void EventRespawnTimeUpdated(int NewTime);
	void EventSelectedLoadout(class APRI_TA* PRI);
	void EventStatEvent(class APRI_TA* PRI, class UStatEvent_TA* StatEvent, int Count);
	void EventGameEventChanged(class APRI_TA* PRI);
};


// Class TAGame.ProductAsset_Logo_TA
// 0x0030 (0x00A0 - 0x0070)
class UProductAsset_Logo_TA : public UProductAsset_TA
{
public:
	class UTexture*                                    Texture;                                          		// 0x0070(0x0004) (CPF_Edit)
	struct FLinearColor                                TeamColor;                                        		// 0x0074(0x0010) (CPF_Edit)
	struct FLinearColor                                CustomColor;                                      		// 0x0084(0x0010) (CPF_Edit)
	TArray<class UProduct_TA*>                         Bots2;                                            		// 0x0094(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Logo_TA");
		return ptr;
	}


	struct FLinearColor GetFontColor(bool bSwapColors);
	TArray<struct FLinearColor> GetStadiumColors(bool bSwapColors);
	struct FString GetTeamName();
};


// Class TAGame.Car_TA
// 0x017C (0x08E4 - 0x0768)
class ACar_TA : public AVehicle_TA
{
public:
	class UCarMeshComponent_TA*                        CarMesh;                                          		// 0x0768(0x0004) (CPF_Edit, CPF_Const, CPF_ExportObject, CPF_Component, CPF_EditInline)
	TArray<class ACarComponent_TA*>                    DefaultCarComponents;                             		// 0x076C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UEngineAudioComponent_TA*                    EngineAudio;                                      		// 0x0778(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UThrottleShakeComponent_TA*                  ThrottleShake;                                    		// 0x077C(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class ACarComponent_Jump_TA*                       JumpComponent;                                    		// 0x0780(0x0004) (CPF_Transient)
	class ACarComponent_DoubleJump_TA*                 DoubleJumpComponent;                              		// 0x0784(0x0004) (CPF_Transient)
	class ACarComponent_FlipCar_TA*                    FlipComponent;                                    		// 0x0788(0x0004) (CPF_Transient)
	TEnumAsByte<enum class EDemolishTarget>            DemolishTarget;                                   		// 0x078C(0x0001) (CPF_Transient)
	TEnumAsByte<enum class EDemolishSpeed>             DemolishSpeed;                                    		// 0x078D(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData00[0x2];                               		// 0x078E(0x0002) MISSED OFFSET
	class UCarLoadout_TA*                              Loadout;                                          		// 0x0790(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class AFXActor_X*                                  ExitFXArchetype;                                  		// 0x0794(0x0004) (CPF_Edit)
	class ADemolishExplosion_TA*                       DemolishExplosionArchetype;                       		// 0x0798(0x0004) (CPF_Edit)
	class ADemolishExplosion_TA*                       DemolishExplosion;                                		// 0x079C(0x0004) (CPF_Transient)
	class UBallIndicator_TA*                           BallIndicatorArchetype;                           		// 0x07A0(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UBallIndicator_TA*                           BallIndicator;                                    		// 0x07A4(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class UTeamIndicator_TA*                           TeamIndicatorArchetype;                           		// 0x07A8(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UTeamIndicator_TA*                           TeamIndicator;                                    		// 0x07AC(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	float                                              MaxTimeForDodge;                                  		// 0x07B0(0x0004) (CPF_Edit)
	float                                              LastWheelsHitBallTime;                            		// 0x07B4(0x0004) (CPF_Transient)
	struct FLoadoutTeamPaint                           TeamPaint;                                        		// 0x07B8(0x0010) (CPF_Net, CPF_Transient)
	struct FClubColorSet                               ClubColors;                                       		// 0x07C8(0x0008) (CPF_Net, CPF_Transient)
	float                                              ReplicatedCarScale;                               		// 0x07D0(0x0004) (CPF_Net)
	unsigned long                                      bDemolishOnOpposingGround : 1;                    		// 0x07D4(0x0004) (CPF_Transient)
	unsigned long                                      bWasOnOpposingGround : 1;                         		// 0x07D4(0x0004) (CPF_Transient)
	unsigned long                                      bDemolishOnGoalZone : 1;                          		// 0x07D4(0x0004) (CPF_Transient)
	unsigned long                                      bWasInGoalZone : 1;                               		// 0x07D4(0x0004) (CPF_Transient)
	unsigned long                                      bJumped : 1;                                      		// 0x07D4(0x0004) (CPF_Transient)
	unsigned long                                      bDoubleJumped : 1;                                		// 0x07D4(0x0004) (CPF_Transient)
	unsigned long                                      bOverrideHandbrakeOn : 1;                         		// 0x07D4(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bOverrideBoostOn : 1;                             		// 0x07D4(0x0004) (CPF_Net, CPF_Transient)
	class UMessage_TA*                                 DemolishWarningMessage;                           		// 0x07D8(0x0004)
	class UMessage_TA*                                 PickupMessage;                                    		// 0x07DC(0x0004)
	struct FDemolishData                               ReplicatedDemolish;                               		// 0x07E0(0x0020) (CPF_Net, CPF_Transient)
	class AFXActor_X*                                  BodyFXActor;                                      		// 0x0800(0x0004) (CPF_Transient)
	class APRI_TA*                                     AttackerPRI;                                      		// 0x0804(0x0004)
	class ABall_TA*                                    AttachedBall;                                     		// 0x0808(0x0004) (CPF_Net, CPF_Transient)
	struct FVector                                     MouseAccel;                                       		// 0x080C(0x000C) (CPF_Transient)
	struct FVector                                     MouseAirAccel;                                    		// 0x0818(0x000C) (CPF_Transient)
	class ASpecialPickup_TA*                           AttachedPickup;                                   		// 0x0824(0x0004) (CPF_Net, CPF_Transient)
	struct FVector                                     ReplayFocusOffset;                                		// 0x0828(0x000C) (CPF_Transient)
	float                                              AddedBallForceMultiplier;                         		// 0x0834(0x0004) (CPF_Edit, CPF_Net)
	float                                              AddedCarForceMultiplier;                          		// 0x0838(0x0004) (CPF_Edit, CPF_Net)
	class UCarTrajectoryComponent_TA*                  CarTrajectoryComponent;                           		// 0x083C(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class AGameEvent_TA*                               GameEvent;                                        		// 0x0840(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventVehicleSetup__Delegate;                    		// 0x0844(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0844(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventBumpedCar__Delegate;                       		// 0x0854(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0854(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDemolished__Delegate;                      		// 0x0864(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x0864(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTeamSet__Delegate;                         		// 0x0874(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x0874(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTeamPaintChanged__Delegate;                		// 0x0884(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData05[0x4];                               		// 0x0884(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventHitBall__Delegate;                         		// 0x0894(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData06[0x4];                               		// 0x0894(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLanded__Delegate;                          		// 0x08A4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData07[0x4];                               		// 0x08A4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSuperSonicChanged__Delegate;               		// 0x08B4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData08[0x4];                               		// 0x08B4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventAttachedPickup__Delegate;                  		// 0x08C4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData09[0x4];                               		// 0x08C4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventHitWorld__Delegate;                        		// 0x08D4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData10[0x4];                               		// 0x08D4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Car_TA");
		return ptr;
	}


	float GetMaxDriveBackwardsSpeed();
	float GetMaxDriveForwardSpeed();
	struct FVector GetReplayFocusLocation();
	void OnPickupChanged(class ASpecialPickup_TA* inPickup);
	void SetAttachedPickup(class ASpecialPickup_TA* inPickup);
	void EnablePodiumMode();
	void ServerEquipProduct(const struct FName& ProductName);
	void HasBall(class ABall_TA* InBall);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void CopyPushFactorCurve();
	void ClearAttacker();
	void NotifyNewAttacker(class APRI_TA* Attacker);
	void UpdateTeamIndicator();
	void Tick(float DeltaTime);
	void UpdateBallIndicator();
	struct FString GetReplicatedLoadoutString();
	void OnSuperSonicChanged();
	void OnGroundChanged();
	void FellOutOfWorld(class UClass* dmgType);
	class UNetConnection* GetNetConnection();
	class APlayerController* GetTopPlayerController();
	void DemolishDestroyTimer();
	void ClearFX();
	void OnDemolished(const struct FDemolishData& Data);
	void Demolish(class ARBActor_TA* Demolisher);
	bool IsBumperHit(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void SetSoundMode(const struct FName& NewModeValue, const struct FName& NewModeGroup);
	bool Teleport(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, bool bStopVelocity, bool bUpdateRotation, float ExtraForce);
	void OnTeleport(class USeqAct_Teleport* Action);
	void OnJumpReleased();
	void OnJumpPressed();
	void LaunchBall();
	void SetVehicleInput(const struct FVehicleInputs& NewInput);
	bool CanDemolish(class ACar_TA* HitCar);
	bool ShouldDemolish(class ACar_TA* HitCar, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void ApplyCarImpactForces(class ACar_TA* OtherCar, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void ApplyBallImpactForces(class ABall_TA* Ball, const struct FVector& HitLocation);
	bool IsDodging();
	void OnHitBall(class ABall_TA* Ball, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnRigidBodyCollision(const struct FAccumulatedRigidBodyCollision& Collision);
	bool AnyWheelTouchingGround();
	class ACarComponent_TA* GiveCarComponent(class ACarComponent_TA* ComponentArchetype, class APRI_TA* Activator);
	void AddDefaultCarComponents();
	void NotifyWhenVehicleSetup(const struct FScriptDelegate& Callback);
	void InitCarFX();
	void InitFX();
	void DetachPrimitiveComponent(class UPrimitiveComponent* Component);
	void HandleWheelBallHit(class UWheel_TA* Wheel);
	void HandleAllProductsLoaded(class UProductLoader_TA* Loader);
	void RespawnInPlace();
	void SetPickupMessage(class UMessage_TA* InPickupMessage);
	void SetDemolishOnGoalZone(bool bInDemolishOnGoalZone, class UMessage_TA* WarningMessage);
	void SetDemolishOnOpposingGround(bool bInDemolishOnOpposingGround, class UMessage_TA* WarningMessage);
	void SetCarScale(float NewScale);
	void TextArchetypeReloaded();
	void OnClubColorsChanged();
	void OnTeamPaintChanged();
	void HandleTeamChanged(class APRI_X* MyPRI);
	void SetTeamLoadout(int TeamIndex);
	void InitTeamPaint();
	int GetTeamIndex();
	bool HasTeam();
	void HandleLoadoutSelected(class APRI_TA* MyPRI);
	void SetLoadout(struct FClientLoadoutData* Data);
	void HandleGameStateChanged(class AGameEvent_TA* InGameEvent);
	void HandleGameEventChanged(class APRI_TA* MyPRI);
	void OnPRIChanged();
	void OnControllerChanged();
	void Destroyed();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventHitWorld(class ACar_TA* Car, class AActor* HitActor);
	void EventAttachedPickup(class ACar_TA* Car, class ASpecialPickup_TA* NewPickup);
	void EventSuperSonicChanged(class ACar_TA* Car);
	void EventLanded(class ACar_TA* Car);
	void EventHitBall(class ACar_TA* Car, class ABall_TA* Ball);
	void EventTeamPaintChanged(class ACar_TA* Car);
	void EventTeamSet(class ACar_TA* Car);
	void EventDemolished(class ACar_TA* Victim, const struct FDemolishData& Data);
	void EventBumpedCar(class ACar_TA* Car, class ACar_TA* HitCar);
	void EventVehicleSetup(class ACar_TA* Car);
};


// Class TAGame.AchievementManager_TA
// 0x02E4 (0x033C - 0x0058)
class UAchievementManager_TA : public UTickableStateObject_X
{
public:
	class APlayerControllerBase_TA*                    PC;                                               		// 0x0058(0x0004) (CPF_Transient)
	TArray<struct FName>                               DLC0Cars;                                         		// 0x005C(0x000C) (CPF_Const, CPF_NeedCtorLink)
	TArray<struct FName>                               DLC1Cars;                                         		// 0x0068(0x000C) (CPF_Const, CPF_NeedCtorLink)
	TArray<struct FName>                               DLC2Cars;                                         		// 0x0074(0x000C) (CPF_Const, CPF_NeedCtorLink)
	TArray<struct FName>                               ClassicCars;                                      		// 0x0080(0x000C) (CPF_Const, CPF_NeedCtorLink)
	TArray<struct FName>                               DLC2Products;                                     		// 0x008C(0x000C) (CPF_Const, CPF_NeedCtorLink)
	TArray<struct FName>                               RequiredDontLookBackProducts;                     		// 0x0098(0x000C) (CPF_Const, CPF_NeedCtorLink)
	TArray<struct FName>                               RequiredRideOrDieDecalProducts;                   		// 0x00A4(0x000C) (CPF_Const, CPF_NeedCtorLink)
	TArray<struct FName>                               RequiredRideOrDiePaintProducts;                   		// 0x00B0(0x000C) (CPF_Const, CPF_NeedCtorLink)
	TArray<struct FName>                               RequiredAnInchAnd62MilesProducts;                 		// 0x00BC(0x000C) (CPF_Const, CPF_NeedCtorLink)
	TArray<struct FName>                               SARPBCArenas;                                     		// 0x00C8(0x000C) (CPF_Const, CPF_NeedCtorLink)
	TArray<struct FName>                               RequiredLevelsToPlay;                             		// 0x00D4(0x000C) (CPF_Const, CPF_NeedCtorLink)
	class UMapSet_TA*                                  RequiredRocketLabsArenas;                         		// 0x00E0(0x0004) (CPF_Const)
	TArray<struct FName>                               RocketLabsArenaNames;                             		// 0x00E4(0x000C) (CPF_NeedCtorLink)
	TArray<class UMapData_TA*>                         BraveTheElementsBaseLevels;                       		// 0x00F0(0x000C) (CPF_Const, CPF_NeedCtorLink)
	TArray<struct FName>                               RequiredRumbleActivation;                         		// 0x00FC(0x000C) (CPF_Const, CPF_NeedCtorLink)
	float                                              MaxBoostTime;                                     		// 0x0108(0x0004) (CPF_Const)
	float                                              MaxTimeOnWall;                                    		// 0x010C(0x0004) (CPF_Const)
	float                                              MaxDriveDistanceKM;                               		// 0x0110(0x0004) (CPF_Const)
	float                                              MaxHandbrakeRadius;                               		// 0x0114(0x0004) (CPF_Const)
	float                                              MinHandbrakeDotAngleForComplete;                  		// 0x0118(0x0004) (CPF_Const)
	int                                                DunksScored;                                      		// 0x011C(0x0004)
	int                                                LastKMDrivenInt;                                  		// 0x0120(0x0004)
	int                                                RocketBoostFills;                                 		// 0x0124(0x0004)
	int                                                SpinnerProductID;                                 		// 0x0128(0x0004)
	int                                                CristianoProductID;                               		// 0x012C(0x0004)
	int                                                TotalDLC0BoostTime;                               		// 0x0130(0x0004)
	int                                                GoalsScoredInCurrentGame;                         		// 0x0134(0x0004)
	int                                                SavesInCurrentGame;                               		// 0x0138(0x0004)
	int                                                AssistsInCurrentGame;                             		// 0x013C(0x0004)
	int                                                DLC2PsychoMasterExplodeCount;                     		// 0x0140(0x0004)
	int                                                TotalBreakoutGoals;                               		// 0x0144(0x0004) (CPF_Const)
	int                                                MaxRocketBoostFills;                              		// 0x0148(0x0004) (CPF_Const)
	int                                                TotalBreakoutPlatformsToDamage;                   		// 0x014C(0x0004) (CPF_Const)
	int                                                TotalDLC0WheelDriveDistanceKM;                    		// 0x0150(0x0004) (CPF_Const)
	unsigned long                                      bBoostWasFull : 1;                                		// 0x0154(0x0004)
	unsigned long                                      bPlayerInited : 1;                                		// 0x0154(0x0004)
	unsigned long                                      bHandbrakePressed : 1;                            		// 0x0154(0x0004)
	unsigned long                                      bCheckMinuteToWinIt : 1;                          		// 0x0154(0x0004)
	unsigned long                                      bDidInitialCheckForMinuteToWinIt : 1;             		// 0x0154(0x0004)
	unsigned long                                      bCheckBuzzerBeater : 1;                           		// 0x0154(0x0004)
	unsigned long                                      bDidInitialCheckForBuzzerBeater : 1;              		// 0x0154(0x0004)
	unsigned long                                      bQualifiesForDLC1Throwback : 1;                   		// 0x0154(0x0004)
	struct FVector                                     LastCarLocation;                                  		// 0x0158(0x000C)
	struct FVector                                     HandbrakeStartDir;                                		// 0x0164(0x000C)
	struct FVector                                     HandbrakeStartLocation;                           		// 0x0170(0x000C)
	struct FString                                     WastelandMapName;                                 		// 0x017C(0x000C) (CPF_Const, CPF_NeedCtorLink)
	struct FString                                     AquaticMapName;                                   		// 0x0188(0x000C) (CPF_Const, CPF_NeedCtorLink)
	struct FString                                     UtopiaMapName;                                    		// 0x0194(0x000C) (CPF_Const, CPF_NeedCtorLink)
	struct FString                                     WinterMapName;                                    		// 0x01A0(0x000C) (CPF_Const, CPF_NeedCtorLink)
	struct FString                                     ArcMapName;                                       		// 0x01AC(0x000C) (CPF_Const, CPF_NeedCtorLink)
	struct FName                                       ProductName_Body_GearsCar;                        		// 0x01B8(0x0008) (CPF_Const)
	struct FName                                       ProductName_Body_Import;                          		// 0x01C0(0x0008) (CPF_Const)
	struct FName                                       ProductName_Body_Interceptor;                     		// 0x01C8(0x0008) (CPF_Const)
	struct FName                                       ProductName_Body_MuscleCar;                       		// 0x01D0(0x0008) (CPF_Const)
	struct FName                                       ProductName_Body_Warthog;                         		// 0x01D8(0x0008) (CPF_Const)
	struct FName                                       ProductName_Body_WastelandTruck;                  		// 0x01E0(0x0008) (CPF_Const)
	struct FName                                       ProductName_Boost_Bubble;                         		// 0x01E8(0x0008) (CPF_Const)
	struct FName                                       ProductName_Boost_MusicalNotes;                   		// 0x01F0(0x0008) (CPF_Const)
	struct FName                                       ProductName_Hat_Mohawk;                           		// 0x01F8(0x0008) (CPF_Const)
	struct FName                                       ProductName_Hat_SharkFin;                         		// 0x0200(0x0008) (CPF_Const)
	struct FName                                       ProductName_Skin_Scarab_Hearts;                   		// 0x0208(0x0008) (CPF_Const)
	struct FName                                       ProductName_Skin_Zippy_Hearts;                    		// 0x0210(0x0008) (CPF_Const)
	struct FName                                       ProductName_Wheel_Spinner;                        		// 0x0218(0x0008) (CPF_Const)
	struct FName                                       ProductName_Wheel_SoccerBall;                     		// 0x0220(0x0008) (CPF_Const)
	struct FName                                       ProductName_Hat_Halo;                             		// 0x0228(0x0008) (CPF_Const)
	struct FName                                       StatName_BoostTimeMinutes;                        		// 0x0230(0x0008) (CPF_Const)
	struct FName                                       StatName_Certifiable;                             		// 0x0238(0x0008) (CPF_Const)
	struct FName                                       StatName_DistanceDrivenKm;                        		// 0x0240(0x0008) (CPF_Const)
	struct FName                                       StatName_ItemCollected;                           		// 0x0248(0x0008) (CPF_Const)
	struct FName                                       StatName_LeftWingRightWing;                       		// 0x0250(0x0008) (CPF_Const)
	struct FName                                       StatName_MadScientist;                            		// 0x0258(0x0008) (CPF_Const)
	struct FName                                       StatName_MatchComplete;                           		// 0x0260(0x0008) (CPF_Const)
	struct FName                                       StatName_WallTimeMinutes;                         		// 0x0268(0x0008) (CPF_Const)
	struct FName                                       StatName_RocketGenocider;                         		// 0x0270(0x0008) (CPF_Const)
	struct FName                                       StatName_BraveTheElements;                        		// 0x0278(0x0008) (CPF_Const)
	struct FName                                       StatName_FullCourse;                              		// 0x0280(0x0008) (CPF_Const)
	struct FName                                       StatName_BuckminsterX10;                          		// 0x0288(0x0008) (CPF_Const)
	class USaveData_TA*                                BaseSaveData;                                     		// 0x0290(0x0004)
	class UAchievementSave_TA*                         SaveData;                                         		// 0x0294(0x0004)
	class APRI_TA*                                     LastPRI;                                          		// 0x0298(0x0004) (CPF_Transient)
	class AGameInfo_Replay_TA*                         LastGame;                                         		// 0x029C(0x0004) (CPF_Transient)
	class AGameEvent_TA*                               LastGameEvent;                                    		// 0x02A0(0x0004) (CPF_Transient)
	class ACar_TA*                                     LastCar;                                          		// 0x02A4(0x0004) (CPF_Transient)
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x02A8(0x0004) (CPF_Edit)
	struct FScriptDelegate                             __EventNewMVPScore__Delegate;                     		// 0x02AC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x02AC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGoalAmountScored__Delegate;                		// 0x02BC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x02BC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDrivenDistance__Delegate;                  		// 0x02CC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x02CC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventShotAmountBlocked__Delegate;               		// 0x02DC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x02DC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameEventAmountWon__Delegate;              		// 0x02EC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x02EC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventChampionshipAmountChanged__Delegate;       		// 0x02FC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData05[0x4];                               		// 0x02FC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventRandomItemAmountDropped__Delegate;         		// 0x030C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData06[0x4];                               		// 0x030C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventRegularSeasonAmountChanged__Delegate;      		// 0x031C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData07[0x4];                               		// 0x031C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventAchievementUnlocked__Delegate;             		// 0x032C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData08[0x4];                               		// 0x032C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AchievementManager_TA");
		return ptr;
	}


	void Save();
	bool AddToIntList(int Number, TArray<int>* Out_IntList);
	bool AddToNameList(const struct FName& NewName, TArray<struct FName>* Out_NameList);
	bool AddToStringList(const struct FString& NewName, TArray<struct FString>* Out_StringList);
	void ResetTemporaryVaribles();
	bool PlayerIsOnATeam();
	bool NotifyKeyInput(int ControllerId, const struct FName& Key, TEnumAsByte<enum class EInputEvent> EventType, float AmountDepressed, bool bGamepad);
	bool UpdateGoalsScoredAgainstBots(class AGameEvent_TA* GameEvent, int MaxGoals, const struct FName& RequiredProduct, float BotSkillLevel, int* Out_UpdatedGoals);
	void HandleScoredGoal(class APRI_TA* PRI, const struct FVector& BallHitLocation);
	void HandlePlayerDemolished(class ACar_TA* Victim, const struct FDemolishData& Data);
	void SetHandbrakeStartData();
	bool OtherTeamIsAllBots(class AGameEvent_TA* GameEvent);
	bool ProductIsInAnyOpponentLoadout(class AGameEvent_TA* GameEvent, const struct FName& ProductName);
	bool IsPlayingSnowDay(class AGameEvent_Soccar_TA* SoccarEvent);
	bool QualifiesForDLC1Throwback();
	bool OrginalBattleCarIsInLoadout();
	bool DLC1CarIsInLoadout();
	void OnBreakoutPlatformDamaged(int Count);
	void HandleUsedAllMapVotes(class UProfile_TA* Profile);
	void UpdateBraveTheElementsLevelsPlayed();
	void CheckUnlockedBraveTheElements();
	void CheckUnlockedDamageControl(class AGameEvent_Soccar_TA* GameEvent);
	void CheckDLC0PowerSlide();
	bool Handbrake180Completed();
	int GetTotalProductStats(TArray<struct FName> ProductNames);
	void CheckDLC0WheelDriveDistance();
	void CheckDLC0BoostTime();
	void HandleStatsCommited(class APRI_TA* PRI);
	bool PaintFinishIsInLoadout(const struct FName& ProductName);
	bool ProductIsInLoadout(const struct FName& ProductName);
	bool IsWearingHat();
	bool HasRideOrDieRequiredProducts();
	bool PlayingMap(const struct FString& MapName);
	void CheckUnlockedAllGameAchievements();
	void CheckAllCarSlotsCustomized(int ProductID);
	void HandleReplayStarted(class AGameInfo_Replay_TA* Game);
	void HandleProductEquipped(class UProfile_TA* InProfile, int ProductID);
	void HandleProfileSet(class ULocalPlayer_TA* LocalPlayer);
	bool AllSeasonGamesPlayedWithDLC0Cars(class AGameEvent_Season_TA* GameEvent);
	void HandleWonChampionship(class AGameEvent_Season_TA* GameEvent);
	float ConvertUnrealToKM(float Distance);
	void CheckDriveTime();
	void CheckBoosting(float DeltaTime);
	void CheckWallDriveTime(float DeltaTime);
	void Tick(float DeltaTime);
	void HandleBoostAmountChanged(class ACarComponent_Boost_TA* Boost);
	void CheckTrainingModesPlayed();
	void CheckGameProgress();
	void UpdateTrainingModesPlayed(class AGameEvent_TA* GameEvent);
	bool PlayedAllLevels(TArray<struct FName>* RequiredLevels);
	void UpdateLevelsPlayed();
	void HandleStatEvent(class APRI_TA* PRI, class UStatEvent_TA* StatEvent, int Count);
	void CheckTrifecta();
	void CheckUnlockedCars();
	void HandleCertifiedStatRankedUp(class UProductAttribute_Certified_TA* CertifiedAttribute);
	void HandleNewOnlineProduct(class USaveData_TA* Data, class UOnlineProduct_TA* OnlineProduct);
	void HandleNewProductUnlocked(class USaveData_TA* Data, int ProductID);
	bool IsPlayingWithAFriend(class AGameEvent_TA* GameEvent, class APRI_TA* NewPlayerPRI);
	bool PlayedAllCars(TArray<struct FName> CarsToCheck);
	void UpdateCarsPlayed();
	void HandleMatchEnded(class AGameEvent_Soccar_TA* GameEvent);
	void CheckBotTeamsPlayed(class AGameEvent_Soccar_TA* GameEvent);
	void UpdateBotTeamsPlayed(class AGameEvent_Soccar_TA* GameEvent);
	void IncrementGames(class AGameEvent_Soccar_TA* GameEvent);
	void HandleMatchWinnerSet(class AGameEvent_Soccar_TA* GameEvent);
	void HandlePlayerCarSet(class APRI_TA* PRI);
	void HandleNewPlayerAdded(class AGameEvent_TA* GameEvent, class APRI_TA* PRI);
	void HandleOvertimeUpdated(class AGameEvent_Soccar_TA* GameEvent);
	bool GameEventHasPlayers(class AGameEvent_TA* GameEvent);
	bool IsTiedOrTrailingOtherTeam(class AGameEvent_Soccar_TA* GameEvent);
	void HandleGameTimeUpdated(class AGameEvent_Soccar_TA* GameEvent);
	void HandleCarAddComponent(class UObject* O);
	void SetupDriftKingForUnlock();
	void InitCar();
	void HandlePickupActivated(class ACar_TA* InCar, class ASpecialPickup_TA* ActivatedPickup);
	void CheckAllRumbleActivations(class ASpecialPickup_TA* ActivatedPickup);
	struct FName GetRumbleItemName(class ASpecialPickup_TA* Pickup);
	void HandleCarSet(class APRI_TA* InPRI);
	void HandleTeamChanged(class APRI_X* InPRI);
	void HandleGameEventChanged(class APRI_TA* PRI);
	void UpdatePRI(class APRI_TA* PRI);
	void HandleReceivedPRI(class APlayerController_X* InPC);
	void SetBaseSaveData(class USaveData_TA* MySaveData);
	void HandleBaseSaveDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* MySaveData, class UError_X* Error);
	void HandlePlayerReceived(class APlayerController_X* InPC);
	void Init(class APlayerControllerBase_TA* InPC);
	void SyncPS4Achievements(TArray<unsigned long> SyncedAchievements);
	void CheckPS4AchievementsSynced();
	void UploadPsyNetAchievements();
	void HandlePsyNetAchievementDataReceived(class URPC_AchievementDataGet_TA* RPC);
	void SyncPsyNetAchievements();
	void SyncSteamAchievements(int TitleId);
	void OnFirstExecution();
	void IncrementStat(int AchievementId, int Progress);
	bool AchievementTypeExistsOnPlatform(TEnumAsByte<enum class EAchievementType> AchievementType);
	int GetAchievementTypeMax(TEnumAsByte<enum class EAchievementType> AchievementType);
	int GetAchievementIconID(int InAchievementID, TEnumAsByte<enum class EAchievementType> AchievementType);
	int GetActualAchievementID(int InAchievementID, TEnumAsByte<enum class EAchievementType> AchievementType);
	bool HasUnlockAuthority(const struct FAchievementInfo& AchievementData);
	struct FAchievementInfo GetAchievementInfo(int AchievementId, TEnumAsByte<enum class EAchievementType> AchievementType);
	bool IsUnlocked(int AchievementId, TEnumAsByte<enum class EAchievementType> AchievementType, bool bIgnoreAuthority);
	void SetAchievementUnlocked(int AchievementId, TEnumAsByte<enum class EAchievementType> AchievementType, bool bUnlocked);
	void UnlockAchievement(int AchievementId, TEnumAsByte<enum class EAchievementType> AchievementType, bool bIgnoreAuthority);
	void HandleServerUnlockedAchievement(class APRI_TA* PRI, int AchievementId, TEnumAsByte<enum class EAchievementType> AchievementType);
	void EventAchievementUnlocked(class UAchievementManager_TA* Manager, int AchievementId, TEnumAsByte<enum class EAchievementType> AchievementType);
	void EventRegularSeasonAmountChanged(class UAchievementManager_TA* Manager, int Amount);
	void EventRandomItemAmountDropped(class UAchievementManager_TA* Manager, int Amount);
	void EventChampionshipAmountChanged(class UAchievementManager_TA* Manager, int Wins);
	void EventGameEventAmountWon(class UAchievementManager_TA* Manager, int GamesWon);
	void EventShotAmountBlocked(class UAchievementManager_TA* Manager, int bLocked);
	void EventDrivenDistance(class UAchievementManager_TA* Manager, float Distance);
	void EventGoalAmountScored(class UAchievementManager_TA* Manager, int Score);
	void EventNewMVPScore(class UAchievementManager_TA* Manager, int Score);
};


// Class TAGame.GameInfoBase_TA
// 0x0010 (0x0410 - 0x0400)
class AGameInfoBase_TA : public AGameInfo_X
{
public:
	TArray<class UGFxSoundPack_X*>                     SoundPacks;                                       		// 0x0400(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UMusicTheme_TA*                              MusicTheme;                                       		// 0x040C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfoBase_TA");
		return ptr;
	}


	class UClass* STATIC_SetGameType(const struct FString& MapName, const struct FString& Options, const struct FString& Portal);
};


// Class TAGame.GameInfo_Replay_TA
// 0x003C (0x044C - 0x0410)
class AGameInfo_Replay_TA : public AGameInfoBase_TA
{
public:
	class UReplay_TA*                                  Replay;                                           		// 0x0410(0x0004) (CPF_Transient)
	class AGameEvent_TA*                               GameEvent;                                        		// 0x0414(0x0004) (CPF_Transient)
	float                                              PrevTime;                                         		// 0x0418(0x0004) (CPF_Transient)
	float                                              ReplayStartTime;                                  		// 0x041C(0x0004) (CPF_Transient)
	struct FString                                     ReplayKismetLevelName;                            		// 0x0420(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventReplayStarted__Delegate;                   		// 0x042C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x042C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameEventSet__Delegate;                    		// 0x043C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x043C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Replay_TA");
		return ptr;
	}


	void HandleReplayTimeSkip(class UReplay_TA* InReplay);
	void TriggerTimeEvents();
	void OnLoadReplayCancel(class UGFxModal_X* Modal);
	void OnLoadReplayRetry(class UGFxModal_X* Modal);
	void HandleReplayImportError(class UReplay_TA* InReplay, class UError_X* Error);
	void Tick(float DeltaTime);
	void HandleReplayActorSpawned(class UReplay_TA* InReplay, class AActor* A);
	class ANavigationPoint* FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName);
	void HandleReplayImported(class UReplayManager_TA* Manager, class UReplay_TA* InReplay, class UError_X* Error);
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
	void EventGameEventSet(class AGameInfo_Replay_TA* Game);
	void EventReplayStarted(class AGameInfo_Replay_TA* Game);
};


// Class TAGame.AchievementSave_TA
// 0x0250 (0x028C - 0x003C)
class UAchievementSave_TA : public UObject
{
public:
	struct FAchievementInfo                            Achievements[0x24];                               		// 0x003C(0x0004)
	struct FAchievementInfo                            Achievements_EXP0[0x3];                           		// 0x00CC(0x0004)
	struct FAchievementInfo                            Achievements_DLC0[0x6];                           		// 0x00D8(0x0004)
	struct FAchievementInfo                            Achievements_DLC1[0x5];                           		// 0x00F0(0x0004)
	struct FAchievementInfo                            Achievements_DLC2[0x5];                           		// 0x0104(0x0004)
	struct FAchievementInfo                            Achievements_XBO0[0x2];                           		// 0x0118(0x0004)
	struct FAchievementInfo                            Achievements_DLC3[0x8];                           		// 0x0120(0x0004)
	struct FAchievementInfo                            Achievements_DLC4[0x7];                           		// 0x0140(0x0004)
	struct FAchievementInfo                            Achievements_DLC5[0x6];                           		// 0x015C(0x0004)
	TArray<struct FString>                             BotTeamsPlayed;                                   		// 0x0174(0x000C) (CPF_NeedCtorLink)
	TArray<struct FString>                             TrainingModesPlayed;                              		// 0x0180(0x000C) (CPF_NeedCtorLink)
	TArray<struct FName>                               LevelsPlayed;                                     		// 0x018C(0x000C) (CPF_NeedCtorLink)
	TArray<struct FName>                               LabsMapsPlayed;                                   		// 0x0198(0x000C) (CPF_NeedCtorLink)
	TArray<struct FName>                               CarsPlayed;                                       		// 0x01A4(0x000C) (CPF_NeedCtorLink)
	TArray<struct FName>                               RumbleItemsActivated;                             		// 0x01B0(0x000C) (CPF_NeedCtorLink)
	TArray<struct FName>                               BraveTheElementsLevelsPlayed;                     		// 0x01BC(0x000C) (CPF_NeedCtorLink)
	float                                              TotalBoostTime;                                   		// 0x01C8(0x0004)
	float                                              TotalTimeOnWall;                                  		// 0x01CC(0x0004)
	float                                              TotalDriveDistanceKM;                             		// 0x01D0(0x0004)
	int                                                GoalShotsAny;                                     		// 0x01D4(0x0004)
	int                                                GoalShots;                                        		// 0x01D8(0x0004)
	int                                                GoalSaves;                                        		// 0x01DC(0x0004)
	int                                                SavageGoals;                                      		// 0x01E0(0x0004)
	int                                                GameEventsWon;                                    		// 0x01E4(0x0004)
	int                                                GamesWonInARow;                                   		// 0x01E8(0x0004)
	int                                                GameEventsPlayed;                                 		// 0x01EC(0x0004)
	int                                                SpectacularGoals;                                 		// 0x01F0(0x0004)
	int                                                TotalScoredGoals;                                 		// 0x01F4(0x0004)
	int                                                TotalShotsBlocked;                                		// 0x01F8(0x0004)
	int                                                RandomItemsDropped;                               		// 0x01FC(0x0004)
	int                                                HighestMVPScore;                                  		// 0x0200(0x0004)
	int                                                ChampionshipsWon;                                 		// 0x0204(0x0004)
	int                                                RegularSeasonsCompleted;                          		// 0x0208(0x0004)
	int                                                HighestRecordedCertifiedRank;                     		// 0x020C(0x0004)
	int                                                BreakoutGoals;                                    		// 0x0210(0x0004)
	int                                                BreakoutPlatformsDamaged;                         		// 0x0214(0x0004)
	unsigned long                                      bPowerSlideCristianoCompleted : 1;                		// 0x0218(0x0004)
	unsigned long                                      bPowerSlideSpinnerCompleted : 1;                  		// 0x0218(0x0004)
	unsigned long                                      bRideOrDieDominusCompleted : 1;                   		// 0x0218(0x0004)
	unsigned long                                      bRideOrDieTakumiCompleted : 1;                    		// 0x0218(0x0004)
	unsigned long                                      bResetWinningIsWinningSeasonList : 1;             		// 0x0218(0x0004)
	struct FCustomizedSlots                            SlotsCustomized;                                  		// 0x021C(0x0004)
	TArray<float>                                      CheckDistancesDrivenKM;                           		// 0x0220(0x000C) (CPF_NeedCtorLink)
	TArray<int>                                        CheckScoredGoals;                                 		// 0x022C(0x000C) (CPF_NeedCtorLink)
	TArray<int>                                        CheckShotsBlocked;                                		// 0x0238(0x000C) (CPF_NeedCtorLink)
	TArray<int>                                        CheckGameEventsWon;                               		// 0x0244(0x000C) (CPF_NeedCtorLink)
	TArray<int>                                        CheckRandomItemsDropped;                          		// 0x0250(0x000C) (CPF_NeedCtorLink)
	TArray<int>                                        LeftWingRightWingTeamsPlayed;                     		// 0x025C(0x000C) (CPF_NeedCtorLink)
	TArray<unsigned long>                              WinningIsWinningPlayedWithDLC0Cars;               		// 0x0268(0x000C) (CPF_NeedCtorLink)
	int                                                ExhibitionMatchesPlayed;                          		// 0x0274(0x0004)
	int                                                RankedMatchesPlayed;                              		// 0x0278(0x0004)
	int                                                UnrankedMatchesPlayed;                            		// 0x027C(0x0004)
	int                                                PrivateMatchesPlayed;                             		// 0x0280(0x0004)
	int                                                ReplayEditorOpened;                               		// 0x0284(0x0004)
	int                                                CreditsViewed;                                    		// 0x0288(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AchievementSave_TA");
		return ptr;
	}


	void Reconcile(class UAchievementSave_TA* Other);
};


// Class TAGame.GameEvent_Team_TA
// 0x003C (0x04D4 - 0x0498)
class AGameEvent_Team_TA : public AGameEvent_TA
{
public:
	TArray<class ATeam_TA*>                            TeamArchetypes;                                   		// 0x0498(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<class ATeam_TA*>                            Teams;                                            		// 0x04A4(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	int                                                MaxTeamSize;                                      		// 0x04B0(0x0004) (CPF_Net, CPF_Transient)
	int                                                NumBots;                                          		// 0x04B4(0x0004) (CPF_Transient)
	unsigned long                                      bMuteOppositeTeams : 1;                           		// 0x04B8(0x0004) (CPF_Edit)
	unsigned long                                      bDisableMutingOtherTeam : 1;                      		// 0x04B8(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bForfeit : 1;                                     		// 0x04B8(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bUnfairTeams : 1;                                 		// 0x04B8(0x0004) (CPF_Transient)
	unsigned long                                      bAlwaysAutoSelectTeam : 1;                        		// 0x04B8(0x0004) (CPF_Transient)
	class AVoteActor_TA*                               RematchVoteArchetype;                             		// 0x04BC(0x0004) (CPF_Edit)
	class AVoteActor_TA*                               RematchVote;                                      		// 0x04C0(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventTeamsCreated__Delegate;                    		// 0x04C4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x04C4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Team_TA");
		return ptr;
	}


	void ClearTemporarySpawnSpots();
	bool ChooseTeam(int TeamIndex, class APlayerController_TA* Player);
	bool CanChangeTeam();
	void OnPenaltyChanged();
	void OnTeamForfeited(class ATeam_TA* Team);
	void HandleTeamForfeit(class ATeam_TA* Team);
	void MuteOppositeTeams(bool bMute);
	void UpdateBotCount();
	bool ReplacePlayer(class APRI_TA* PRI, struct FVector* CarLocation, struct FRotator* CarRotation, struct FVector* CarVelocity);
	bool ReplaceBot(class APRI_TA* PRI, class APRI_TA* Replace, struct FVector* CarLocation, struct FRotator* CarRotation, struct FVector* CarVelocity);
	bool FindBotReplacement(class APRI_TA* PRI);
	void EndGame();
	void ForceNoContest();
	void CheckForForfeit(class AController* RemovedPlayer, class ATeam_TA* Team);
	void OnPlayerRemoved(class AController* OldPlayer);
	class ATeam_TA* PickTeam(class AController* C);
	void AddTemporarySpawnSpot(class ATeam_TA* Team, class ACar_TA* Car);
	void SetPlayerTeam(class AController* Player, int Team);
	void CleanupPlayerCar(class AController* Player);
	void RemovePlayerFromTeam(class AController* Player);
	void AddPlayerToTeam(class ATeam_TA* NewTeam, class AController* NewPlayer);
	void HandleSelectedLoadout(class APRI_TA* PlayerPRI);
	void OnPlayerAdded(class AController* NewPlayer);
	void Destroyed();
	void DestroyTeams();
	void NotifyAllTeamsCreated(const struct FScriptDelegate& Callback);
	void OnAllTeamsCreated();
	void AssignCustomTeamSettings();
	bool AllTeamsCreated();
	void SetTeam(int TeamNum, class ATeam_TA* NewTeam);
	void CreateTeams();
	void OnInit();
	void SetMaxTeamSize(int MaxSize);
	void UpdateMaxTeamSize();
	void SetUnfairTeams(bool bUnfair);
	void InitBotSkill();
	void InitGame(const struct FString& Options);
	void EventTeamsCreated(class AGameEvent_Team_TA* GameEvent);
};


// Class TAGame.GameEvent_Soccar_TA
// 0x02BC (0x0790 - 0x04D4)
class AGameEvent_Soccar_TA : public AGameEvent_Team_TA
{
public:
	class ACar_TA*                                     TestCarArchetype;                                 		// 0x04D4(0x0004) (CPF_Edit)
	class ABall_TA*                                    BallArchetype;                                    		// 0x04D8(0x0004) (CPF_Edit)
	class AGoalIndicator_TA*                           GoalIndicatorArchetype;                           		// 0x04DC(0x0004)
	class APylon_Soccar_TA*                            Pylon;                                            		// 0x04E0(0x0004) (CPF_Edit)
	class AActor*                                      BallSpawnPoint;                                   		// 0x04E4(0x0004) (CPF_Edit)
	class AStatFactory_TA*                             StatFactoryArchetype;                             		// 0x04E8(0x0004) (CPF_Edit)
	struct FName                                       InitialEventState;                                		// 0x04EC(0x0008) (CPF_Edit)
	int                                                MatchGames;                                       		// 0x04F4(0x0004) (CPF_Edit)
	int                                                GameTime;                                         		// 0x04F8(0x0004) (CPF_Edit, CPF_Net)
	int                                                WarmupTime;                                       		// 0x04FC(0x0004) (CPF_Edit)
	int                                                MaxScore;                                         		// 0x0500(0x0004) (CPF_Edit)
	int                                                AutoBalanceDifference;                            		// 0x0504(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           ScoreSlomoCurve;                                  		// 0x0508(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x0518(0x0004) (CPF_Edit)
	int                                                LastTrialTime;                                    		// 0x051C(0x0004) (CPF_Transient)
	float                                              ScoreSlomoTime;                                   		// 0x0520(0x0004) (CPF_Transient)
	float                                              GameTimeRemaining;                                		// 0x0524(0x0004) (CPF_Transient)
	int                                                SecondsRemaining;                                 		// 0x0528(0x0004) (CPF_Net, CPF_Transient)
	float                                              TotalGameTimePlayed;                              		// 0x052C(0x0004) (CPF_Transient)
	int                                                GamesPlayed;                                      		// 0x0530(0x0004) (CPF_Transient)
	class UMessage_TA*                                 GoalScoredMessage;                                		// 0x0534(0x0004)
	class UMessage_TA*                                 OvertimeMessage;                                  		// 0x0538(0x0004)
	class UMessage_TA*                                 OneMinRemainingMessage;                           		// 0x053C(0x0004)
	class UMessage_TA*                                 ThirtySecondsRemainingMessage;                    		// 0x0540(0x0004)
	class UMessage_TA*                                 StopMessage;                                      		// 0x0544(0x0004)
	class UMessage_TA*                                 GamePausedMessage;                                		// 0x0548(0x0004)
	class UMessage_TA*                                 GameUnPausedMessage;                              		// 0x054C(0x0004)
	unsigned long                                      bRoundActive : 1;                                 		// 0x0550(0x0004) (CPF_Transient)
	unsigned long                                      bPlayReplays : 1;                                 		// 0x0550(0x0004) (CPF_Edit)
	unsigned long                                      bBallHasBeenHit : 1;                              		// 0x0550(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bOverTime : 1;                                    		// 0x0550(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bUnlimitedTime : 1;                               		// 0x0550(0x0004)
	unsigned long                                      bPlayedGameStartMusic : 1;                        		// 0x0550(0x0004) (CPF_Transient)
	unsigned long                                      bKickOnTrialEnd : 1;                              		// 0x0550(0x0004) (CPF_Const)
	unsigned long                                      bNoContest : 1;                                   		// 0x0550(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bDisableGoalDelay : 1;                            		// 0x0550(0x0004) (CPF_Transient)
	unsigned long                                      bDisableSpawnInRedZone : 1;                       		// 0x0550(0x0004) (CPF_Transient)
	unsigned long                                      bShowNoScorerGoalMessage : 1;                     		// 0x0550(0x0004) (CPF_Const)
	unsigned long                                      bMatchEnded : 1;                                  		// 0x0550(0x0004) (CPF_Net, CPF_Transient)
	int                                                NextSpawnIndex;                                   		// 0x0554(0x0004) (CPF_Transient)
	class AReplayDirector_TA*                          ReplayDirectorArchetype;                          		// 0x0558(0x0004) (CPF_Edit)
	class AReplayDirector_TA*                          ReplayDirector;                                   		// 0x055C(0x0004) (CPF_Net, CPF_Transient)
	TArray<class ABall_TA*>                            GameBalls;                                        		// 0x0560(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	int                                                TotalGameBalls;                                   		// 0x056C(0x0004) (CPF_Edit)
	float                                              PostGoalTime;                                     		// 0x0570(0x0004) (CPF_Edit)
	class AStatFactory_TA*                             StatFactory;                                      		// 0x0574(0x0004) (CPF_Transient)
	TArray<class UGoal_TA*>                            Goals;                                            		// 0x0578(0x000C) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_NeedCtorLink, CPF_EditInline)
	int                                                SecondsRemainingCountdown;                        		// 0x0584(0x0004) (CPF_Edit)
	class UMessage_TA*                                 SecondsRemainingMessage;                          		// 0x0588(0x0004) (CPF_Edit)
	struct FVector                                     FieldCenter;                                      		// 0x058C(0x000C) (CPF_Transient)
	class ATeam_TA*                                    GameWinner;                                       		// 0x0598(0x0004) (CPF_Net, CPF_Transient)
	class ATeam_TA*                                    MatchWinner;                                      		// 0x059C(0x0004) (CPF_Net, CPF_Transient)
	class APRI_TA*                                     MVP;                                              		// 0x05A0(0x0004) (CPF_Net, CPF_Transient)
	class APRI_TA*                                     FastestGoalPlayer;                                		// 0x05A4(0x0004) (CPF_Transient)
	class APRI_TA*                                     SlowestGoalPlayer;                                		// 0x05A8(0x0004) (CPF_Transient)
	class APRI_TA*                                     FurthestGoalPlayer;                               		// 0x05AC(0x0004) (CPF_Transient)
	float                                              FastestGoalSpeed;                                 		// 0x05B0(0x0004) (CPF_Transient)
	float                                              SlowestGoalSpeed;                                 		// 0x05B4(0x0004) (CPF_Transient)
	float                                              FurthestGoal;                                     		// 0x05B8(0x0004) (CPF_Transient)
	unsigned char                                      ReplicatedScoredOnTeam;                           		// 0x05BC(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData00[0x3];                               		// 0x05BD(0x0003) MISSED OFFSET
	int                                                RoundNum;                                         		// 0x05C0(0x0004) (CPF_Net, CPF_Transient)
	struct FReplicatedStingerData                      ReplicatedMusicStinger;                           		// 0x05C4(0x0008) (CPF_Net, CPF_Transient)
	class UAkSoundCue*                                 InGameMusicCue;                                   		// 0x05CC(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 TrainingRoundEndCue;                              		// 0x05D0(0x0004) (CPF_Edit)
	float                                              KickIdleReplayOffset;                             		// 0x05D4(0x0004) (CPF_Edit, CPF_Const)
	float                                              AssistMaxTime;                                    		// 0x05D8(0x0004) (CPF_Edit)
	class UMatchRecorder_X*                            MatchRecorderArchetype;                           		// 0x05DC(0x0004) (CPF_Edit)
	class UMatchRecorder_X*                            MatchRecorder;                                    		// 0x05E0(0x0004) (CPF_Transient)
	float                                              BallHasBeenHitStartDelay;                         		// 0x05E4(0x0004)
	float                                              LowFPSRate;                                       		// 0x05E8(0x0004) (CPF_Edit)
	float                                              LowFPSTimeThreshold;                              		// 0x05EC(0x0004) (CPF_Edit)
	float                                              LowFPSTime;                                       		// 0x05F0(0x0004) (CPF_Transient)
	class UGameEvent_Soccar_SubRules_TA*               DefaultSubRules;                                  		// 0x05F4(0x0004) (CPF_Edit)
	class UGameEvent_Soccar_SubRules_TA*               SubRulesArchetype;                                		// 0x05F8(0x0004) (CPF_Net, CPF_Transient)
	class UGameEvent_Soccar_SubRules_TA*               SubRules;                                         		// 0x05FC(0x0004) (CPF_Transient)
	class USpawnPointCluster_TA*                       SpawnPointsPodium;                                		// 0x0600(0x0004)
	float                                              PodiumDelay;                                      		// 0x0604(0x0004)
	float                                              PodiumTime;                                       		// 0x0608(0x0004)
	class USpawnPointCluster_TA*                       SpawnPointsLobby;                                 		// 0x060C(0x0004)
	int                                                LobbyEndCountdown;                                		// 0x0610(0x0004)
	int                                                LobbyCountdown;                                   		// 0x0614(0x0004)
	float                                              LobbyTime;                                        		// 0x0618(0x0004)
	int                                                LobbySpawnRestartTime;                            		// 0x061C(0x0004)
	TArray<class UStatCategory_TA*>                    StatCategories;                                   		// 0x0620(0x000C) (CPF_NeedCtorLink)
	class ABall_Trajectory_TA*                         BallTrajectory;                                   		// 0x062C(0x0004)
	class ABall_Trajectory_TA*                         BallTrajectoryArchetype;                          		// 0x0630(0x0004)
	class UCountdownObject_TA*                         UnpauseCountdown;                                 		// 0x0634(0x0004) (CPF_Transient)
	class APlayerController_TA*                        Pauser;                                           		// 0x0638(0x0004) (CPF_Transient)
	struct FName                                       SoundScoreStatus;                                 		// 0x063C(0x0008) (CPF_Transient)
	struct FName                                       SoundGameState;                                   		// 0x0644(0x0008) (CPF_Transient)
	TArray<struct FOnlinePlayerMatchData>              PlayerMatchData;                                  		// 0x064C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class UMatchBroadcastRedirector_TA*                MatchBroadcastRedirector;                         		// 0x0658(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UFpsBucketRecorder_TA*                       FpsRecorder;                                      		// 0x065C(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	struct FScriptDelegate                             __EventActiveRoundChanged__Delegate;              		// 0x0660(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0660(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventStartNewRound__Delegate;                   		// 0x0670(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0670(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventBallAdded__Delegate;                       		// 0x0680(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x0680(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventBallRemoved__Delegate;                     		// 0x0690(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x0690(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventFirstBallHit__Delegate;                    		// 0x06A0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData05[0x4];                               		// 0x06A0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGoalScored__Delegate;                      		// 0x06B0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData06[0x4];                               		// 0x06B0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameTimeUpdated__Delegate;                 		// 0x06C0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData07[0x4];                               		// 0x06C0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventOvertimeUpdated__Delegate;                 		// 0x06D0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData08[0x4];                               		// 0x06D0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameEnded__Delegate;                       		// 0x06E0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData09[0x4];                               		// 0x06E0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventMatchEnded__Delegate;                      		// 0x06F0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData10[0x4];                               		// 0x06F0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventEndGameCountDown__Delegate;                		// 0x0700(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData11[0x4];                               		// 0x0700(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameOverStingerWin__Delegate;              		// 0x0710(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData12[0x4];                               		// 0x0710(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameOverStingerLose__Delegate;             		// 0x0720(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData13[0x4];                               		// 0x0720(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventGameOverStingerForfeit__Delegate;          		// 0x0730(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData14[0x4];                               		// 0x0730(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventReplayDirectorSet__Delegate;               		// 0x0740(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData15[0x4];                               		// 0x0740(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventMatchWinnerSet__Delegate;                  		// 0x0750(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData16[0x4];                               		// 0x0750(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPlayerScored__Delegate;                    		// 0x0760(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData17[0x4];                               		// 0x0760(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventReplicatedGoalScored__Delegate;            		// 0x0770(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData18[0x4];                               		// 0x0770(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventStatFactoryInitialized__Delegate;          		// 0x0780(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData19[0x4];                               		// 0x0780(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Soccar_TA");
		return ptr;
	}


	void HandleTrajectoryEnabledChanged(class ABall_TA* InBall);
	void DestroyBallTrajectory();
	void AddBallTrajectory();
	void GetPresenceStatus(struct FString* Out_PresenceString, struct FString* Out_GameDataString);
	bool ShowScorerGoalMessage();
	bool CanUseBallCam();
	bool RestartPlayer(class AController* NewPlayer);
	void HandleCarDemolished(class ACar_TA* Car, const struct FDemolishData& Data);
	bool DisableStatXP();
	void SetDisableSpawnInRedZone(bool bInDisableSpawnInRedZone);
	void SetDisableGoalDelay(bool bInDisableGoalDelay);
	void ForceMatchStart();
	void RemoveLocalPlayer(class APlayerController_TA* Player);
	void AddLocalPlayer(class APlayerController_TA* Player);
	void DestroyGoalIndicators(class APlayerController_TA* Player);
	class AGoalIndicator_TA* SpawnGoalIndicator(class APlayerController_TA* Player, class UGoal_TA* Goal, class AActor* OrientationActor);
	void CreateGoalIndicators(class APlayerController_TA* Player);
	class APlayerController_TA* GetLocalPrimaryPlayer();
	bool CheckTrialEnded();
	void HandleMatchCompleteDataReceived(class URPC_MatchComplete_TA* RPC);
	void BeginHighlightsReplay();
	void RemovePlayer(class AController* Player);
	void HandleUnpauseTimer(class UCountdownObject_TA* CountdownObject, int CountValue);
	void SetPaused(class APlayerController_TA* InPauser, bool bInPaused);
	bool ShouldCountdownResumeFromPause();
	void SetScoreAndTime(class APlayerController_TA* PC, int NewScoreTeam0, int NewScoreTeam1, int InGameTimeRemaining, bool bInOvertime, bool bRestartRound);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void SaveLocalPlayerStats();
	bool ShouldPlayReplay();
	bool ShouldRecordReplay();
	void OnBallHasBeenHit();
	class ABall_TA* SpawnBall(const struct FVector& SpawnLoc, bool bWake, bool bSpawnCannon, const struct FString& BallArch);
	struct FName GetScoreStatus(unsigned char TeamNum);
	void UpdateSoundScoreStatus();
	void UpdateSoundState();
	int GetTotalScore();
	struct FName GetDesiredSoundState();
	void HandleCarSet(class APRI_TA* InPRI);
	void RemovePRI(class APRI_TA* PRI);
	void AddPRI(class APRI_TA* PRI);
	void PlayGameStartMusic();
	void RemovePlayerFromTeam(class AController* Player);
	void AddPlayerToTeam(class ATeam_TA* NewTeam, class AController* NewPlayer);
	void PlayGoalScoredSounds();
	void ReplicateGoalScoreStinger();
	void OnMatchWinnerSet();
	void PlayGameOverStinger();
	void StopInGameMusic();
	void StartInGameMusic();
	void PlayMusicStinger(class UAkSoundCue* Stinger);
	void ClearReplicatedMusicStinger();
	void ReplicateMusicStinger(class UAkSoundCue* Stinger);
	class APRI_TA* GetMVP(class ATeam_TA* WinningTeam);
	int MVPSort(class APRI_TA* A, class APRI_TA* B);
	void HandleHitGoal(class ABall_TA* Ball, class UGoal_TA* Goal);
	void ClearReplicatedScoredOnTeam();
	void TriggerScoreChangedEvent();
	void HandleScoreUpdated(class ATeam_TA* Team);
	void OnAllTeamsCreated();
	void TriggerGoalScoreEvent(int TeamScoredOn, class ACar_TA* Scorer);
	bool CanAwardAchievements();
	bool AllowScoreboard();
	void SetTotalGameBalls(int TotalBalls);
	void RecordRecentPlayers();
	void UpdateStats();
	void AddStatData(const struct FName& StatId, const struct FUniqueNetId& PlayerID, int Value, TArray<struct FUploadStatDataSet>* DataSet);
	void NotifyKismetOfCurrentTime();
	void OnGameTimeUpdated();
	void OnOvertimeUpdated();
	void ForceOvertime();
	void StartOvertime();
	bool OnMyHalf(const struct FVector& TestLocation, unsigned char TeamNum);
	bool InGoalZone(const struct FVector& TestLocation);
	class ATeam_TA* GetWinningTeam();
	void ResetPickups();
	void ResetPlayers();
	void OnBallSpawned(class ABall_TA* NewBall);
	void ResetBalls();
	void DestroyCars();
	void FreezePawns();
	void DestroyBalls();
	void RemoveGameBall(class ABall_TA* Ball);
	void AddGameBall(class ABall_TA* Ball);
	void StartNewRound();
	void CheckForAutoBalance();
	bool HasWinner();
	void StartCountDown();
	void SubmitSkillMatch();
	void SubmitMatch();
	void CommitPlayerMatchData(class APRI_TA* PRI);
	void SubmitMatchComplete();
	void GenerateItemDrops();
	void OnMatchEnded();
	bool ShouldDoPodiumSpotlight();
	void SubmitChallengePlayedGame();
	struct FName GetEndMatchState();
	void EndMatch();
	bool AllGamesInMatchPlayed();
	void EndGame();
	void StartNewGame();
	void ResetGame();
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
	void HandleGaveStat(class AStatFactory_TA* Factory, class APRI_TA* ToPRI, class UStatEvent_TA* StatEvent, class ABall_TA* Ball, int BallHitIndex, class APRI_TA* Victim);
	void ReportFps(class UFpsBucketRecorder_TA* Recorder);
	void Destroyed();
	void InitCrowdManager();
	void InitField();
	void InitMatchRecorder();
	void OnInit();
	void InitMutators();
	void InitGame(const struct FString& Options);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventStatFactoryInitialized(class AGameEvent_Soccar_TA* GameEvent);
	void EventReplicatedGoalScored(class AGameEvent_Soccar_TA* GameEvent, unsigned char ScoredOnTeam);
	void EventPlayerScored(class AGameEvent_Soccar_TA* GameEvent, class APRI_TA* Scorer);
	void EventMatchWinnerSet(class AGameEvent_Soccar_TA* GameEvent);
	void EventReplayDirectorSet(class AGameEvent_Soccar_TA* GameEvent);
	void EventGameOverStingerForfeit(class AGameEvent_Soccar_TA* GameEvent);
	void EventGameOverStingerLose(class AGameEvent_Soccar_TA* GameEvent);
	void EventGameOverStingerWin(class AGameEvent_Soccar_TA* GameEvent);
	void EventEndGameCountDown(class AGameEvent_Soccar_TA* GameEvent, int TimeRemaining);
	void EventMatchEnded(class AGameEvent_Soccar_TA* GameEvent);
	void EventGameEnded(class AGameEvent_Soccar_TA* GameEvent);
	void EventOvertimeUpdated(class AGameEvent_Soccar_TA* GameEvent);
	void EventGameTimeUpdated(class AGameEvent_Soccar_TA* GameEvent);
	void EventGoalScored(class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIdx);
	void EventFirstBallHit(class AGameEvent_Soccar_TA* GameEvent);
	void EventBallRemoved(class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball);
	void EventBallAdded(class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball);
	void EventStartNewRound(class AGameEvent_Soccar_TA* GameEvent);
	void EventActiveRoundChanged(class AGameEvent_Soccar_TA* GameEvent);
};


// Class TAGame.GameEvent_Season_TA
// 0x0080 (0x0810 - 0x0790)
class AGameEvent_Season_TA : public AGameEvent_Soccar_TA
{
public:
	int                                                PreMatchTime;                                     		// 0x0790(0x0004) (CPF_Edit)
	class USeason_TA*                                  Season;                                           		// 0x0794(0x0004) (CPF_Transient)
	struct FSeasonMatch                                Match;                                            		// 0x0798(0x001C) (CPF_Transient)
	class UProfile_TA*                                 Profile;                                          		// 0x07B4(0x0004) (CPF_Transient)
	class ATeam_TA*                                    HumanTeam;                                        		// 0x07B8(0x0004) (CPF_Transient)
	class ATeam_TA*                                    BotTeam;                                          		// 0x07BC(0x0004) (CPF_Transient)
	int                                                HumanMatchTeam;                                   		// 0x07C0(0x0004) (CPF_Transient)
	int                                                BotMatchTeam;                                     		// 0x07C4(0x0004) (CPF_Transient)
	float                                              SeasonIntroTime;                                  		// 0x07C8(0x0004)
	class AScreenDisplayActor_TA*                      ChampionshipTrophyArchetype;                      		// 0x07CC(0x0004)
	class UAkSoundCue*                                 ChampionshipTrophySound;                          		// 0x07D0(0x0004)
	unsigned long                                      bIsChampionShipGame : 1;                          		// 0x07D4(0x0004)
	unsigned long                                      bIsFirstGameOfSeason : 1;                         		// 0x07D4(0x0004)
	unsigned long                                      bLastGameOfRegularSeason : 1;                     		// 0x07D4(0x0004)
	class USimilarSeasonLogos_TA*                      SimilarLogoGroups;                                		// 0x07D8(0x0004)
	struct FString                                     TeamOverrides[0x2];                               		// 0x07DC(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UProductAsset_TA*>                    PreloadedBotProducts;                             		// 0x07F4(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventWonChampionShip__Delegate;                 		// 0x0800(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0800(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Season_TA");
		return ptr;
	}


	void BeginHighlightsReplay();
	void OnMatchWinnerSet();
	bool GiveExtraXP();
	void CheckTeamOverride(int TeamIdx, struct FSeasonTeam* TeamData);
	bool IsLastRegularGameOfSeason();
	bool IsFirstGameOfSeason();
	bool IsChampionshipGame();
	void SpawnChampionshipTrophy();
	void StartGame();
	void SaveSeasonStats();
	bool ShouldSwapBotColors(class UProductAsset_Logo_TA* PlayerLogo, class UProductAsset_Logo_TA* BotLogo);
	class UProductAsset_Bot_TA* ChooseBotAsset(class AAIController_TA* Bot);
	void InitSeasonTeams();
	void OnAllTeamsCreated();
	void AssignCustomTeamSettings();
	class ATeam_TA* PickTeam(class AController* C);
	void ToggleDropTimers(bool bEnableTimers);
	void PreloadBots();
	void OnInit();
	void InitGame(const struct FString& Options);
	void UpdateStats();
	void EventWonChampionShip(class AGameEvent_Season_TA* GameEvent);
};


// Class TAGame.SpecialPickup_TA
// 0x0048 (0x026C - 0x0224)
class ASpecialPickup_TA : public ACarComponent_TA
{
public:
	struct FString                                     PickupName;                                       		// 0x0224(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	unsigned long                                      bHudIgnoreUseTime : 1;                            		// 0x0230(0x0004) (CPF_Edit)
	unsigned long                                      bHasActivated : 1;                                		// 0x0230(0x0004)
	unsigned long                                      bIsActive : 1;                                    		// 0x0230(0x0004) (CPF_Transient)
	float                                              ActivationDuration;                               		// 0x0234(0x0004) (CPF_Edit)
	class AFXActor_X*                                  PickupFXArchetype;                                		// 0x0238(0x0004) (CPF_Edit)
	TArray<struct FPickupReplacement>                  BodyReplacements;                                 		// 0x023C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UShakeComponent_X*                           ShakeComponentArchetype;                          		// 0x0248(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UAkSoundCue*                                 ActivateSFX;                                      		// 0x024C(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 LocalActivateSFX;                                 		// 0x0250(0x0004) (CPF_Edit)
	class AFXActor_X*                                  PickupFX;                                         		// 0x0254(0x0004)
	class UShakeComponent_X*                           ShakeComp;                                        		// 0x0258(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	struct FScriptDelegate                             __EventActivated__Delegate;                       		// 0x025C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x025C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_TA");
		return ptr;
	}


	bool HasActivated();
	class ARBActor_TA* GetClientTarget();
	void OnVehicleSetupComplete();
	void RemovePickupFX();
	void InitPickupFX();
	float GetActiveTimePercent();
	void PreActivatedTick(float DeltaTime);
	void PickupTick(float DeltaTime);
	void PickupEnd();
	void PickupStart();
	class ACarComponent_Boost_TA* GetBoostComponent();
	void DeactivatePickup();
	bool TryActivate(class ARBActor_TA* TargetOverride);
	void Destroyed();
	void HandleDemolish(class ACar_TA* InCar, const struct FDemolishData& Data);
	void OnCreated();
	bool CanPickup(class ACar_TA* InCar);
	void ApplyPickup(class ACar_TA* InCar);
	void EventActivated(class ACar_TA* InCar, class ASpecialPickup_TA* Pickup);
};


// Class TAGame.GameInfo_TA
// 0x0004 (0x0414 - 0x0410)
class AGameInfo_TA : public AGameInfoBase_TA
{
public:
	unsigned long                                      bShutdownQueued : 1;                              		// 0x0410(0x0004) (CPF_Transient)
	unsigned long                                      bShuttingDown : 1;                                		// 0x0410(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_TA");
		return ptr;
	}


	void StartGameEvent(const struct FGameEventData& GameData);
	bool AllowPausing(class APlayerController* PC);
	class UGameMode_TA* GetGameMode();
	bool AtCapacity(bool bSpectator);
	void HandleTimeDilationChanged(class AWorldInfo* WI);
	void RestartLevel();
	void NotifyClientsServerShutdown();
	void StartShutdown();
	void QueueShutdown();
	void ShutdownGame();
	struct FVector GetGoodSpawnPointNear(class AActor* A, const struct FVector& PossibleLoc);
	void RestartPlayer(class AController* NewPlayer);
	void GenericPlayerInitialization(class AController* C);
	void AddDefaultInventory(class APawn* P);
	void ChangeName(class AController* Other, const struct FString& S, bool bNameChange);
	struct FString GetFakePlayerName(class AController* Other);
	void Logout(class AController* Exiting);
	class APlayerController* Login(const struct FString& Portal, const struct FString& Options, const struct FUniqueNetId& UniqueId, struct FString* ErrorMessage);
	void PreLogin(const struct FString& Options, const struct FString& Address, const struct FUniqueNetId& UniqueId, bool bSupportsAuth, struct FString* ErrorMessage);
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
};


// Class TAGame.GameInfo_Soccar_TA
// 0x0020 (0x0434 - 0x0414)
class AGameInfo_Soccar_TA : public AGameInfo_TA
{
public:
	TArray<struct FGameEventData>                      GameEventArchetypes;                              		// 0x0414(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class AGameEvent_TA*                               CurrentGame;                                      		// 0x0420(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventGameInitialized__Delegate;                 		// 0x0424(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0424(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Soccar_TA");
		return ptr;
	}


	bool HasMoreThanOneRemotePlayer();
	void KickAllPlayers(const struct FString& Reason);
	void RestartLevel();
	void RestartPlayer(class AController* aPlayer);
	bool PlayerCanRestart(class APlayerController* aPlayer);
	void HandleNewDedicatedServerForPlayers(const struct FString& IP);
	void QueueShutdown();
	void RestartGameEvent();
	bool IsGameEventType(const struct FString& LaunchOption, class UObject* Archetype);
	void HandleMainEventDestroyed(class AGameEvent_TA* GameEvent);
	void OnCreateCurrentGame();
	void InitGameEvent(class AGameEvent_TA* GameEventArchetype, bool bAddAllPlayers);
	void StartGameEvent(const struct FGameEventData& GameData);
	void StartGameEventFromLaunchOption(const struct FString& LaunchOption);
	void StartDefaultGameEvent();
	void PostLogin(class APlayerController* NewPlayer);
	class APlayerController* Login(const struct FString& Portal, const struct FString& Options, const struct FUniqueNetId& UniqueId, struct FString* ErrorMessage);
	void PreLogin(const struct FString& Options, const struct FString& Address, const struct FUniqueNetId& UniqueId, bool bSupportsAuth, struct FString* ErrorMessage);
	void PostBeginPlay();
	void EventGameInitialized(class AGameInfo_Soccar_TA* Game);
};


// Class TAGame.GameInfo_Basketball_TA
// 0x0000 (0x0434 - 0x0434)
class AGameInfo_Basketball_TA : public AGameInfo_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Basketball_TA");
		return ptr;
	}

};


// Class TAGame.Profile_TA
// 0x03E8 (0x0424 - 0x003C)
class UProfile_TA : public UObject
{
public:
	int                                                LocalID;                                          		// 0x003C(0x0004)
	struct FString                                     ProfileName;                                      		// 0x0040(0x000C) (CPF_NeedCtorLink)
	class USaveData_TA*                                SaveData;                                         		// 0x004C(0x0004) (CPF_Transient)
	int                                                ControllerId;                                     		// 0x0050(0x0004) (CPF_Transient)
	unsigned long                                      bInvertSwivelPitch : 1;                           		// 0x0054(0x0004)
	unsigned long                                      bInvertSpectatorPitch : 1;                        		// 0x0054(0x0004)
	unsigned long                                      bPrefersSecondaryCamera : 1;                      		// 0x0054(0x0004)
	unsigned long                                      bToggleSecondaryCamera : 1;                       		// 0x0054(0x0004)
	unsigned long                                      bToggleRearCamera : 1;                            		// 0x0054(0x0004)
	unsigned long                                      bFreecam : 1;                                     		// 0x0054(0x0004)
	unsigned long                                      bEnableHorizontalSplitscreen : 1;                 		// 0x0054(0x0004)
	unsigned long                                      bEnableForceFeedback : 1;                         		// 0x0054(0x0004)
	unsigned long                                      bEnableCameraShake : 1;                           		// 0x0054(0x0004)
	unsigned long                                      bMetric : 1;                                      		// 0x0054(0x0004)
	unsigned long                                      bMuteStatEvents : 1;                              		// 0x0054(0x0004)
	unsigned long                                      bDisableDivisions : 1;                            		// 0x0054(0x0004)
	unsigned long                                      bDisableContainerNotifications : 1;               		// 0x0054(0x0004)
	unsigned long                                      bDisableCrossPlay : 1;                            		// 0x0054(0x0004)
	unsigned long                                      bPushToTalk : 1;                                  		// 0x0054(0x0004)
	unsigned long                                      bUseBallIndicator : 1;                            		// 0x0054(0x0004)
	unsigned long                                      bUseTeamIndicator : 1;                            		// 0x0054(0x0004)
	unsigned long                                      bUseBallCamIndicator : 1;                         		// 0x0054(0x0004)
	unsigned long                                      bAlternateNameplates : 1;                         		// 0x0054(0x0004)
	unsigned long                                      bLoadoutsInitialized : 1;                         		// 0x0054(0x0004) (CPF_Transient)
	unsigned long                                      bAimAssistEnabled : 1;                            		// 0x0054(0x0004)
	unsigned long                                      bAimAssistTrajectoryEnabled : 1;                  		// 0x0054(0x0004)
	class UControlPreset_X*                            ControlPreset;                                    		// 0x0058(0x0004) (CPF_Transient)
	struct FName                                       ControlsPresetName;                               		// 0x005C(0x0008)
	TArray<struct FPlayerBinding>                      PCBindings;                                       		// 0x0064(0x000C) (CPF_NeedCtorLink)
	TArray<struct FPlayerBinding>                      GamepadBindings;                                  		// 0x0070(0x000C) (CPF_NeedCtorLink)
	TArray<struct FPlayerBinding>                      ActivePCBindings;                                 		// 0x007C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FPlayerBinding>                      ActiveGamepadBindings;                            		// 0x0088(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	float                                              MouseSensitivity;                                 		// 0x0094(0x0004)
	float                                              ControllerDeadzone;                               		// 0x0098(0x0004)
	float                                              MouseXDeadZone;                                   		// 0x009C(0x0004)
	float                                              MouseYDeadZone;                                   		// 0x00A0(0x0004)
	float                                              MouseXDeadZoneAir;                                		// 0x00A4(0x0004)
	float                                              MouseYDeadZoneAir;                                		// 0x00A8(0x0004)
	class ULoadout_TA*                                 Loadout;                                          		// 0x00AC(0x0004)
	TArray<class ULoadoutSet_TA*>                      LoadoutSets;                                      		// 0x00B0(0x000C) (CPF_NeedCtorLink)
	class ULoadoutSet_TA*                              EquippedLoadoutSet;                               		// 0x00BC(0x0004)
	struct FName                                       PlayerTitle;                                      		// 0x00C0(0x0008)
	TArray<struct FName>                               QuickMatchPlaylists;                              		// 0x00C8(0x000C) (CPF_NeedCtorLink)
	TArray<struct FString>                             QuickMatchRegions;                                		// 0x00D4(0x000C) (CPF_NeedCtorLink)
	struct FString                                     CustomMatchRegion;                                		// 0x00E0(0x000C) (CPF_NeedCtorLink)
	struct FCustomMatchSettings                        CustomMatchSettings;                              		// 0x00EC(0x0060) (CPF_Const, CPF_NeedCtorLink)
	struct FCustomMatchSettings                        PrivateMatchSettings;                             		// 0x014C(0x0060) (CPF_NeedCtorLink)
	struct FCustomMatchSettings                        SplitscreenMatchSettings;                         		// 0x01AC(0x0060) (CPF_NeedCtorLink)
	struct FCustomMatchSettings                        ServerBrowserSettings;                            		// 0x020C(0x0060) (CPF_NeedCtorLink)
	TArray<struct FKeyValuePair>                       CustomMatchGameTags;                              		// 0x026C(0x000C) (CPF_NeedCtorLink)
	TArray<class UGameTags_TA*>                        GameTags;                                         		// 0x0278(0x000C) (CPF_NeedCtorLink)
	int                                                PreviewTeamIndex;                                 		// 0x0284(0x0004)
	struct FProfileCameraSettings                      Camera;                                           		// 0x0288(0x0018)
	struct FProfileAutoCamSettings                     AutoCam;                                          		// 0x02A0(0x0028)
	struct FString                                     BugReportEmail;                                   		// 0x02C8(0x000C) (CPF_NeedCtorLink)
	struct FString                                     TimeFormat;                                       		// 0x02D4(0x000C) (CPF_NeedCtorLink)
	TArray<class USeason_TA*>                          Seasons;                                          		// 0x02E0(0x000C) (CPF_NeedCtorLink)
	TArray<struct FStatValue>                          StatValues;                                       		// 0x02EC(0x000C) (CPF_NeedCtorLink)
	TArray<struct FProductStat>                        ProductStats;                                     		// 0x02F8(0x000C) (CPF_NeedCtorLink)
	int                                                TotalXP;                                          		// 0x0304(0x0004)
	class UTutorialSave_TA*                            Tutorial;                                         		// 0x0308(0x0004)
	TArray<struct FUISavedKeyValue>                    UISavedValues;                                    		// 0x030C(0x000C) (CPF_NeedCtorLink)
	class UOnlineProfile_TA*                           OnlineProfile;                                    		// 0x0318(0x0004) (CPF_Transient)
	TArray<struct FName>                               QuickChatBindings;                                		// 0x031C(0x000C) (CPF_NeedCtorLink)
	int                                                ProfileVersion;                                   		// 0x0328(0x0004)
	TArray<struct FPlaylistMapPrefs>                   MapPrefs;                                         		// 0x032C(0x000C) (CPF_NeedCtorLink)
	int                                                EditLoadoutSetIndex;                              		// 0x0338(0x0004) (CPF_Transient)
	int                                                AimAssistLevelOverride;                           		// 0x033C(0x0004)
	int                                                MaxAimAssistLevelOverride;                        		// 0x0340(0x0004)
	struct FScriptDelegate                             __EventXPInitialized__Delegate;                   		// 0x0344(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0344(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventXPUpdated__Delegate;                       		// 0x0354(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0354(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventCrossPlayChanged__Delegate;                		// 0x0364(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0364(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventQuickChatBindingsChanged__Delegate;        		// 0x0374(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x0374(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventProductEquipped__Delegate;                 		// 0x0384(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x0384(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventOnlineProductEquipped__Delegate;           		// 0x0394(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData05[0x4];                               		// 0x0394(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventEquippedLoadoutChanged__Delegate;          		// 0x03A4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData06[0x4];                               		// 0x03A4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPreviewTeamChanged__Delegate;              		// 0x03B4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData07[0x4];                               		// 0x03B4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventLoadoutSetsChanged__Delegate;              		// 0x03C4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData08[0x4];                               		// 0x03C4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventActiveBindingsChanged__Delegate;           		// 0x03D4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData09[0x4];                               		// 0x03D4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventControlPresetChanged__Delegate;            		// 0x03E4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData10[0x4];                               		// 0x03E4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventAimAssistEnabledChanged__Delegate;         		// 0x03F4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData11[0x4];                               		// 0x03F4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventAimAssistTrajectoryChanged__Delegate;      		// 0x0404(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData12[0x4];                               		// 0x0404(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventUsedAllMapVotes__Delegate;                 		// 0x0414(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData13[0x4];                               		// 0x0414(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Profile_TA");
		return ptr;
	}


	struct FName GetKeyForAction(const struct FName& Action, bool bGamepad);
	struct FName GetKeyForActionArray(const struct FName& Action, TArray<struct FPlayerBinding>* Bindings);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	bool AllowContainerNotifications();
	void SetAimAssistLevelOverride(int Level);
	bool GetAimAssistTrajectoryEnabled();
	void SetAimAssistTrajectoryEnabled(bool bEnable);
	bool GetAimAssistEnabled();
	void SetAimAssistEnabled(bool bEnable);
	void ResetAllSavedControlBindings();
	void SetActiveBindings(TArray<struct FPlayerBinding> InPCBindings, TArray<struct FPlayerBinding> InGamepadBindings);
	void SetControlsPreset(const struct FName& PresetName);
	void ClearRemovedMapPrefs(const struct FName& PlaylistId, TArray<class UMapData_TA*> PlaylistMaps);
	void RecordMapPrefsMetrics();
	void SetMapPrefs(const struct FPlaylistMapPrefs& Prefs, bool bUsedAllVotes);
	struct FPlaylistMapPrefs GetMapPrefs(const struct FName& Playlist);
	void STATIC_AddLoadoutProductData(int SlotIndex, int ProductID, class UOnlineProduct_TA* OnlineProduct, TArray<struct FLoadoutProductData>* OutProducts);
	void InitServerSetLoadoutParams(const struct FLoadoutData& Loadouts, struct FServerSetLoadoutParams* OutParams);
	struct FServerSetLoadoutParams BuildServerSetLoadoutParams();
	void SetPreviewTeam(int InTeamIndex);
	void HandleOnlineProductEquipped(class ULoadoutSet_TA* LoadoutSet);
	void HandleProductEquipped(class ULoadoutSet_TA* LoadoutSet, int ProductID);
	void SetEditingLoadoutSet(int Index);
	void DeleteLoadoutSet(int Index);
	class ULoadoutSet_TA* CreateNewLoadoutSet();
	void EquipLoadoutSet(class ULoadoutSet_TA* InLoadoutSet);
	class ULoadoutSet_TA* GetEditingLoadoutSet();
	class ULoadoutSet_TA* GetLoadoutSet(int SetIndex);
	class ULoadout_TA* GetEditingLoadout(int TeamIndex);
	class ULoadout_TA* GetLoadout(int TeamIndex, int SetIndex);
	void ResetQuickChatBindings(bool bNoSave);
	void ChangeQuickChatBinding(int Index, const struct FName& Message);
	void SetCrossPlayDisabled(bool bDisabled);
	void SetCustomMatchSettings(const struct FCustomMatchSettings& Settings, TEnumAsByte<enum class ECustomMatchSettingsType> Type);
	struct FCustomMatchSettings GetCustomMatchSettings(TEnumAsByte<enum class ECustomMatchSettingsType> Type);
	class UGameTags_TA* GetGameTags(TEnumAsByte<enum class ECustomMatchSettingsType> Type);
	void STATIC_ConvertGameTagsToObjects(TArray<struct FKeyValuePair>* Pairs, TArray<class UGameTags_TA*>* OutGameTags);
	void InstanceGameTags();
	void STATIC_StaticGetXPInfo(int XPTotal, int* Out_XPLevel, struct FString* Out_XPTitle, int* Out_XPProgressInCurrentLevel, int* Out_XPRequiredForNextLevel);
	void GetXPInfo(int* Out_XPTotal, int* Out_XPLevel, struct FString* Out_XPTitle, int* Out_XPProgressInCurrentLevel, int* Out_XPRequiredForNextLevel);
	void GiveXP(float Amount);
	void InitXP(int NewTotal);
	class USeason_TA* GetLatestSeason();
	void AddProductStatValue(int ProductID, int Delta);
	int GetProductStatValue(int ProductID);
	int GetStatValue(TEnumAsByte<enum class ETAStatType> StatType, const struct FName& Id);
	void IncrementStatValue(TEnumAsByte<enum class ETAStatType> StatType, const struct FName& Id, int Amount);
	void SetStatValue(TEnumAsByte<enum class ETAStatType> StatType, const struct FName& Id, int Value);
	void HandleLoadoutChanged(class ULoadoutSet_TA* InLoadoutSet, class ULoadout_TA* InLoadout);
	void ValidateLoadouts();
	void ClearLoadouts();
	void CheckForNewBindings(TArray<struct FPlayerBinding> DefaultBindings, TArray<struct FPlayerBinding>* Bindings);
	void RemoveBinding(const struct FName& Action, TArray<struct FPlayerBinding>* Bindings);
	void ResetBinding(const struct FName& Action, TArray<struct FPlayerBinding> DefaultBindings, TArray<struct FPlayerBinding>* Bindings);
	void SetDefaultRemappable(const struct FName& Action, TArray<struct FPlayerBinding>* DefaultBindings, TArray<struct FPlayerBinding>* Bindings);
	void SetDefaultPressType(const struct FName& Action, TArray<struct FPlayerBinding>* DefaultBindings, TArray<struct FPlayerBinding>* Bindings);
	void UpdateProfileVersion();
	void ResetOnlineProfile();
	class UOnlineProfile_TA* STATIC_CreateOnlineProfile(int InLocalID);
	void OnLoaded(class USaveData_TA* InSaveData);
	void FixupDeprecatedTeamPaint();
	void Save();
	void Init(class USaveData_TA* InSaveData, const struct FString& InProfileName, int InLocalID);
	void EventUsedAllMapVotes(class UProfile_TA* Profile);
	void EventAimAssistTrajectoryChanged(class UProfile_TA* Profile);
	void EventAimAssistEnabledChanged(class UProfile_TA* Profile);
	void EventControlPresetChanged(class UProfile_TA* Profile);
	void EventActiveBindingsChanged(class UProfile_TA* Profile);
	void EventLoadoutSetsChanged(class UProfile_TA* Profile);
	void EventPreviewTeamChanged(class UProfile_TA* Profile, int InPreviewTeamIndex);
	void EventEquippedLoadoutChanged(class UProfile_TA* Profile, class ULoadout_TA* InLoadout);
	void EventOnlineProductEquipped(class UProfile_TA* Profile);
	void EventProductEquipped(class UProfile_TA* Profile, int ProductID);
	void EventQuickChatBindingsChanged(class UProfile_TA* Profile);
	void EventCrossPlayChanged(class UProfile_TA* Profile);
	void EventXPUpdated(class UProfile_TA* Profile);
	void EventXPInitialized(class UProfile_TA* Profile);
};


// Class TAGame.Season_TA
// 0x0060 (0x009C - 0x003C)
class USeason_TA : public UObject
{
public:
	int                                                NumTeams;                                         		// 0x003C(0x0004) (CPF_DataBinding)
	int                                                TeamSize;                                         		// 0x0040(0x0004) (CPF_DataBinding)
	int                                                Difficulty;                                       		// 0x0044(0x0004) (CPF_DataBinding)
	int                                                NumRegularWeeks;                                  		// 0x0048(0x0004) (CPF_DataBinding)
	int                                                NumPlayoffsWeeks;                                 		// 0x004C(0x0004) (CPF_DataBinding)
	int                                                NumPlayoffsTeams;                                 		// 0x0050(0x0004) (CPF_DataBinding)
	TArray<struct FSeasonTeam>                         Teams;                                            		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FSeasonPlayer>                       Players;                                          		// 0x0060(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FSeasonPlayerStat>                   PlayerStats;                                      		// 0x006C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                Year;                                             		// 0x0078(0x0004) (CPF_DataBinding)
	int                                                CurrentWeek;                                      		// 0x007C(0x0004) (CPF_DataBinding)
	TArray<struct FSeasonMatch>                        Matches;                                          		// 0x0080(0x000C) (CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventWeekSimulated__Delegate;                   		// 0x008C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x008C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Season_TA");
		return ptr;
	}


	void PrintRankings(TArray<struct FSeasonTeamRank>* Rankings);
	void SetDifficulty(int NewDifficulty);
	void SetBots(const struct FString& BotID0, const struct FString& BotName0, const struct FString& BotID1, const struct FString& BotName1, const struct FString& BotID2, const struct FString& BotName2);
	void BuildPlayoffsMatches();
	void SelectPlayoffsTeams();
	void SimulateWeek(bool bForceHumansToWin);
	void SaveMatch(const struct FSeasonMatch& Match);
	bool GetMatch(int Team, int Week, bool bReturnByes, struct FSeasonMatch* Match, int* MatchIdx);
	int SortTeamRank(const struct FSeasonTeamRank& A, const struct FSeasonTeamRank& B);
	void GetTeamRankings(int Week, TArray<struct FSeasonTeamRank>* Rankings);
	int GetWins(int Team, int Week);
	int GetTotalSeasonWeeks();
	bool IsFinished(int Week);
	int GetLastWeek();
	bool IsChampionship(int Week);
	bool IsPlayoffs(int Week);
	bool IsPostSeason(int Week);
	bool IsLastRegularSeason(int Week);
	bool IsRegularSeason(int Week);
	bool IsFirstGameOfSeason(int Week);
	void BuildBotTeams();
	void BuildMatches();
	void EventWeekSimulated(class USeason_TA* InSeason);
};


// Class TAGame.LoadoutSet_TA
// 0x0048 (0x0084 - 0x003C)
class ULoadoutSet_TA : public UObject
{
public:
	struct FString                                     LoadoutSetName;                                   		// 0x003C(0x000C) (CPF_NeedCtorLink)
	class ULoadout_TA*                                 Loadouts[0x2];                                    		// 0x0048(0x0004)
	unsigned long                                      bInitialized : 1;                                 		// 0x0050(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventChanged__Delegate;                         		// 0x0054(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0054(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventProductEquipped__Delegate;                 		// 0x0064(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0064(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventOnlineProductEquipped__Delegate;           		// 0x0074(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0074(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutSet_TA");
		return ptr;
	}


	int GetBodyProduct();
	bool HasProduct(int ProductID);
	void HandleOnlineProductEquipped();
	void HandleProductEquipped(int ProductID);
	void HandleLoadoutChanged(class ULoadout_TA* Loadout);
	void AddListeners();
	class ULoadoutSet_TA* STATIC_CreateLoadoutSet(class UProfile_TA* InProfile, const struct FString& InName);
	void EventOnlineProductEquipped(class ULoadoutSet_TA* LoadoutSet);
	void EventProductEquipped(class ULoadoutSet_TA* LoadoutSet, int ProductID);
	void EventChanged(class ULoadoutSet_TA* LoadoutSet, class ULoadout_TA* Loadout);
};


// Class TAGame.SaveData_TA
// 0x01DC (0x0218 - 0x003C)
class USaveData_TA : public UObject
{
public:
	class USaveGameManager_TA*                         SaveManager;                                      		// 0x003C(0x0004) (CPF_Transient)
	unsigned long                                      bFromPreviousSave : 1;                            		// 0x0040(0x0004)
	unsigned long                                      bVsync : 1;                                       		// 0x0040(0x0004) (CPF_Edit)
	unsigned long                                      bShowLightShafts : 1;                             		// 0x0040(0x0004) (CPF_Edit)
	unsigned long                                      bShowWeatherFX : 1;                               		// 0x0040(0x0004) (CPF_Edit)
	unsigned long                                      bColorBlind : 1;                                  		// 0x0040(0x0004) (CPF_Edit)
	unsigned long                                      bEnableOnlineData : 1;                            		// 0x0040(0x0004) (CPF_Transient, CPF_Config)
	TArray<struct FOptionsValue>                       VideoOptions;                                     		// 0x0044(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	struct FString                                     Resolution;                                       		// 0x0050(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	int                                                WindowMode;                                       		// 0x005C(0x0004) (CPF_Edit)
	int                                                MaxFPS;                                           		// 0x0060(0x0004) (CPF_Edit)
	float                                              MasterVolume;                                     		// 0x0064(0x0004) (CPF_Edit)
	float                                              SoundVolume;                                      		// 0x0068(0x0004) (CPF_Edit)
	float                                              MusicVolume;                                      		// 0x006C(0x0004) (CPF_Edit)
	float                                              AmbientVolume;                                    		// 0x0070(0x0004) (CPF_Edit)
	float                                              VoiceVolume;                                      		// 0x0074(0x0004) (CPF_Edit)
	float                                              ControllerVolume;                                 		// 0x0078(0x0004) (CPF_Edit)
	TEnumAsByte<enum class EControllerSoundMode>       ControllerSoundMode;                              		// 0x007C(0x0001) (CPF_Edit)
	TEnumAsByte<enum class EAkOutputType>              OutputType;                                       		// 0x007D(0x0001) (CPF_Edit)
	TEnumAsByte<enum class EVoiceFilter>               VoiceFilter;                                      		// 0x007E(0x0001) (CPF_Edit)
	TEnumAsByte<enum class EVoiceFilter>               ChatFilter;                                       		// 0x007F(0x0001) (CPF_Edit)
	TEnumAsByte<enum class ESplitScreenType>           SplitScreenType2P;                                		// 0x0080(0x0001) (CPF_Edit)
	TEnumAsByte<enum class ESplitScreenType>           SplitScreenType3P;                                		// 0x0081(0x0001) (CPF_Edit)
	TEnumAsByte<enum class EKeySelection>              KeySelection;                                     		// 0x0082(0x0001)
	unsigned char                                      UnknownData00[0x1];                               		// 0x0083(0x0001) MISSED OFFSET
	float                                              SafeZoneRatio;                                    		// 0x0084(0x0004) (CPF_Edit)
	struct FProfileSliderLimits                        SafeZoneLimits;                                   		// 0x0088(0x000C) (CPF_Const, CPF_Transient)
	struct FProfileSliderLimits                        UIScaleLimits;                                    		// 0x0094(0x000C) (CPF_Const, CPF_Transient)
	float                                              UIScale;                                          		// 0x00A0(0x0004) (CPF_Edit)
	TArray<int>                                        UnlockedProducts;                                 		// 0x00A4(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<int>                                        NewProducts;                                      		// 0x00B0(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0xC];                               		// 0x00BC(0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.SaveData_TA.NewOnlineProducts
	unsigned char                                      UnknownData02[0xC];                               		// 0x00C8(0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.SaveData_TA.UnseenContainerProducts
	struct FTrialSaveData                              TrialSave;                                        		// 0x00D4(0x0010)
	TArray<class UOnlineProduct_TA*>                   OnlineProducts;                                   		// 0x00E4(0x000C) (CPF_NeedCtorLink)
	class UOnlineProductStoreSet_TA*                   OnlineProductSet;                                 		// 0x00F0(0x0004) (CPF_Transient)
	class UIdenticalProductCache_TA*                   IdenticalOnlineProducts;                          		// 0x00F4(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	unsigned char                                      UnknownData03[0x8];                               		// 0x00F8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.SaveData_TA.LastUnlockDisplayId
	unsigned char                                      UnknownData04[0x8];                               		// 0x0100(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.SaveData_TA.LastProdRewardMigrationId
	TArray<class UProfile_TA*>                         Profiles;                                         		// 0x0108(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UAchievementSave_TA*                         AchievementData;                                  		// 0x0114(0x0004) (CPF_Edit)
	TArray<struct FUISavedKeyValue>                    UISavedValues;                                    		// 0x0118(0x000C) (CPF_NeedCtorLink)
	TArray<struct FUniqueNetId>                        MutedPlayers;                                     		// 0x0124(0x000C) (CPF_NeedCtorLink)
	TArray<int>                                        MatchCompleteCarBodies;                           		// 0x0130(0x000C) (CPF_NeedCtorLink)
	TArray<struct FName>                               AllCarsPlayedRewards;                             		// 0x013C(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FName>                               WinSeasonModeRewards;                             		// 0x0148(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FName>                               KonamiCodeRewards;                                		// 0x0154(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)
	struct FCachedStaticText                           Blog;                                             		// 0x0160(0x0018) (CPF_NeedCtorLink)
	class UOnlineSaveData_TA*                          OnlineData;                                       		// 0x0178(0x0004) (CPF_Transient)
	struct FString                                     RankedReconnectBeacon;                            		// 0x017C(0x000C) (CPF_NeedCtorLink)
	TArray<struct FPlaylistSkillData>                  SkillData;                                        		// 0x0188(0x000C) (CPF_NeedCtorLink)
	int                                                SchematicResources;                               		// 0x0194(0x0004) (CPF_Transient)
	struct FString                                     SelectedFreeplayMap;                              		// 0x0198(0x000C) (CPF_NeedCtorLink)
	int                                                SaveDataVersion;                                  		// 0x01A4(0x0004)
	struct FScriptDelegate                             __EventNewProductUnlocked__Delegate;              		// 0x01A8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData05[0x4];                               		// 0x01A8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDLCChange__Delegate;                       		// 0x01B8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData06[0x4];                               		// 0x01B8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventNewOnlineProduct__Delegate;                		// 0x01C8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData07[0x4];                               		// 0x01C8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventUnlockableContainers__Delegate;            		// 0x01D8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData08[0x4];                               		// 0x01D8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventOnlineProductsSynced__Delegate;            		// 0x01E8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData09[0x4];                               		// 0x01E8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSkillDecayed__Delegate;                    		// 0x01F8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData10[0x4];                               		// 0x01F8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSchematicResourcesChanged__Delegate;       		// 0x0208(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData11[0x4];                               		// 0x0208(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveData_TA");
		return ptr;
	}


	void UpdateTrialStatus(class UOnlineGameTrial_X* Trial);
	void ClearSavedValue(const struct FName& Key);
	bool HasSavedValue(const struct FName& Key);
	void SetSavedValue(const struct FName& Key, const struct FString& Value);
	TArray<int> GetUniqueSeriesIDs();
	void SetPlaylistSkillData(const struct FPlaylistSkillData& Data);
	struct FPlaylistSkillData GetPlaylistSkillData(int Playlist);
	void CheckForSkillDecay(class UOnlineGameSkill_X* Skill, const struct FUniqueNetId& PlayerID);
	void HandleSkillSynced(class UOnlineGameSkill_X* Skill, const struct FUniqueNetId& PlayerID, class UError_X* Error);
	void HandleKonamiCode();
	void ClearRankedReconnect();
	void SetRankedReconnect(const struct FString& BeaconAddress);
	class UOnlineProduct_TA* FindFirstOnlineProduct(int InProductID);
	TArray<class UOnlineProduct_TA*> GetAllOnlineProducts();
	TArray<class UOnlineProduct_TA*> GetUniqueOnlineProducts();
	int GetOnlineProductQuantity(class UOnlineProduct_TA* Product);
	TArray<struct FOnlineProductData> InstanceReplicatedOnlineProductData();
	TArray<class UOnlineProduct_TA*> GetOnlineProducts(int InProductID);
	void HandleOnlineProductsReceived(class URPC_ProductsPlayerGet_TA* RPC);
	TArray<int> GetUnlockableProducts();
	bool STATIC_OnlineDataNeedsUpload(class UOnlineSaveData_TA* OnlineSave, class UOnlineProfile_TA* OnlineProfile);
	void ClearOnlineProducts();
	void ClearCloudData();
	void STATIC_ConditionalUploadOnlineData(class USaveData_TA* SaveData, class UOnlineSaveData_TA* DeltaSave, class UOnlineProfile_TA* DeltaProfile);
	void UpdateOnlineData();
	class UOnlineProfile_TA* STATIC_FindOnlineProfile(int ProfileId, TArray<class UOnlineProfile_TA*>* OnlineProfiles);
	void HandleOnlineSaveDataReceived(class URPC_SaveDataGet_TA* RPC);
	void SetSchematicResouces(int Total);
	void HandleSchematicResourcesReceived(class URPC_SchematicResourcesGet_TA* RPC);
	void SyncSchematicResources();
	void SyncOnlineProducts();
	void SyncCloudData();
	bool CanSyncOnlineData(const struct FUniqueNetId& PlayerID);
	void ResetOnlineSaveData();
	class UOnlineSaveData_TA* STATIC_CreateOnlineSaveData(class USaveData_TA* ForSave);
	void MarkReplayEditorOpened();
	void MarkCreditsViewed();
	float GetUnlockProgress();
	float GetGameModeUnlockProgress();
	float GetItemUnlockProgress();
	void UpdateGameProgress();
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void HandleLocalPlayerCountChange(class ULocalPlayer* Player);
	bool DidPlayMatchWithAllDefaultBodies();
	void GetLockedItemsFromNames(TArray<struct FName>* ProductNames, TArray<int>* LockedIDs);
	TArray<int> SetMatchCompleteForBody(int ProductID);
	TArray<int> GetSeasonRewards(class UProfile_TA* Profile, class AGameEvent_TA* GameEvent);
	int UnlockRandomDrop(class UProfile_TA* Profile, class AGameEvent_TA* GameEvent);
	void HandleLoadUnlockedBody(const struct FAssetLoadResult& Result);
	void UnlockForcedProduct(const struct FName& ProductName);
	void UnlockChildProducts(int ProductID);
	void RemoveNewProducts();
	bool HasNewOnlineProducts();
	bool HasNewProducts(TArray<class UProductSlot_TA*> LoadoutSlots);
	void GetUnseenContainerDrops();
	void RemoveContainerDrop();
	void ClearUnseenContainerDrops();
	void GetLatestContainerDrop();
	bool IsUnseenContainerDrop();
	void AddUnseenContainerDrop();
	void ValidateLastUnlockDisplayId();
	void SetItemDropDisplayed();
	void BroadcastNewOnlineProduct(class UOnlineProduct_TA* OnlineProduct);
	void RemoveOnlineProductId();
	void GiveOnlineProduct(class UOnlineProduct_TA* OnlineProduct);
	bool DisableContainerNotifications();
	bool UnlockProductNoNotify(int ProductID);
	bool UnlockProduct(int ProductID);
	void UnlockDefaultProducts();
	class USaveData_TA* ClearUnlockedProducts();
	int GetOnlineProductID();
	class UOnlineProduct_TA* GetOnlineProduct();
	bool IsInstanceOwned();
	bool IsPublicProduct(int ProductID);
	bool IsProductUnlocked(int ProductID);
	bool STATIC_IsProductUnlockable(int ProductID, struct FString* Reason);
	bool CanUnlockProduct(int ProductID);
	void ValidateUnlocks();
	void ValidateLoadouts();
	void ConsolidateProfiles(class UProfile_TA* PrimaryProfile);
	int STATIC_ProfileSort(const struct FProfileDiffScore& Left, const struct FProfileDiffScore& Right);
	void ValidateProfiles();
	void RemoveAllProfiles();
	struct FString GetProfileName(int LocalID);
	class UProfile_TA* GetProfileForByLocalID(int LocalID);
	class UProfile_TA* GetProfileForPlayer(const struct FUniqueNetId& PlayerID);
	bool ProductIsNew();
	bool LockProduct(int ProductID);
	void GetDLCProducts(TArray<class UProduct_TA*>* Unlocked, TArray<class UProduct_TA*>* Locked);
	void HandleUnlockedDLCChanged();
	void HandleOnlineGameInitialized();
	void SetSelectedFreeplayMap(const struct FString& Value);
	void SetUIScale(float Value);
	float GetDefaultSaveZone();
	void SetSafeZone(float Value);
	void SetOutputType(TEnumAsByte<enum class EAkOutputType> Value);
	void SetControllerSoundMode(TEnumAsByte<enum class EControllerSoundMode> NewValue);
	void SetControllerVolume(float NewValue);
	void SetVoiceVolume(float NewValue);
	void SetAmbientVolume(float NewValue);
	void SetMusicVolume(float NewValue);
	void SetSoundVolume(float NewValue);
	void SetMasterVolume(float NewValue);
	void ApplySoundSettings();
	void ResetSoundSettings();
	void HandleReceivePlayerController(class UPlayer* PlayerRef);
	void HandlePsyNetLoginChange(class UOnlinePlayerAuthentication_X* Auth);
	void Save();
	void OnRemoved();
	void UpdateSaveDataVersion(class USaveGameManager_TA* Manager);
	void HandleDataLoaded(class USaveGameManager_TA* Manager, class UError_X* Error);
	void EventSchematicResourcesChanged(class USaveData_TA* Data);
	void EventSkillDecayed(class USaveData_TA* Data);
	void EventOnlineProductsSynced(class USaveData_TA* Data);
	void EventUnlockableContainers(TArray<int> ContainerIds);
	void EventNewOnlineProduct(class USaveData_TA* Data, class UOnlineProduct_TA* OnlineProduct);
	void EventDLCChange(class USaveData_TA* Data);
	void EventNewProductUnlocked(class USaveData_TA* Data, int ProductID);
};


// Class TAGame.GameEvent_Tutorial_TA
// 0x0154 (0x08E4 - 0x0790)
class AGameEvent_Tutorial_TA : public AGameEvent_Soccar_TA
{
public:
	struct FVector                                     TotalFieldExtent;                                 		// 0x0790(0x000C) (CPF_Const)
	int                                                TeamNum;                                          		// 0x079C(0x0004)
	int                                                BallGoalNum;                                      		// 0x07A0(0x0004)
	unsigned long                                      bOnlyScoreInBallGoalNum : 1;                      		// 0x07A4(0x0004)
	unsigned long                                      bRedoRound : 1;                                   		// 0x07A4(0x0004)
	unsigned long                                      bAllowSuperBoost : 1;                             		// 0x07A4(0x0004)
	unsigned long                                      bDisplayedRedoPenaltyMessage : 1;                 		// 0x07A4(0x0004)
	unsigned long                                      bShowBoostMeter : 1;                              		// 0x07A4(0x0004)
	TEnumAsByte<enum class EDifficulty>                Difficulty;                                       		// 0x07A8(0x0001)
	TEnumAsByte<enum class ERotationType>              DebugRotationType;                                		// 0x07A9(0x0001)
	unsigned char                                      UnknownData00[0x2];                               		// 0x07AA(0x0002) MISSED OFFSET
	struct FDifficultyInfo                             DifficultyList[0x3];                              		// 0x07AC(0x0024) (CPF_Edit, CPF_NeedCtorLink)
	TArray<int>                                        WaveIndexesLeft;                                  		// 0x0818(0x000C) (CPF_NeedCtorLink)
	float                                              GoalDepth;                                        		// 0x0824(0x0004)
	int                                                GameEventRounds;                                  		// 0x0828(0x0004) (CPF_Edit)
	float                                              EventStartTime;                                   		// 0x082C(0x0004)
	struct FVector                                     BallInitialVelocity;                              		// 0x0830(0x000C)
	int                                                SpawnIndexTypeOverride;                           		// 0x083C(0x0004) (CPF_Edit)
	class ACannon_TA*                                  Cannon;                                           		// 0x0840(0x0004)
	int                                                WaveIndex;                                        		// 0x0844(0x0004) (CPF_Transient)
	int                                                WaveSpawnCount;                                   		// 0x0848(0x0004) (CPF_Transient)
	int                                                RandomSpawnIndex;                                 		// 0x084C(0x0004) (CPF_Transient)
	class UTutorial_TA*                                Tutorial;                                         		// 0x0850(0x0004)
	struct FString                                     StartMessageArchetype;                            		// 0x0854(0x000C) (CPF_Const, CPF_NeedCtorLink)
	struct FVector                                     BallSpawnLocation;                                		// 0x0860(0x000C)
	TArray<struct FCarSpawnData>                       CarSpawns;                                        		// 0x086C(0x000C) (CPF_NeedCtorLink)
	int                                                PointsScoredThisRound;                            		// 0x0878(0x0004)
	int                                                BallSpawnCount;                                   		// 0x087C(0x0004)
	float                                              BallBounceScale;                                  		// 0x0880(0x0004)
	class ACannon_TA*                                  CannonArchetype;                                  		// 0x0884(0x0004)
	class ADynamicSpawnPoint_TA*                       DynamicSpawnPoint;                                		// 0x0888(0x0004) (CPF_Transient)
	int                                                CurrentDebugStepX;                                		// 0x088C(0x0004)
	int                                                CurrentDebugStepY;                                		// 0x0890(0x0004)
	int                                                CurrentDebugStepZ;                                		// 0x0894(0x0004)
	int                                                RedoCount;                                        		// 0x0898(0x0004)
	int                                                RedoTotal;                                        		// 0x089C(0x0004)
	class UGFxModal_X*                                 ResetModal;                                       		// 0x08A0(0x0004)
	struct FScriptDelegate                             __EventVehicleSetup__Delegate;                    		// 0x08A4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x08A4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventScoreUpdated__Delegate;                    		// 0x08B4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x08B4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDifficultyUpdated__Delegate;               		// 0x08C4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x08C4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventShowBoostMeterChanged__Delegate;           		// 0x08D4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x08D4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Tutorial_TA");
		return ptr;
	}


	void SetShowBoostMeter(bool bShow);
	struct FName GetDesiredSoundState();
	struct FVector GetDebugSpawnLocation(const struct FFieldSpawnInfo& SpawnInfo);
	float GetStepLoc(int Steps, float TotalDist, bool bIncrement, int* Out_CurrentStep);
	struct FVector GetDebugLocationInExtent(const struct FVector& Extent);
	void InitDebugSetup(class ACar_TA* Car);
	void UpdateBotCount();
	void InitMutators();
	bool IsPrimaryPlayer(class ACar_TA* Car);
	bool CanAwardPoints();
	void OnResetRoundCancel(class UGFxModal_X* Modal);
	void OnResetRoundConfirm(class UGFxModal_X* Modal);
	void ShowResetRoundMessage();
	void Destroyed();
	bool EndTutorial();
	bool StartTutorial(class APlayerController_TA* PC, const struct FString& TutorialName, class USequenceAction* KNode, bool bSkipFadeIn);
	void CommitRedoRound();
	void RedoRound();
	bool CanRedoRound();
	void StartNewRound();
	void SaveLocalPlayerStats();
	class ATeam_TA* GetWinningTeam();
	void CleanupRoundActors();
	struct FVector DetermineBallInitialVelocity(const struct FVector& BallSpawnLoc, class ACar_TA* Car, const struct FFieldSpawnInfo& SpawnInfo);
	bool CanQueSaveReplay();
	void ResetBalls();
	struct FName GetScoreStatus(unsigned char InTeamNum);
	int GetScore();
	void StartRound();
	int GetTotalRounds();
	void ResetRoundTime();
	void OnPlayerRestarted(class ACar_TA* PlayerCar);
	void ResetOrientation(class AController* Controller, const struct FVector& Loc, const struct FRotator& Rot);
	struct FVector GetBallInitialVelocity(const struct FVector& BallSpawnLoc, class ACar_TA* Car, const struct FFieldSpawnInfo& SpawnInfo);
	TEnumAsByte<enum class ETrainingType> GetTrainingType();
	struct FString GetDifficulty();
	struct FString GetTrainingName();
	void EndGame();
	bool CanAwardAchievements();
	bool AllowScoreboard();
	class ATeam_TA* PickTeam(class AController* C);
	struct FVector GetRandomLocationInExtent(const struct FVector& Extent);
	bool Chance(int Chances);
	int GetOppositeTeamNum();
	struct FVector GetDirectionToGoal(int GoalNum);
	bool IsGameEventComplete();
	struct FVector ClampPointToExtent(const struct FVector& ExtentCenter, const struct FVector& Point, const struct FVector& Extent);
	struct FFieldSpawnInfo GetRandomBallSpawnInfo();
	struct FFieldSpawnInfo GetRandomPlayerSpawnInfo();
	struct FVector PredictInitialVelocity(const struct FVector& StartLoc, const struct FVector& EndLoc, float Z);
	class ABall_TA* GetGameBall();
	class ACar_TA* GetGamePawn();
	void ResetGameEvent();
	void CheckForReset();
	float STATIC_GetGoalViewWidth(class UGoal_TA* Goal, const struct FVector& ViewerLoc);
	bool STATIC_IsBallMovingTowardsGoal(class UGoal_TA* Goal, class ABall_TA* Ball, float MinVelocityForDestroy, float InGoalDepth);
	void SetGoalDepth();
	int GetShuffledSpawnIndex();
	struct FCarSpawnData GetCarSpawnData(class AController* Controller);
	void AddToCarSpawnData(class AController* Controller, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
	struct FRotator GetCarSpawnRotation(const struct FFieldSpawnInfo& SpawnInfo, const struct FVector& CarSpawnLocation);
	struct FVector GetCarSpawnLocation(const struct FFieldSpawnInfo& SpawnInfo);
	void DestroyCannon();
	void SetCannonOrientation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	class ABall_TA* SpawnBall(const struct FVector& SpawnLoc, bool bWake, bool bSpawnCannon, const struct FString& BallArch);
	void InitBallEffects();
	void InitBallVelocity();
	struct FVector GetRandomGoalAimLocation(int InTeamNum, const struct FVector& BallLoc);
	struct FVector STATIC_GetGoalExtent(class UGoal_TA* Goal);
	void SetBallVelocity(const struct FVector& InitialVelocity, class ABall_TA* Ball);
	struct FVector GetSpawnLocation(const struct FFieldSpawnInfo& SpawnInfo);
	struct FVector GetMaxFieldExtent(const struct FFieldSpawnInfo& SpawnInfo);
	void InitGameSetup(class ACar_TA* Car);
	void OnVehicleSetup(class ACar_TA* Car);
	void HandleVehicleSetup(class ACar_TA* Car);
	void InitCrowdManager();
	void HandleScoreUpdated(class ATeam_TA* Team);
	void SetDifficulty(int InDifficulty);
	void UpdateStats();
	void AddLocalPlayer(class APlayerController_TA* Player);
	void OnInit();
	void EventShowBoostMeterChanged(class AGameEvent_Tutorial_TA* GameEvent);
	void EventDifficultyUpdated(class AGameEvent_Tutorial_TA* GameEvent);
	void EventScoreUpdated(class AGameEvent_Tutorial_TA* GameEvent);
	void EventVehicleSetup(class AGameEvent_Tutorial_TA* GameEvent, class ACar_TA* Car);
};


// Class TAGame.GameInfo_Breakout_TA
// 0x0000 (0x0434 - 0x0434)
class AGameInfo_Breakout_TA : public AGameInfo_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Breakout_TA");
		return ptr;
	}

};


// Class TAGame.GameEvent_Training_TA
// 0x0000 (0x08E4 - 0x08E4)
class AGameEvent_Training_TA : public AGameEvent_Tutorial_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Training_TA");
		return ptr;
	}


	void BeginHighlightsReplay();
};


// Class TAGame.Loadout_TA
// 0x0098 (0x00D4 - 0x003C)
class ULoadout_TA : public UObject
{
public:
	TArray<int>                                        Products;                                         		// 0x003C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0xC];                               		// 0x0048(0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.Loadout_TA.OnlineProducts
	struct FLoadoutTeamPaint                           TeamPaint;                                        		// 0x0054(0x0010)
	struct FLoadoutTeamPaint                           TeamPaints[0x2];                                  		// 0x0064(0x0010)
	struct FName                                       PlayerTitle;                                      		// 0x0084(0x0008)
	int                                                GaragePreviewTeam;                                		// 0x008C(0x0004)
	class UProfile_TA*                                 Profile;                                          		// 0x0090(0x0004)
	struct FScriptDelegate                             __EventChanged__Delegate;                         		// 0x0094(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0094(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPreviewTeamChanged__Delegate;              		// 0x00A4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x00A4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventProductEquipped__Delegate;                 		// 0x00B4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x00B4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventOnlineProductEquipped__Delegate;           		// 0x00C4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x00C4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Loadout_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void ConvertFromOldTeamPaint(class UCarColorSet_TA* OldSet, class UCarColorSet_TA* NewSet);
	void ConvertFromOldLoadout(class ULoadout_TA* OldLoadout, int TeamIndex);
	bool IsProductEquipped(class UProductSlot_TA* Slot, int ProductID);
	void SetGaragePreviewTeam(int PreviewTeam);
	void SetData(struct FLoadoutData* Data);
	struct FLoadoutData GetData();
	void STATIC_ValidateForcedProducts(class UProfile_TA* ForProfile, int InTeamIndex, struct FLoadoutData* Data);
	void STATIC_ValidateProductID(class UProfile_TA* ForProfile, const struct FString& SlotName, int* ProductID);
	void STATIC_StaticValidate(class UProfile_TA* ForProfile, struct FLoadoutTeamPaint* Paint, TArray<int>* OutProducts);
	void Validate();
	void FixupDeprecatedTeamPaint();
	struct FLoadoutData STATIC_EquipProduct(class ULoadout_TA* ForLoadout, int SlotIndex);
	void Init(class UProfile_TA* InProfile, int InTeamIndex);
	void EventOnlineProductEquipped();
	void EventProductEquipped(int ProductID);
	void EventPreviewTeamChanged(class ULoadout_TA* Loadout);
	void EventChanged(class ULoadout_TA* Loadout);
};


// Class TAGame.PlayerInput_TA
// 0x0034 (0x0324 - 0x02F0)
class UPlayerInput_TA : public UPlayerInput_X
{
public:
	float                                              GamepadLookScale;                                 		// 0x02F0(0x0004) (CPF_Config)
	float                                              aTargetSelect;                                    		// 0x02F4(0x0004) (CPF_Input)
	float                                              TargetSelectDeadZone;                             		// 0x02F8(0x0004)
	unsigned long                                      bTargetSelected : 1;                              		// 0x02FC(0x0004)
	unsigned long                                      bShowingBugReportDialog : 1;                      		// 0x02FC(0x0004) (CPF_Transient)
	unsigned long                                      bIsUsingMouseSteer : 1;                           		// 0x02FC(0x0004) (CPF_Transient)
	unsigned long                                      bIsUsingMouseThrottle : 1;                        		// 0x02FC(0x0004) (CPF_Transient)
	unsigned long                                      bIsUsingMouseAirYaw : 1;                          		// 0x02FC(0x0004) (CPF_Transient)
	unsigned long                                      bIsUsingMouseAirPitch : 1;                        		// 0x02FC(0x0004) (CPF_Transient)
	unsigned long                                      bIsUsingMouseAirRoll : 1;                         		// 0x02FC(0x0004) (CPF_Transient)
	float                                              aYaw;                                             		// 0x0300(0x0004) (CPF_Input, CPF_Transient)
	float                                              aPitch;                                           		// 0x0304(0x0004) (CPF_Input, CPF_Transient)
	float                                              aRoll;                                            		// 0x0308(0x0004) (CPF_Input, CPF_Transient)
	float                                              aLookRoll;                                        		// 0x030C(0x0004) (CPF_Input, CPF_Transient)
	unsigned char                                      bRoll;                                            		// 0x0310(0x0001) (CPF_Input, CPF_Transient)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0311(0x0003) MISSED OFFSET
	float                                              aMouseForward;                                    		// 0x0314(0x0004) (CPF_Input)
	float                                              aMouseStrafe;                                     		// 0x0318(0x0004) (CPF_Input)
	float                                              aDodgeForward;                                    		// 0x031C(0x0004) (CPF_Input)
	float                                              aDodgeStrafe;                                     		// 0x0320(0x0004) (CPF_Input)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInput_TA");
		return ptr;
	}


	TArray<struct FBindingAction> STATIC_GetDefaultActions(struct FBindingAction* StructInitializer__s_B8190A0A48300190730B66BB99BC287B, struct FBindingAction* StructInitializer__s_6D14F8B440F792B10FF3C9BBBCBC4308, struct FBindingAction* StructInitializer__s_B636BD02473E65AE9D75CFA564327CAD, struct FBindingAction* StructInitializer__s_A6A8C22048157554C7337D9B89AD40C3, struct FBindingAction* StructInitializer__s_4A3F0B7542A1B5A7FA3C7186E81E0435, struct FBindingAction* StructInitializer__s_E76424814C7C4F85B08BDC9D30C9F715, struct FBindingAction* StructInitializer__s_1F4408B24C96CCA1430EC387F173AD32, struct FBindingAction* StructInitializer__s_D7F35F6A4A710A90C0A3019CCE878460, struct FBindingAction* StructInitializer__s_3E294A2E40446E474BDE4DA894A4DDF2, struct FBindingAction* StructInitializer__s_ABFBAC0A49AF001BED4202AECED1E7DD, struct FBindingAction* StructInitializer__s_5258E31746F5DAADF3C54AB8E813E462, struct FBindingAction* StructInitializer__s_9EB887CB46685C3E039A86AEFB6932BC, struct FBindingAction* StructInitializer__s_B84EEB8B4FF7C759A949B19593DA3869, struct FBindingAction* StructInitializer__s_EF66656B4660538822F78CAC36B4C2E9, struct FBindingAction* StructInitializer__s_A74D72D844751BCF6DBECEAAD0F21F03, struct FBindingAction* StructInitializer__s_29FD31174E165EB51067A9BA33FBCE12, struct FBindingAction* StructInitializer__s_9D070DDE4B9F3D846B7166B391A302AF, struct FBindingAction* StructInitializer__s_448C6088484D2B2B00C7FC8412EF8D9A, struct FBindingAction* StructInitializer__s_62FD123D48DBCEDCF1E8CBA9EFF7D055, struct FBindingAction* StructInitializer__s_D29F8ADF4FBEEC9D3E51F49F9B0E1864, struct FBindingAction* StructInitializer__s_46AEBABA44960FBA5DF988871DDA634C, struct FBindingAction* StructInitializer__s_5AC37FF34E6E0B09075D1EA9DB97CFBD, struct FBindingAction* StructInitializer__s_2E86F8D747F0A3A94DDA9DB684C303F4, struct FBindingAction* StructInitializer__s_0CB914864FD995EE934993A52387703C, struct FBindingAction* StructInitializer__s_293AD3AE43E16E4CD98C45880EAA4C93, struct FBindingAction* StructInitializer__s_01E6AEE448EA54EA8CF3E19575E02506, struct FBindingAction* StructInitializer__s_4E33A42440F5398A4E4714902A525F90, struct FBindingAction* StructInitializer__s_DEB90DF04E4D5CE3E95D17AFD989AF49, struct FBindingAction* StructInitializer__s_8DA611964951B804CC657EB66A0445F6, struct FBindingAction* StructInitializer__s_10C8796E4CED4CC6C55A3788807D5A3C, struct FBindingAction* StructInitializer__s_67AA6BCC4094A04E544144808AA46E5A, struct FBindingAction* StructInitializer__s_CF28EACE41EFB4E8E0881AA0D0052C8A, struct FBindingAction* StructInitializer__s_6E5F0F3B40036EE77D644992391AF30A, struct FBindingAction* StructInitializer__s_66420EBB4E93EFEA32F37E9F9B82EDD4, struct FBindingAction* StructInitializer__s_1376C65C48C514FB043C19B5B7A68DC6, struct FBindingAction* StructInitializer__s_4F18E0FA43B62F8BD8B1068B2DCE8C09, struct FBindingAction* StructInitializer__s_8FD7E7E54F13BF04E53A2A92F52D494E, struct FBindingAction* StructInitializer__s_BF07B49A40E8077D64CE8981DB2E2E6E, struct FBindingAction* StructInitializer__s_B25476B247D2C895FF90418A67AC6CA6, struct FBindingAction* StructInitializer__s_66E1930C4A587E9A655B12AFDDC0C6FB, struct FBindingAction* StructInitializer__s_B7C86B2E48207E674A529C81CEF519F9, struct FBindingAction* StructInitializer__s_E1AB2D954847BE5A31807B914FB1B195, struct FBindingAction* StructInitializer__s_6866AAFE4F6184666694F5A36702424F, struct FBindingAction* StructInitializer__s_63EF4E924D35627DAACDF5B7232F068F, struct FBindingAction* StructInitializer__s_A59E67FD4227FE9967CEABB6A1CE3765, struct FBindingAction* StructInitializer__s_306487964F4DC09D015226BF06E7C79F, struct FBindingAction* StructInitializer__s_A29BF0034283E19B571E05AF785F4954, struct FBindingAction* StructInitializer__s_2ED7CF324B77A38B85897B989FD8416B, struct FBindingAction* StructInitializer__s_80374D0B454C107602BD76BF8FA70DCA, struct FBindingAction* StructInitializer__s_10619C4A444300716A5B568759412867, struct FBindingAction* StructInitializer__s_54CE45DD43C9EE8A1AFFA7978DD2CCD5, struct FBindingAction* StructInitializer__s_77C04DAA4010F2C5E94EF88096724BEE, struct FBindingAction* StructInitializer__s_F3F294E34F10AA29D058DA8FFADEA481, struct FBindingAction* StructInitializer__s_79FFB8774362DC2AB0D4FF84BD429757, struct FBindingAction* StructInitializer__s_FD91E5FA4C04BB35EFC0BD85BCD321D9, struct FBindingAction* StructInitializer__s_7006B73E4F0C1FE378E23FB239DFD56C, struct FBindingAction* StructInitializer__s_4B1F9E70419A95B41F30098AD1709D50, struct FBindingAction* StructInitializer__s_C60EEE8F4FC30A3940E71EA6A78DF634, struct FBindingAction* StructInitializer__s_9FE929EB4F433D0F5D5CFDB0A3869E62, struct FBindingAction* StructInitializer__s_56DCF9AE48E557606A6704BF251E5E5E, struct FBindingAction* StructInitializer__s_282485D3452C2E9D738ADA906B03EA02, struct FBindingAction* StructInitializer__s_B4A40D504682FE4764FFC380B7932715, struct FBindingAction* StructInitializer__s_E226F3CA4EE1D76988178AAA71A72FCF, struct FBindingAction* StructInitializer__s_7FEFDC034AC0BE47F4CC11804DA92D80, struct FBindingAction* StructInitializer__s_5B73ACC445F8FBBAA59C568335B5F662, struct FBindingAction* StructInitializer__s_F1641BA840AFD1B9CC797E92079BEE10, struct FBindingAction* StructInitializer__s_41EA60FE4D1006F727EE5DA15B713DE1, struct FBindingAction* StructInitializer__s_91AC75794454C68637E8F79BC2B89E50, struct FBindingAction* StructInitializer__s_404601314A5E50EF75CB6E80D1003F4A, struct FBindingAction* StructInitializer__s_D341C0384F7310994A209F9811E27DB1, struct FBindingAction* StructInitializer__s_EDB1D1C147B16752F00129809B2ED1DF, struct FBindingAction* StructInitializer__s_91A9812D494BAFCB5E6C30BF78485529, struct FBindingAction* StructInitializer__s_525A8F9D4AEEAD6D89D675928FB17CC2, struct FBindingAction* StructInitializer__s_397CBD1D473151DBF97FB2A6B37D2DF5, struct FBindingAction* StructInitializer__s_55817CFD42A6FE4C642E649927C96FAB, struct FBindingAction* StructInitializer__s_0546B0FC4F2B91044E51C7870A7BB157, struct FBindingAction* StructInitializer__s_6992161847BA5C3AA8839682AEBD5266, struct FBindingAction* StructInitializer__s_CB14AADF48D194D07CC45C914D009459, struct FBindingAction* StructInitializer__s_03F0875347A21F4E7B75188B3DF6D465, struct FBindingAction* StructInitializer__s_EE64FAF640052DCB44FD88916C6580BC, struct FBindingAction* StructInitializer__s_03FB900044E27988B20E53809C6FA22C, struct FBindingAction* StructInitializer__s_78120B4F4DA4237E6F36FCBBAAA31EB7, struct FBindingAction* StructInitializer__s_E07B8B7A4E196A82FAAEBAA1402101EB, struct FBindingAction* StructInitializer__s_D01FEA62457A415F95D7A8A37E55BA10, struct FBindingAction* StructInitializer__s_B8426BDE4B18D3A44D6AF3B56380BF03, struct FBindingAction* StructInitializer__s_36847A984C80E2FE31FA6AB8605E45E1, struct FBindingAction* StructInitializer__s_3D8226B24B77F01E997559A37620F313, struct FBindingAction* StructInitializer__s_C200343E487731742592C1852516E4B4, struct FBindingAction* StructInitializer__s_A2D5580E40843B1D01E9CCBC62EF91E9, struct FBindingAction* StructInitializer__s_AB44D8D944382082AF6757AE2BAF91F0, struct FBindingAction* StructInitializer__s_D9A9D6444B20F52732A51B8B16F32524, struct FBindingAction* StructInitializer__s_59A4E28546C5CF22EBEFE5A8B90F3D2B, struct FBindingAction* StructInitializer__s_5EDF9B834F4FC8AB2EE36799C4287005, struct FBindingAction* StructInitializer__s_C8372C3F40BF59E3F6D45489E2A992A5, struct FBindingAction* StructInitializer__s_403B9EE6484E10EE813CAF8D90C01E02, struct FBindingAction* StructInitializer__s_D5648990447156430F301DA0F6399EA3, struct FBindingAction* StructInitializer__s_9986E21C45C3DA6DBF729EA82F7F0A6F, struct FBindingAction* StructInitializer__s_E0A6E5E34DA9F9BDEC1C9CB96DF931E5);
	void UpdateTargetSelect(class APlayerController_TA* PC);
	struct FName GetKeyForAction(const struct FName& Action, bool bGamepad);
	struct FName GetKeyForActionArray(const struct FName& Action, TArray<struct FPlayerBinding>* OutBindings);
	struct FString GetUIKeyForAction(const struct FName& Action, bool bGamepad);
	bool IsUsingMouseAirRoll();
	bool IsUsingMouseAirPitch();
	bool IsUsingMouseAirYaw();
	void RemoveBindingsFromArray(const struct FName& Category, TArray<struct FPlayerBinding>* OutBindings);
	void RemoveBindings(const struct FName& Category);
	bool IsKeyPressed(const struct FName& Key);
	void PlayerInput(float DeltaTime);
	void HandleActiveBindingsChanged(class UProfile_TA* Profile);
	void HandleControlPresetChanged(class UProfile_TA* Profile);
	void InitFromProfile(class UProfile_TA* Profile);
};


// Class TAGame.GameEvent_Breakout_TA
// 0x0018 (0x07A8 - 0x0790)
class AGameEvent_Breakout_TA : public AGameEvent_Soccar_TA
{
public:
	unsigned long                                      bOnlyResetScoredOnTeam : 1;                       		// 0x0790(0x0004)
	unsigned long                                      bResetOvertime : 1;                               		// 0x0790(0x0004)
	unsigned char                                      LastScoredOnTeam;                                 		// 0x0794(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0795(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __EventPlatformDamaged__Delegate;                 		// 0x0798(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0795(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Breakout_TA");
		return ptr;
	}


	void HandleDamageStateChanged(class ABreakOutActor_Platform_TA* Platform, const struct FBreakoutDamageState& InState);
	void HandlePlatformDamaged(class ABreakOutActor_Platform_TA* Platform, class APRI_TA* PRI, class ABall_TA* Ball);
	void HandleGoalScored(class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIndex);
	void ResetAllBreakoutMeshes();
	bool ShouldResetPlatform(class ABreakOutActor_Platform_TA* BOM);
	void PostBeginPlay();
	void EventPlatformDamaged(class ABreakOutActor_Platform_TA* Platform, class APRI_TA* PRI, class ABall_TA* Ball);
};


// Class TAGame.XPManager_TA
// 0x0030 (0x006C - 0x003C)
class UXPManager_TA : public UObject
{
public:
	TArray<class UProductSlot_TA*>                     ProductSlots;                                     		// 0x003C(0x000C) (CPF_Const, CPF_NeedCtorLink)
	int                                                LevelCap;                                         		// 0x0048(0x0004) (CPF_Edit, CPF_Const)
	int                                                Level_Max;                                        		// 0x004C(0x0004) (CPF_Edit, CPF_Const)
	int                                                Level_XPBaseStep;                                 		// 0x0050(0x0004) (CPF_Edit, CPF_Const)
	int                                                Level_XPBucketSize;                               		// 0x0054(0x0004) (CPF_Edit, CPF_Const)
	float                                              Level_XPIncrementAmt;                             		// 0x0058(0x0004) (CPF_Edit, CPF_Const)
	int                                                Level_XPBaseRequirement;                          		// 0x005C(0x0004) (CPF_Edit, CPF_Const)
	TArray<struct FTitleInfo>                          Titles;                                           		// 0x0060(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.XPManager_TA");
		return ptr;
	}


	int GetTotalXPRequiredForLevel(int Level);
	struct FString DetermineLevelTitle(int Level);
	int CalculateRequiredXPForLevel(int Level);
	int CalculatePlayerLevel(int XP, bool bShowLog);
	bool AllProductsUnlocked(class UProfile_TA* Profile);
	void PruneSkinsForLockedCars(class UProductSlot_TA* ProductSlot, class UProfile_TA* Profile, TArray<int>* LockedProductIDs);
	int PickRandomItemFromSlot(class UProductSlot_TA* ProductSlot, class UProfile_TA* Profile);
	bool SlotContainsLockedProducts(class UProductSlot_TA* ProductSlot, class UProfile_TA* Profile);
	bool SlotContainsLockedDropProducts(class UProductSlot_TA* ProductSlot, class UProfile_TA* Profile);
	class UProductSlot_TA* PickRandomSlot(class UProfile_TA* Profile);
	int GetRandomLockedProductID(class UProfile_TA* Profile);
};


// Class TAGame.RPC_AchievementDataSet_TA
// 0x0034 (0x00C8 - 0x0094)
class URPC_AchievementDataSet_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	class UAchievementSave_TA*                         AchievementData;                                  		// 0x00C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_AchievementDataSet_TA");
		return ptr;
	}


	class URPC_AchievementDataSet_TA* SetAchievementData(class UAchievementSave_TA* InAchievementData);
	class URPC_AchievementDataSet_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_AchievementDataGet_TA
// 0x0034 (0x00C8 - 0x0094)
class URPC_AchievementDataGet_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	class UAchievementSave_TA*                         AchievementData;                                  		// 0x00C4(0x0004) (CPF_Const, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_AchievementDataGet_TA");
		return ptr;
	}


	class URPC_AchievementDataGet_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.OnlineSaveData_TA
// 0x0018 (0x0054 - 0x003C)
class UOnlineSaveData_TA : public UObject
{
public:
	TArray<int>                                        Products;                                         		// 0x003C(0x000C) (CPF_NeedCtorLink)
	struct FSaveDataSetProperties                      SetProperties;                                    		// 0x0048(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineSaveData_TA");
		return ptr;
	}


	void STATIC_ReconcileUniqueArrayName(TArray<struct FName>* Destination, TArray<struct FName>* Source);
	void STATIC_ReconcileUniqueArrayString(TArray<struct FString>* Destination, TArray<struct FString>* Source);
	void STATIC_ReconcileQMax();
	void STATIC_ReconcileMax(int* Left, int* Right);
	void STATIC_ReconcileFMax(float* Left, float* Right);
	bool NeedsUpload();
	void STATIC_StaticUnlockProduct(int ProductID, TArray<int>* OutProducts);
	void UnlockProduct(int ProductID);
	void Reconcile(class USaveData_TA* SaveData);
	void Init(class USaveData_TA* SaveData);
};


// Class TAGame.ActivityFeedManager_TA
// 0x0008 (0x0060 - 0x0058)
class UActivityFeedManager_TA : public UTickableStateObject_X
{
public:
	class APlayerControllerBase_TA*                    PC;                                               		// 0x0058(0x0004) (CPF_Transient)
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x005C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ActivityFeedManager_TA");
		return ptr;
	}


	TArray<struct FString> GetFriendsPlayedAgainst(class AGameEvent_TA* GameEvent);
	void CheckFriendsPlayedAgainst(class AGameEvent_Soccar_TA* GameEvent);
	void HandleMatchWinnerSet(class AGameEvent_Soccar_TA* GameEvent);
	void HandleProductUnlocked(class USaveData_TA* Data, int ProductID);
	void HandleChampionshipAmountChanged(class UAchievementManager_TA* Manager, int Wins);
	void HandleRegularSeasonAmountChanged(class UAchievementManager_TA* Manager, int Amount);
	void HandleNewMVPScore(class UAchievementManager_TA* Manager, int Score);
	void HandleGameEventAmountWon(class UAchievementManager_TA* Manager, int GamesWon);
	void HandleShotAmountBlocked(class UAchievementManager_TA* Manager, int bLocked);
	void HandleGoalAmountScored(class UAchievementManager_TA* Manager, int Score);
	void HandleDistanceDriven(class UAchievementManager_TA* Manager, float Distance);
	void HandleGameEventChanged(class APRI_TA* PRI);
	void UpdatePRI(class APRI_TA* PRI);
	void HandleReceivedPRI(class APlayerController_X* InPC);
	void Init(class APlayerControllerBase_TA* InPC);
	void PostActivtyFeedSingleString(TEnumAsByte<enum class EActivityFeedType> ActivityFeedID, const struct FString& ReplaceString);
	void PostActivityFeedMessage(TEnumAsByte<enum class EActivityFeedType> ActivityFeedID, TArray<struct FString> StringReplaceList);
};


// Class TAGame.OnlinePlayer_TA
// 0x000C (0x0124 - 0x0118)
class UOnlinePlayer_TA : public UOnlinePlayer_X
{
public:
	class UAchievementManager_TA*                      AchievementManagerArchetype;                      		// 0x0118(0x0004)
	class UAchievementManager_TA*                      AchievementManager;                               		// 0x011C(0x0004)
	class UActivityFeedManager_TA*                     ActivityFeedManager;                              		// 0x0120(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlinePlayer_TA");
		return ptr;
	}


	void GetPlayersLikesDislikes(class UGameSettingPlaylist_X* Playlist, TArray<struct FName>* PlayerLikes, TArray<struct FName>* PlayerDislikes);
	void CheckUnauthorized();
	void HandleUnauthorized();
	void OnMainMenuOpened();
	void HandleReceivedController(class UPlayer* PlayerRef);
	void InitPlayer();
};


// Class TAGame.AdManager_TA
// 0x0044 (0x009C - 0x0058)
class UAdManager_TA : public UTickableStateObject_X
{
public:
	float                                              CacheDuration;                                    		// 0x0058(0x0004)
	TArray<struct FCachedAdImageData>                  CachedAdImages;                                   		// 0x005C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FBillboardData>                      BillboardZoneMapping;                             		// 0x0068(0x000C) (CPF_NeedCtorLink)
	TArray<struct FBillboardUpdateRequestData>         BillboardMeshUpdateRequests;                      		// 0x0074(0x000C) (CPF_Transient, CPF_Component, CPF_NeedCtorLink)
	class UOnlineImageDownloaderWeb_X*                 ImageDownloader;                                  		// 0x0080(0x0004) (CPF_Transient)
	int                                                CurrentAdIndex;                                   		// 0x0084(0x0004) (CPF_Transient)
	class URPC_AdsGet_TA*                              CurrentRPC;                                       		// 0x0088(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventBillboardMeshRequest__Delegate;            		// 0x008C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x008C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AdManager_TA");
		return ptr;
	}


	void AddBillboardMeshRequest(class UStaticMeshComponent* Mesh);
	void RequestBillboardMeshUpdate(class UStaticMeshComponent* Mesh);
	void CompleteBillboardMeshRequests();
	class UTexture2DDynamic* GetCachedAdForZoneID(int ZoneID);
	void HandleOnlineImageDownloaded(class UOnlineImageDownloaderWeb_X* Downloader, const struct FDownloadedImage& ImageInfo);
	void GetNextImage();
	void HandleGetImageURLResponse(class URPC_AdsGet_TA* RPC);
	void ConstructAdRequest();
	void ClearAllRequests(const struct FString& MapName);
	void ClearExpiredImages();
	void OnPsynetLoggedIn();
	void Init();
	void EventBillboardMeshRequest(class UStaticMeshComponent* NewRequest);
};


// Class TAGame.RPC_AdsGet_TA
// 0x0018 (0x00AC - 0x0094)
class URPC_AdsGet_TA : public URPC_TA
{
public:
	struct FString                                     Language;                                         		// 0x0094(0x000C) (CPF_NeedCtorLink)
	TArray<struct FAdInfo>                             Ads;                                              		// 0x00A0(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_AdsGet_TA");
		return ptr;
	}


	class URPC_AdsGet_TA* SetLanguage(const struct FString& InLanguage);
};


// Class TAGame.AIController_Soccar_TA
// 0x0068 (0x05B8 - 0x0550)
class AAIController_Soccar_TA : public AAIController_TA
{
public:
	class UBTProxyType*                                BallProxyType;                                    		// 0x0550(0x0004) (CPF_Edit)
	class UBTProxyType*                                BallLandingProxyType;                             		// 0x0554(0x0004) (CPF_Edit)
	class UBTProxyType*                                BallTeamGoalLineProxyType;                        		// 0x0558(0x0004) (CPF_Edit)
	class UBTProxyType*                                BallEnemyGoalLineProxyType;                       		// 0x055C(0x0004) (CPF_Edit)
	class UBTProxyType*                                BallProjectedProxyType;                           		// 0x0560(0x0004) (CPF_Edit)
	class UBTProxyType*                                TeamGoalProxyType;                                		// 0x0564(0x0004) (CPF_Edit)
	class UBTProxyType*                                EnemyGoalProxyType;                               		// 0x0568(0x0004) (CPF_Edit)
	class UBTProxyType*                                MidFieldProxyType;                                		// 0x056C(0x0004) (CPF_Edit)
	class UBTTarget*                                   BallTarget;                                       		// 0x0570(0x0004) (CPF_Edit)
	class UBTTarget*                                   TeamGoalTarget;                                   		// 0x0574(0x0004) (CPF_Edit)
	class UBTTarget*                                   EnemyGoalTarget;                                  		// 0x0578(0x0004) (CPF_Edit)
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x057C(0x0004) (CPF_Transient)
	class ABall_TA*                                    Ball;                                             		// 0x0580(0x0004) (CPF_Transient)
	struct FAICachedGoalInfo                           TeamGoalInfo;                                     		// 0x0584(0x0010) (CPF_Transient, CPF_Component)
	struct FAICachedGoalInfo                           EnemyGoalInfo;                                    		// 0x0594(0x0010) (CPF_Transient, CPF_Component)
	float                                              LastBallHitTime;                                  		// 0x05A4(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventBallChanged__Delegate;                     		// 0x05A8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x05A8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AIController_Soccar_TA");
		return ptr;
	}


	bool GetProxyDataInternal(class UBTProxyType* Type, int Index, struct FBTProxyData* OutData);
	void GetGoalProxy(class UBTProxyType* Type, const struct FAICachedGoalInfo& GoalInfo, struct FBTProxyData* OutData);
	void GetBallProxy(struct FBTProxyData* OutData);
	void SetBall(class ABall_TA* InBall);
	void HandleNewPickup(class ACar_TA* InCar, class ASpecialPickup_TA* NewPickup);
	void HandleHitBall(class ACar_TA* InCar, class ABall_TA* HitBall);
	void OnCarSetup(class ACar_TA* InCar);
	void UpdateBall();
	void HandleActiveRoundChanged(class AGameEvent_Soccar_TA* G);
	void HandleBallsChanged(class AGameEvent_Soccar_TA* G, class ABall_TA* B);
	struct FAICachedGoalInfo GetCachedGoalInfo(int TeamNum);
	void Init(class AGameEvent_TA* InGameEvent);
	void EventBallChanged(class AAIController_Soccar_TA* SoccarAI);
};


// Class TAGame.SpecialPickup_Targeted_TA
// 0x0024 (0x0290 - 0x026C)
class ASpecialPickup_Targeted_TA : public ASpecialPickup_TA
{
public:
	unsigned long                                      bCanTargetBall : 1;                               		// 0x026C(0x0004) (CPF_Edit)
	unsigned long                                      bCanTargetCars : 1;                               		// 0x026C(0x0004) (CPF_Edit)
	unsigned long                                      bCanTargetEnemyCars : 1;                          		// 0x026C(0x0004) (CPF_Edit)
	unsigned long                                      bCanTargetTeamCars : 1;                           		// 0x026C(0x0004) (CPF_Edit)
	unsigned long                                      bUseDirectionalTargeting : 1;                     		// 0x026C(0x0004) (CPF_Edit)
	unsigned long                                      bRequireTrace : 1;                                		// 0x026C(0x0004) (CPF_Edit)
	float                                              Range;                                            		// 0x0270(0x0004) (CPF_Edit)
	float                                              DirectionalTargetingAccuracy;                     		// 0x0274(0x0004) (CPF_Edit)
	class ARBActor_TA*                                 ClientTarget;                                     		// 0x0278(0x0004) (CPF_Transient)
	class ARBActor_TA*                                 Targeted;                                         		// 0x027C(0x0004) (CPF_Net, CPF_Transient)
	struct FScriptDelegate                             __EventNewTarget__Delegate;                       		// 0x0280(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0280(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Targeted_TA");
		return ptr;
	}


	class ARBActor_TA* GetClientTarget();
	void TargetChanged();
	void OnTargetChanged();
	void PreActivatedTick(float DeltaTime);
	bool TryActivate(class ARBActor_TA* TargetOverride);
	bool ValidateTargetTrace(class ARBActor_TA* InTarget);
	bool ValidateTarget(class ARBActor_TA* InTarget);
	class ARBActor_TA* GetTarget();
	void ReplicatedEvent(const struct FName& VarName);
	void EventNewTarget(class ACar_TA* OwnerCar, class ASpecialPickup_TA* Pickup);
};


// Class TAGame.AIProxy_TA
// 0x0058 (0x0094 - 0x003C)
class UAIProxy_TA : public UObject
{
public:
	class AActor*                                      Actor;                                            		// 0x003C(0x0004) (CPF_Transient)
	struct FVector                                     Location;                                         		// 0x0040(0x000C) (CPF_Transient)
	struct FVector                                     Velocity;                                         		// 0x004C(0x000C) (CPF_Transient)
	struct FRotator                                    Rotation;                                         		// 0x0058(0x000C) (CPF_Transient)
	struct FVector                                     Forward;                                          		// 0x0064(0x000C) (CPF_Transient)
	struct FVector                                     Right;                                            		// 0x0070(0x000C) (CPF_Transient)
	struct FVector                                     Up;                                               		// 0x007C(0x000C) (CPF_Transient)
	float                                              Speed;                                            		// 0x0088(0x0004) (CPF_Transient)
	float                                              Speed2D;                                          		// 0x008C(0x0004) (CPF_Transient)
	float                                              ForwardSpeed;                                     		// 0x0090(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AIProxy_TA");
		return ptr;
	}


	void Update();
	void InitProxy(class AAIManager_TA* AIManager, class AActor* inActor);
};


// Class TAGame.CarPreviewActor_TA
// 0x00E0 (0x02CC - 0x01EC)
class ACarPreviewActor_TA : public AActor
{
public:
	int                                                ControllerId;                                     		// 0x01EC(0x0004) (CPF_Edit)
	class UCarLoadout_TA*                              ProductLoader;                                    		// 0x01F0(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UCarMeshComponent_TA*                        CarMesh;                                          		// 0x01F4(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class ULightEnvironmentComponent*                  LightEnvironment;                                 		// 0x01F8(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	TArray<class UCarPreviewAnim_TA*>                  AttachmentPreviewAnims;                           		// 0x01FC(0x000C) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_NeedCtorLink, CPF_EditInline)
	TArray<class UCarPreviewAnim_TA*>                  WheelAnims;                                       		// 0x0208(0x000C) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_NeedCtorLink, CPF_EditInline)
	class UCarPreviewAnim_TA*                          BodyAnim;                                         		// 0x0214(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class ATurnTableActor_TA*                          TurntableActor;                                   		// 0x0218(0x0004)
	struct FLoadoutData                                Loadout;                                          		// 0x021C(0x0034) (CPF_Transient, CPF_NeedCtorLink)
	struct FLoadoutData                                OldLoadout;                                       		// 0x0250(0x0034) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UProductAsset_TA*>                    PreviewProducts;                                  		// 0x0284(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class AFXActor_X*                                  BoostFX;                                          		// 0x0290(0x0004) (CPF_Transient)
	class UProductSlot_TA*                             PreviewSlot;                                      		// 0x0294(0x0004) (CPF_Transient)
	class ATeam_TA*                                    TeamArchetype;                                    		// 0x0298(0x0004) (CPF_Transient)
	int                                                NumScenes;                                        		// 0x029C(0x0004) (CPF_Transient)
	struct FString                                     PlayerName;                                       		// 0x02A0(0x000C) (CPF_NeedCtorLink)
	class AFXActor_X*                                  BodyFX;                                           		// 0x02AC(0x0004) (CPF_Transient)
	class UProductAsset_Boost_TA*                      BoostAsset;                                       		// 0x02B0(0x0004) (CPF_Transient)
	unsigned long                                      bLockLoadout : 1;                                 		// 0x02B4(0x0004) (CPF_Transient)
	int                                                LinkedControllerId;                               		// 0x02B8(0x0004) (CPF_Edit)
	struct FScriptDelegate                             __ProductApplicatorDelegate__Delegate;            		// 0x02BC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x02BC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarPreviewActor_TA");
		return ptr;
	}


	void ResetColors();
	void SetLockLoadout(bool bInLock);
	void BuildOnlineLoadout(struct FLoadoutData* InLoadout, struct FClientLoadoutOnlineData* OnlineLoadout);
	struct FRotator GetSMRotation();
	void SetSMRotation(float InDirectionMag, float DeltaTime);
	void FindTurnTableActor();
	void OnOwnerChanged();
	void Tick(float DeltaTime);
	void SetPreviewHidden(bool bHide);
	void SetPlayerName(const struct FString& InPlayerName);
	void AnimateBody();
	void AnimateWheels();
	void AnimateAttachment(class UProductSlot_TA* Slot, class UPrimitiveComponent* AttachmentComponent, const struct FName& CustomAnimName);
	void AnimateAntenna(class UAntennaComponent_TA* AntennaArchetype);
	class UPrimitiveComponent* FindAttachmentComponent(class UProductSlot_TA* Slot, struct FProductAttachment* AttachStruct);
	void AnimateSlotChange(class UProductAsset_TA* Product);
	class UActorComponent* FindAttachmentByArchetype(class UActorComponent* InArchetype);
	class UStaticMeshComponent* FindSMAttachmentByAsset(class UStaticMesh* Mesh);
	class USkeletalMeshComponent* FindSKAttachmentByAsset(class USkeletalMesh* Mesh);
	void UpdateTranslations();
	void ClearComponents();
	void InitBoostFX();
	void InitBodyFX();
	void InitComponents();
	void HandleAllProductsLoaded(class UProductLoader_TA* Loader);
	void UpdateBoostFX();
	void SetPreviewSlot(class UProductSlot_TA* InSlot);
	void ChangeCarPart(int SlotIndex, int ProductID, int TeamPaintIndex);
	void ForceSetLoadout(struct FLoadoutData* InLoadout);
	void SetLoadout(struct FLoadoutData* InLoadout);
	void SetUsed(bool bUsed);
	void Destroyed();
	void PostBeginPlay();
	void ProductApplicatorDelegate(class UProductAsset_TA* Asset);
};


// Class TAGame.AttachmentAnim_TA
// 0x000C (0x0054 - 0x0048)
class UAttachmentAnim_TA : public UAttachmentBehavior_TA
{
public:
	class UAnimSet*                                    AnimSet;                                          		// 0x0048(0x0004) (CPF_Edit)
	struct FName                                       AnimName;                                         		// 0x004C(0x0008) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AttachmentAnim_TA");
		return ptr;
	}


	void OnInit();
};


// Class TAGame.DamageComponent_TA
// 0x0008 (0x009C - 0x0094)
class UDamageComponent_TA : public UDamageComponent_X
{
public:
	float                                              RBImpulse;                                        		// 0x0094(0x0004) (CPF_Edit)
	float                                              RBVelocityChange;                                 		// 0x0098(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DamageComponent_TA");
		return ptr;
	}


	void Reset();
	class UDamageComponent_X* ScaleDamage(float InScale);
};


// Class TAGame.BallCamTarget_TA
// 0x0034 (0x00A0 - 0x006C)
class UBallCamTarget_TA : public UActorComponent_X
{
public:
	struct FVector                                     LocalTranslation;                                 		// 0x006C(0x000C) (CPF_Edit)
	struct FVector                                     WorldTranslation;                                 		// 0x0078(0x000C) (CPF_Edit)
	int                                                PitchMin;                                         		// 0x0084(0x0004) (CPF_Edit)
	int                                                PitchMax;                                         		// 0x0088(0x0004) (CPF_Edit)
	int                                                YawMin;                                           		// 0x008C(0x0004) (CPF_Edit)
	int                                                YawMax;                                           		// 0x0090(0x0004) (CPF_Edit)
	struct FName                                       Group;                                            		// 0x0094(0x0008) (CPF_Edit)
	unsigned long                                      bDrawFocus : 1;                                   		// 0x009C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallCamTarget_TA");
		return ptr;
	}


	void Detached();
	void Attached();
	struct FVector GetFocus();
	void SetGroup(const struct FName& GroupName);
};


// Class TAGame.FXActor_Ball_TA
// 0x004C (0x0298 - 0x024C)
class AFXActor_Ball_TA : public AFXActor_TA
{
public:
	float                                              SuperSonicSpeed;                                  		// 0x024C(0x0004) (CPF_Edit)
	float                                              MaxGoalProximityDistance;                         		// 0x0250(0x0004) (CPF_Edit)
	float                                              BallFadeInSpeed;                                  		// 0x0254(0x0004) (CPF_Edit)
	float                                              BallFadeOutSpeed;                                 		// 0x0258(0x0004) (CPF_Edit)
	float                                              TrailOpacityLerpSpeed;                            		// 0x025C(0x0004) (CPF_Edit)
	float                                              CurrentTrailOpacity;                              		// 0x0260(0x0004) (CPF_Transient)
	float                                              BallFadeSpeed;                                    		// 0x0264(0x0004) (CPF_Transient)
	float                                              BallFadeOpacity;                                  		// 0x0268(0x0004) (CPF_Transient)
	float                                              ShockwaveParamMin;                                		// 0x026C(0x0004) (CPF_Edit)
	float                                              ShockwaveParamMax;                                		// 0x0270(0x0004) (CPF_Edit)
	float                                              ShockwaveParamTime;                               		// 0x0274(0x0004) (CPF_Edit)
	class UFXActorEvent_X*                             InAirState;                                       		// 0x0278(0x0004)
	class UFXActorEvent_X*                             SuperSonicState;                                  		// 0x027C(0x0004)
	class ABall_TA*                                    Ball;                                             		// 0x0280(0x0004) (CPF_Transient)
	int                                                HitTeamNum;                                       		// 0x0284(0x0004) (CPF_Transient)
	float                                              TouchingWorldTime;                                		// 0x0288(0x0004) (CPF_Transient)
	unsigned long                                      bInAir : 1;                                       		// 0x028C(0x0004) (CPF_Transient)
	unsigned long                                      bSuperSonic : 1;                                  		// 0x028C(0x0004) (CPF_Transient)
	float                                              CurrentTrailDilation;                             		// 0x0290(0x0004) (CPF_Transient)
	float                                              MaxTrailDilation;                                 		// 0x0294(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_Ball_TA");
		return ptr;
	}


	void Destroyed();
	void UpdateBallPenetration();
	void HandleBallExploded(class ABall_TA* InBall);
	void HandleBallGameEventSet(class ABall_TA* InBall);
	void ClearBallPositionMaterials();
	void SetBallPositionMaterials(const struct FLinearColor& LocParam, float ShockwaveParam);
	void UpdateBallPositionMaterials();
	float GetClosestLocalPlayerDistance();
	void UpdateColor();
	void UpdateGoalProximity();
	void UpdateBallFade(float DeltaTime);
	void StartBallFadeOut();
	void StartBallFadeIn();
	void TickFX(float DeltaTime);
	void PostBeginPlay();
};


// Class TAGame.Ball_Tutorial_TA
// 0x0000 (0x07EC - 0x07EC)
class ABall_Tutorial_TA : public ABall_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Ball_Tutorial_TA");
		return ptr;
	}


	void PostBeginPlay();
};


// Class TAGame.SeqEvent_BallInRange_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_BallInRange_TA : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_BallInRange_TA");
		return ptr;
	}

};


// Class TAGame.BTAction_MoveTo
// 0x004C (0x0154 - 0x0108)
class UBTAction_MoveTo : public UBTAction_Target
{
public:
	unsigned long                                      bReverse : 1;                                     		// 0x0108(0x0004) (CPF_Edit)
	unsigned long                                      bBoost : 1;                                       		// 0x0108(0x0004) (CPF_Edit)
	unsigned long                                      bAllowPointTurns : 1;                             		// 0x0108(0x0004) (CPF_Edit)
	unsigned long                                      bPointTurn : 1;                                   		// 0x0108(0x0004) (CPF_Transient)
	unsigned long                                      bWasFacingDestination : 1;                        		// 0x0108(0x0004) (CPF_Transient)
	unsigned long                                      bHasPath : 1;                                     		// 0x0108(0x0004) (CPF_Transient)
	float                                              MinSpeed;                                         		// 0x010C(0x0004) (CPF_Edit)
	float                                              MaxSpeed;                                         		// 0x0110(0x0004) (CPF_Edit)
	float                                              MinBoostDistance;                                 		// 0x0114(0x0004) (CPF_Edit)
	float                                              TeamSeparationDistance;                           		// 0x0118(0x0004) (CPF_Edit)
	float                                              ReachDistance;                                    		// 0x011C(0x0004) (CPF_Edit)
	class UBTTarget*                                   FaceLocation;                                     		// 0x0120(0x0004) (CPF_Edit)
	class UBTTarget*                                   FaceRotation;                                     		// 0x0124(0x0004) (CPF_Edit)
	float                                              MaxTurnRadius;                                    		// 0x0128(0x0004) (CPF_Edit)
	TArray<class UBTMoveModifier*>                     Modifiers;                                        		// 0x012C(0x000C) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_NeedCtorLink, CPF_EditInline)
	struct FVector                                     OldPathDestination;                               		// 0x0138(0x000C) (CPF_Transient)
	struct FVector                                     OldPathCarLocation;                               		// 0x0144(0x000C) (CPF_Transient)
	float                                              CachedMaxGravitySlope;                            		// 0x0150(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_MoveTo");
		return ptr;
	}


	void SteerTowardsLocal(const struct FVector& LocalOffset);
	void DriveAwayFrom(const struct FVector& TargetLocation, float TargetRadius, float BufferRadius);
	bool SeparateTeammates();
	void SlowDown();
	void SetTemporaryMaxSpeed(float InSpeed);
	void SlowForObstacles();
	struct FVector GetAimedDestination(const struct FVector& Destination, const struct FVector& AimDir);
	bool GetAimDir(const struct FVector& Destination, struct FVector* AimDir);
	void DriveTo(const struct FVector& Destination);
	void UpdatePath(const struct FVector& Destination);
	void PathTo(const struct FVector& Destination);
	void CacheGravityScale();
	struct FVector GetLeadDestination();
	bool HasReachedTarget();
	bool HasPassedTarget();
	TEnumAsByte<enum class EBTStatus> OnTargetExecute();
	TEnumAsByte<enum class EBTStatus> OnStart();
	void OnInit();
};


// Class TAGame.BTMoveModifier
// 0x0004 (0x004C - 0x0048)
class UBTMoveModifier : public UComponent
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0048(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTMoveModifier");
		return ptr;
	}


	void AdjustDestination(const struct FVector& Goal, struct FVector* Destination);
};


// Class TAGame.BTAction_BlockGoal
// 0x0004 (0x0158 - 0x0154)
class UBTAction_BlockGoal : public UBTAction_MoveTo
{
public:
	float                                              GoalRadius;                                       		// 0x0154(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_BlockGoal");
		return ptr;
	}


	TEnumAsByte<enum class EBTStatus> OnTargetExecute();
	void OnInit();
};


// Class TAGame.BTAction_HitBall
// 0x0018 (0x016C - 0x0154)
class UBTAction_HitBall : public UBTAction_MoveTo
{
public:
	float                                              RandomTargetOffset;                               		// 0x0154(0x0004) (CPF_Edit)
	float                                              AimOffsetScale;                                   		// 0x0158(0x0004) (CPF_Edit)
	struct FVector                                     CurrentRandomTargetOffset;                        		// 0x015C(0x000C) (CPF_Transient)
	class AAIController_Soccar_TA*                     SoccarAI;                                         		// 0x0168(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_HitBall");
		return ptr;
	}


	struct FVector GetAimedDestination(const struct FVector& Destination, const struct FVector& AimDir);
	struct FVector GetLeadDestination();
	TEnumAsByte<enum class EBTStatus> OnTargetExecute();
	bool HasHitBall();
	void OnStarted();
	void OnInit();
};


// Class TAGame.BTAction_CatchBall
// 0x0004 (0x0170 - 0x016C)
class UBTAction_CatchBall : public UBTAction_HitBall
{
public:
	float                                              FallTime;                                         		// 0x016C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_CatchBall");
		return ptr;
	}


	void DriveTo(const struct FVector& Destination);
	TEnumAsByte<enum class EBTStatus> OnTargetExecute();
};


// Class TAGame.BTAction_DivertBall
// 0x0000 (0x016C - 0x016C)
class UBTAction_DivertBall : public UBTAction_HitBall
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_DivertBall");
		return ptr;
	}


	void OnInit();
};


// Class TAGame.BTAction_Jump
// 0x000C (0x0114 - 0x0108)
class UBTAction_Jump : public UBTAction_Target
{
public:
	float                                              MinJumpTime;                                      		// 0x0108(0x0004) (CPF_Edit)
	float                                              TargetRadiusHeightScale;                          		// 0x010C(0x0004) (CPF_Edit)
	float                                              StateStartTime;                                   		// 0x0110(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_Jump");
		return ptr;
	}


	float GetImpactTime();
	float GetStateTime();
	void GotoJumpState(const struct FName& StateName);
	TEnumAsByte<enum class EBTStatus> OnStart();
};


// Class TAGame.CarComponent_Jump_TA
// 0x0028 (0x024C - 0x0224)
class ACarComponent_Jump_TA : public ACarComponent_TA
{
public:
	float                                              MinJumpTime;                                      		// 0x0224(0x0004) (CPF_Edit)
	float                                              JumpImpulse;                                      		// 0x0228(0x0004) (CPF_Edit)
	float                                              JumpForce;                                        		// 0x022C(0x0004) (CPF_Edit)
	float                                              JumpForceTime;                                    		// 0x0230(0x0004) (CPF_Edit)
	float                                              PodiumJumpForceTime;                              		// 0x0234(0x0004) (CPF_Edit)
	float                                              JumpImpulseSpeed;                                 		// 0x0238(0x0004) (CPF_Transient)
	float                                              JumpAccel;                                        		// 0x023C(0x0004) (CPF_Transient)
	float                                              MaxJumpHeight;                                    		// 0x0240(0x0004) (CPF_Transient)
	float                                              MaxJumpHeightTime;                                		// 0x0244(0x0004) (CPF_Transient)
	unsigned long                                      bDeactivate : 1;                                  		// 0x0248(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_Jump_TA");
		return ptr;
	}


	void ApplyForces(float ActiveTime);
	void CacheJumpData();
	void OnCreated();
};


// Class TAGame.BTAction_DodgeHit
// 0x0018 (0x012C - 0x0114)
class UBTAction_DodgeHit : public UBTAction_Jump
{
public:
	float                                              FlipAmount;                                       		// 0x0114(0x0004) (CPF_Edit)
	class UBTTarget*                                   AimTarget;                                        		// 0x0118(0x0004) (CPF_Edit)
	struct FVector                                     DodgeDirection;                                   		// 0x011C(0x000C) (CPF_Transient)
	float                                              DodgeTime;                                        		// 0x0128(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_DodgeHit");
		return ptr;
	}


	struct FVector GetDodgeVelocity(const struct FVector& DodgeInput);
	TEnumAsByte<enum class EBTStatus> OnStart();
	float GetImpactTime();
};


// Class TAGame.BTAction_Face
// 0x001C (0x0124 - 0x0108)
class UBTAction_Face : public UBTAction_Target
{
public:
	float                                              ReachAngle;                                       		// 0x0108(0x0004) (CPF_Edit)
	float                                              MaxSpeed;                                         		// 0x010C(0x0004) (CPF_Edit)
	float                                              MaxTravel;                                        		// 0x0110(0x0004) (CPF_Edit)
	unsigned long                                      bMovingForward : 1;                               		// 0x0114(0x0004) (CPF_Transient)
	struct FVector                                     StartLocation;                                    		// 0x0118(0x000C) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_Face");
		return ptr;
	}


	TEnumAsByte<enum class EBTStatus> OnTargetExecute();
	void SetMovingForward(bool bForward);
	TEnumAsByte<enum class EBTStatus> OnStart();
};


// Class TAGame.BTAction_Input
// 0x0020 (0x00A0 - 0x0080)
class UBTAction_Input : public UBTAction
{
public:
	struct FVehicleInputs                              Input;                                            		// 0x0080(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_Input");
		return ptr;
	}


	TEnumAsByte<enum class EBTStatus> OnExecute();
};


// Class TAGame.BTAction_PowerSlide
// 0x0014 (0x011C - 0x0108)
class UBTAction_PowerSlide : public UBTAction_Target
{
public:
	unsigned long                                      bReverse : 1;                                     		// 0x0108(0x0004) (CPF_Edit)
	float                                              Delay;                                            		// 0x010C(0x0004) (CPF_Edit)
	class UBTTarget*                                   TurnTarget;                                       		// 0x0110(0x0004) (CPF_Edit)
	float                                              Steer;                                            		// 0x0114(0x0004) (CPF_Transient)
	int                                                startYaw;                                         		// 0x0118(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_PowerSlide");
		return ptr;
	}


	TEnumAsByte<enum class EBTStatus> OnTargetExecute();
	TEnumAsByte<enum class EBTStatus> OnStart();
};


// Class TAGame.BTAction_Stop
// 0x0004 (0x0084 - 0x0080)
class UBTAction_Stop : public UBTAction
{
public:
	unsigned long                                      bWasGoingForward : 1;                             		// 0x0080(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_Stop");
		return ptr;
	}


	TEnumAsByte<enum class EBTStatus> OnExecute();
	TEnumAsByte<enum class EBTStatus> OnStart();
};


// Class TAGame.BTAction_Test
// 0x0018 (0x016C - 0x0154)
class UBTAction_Test : public UBTAction_MoveTo
{
public:
	struct FVector                                     TargetLocation;                                   		// 0x0154(0x000C) (CPF_Transient)
	struct FVector                                     AimLocation;                                      		// 0x0160(0x000C) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_Test");
		return ptr;
	}


	bool GetAimDir(const struct FVector& Destination, struct FVector* AimDir);
	TEnumAsByte<enum class EBTStatus> OnTargetExecute();
	TEnumAsByte<enum class EBTStatus> OnStart();
	struct FVector GetRandomFieldLocation();
};


// Class TAGame.BTAction_WallBounce
// 0x0000 (0x0080 - 0x0080)
class UBTAction_WallBounce : public UBTAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_WallBounce");
		return ptr;
	}

};


// Class TAGame.BTAction_WiggleTires
// 0x0000 (0x0080 - 0x0080)
class UBTAction_WiggleTires : public UBTAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_WiggleTires");
		return ptr;
	}


	TEnumAsByte<enum class EBTStatus> OnExecute();
};


// Class TAGame.BTC_AreaClear
// 0x000C (0x017C - 0x0170)
class UBTC_AreaClear : public UBTC_TargetBase
{
public:
	class UBTTarget*                                   Source;                                           		// 0x0170(0x0004) (CPF_Edit)
	float                                              SourcePredictionTime;                             		// 0x0174(0x0004) (CPF_Edit)
	float                                              Radius;                                           		// 0x0178(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_AreaClear");
		return ptr;
	}


	bool GetResult();
	void OnInit();
};


// Class TAGame.BTC_Between
// 0x0010 (0x00B4 - 0x00A4)
class UBTC_Between : public UBTC_ProxyBase
{
public:
	class UBTTarget*                                   Start;                                            		// 0x00A4(0x0004) (CPF_Edit)
	class UBTTarget*                                   End;                                              		// 0x00A8(0x0004) (CPF_Edit)
	float                                              AngleLessThan;                                    		// 0x00AC(0x0004) (CPF_Edit)
	float                                              AngleGreaterThan;                                 		// 0x00B0(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Between");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_Boost
// 0x000C (0x00B0 - 0x00A4)
class UBTC_Boost : public UBTC_ProxyBase
{
public:
	float                                              BoostAmountLessThan;                              		// 0x00A4(0x0004) (CPF_Edit)
	float                                              BoostAmountGreaterThan;                           		// 0x00A8(0x0004) (CPF_Edit)
	unsigned long                                      bFull : 1;                                        		// 0x00AC(0x0004) (CPF_Edit)
	unsigned long                                      bNotFull : 1;                                     		// 0x00AC(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Boost");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_BounceHeight
// 0x0008 (0x0178 - 0x0170)
class UBTC_BounceHeight : public UBTC_TargetBase
{
public:
	float                                              HeightLessThan;                                   		// 0x0170(0x0004) (CPF_Edit)
	float                                              HeightGreaterThan;                                		// 0x0174(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_BounceHeight");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_CanJumpTo
// 0x0000 (0x0178 - 0x0178)
class UBTC_CanJumpTo : public UBTC_BounceHeight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_CanJumpTo");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_ClosestTime
// 0x0008 (0x01C0 - 0x01B8)
class UBTC_ClosestTime : public UBTC_Target
{
public:
	float                                              TimeGreaterThan;                                  		// 0x01B8(0x0004) (CPF_Edit)
	float                                              TimeLessThan;                                     		// 0x01BC(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_ClosestTime");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_ClosestTo
// 0x0008 (0x0178 - 0x0170)
class UBTC_ClosestTo : public UBTC_TargetBase
{
public:
	class UBTTarget*                                   Targets;                                          		// 0x0170(0x0004) (CPF_Edit)
	float                                              ExtraDistance;                                    		// 0x0174(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_ClosestTo");
		return ptr;
	}


	bool GetResult();
	void OnInit();
};


// Class TAGame.BTC_JumpHit
// 0x0004 (0x0174 - 0x0170)
class UBTC_JumpHit : public UBTC_TargetBase
{
public:
	float                                              MinImpactTime;                                    		// 0x0170(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_JumpHit");
		return ptr;
	}


	bool GetResult();
	void PredictJump(float Time);
};


// Class TAGame.BTC_DodgeHit
// 0x0008 (0x017C - 0x0174)
class UBTC_DodgeHit : public UBTC_JumpHit
{
public:
	float                                              FlipAmount;                                       		// 0x0174(0x0004) (CPF_Edit)
	float                                              JumpTime;                                         		// 0x0178(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_DodgeHit");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_Facing
// 0x0000 (0x01B8 - 0x01B8)
class UBTC_Facing : public UBTC_Target
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Facing");
		return ptr;
	}

};


// Class TAGame.BTC_FieldDistance
// 0x00E4 (0x0254 - 0x0170)
class UBTC_FieldDistance : public UBTC_TargetBase
{
public:
	class UBTTarget*                                   Goal;                                             		// 0x0170(0x0004) (CPF_Edit)
	class UBTTarget*                                   OtherGoal;                                        		// 0x0174(0x0004) (CPF_Edit)
	float                                              ForwardGreaterThan;                               		// 0x0178(0x0004) (CPF_Edit)
	float                                              ForwardLessThan;                                  		// 0x017C(0x0004) (CPF_Edit)
	float                                              SideGreaterThan;                                  		// 0x0180(0x0004) (CPF_Edit)
	float                                              SideLessThan;                                     		// 0x0184(0x0004) (CPF_Edit)
	float                                              AbsSideGreaterThan;                               		// 0x0188(0x0004) (CPF_Edit)
	float                                              AbsSideLessThan;                                  		// 0x018C(0x0004) (CPF_Edit)
	unsigned long                                      bUseGoalOrientation : 1;                          		// 0x0190(0x0004) (CPF_Edit)
	struct FBTProxyData                                GoalData;                                         		// 0x0194(0x0040) (CPF_Transient)
	struct FBTProxyData                                OtherGoalData;                                    		// 0x01D4(0x0040) (CPF_Transient)
	struct FBTProxyData                                MidFieldData;                                     		// 0x0214(0x0040) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_FieldDistance");
		return ptr;
	}


	bool GetResult();
	struct FVector GetRelativeOffset(const struct FVector& InLocation);
	void OnInit();
};


// Class TAGame.BTC_GameState
// 0x0008 (0x0064 - 0x005C)
class UBTC_GameState : public UBTCondition
{
public:
	struct FName                                       StateName;                                        		// 0x005C(0x0008) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_GameState");
		return ptr;
	}


	bool GetResult();
	void HandleGameStateChanged(class AGameEvent_TA* GameEvent);
	void OnInit();
};


// Class TAGame.BTC_HitLanding
// 0x0000 (0x0170 - 0x0170)
class UBTC_HitLanding : public UBTC_TargetBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_HitLanding");
		return ptr;
	}


	bool GetResult();
	void OnInit();
};


// Class TAGame.BTC_Impact
// 0x0008 (0x01C0 - 0x01B8)
class UBTC_Impact : public UBTC_Target
{
public:
	float                                              TimeGreaterThan;                                  		// 0x01B8(0x0004) (CPF_Edit)
	float                                              TimeLessThan;                                     		// 0x01BC(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Impact");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_InCone
// 0x0010 (0x00B4 - 0x00A4)
class UBTC_InCone : public UBTC_ProxyBase
{
public:
	class UBTTarget*                                   Source;                                           		// 0x00A4(0x0004) (CPF_Edit)
	class UBTTarget*                                   Destination;                                      		// 0x00A8(0x0004) (CPF_Edit)
	float                                              AngleLessThan;                                    		// 0x00AC(0x0004) (CPF_Edit)
	float                                              AngleGreaterThan;                                 		// 0x00B0(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_InCone");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_Landing
// 0x0008 (0x01C0 - 0x01B8)
class UBTC_Landing : public UBTC_Target
{
public:
	float                                              LandTimeLessThan;                                 		// 0x01B8(0x0004) (CPF_Edit)
	float                                              LandTimeGreaterThan;                              		// 0x01BC(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Landing");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_Lock
// 0x000C (0x0068 - 0x005C)
class UBTC_Lock : public UBTCondition
{
public:
	struct FName                                       LockName;                                         		// 0x005C(0x0008) (CPF_Edit)
	int                                                NumLocks;                                         		// 0x0064(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Lock");
		return ptr;
	}


	bool GetResult();
	void HandleLockRemoved(const struct FName& InLockName);
	void HandleLockAdded(const struct FName& InLockName);
	void ListenForLocks(class UBTLockCollection* Locks);
	void OnInit();
};


// Class TAGame.BTC_SegmentDistance
// 0x0020 (0x00C4 - 0x00A4)
class UBTC_SegmentDistance : public UBTC_ProxyBase
{
public:
	class UBTTarget*                                   Start;                                            		// 0x00A4(0x0004) (CPF_Edit)
	class UBTTarget*                                   End;                                              		// 0x00A8(0x0004) (CPF_Edit)
	float                                              StartGreaterThan;                                 		// 0x00AC(0x0004) (CPF_Edit)
	float                                              StartLessThan;                                    		// 0x00B0(0x0004) (CPF_Edit)
	float                                              EndGreaterThan;                                   		// 0x00B4(0x0004) (CPF_Edit)
	float                                              EndLessThan;                                      		// 0x00B8(0x0004) (CPF_Edit)
	float                                              AbsSideGreaterThan;                               		// 0x00BC(0x0004) (CPF_Edit)
	float                                              AbsSideLessThan;                                  		// 0x00C0(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_SegmentDistance");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_Skill
// 0x0008 (0x0064 - 0x005C)
class UBTC_Skill : public UBTCondition
{
public:
	float                                              SkillGreaterThan;                                 		// 0x005C(0x0004) (CPF_Edit)
	float                                              SkillLessThan;                                    		// 0x0060(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Skill");
		return ptr;
	}


	bool GetResult();
	void HandleSkillChanged(class AAIController_TA* InAI);
	void OnInit();
};


// Class TAGame.BTC_SoccarState
// 0x0008 (0x006C - 0x0064)
class UBTC_SoccarState : public UBTC_GameState
{
public:
	unsigned long                                      bKickoff : 1;                                     		// 0x0064(0x0004) (CPF_Edit)
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x0068(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_SoccarState");
		return ptr;
	}


	bool GetResult();
	void HandleBallHit(class AGameEvent_Soccar_TA* G);
	void OnInit();
};


// Class TAGame.BTC_Stuck
// 0x0000 (0x005C - 0x005C)
class UBTC_Stuck : public UBTCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Stuck");
		return ptr;
	}


	bool IsTouchingOtherCar();
	bool GetResult();
};


// Class TAGame.BTC_TeamSize
// 0x0008 (0x0064 - 0x005C)
class UBTC_TeamSize : public UBTCondition
{
public:
	int                                                MinTeamSize;                                      		// 0x005C(0x0004) (CPF_Edit)
	int                                                MaxTeamSize;                                      		// 0x0060(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_TeamSize");
		return ptr;
	}


	bool GetResult();
	void HandleMembersChanged(class ATeam_TA* Team, class APRI_TA* PRI);
	void OnInit();
};


// Class TAGame.BTC_TimeSinceBallHit
// 0x0014 (0x0070 - 0x005C)
class UBTC_TimeSinceBallHit : public UBTCondition
{
public:
	TEnumAsByte<enum class EAITeam>                    CheckTeam;                                        		// 0x005C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x005D(0x0003) MISSED OFFSET
	float                                              TimeGreaterThan;                                  		// 0x0060(0x0004) (CPF_Edit)
	float                                              TimeLessThan;                                     		// 0x0064(0x0004) (CPF_Edit)
	class ABall_TA*                                    Ball;                                             		// 0x0068(0x0004) (CPF_Transient)
	float                                              LastHitTime;                                      		// 0x006C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_TimeSinceBallHit");
		return ptr;
	}


	bool GetResult();
	void HandleCarTouch(class ABall_TA* InBall, class ACar_TA* HitCar, TEnumAsByte<enum class EBallHitType> HitType);
	void HandleBallChanged(class AAIController_Soccar_TA* InAI);
	void OnInit();
};


// Class TAGame.BTC_Traits
// 0x0000 (0x005C - 0x005C)
class UBTC_Traits : public UBTCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Traits");
		return ptr;
	}

};


// Class TAGame.BTC_Vehicle
// 0x0014 (0x00B8 - 0x00A4)
class UBTC_Vehicle : public UBTC_ProxyBase
{
public:
	unsigned long                                      bOnBack : 1;                                      		// 0x00A4(0x0004) (CPF_Edit)
	unsigned long                                      bNotOnBack : 1;                                   		// 0x00A4(0x0004) (CPF_Edit)
	unsigned long                                      bWheelsOnGround : 1;                              		// 0x00A4(0x0004) (CPF_Edit)
	unsigned long                                      bWheelsNotOnGround : 1;                           		// 0x00A4(0x0004) (CPF_Edit)
	float                                              GroundNormalGreaterThan;                          		// 0x00A8(0x0004) (CPF_Edit)
	float                                              GroundNormalLessThan;                             		// 0x00AC(0x0004) (CPF_Edit)
	float                                              ForwardSpeedGreaterThan;                          		// 0x00B0(0x0004) (CPF_Edit)
	float                                              ForwardSpeedLessThan;                             		// 0x00B4(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Vehicle");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTMoveModifier_Boost
// 0x0014 (0x0060 - 0x004C)
class UBTMoveModifier_Boost : public UBTMoveModifier
{
public:
	float                                              MinDistanceFromDestination;                       		// 0x004C(0x0004) (CPF_Edit)
	float                                              MaxAngleFromCar;                                  		// 0x0050(0x0004) (CPF_Edit)
	float                                              MaxAngleFromDestination;                          		// 0x0054(0x0004) (CPF_Edit)
	class AVehiclePickup_Boost_TA*                     BoostPickup;                                      		// 0x0058(0x0004) (CPF_Transient)
	float                                              LastCheckTime;                                    		// 0x005C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTMoveModifier_Boost");
		return ptr;
	}


	class AVehiclePickup_Boost_TA* FindBoostPickup(const struct FVector& Destination);
	void HandleBoostPickedUp(class AVehiclePickup_TA* Pickup);
	void SetBoostPickup(class AVehiclePickup_Boost_TA* NewPickup);
	void AdjustDestination(const struct FVector& Goal, struct FVector* Destination);
};


// Class TAGame.VehiclePickup_Boost_TA
// 0x000C (0x023C - 0x0230)
class AVehiclePickup_Boost_TA : public AVehiclePickup_TA
{
public:
	float                                              BoostAmount;                                      		// 0x0230(0x0004) (CPF_Edit)
	class UVehiclePickup_BoostModifier_TA*             Modifier;                                         		// 0x0234(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UAkSoundCue*                                 LocalPickupSound;                                 		// 0x0238(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehiclePickup_Boost_TA");
		return ptr;
	}


	void PlayPickedUpFX();
	void Pickup(class ACar_TA* Car);
	void SetPickupType(class UVehiclePickup_BoostModifier_TA* BoostModifierType);
	bool CanPickup(class ACar_TA* Car);
};


// Class TAGame.ReplayDirector_TA
// 0x00D8 (0x02C4 - 0x01EC)
class AReplayDirector_TA : public AActor
{
public:
	float                                              SlomoPreScoreTime;                                		// 0x01EC(0x0004) (CPF_Edit)
	float                                              SlomoPostScoreTime;                               		// 0x01F0(0x0004) (CPF_Edit)
	float                                              SlomoDefendTime;                                  		// 0x01F4(0x0004) (CPF_Edit)
	float                                              SlomoDefendDistance;                              		// 0x01F8(0x0004) (CPF_Edit)
	float                                              SlomoTimeDilation;                                		// 0x01FC(0x0004) (CPF_Edit)
	float                                              MinReplayTime;                                    		// 0x0200(0x0004) (CPF_Edit)
	float                                              MaxReplayTime;                                    		// 0x0204(0x0004) (CPF_Edit)
	float                                              ReplayPadding;                                    		// 0x0208(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 ReplayStartSound;                                 		// 0x020C(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 SlomoStartSound;                                  		// 0x0210(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 SlomoStopSound;                                   		// 0x0214(0x0004) (CPF_Edit)
	float                                              HighlightReplayDuration;                          		// 0x0218(0x0004) (CPF_Edit)
	float                                              TimeBeforeHighlightReplay;                        		// 0x021C(0x0004) (CPF_Edit)
	class UReplay_Soccar_TA*                           Replay;                                           		// 0x0220(0x0004) (CPF_Transient)
	class AActor*                                      FocusCar;                                         		// 0x0224(0x0004) (CPF_Net, CPF_Transient)
	float                                              FocusCarChangeTime;                               		// 0x0228(0x0004) (CPF_Transient)
	class AActor*                                      FocusBall;                                        		// 0x022C(0x0004) (CPF_Net, CPF_Transient)
	TArray<struct FBallHitInfo>                        BallTouches;                                      		// 0x0230(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FName                                       BallName;                                         		// 0x023C(0x0008) (CPF_Transient)
	float                                              ScoreTime;                                        		// 0x0244(0x0004) (CPF_Transient)
	int                                                ScoreHitIndex;                                    		// 0x0248(0x0004) (CPF_Transient)
	class UGoal_TA*                                    ScoredGoal;                                       		// 0x024C(0x0004) (CPF_ExportObject, CPF_Net, CPF_Transient, CPF_Component, CPF_EditInline)
	unsigned long                                      bSlomo : 1;                                       		// 0x0250(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bSlomoForDefender : 1;                            		// 0x0250(0x0004) (CPF_Transient)
	unsigned long                                      bAutoSave : 1;                                    		// 0x0250(0x0004) (CPF_Transient)
	int                                                FocusHitIndex;                                    		// 0x0254(0x0004) (CPF_Transient)
	TArray<struct FReplayFocusCar>                     FocusCars;                                        		// 0x0258(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	int                                                FocusCarIdx;                                      		// 0x0264(0x0004) (CPF_Transient)
	float                                              ReplayStartGameTime;                              		// 0x0268(0x0004) (CPF_Transient)
	float                                              BallSpawnTime;                                    		// 0x026C(0x0004) (CPF_Transient)
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x0270(0x0004) (CPF_Net, CPF_Transient)
	unsigned char                                      ScoredOnTeam;                                     		// 0x0274(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0275(0x0003) MISSED OFFSET
	struct FReplayScoreData                            ScoreData;                                        		// 0x0278(0x0010) (CPF_Net, CPF_Transient)
	int                                                PreviousScores[0x2];                              		// 0x0288(0x0004) (CPF_Net, CPF_Transient)
	int                                                ForceCutToFocusActors;                            		// 0x0290(0x0004) (CPF_Net, CPF_Transient)
	struct FScriptDelegate                             __EventReplayFinished__Delegate;                  		// 0x0294(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0294(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventScoreDataChanged__Delegate;                		// 0x02A4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x02A4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventAutoSaveChanged__Delegate;                 		// 0x02B4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x02B4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ReplayDirector_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void SetAutoSave();
	void SaveUserKeyframe();
	void BuildFocusCars();
	void SetSlomo(bool bNewSlomo);
	void Tick(float DeltaTime);
	void Destroyed();
	class AActor* GetReplayProxy(const struct FName& ReplayActorName);
	float GetReplayTimeSeconds();
	void SetFocusActors(class AActor* NewCar, class AActor* NewBall);
	float GetReplayStartTime();
	void SetSlomoForDefender(class ABall_TA* Ball, int DefendingTeam);
	void OnScoreDataChanged();
	void GoalScored(class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIndex);
	void HandleScoreUpdated(class ATeam_TA* Team);
	void HandleAllTeamsCreated(class AGameEvent_Team_TA* TeamGame);
	void RecordPlayers();
	void HandleGameStateChanged(class AGameEvent_TA* G);
	void OnSoccarGameSet();
	void SetGameEvent(class AGameEvent_Soccar_TA* InGameEvent);
	void ReplicatedEvent(const struct FName& VarName);
	void EventAutoSaveChanged(class AReplayDirector_TA* Director);
	void EventScoreDataChanged(class AReplayDirector_TA* Director);
	void EventReplayFinished(class AReplayDirector_TA* Director);
};


// Class TAGame.Camera_MainMenu_TA
// 0x001C (0x05D8 - 0x05BC)
class ACamera_MainMenu_TA : public ACamera_X
{
public:
	struct FVector                                     HandheldCamFrequency;                             		// 0x05BC(0x000C) (CPF_Edit)
	struct FVector                                     HandheldCamAmplitude;                             		// 0x05C8(0x000C) (CPF_Edit)
	class UCameraState_X*                              CurrentState;                                     		// 0x05D4(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Camera_MainMenu_TA");
		return ptr;
	}


	void ApplyCameraModifiers(float DeltaTime, struct FTPOV* OutPOV);
	class UCameraState_X* SelectCameraState();
	void SetCameraState(const struct FName& StateName);
	class UCameraState_X* GetCameraStateByName(const struct FName& StateName);
	void InstanceCameraStates();
};


// Class TAGame.CameraState_CarPreview_TA
// 0x0064 (0x00C0 - 0x005C)
class UCameraState_CarPreview_TA : public UCameraState_X
{
public:
	TArray<float>                                      SideOffsets;                                      		// 0x005C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FCameraOrientation>                  ViewOffsets;                                      		// 0x0068(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	float                                              BlendRate;                                        		// 0x0074(0x0004) (CPF_Edit)
	float                                              MinPitch;                                         		// 0x0078(0x0004)
	float                                              MaxPitch;                                         		// 0x007C(0x0004)
	struct FCameraOrientation                          CurrentOrientation;                               		// 0x0080(0x002C) (CPF_Transient)
	float                                              CurrentSideOffset;                                		// 0x00AC(0x0004) (CPF_Transient)
	struct FRotator                                    RotationOffset;                                   		// 0x00B0(0x000C) (CPF_Transient)
	class UCameraState_PremiumGarage_TA*               PrevPremiumGarageState;                           		// 0x00BC(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_CarPreview_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void AdjustOutPOVCameraRotation(const struct FRotator& AddedRotator, struct FCameraOrientation* OutPOV);
	void OnSnap();
	void PreviewFadeIn();
	void PreviewFadeOut(class UCameraState_CarPreview_TA* InPrevState);
	void BeginCameraState();
	void GetActorOrientation(struct FCameraOrientation* OutPOV, float* OutSideOffset);
	void GetSingleActorOrientation(class ACarPreviewActor_TA* ViewTarget, struct FVector* OutLoc, struct FRotator* OutRot);
};


// Class TAGame.Camera_TA
// 0x0090 (0x064C - 0x05BC)
class ACamera_TA : public ACamera_X
{
public:
	struct FSwivelExtent                               SwivelExtentSlow;                                 		// 0x05BC(0x000C) (CPF_Edit)
	struct FSwivelExtent                               SwivelExtentFast;                                 		// 0x05C8(0x000C) (CPF_Edit)
	float                                              SwivelFastSpeed;                                  		// 0x05D4(0x0004) (CPF_Edit)
	float                                              SwivelDieRate;                                    		// 0x05D8(0x0004) (CPF_Edit)
	struct FProfileSliderLimits                        FOVLimits;                                        		// 0x05DC(0x000C) (CPF_Edit, CPF_Const)
	struct FProfileSliderLimits                        HeightLimits;                                     		// 0x05E8(0x000C) (CPF_Edit, CPF_Const)
	struct FProfileSliderLimits                        AngleLimits;                                      		// 0x05F4(0x000C) (CPF_Edit, CPF_Const)
	struct FProfileSliderLimits                        DistanceLimits;                                   		// 0x0600(0x000C) (CPF_Edit, CPF_Const)
	struct FProfileSliderLimits                        StiffnessLimits;                                  		// 0x060C(0x000C) (CPF_Edit, CPF_Const)
	struct FProfileSliderLimits                        SwivelSpeedLimits;                                		// 0x0618(0x000C) (CPF_Edit, CPF_Const)
	float                                              HorizontalSplitscreenHeightOffset;                		// 0x0624(0x0004) (CPF_Edit, CPF_Const)
	float                                              HorizontalSplitscreenFOVOffset;                   		// 0x0628(0x0004) (CPF_Edit, CPF_Const)
	float                                              VerticalSplitscreenFOVOffset;                     		// 0x062C(0x0004) (CPF_Edit, CPF_Const)
	float                                              ClipRate;                                         		// 0x0630(0x0004) (CPF_Edit)
	struct FRotator                                    CurrentSwivel;                                    		// 0x0634(0x000C) (CPF_Transient)
	class ARBActor_TA*                                 Demolisher;                                       		// 0x0640(0x0004) (CPF_Transient)
	unsigned long                                      bDemolished : 1;                                  		// 0x0644(0x0004) (CPF_Transient)
	class ACameraSettingsActor_TA*                     CameraSettings;                                   		// 0x0648(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Camera_TA");
		return ptr;
	}


	void OnViewTargetChanged();
	float ClipToField(float CameraLocationZ);
	void ApplyCameraModifiers(float DeltaTime, struct FTPOV* OutPOV);
	void Demolished(class ARBActor_TA* InDemolisher);
	void ApplySwivel(struct FCameraOrientation* OutPOV);
	struct FRotator GetDesiredSwivel(float LookUp, float LookRight);
	void UpdateSwivel(float DeltaTime);
	float GetDefaultFOVOffset();
	float GetDefaultViewHeightOffset();
	void UpdateAspectRatio(struct FCameraOrientation* OutPOV);
	void PostProcessCameraState(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateFOV();
	class ACameraSettingsActor_TA* GetCameraSettings();
	void ProcessCameraState(float DeltaTime, struct FCameraOrientation* OutPOV);
	void HandleRemoveLocalFX(class UObject* SeqObj);
	void HandleAddLocalFX(class UObject* SeqObj);
	void InitializeFor(class APlayerController* PC);
};


// Class TAGame.CameraSettingsActor_TA
// 0x0048 (0x0234 - 0x01EC)
class ACameraSettingsActor_TA : public AReplicationInfo
{
public:
	float                                              UploadCameraDelay;                                		// 0x01EC(0x0004) (CPF_Edit)
	class APRI_TA*                                     PRI;                                              		// 0x01F0(0x0004) (CPF_Net, CPF_Transient)
	struct FProfileCameraSettings                      ProfileSettings;                                  		// 0x01F4(0x0018) (CPF_Net, CPF_Transient)
	unsigned long                                      bUsingSecondaryCamera : 1;                        		// 0x020C(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bUsingBehindView : 1;                             		// 0x020C(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bUsingFreecam : 1;                                		// 0x020C(0x0004) (CPF_Net, CPF_Transient)
	unsigned char                                      CameraPitch;                                      		// 0x0210(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      CameraYaw;                                        		// 0x0211(0x0001) (CPF_Net, CPF_Transient)
	unsigned char                                      UnknownData00[0x2];                               		// 0x0212(0x0002) MISSED OFFSET
	struct FScriptDelegate                             __EventCameraChanged__Delegate;                   		// 0x0214(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0212(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTargetSelect__Delegate;                    		// 0x0224(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0224(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraSettingsActor_TA");
		return ptr;
	}


	void TargetSelect(int Direction);
	void FinishUploadCameraRotation();
	void UploadCameraRotation();
	void ServerSetCameraRotationReliable(unsigned char Pitch, unsigned char Yaw);
	void ServerSetCameraRotation(unsigned char Pitch, unsigned char Yaw);
	void SetCameraRotationInternal(unsigned char Pitch, unsigned char Yaw);
	void SetCameraRotation(unsigned char Pitch, unsigned char Yaw);
	void ServerSetUsingFreecam(bool bUsing);
	void SetUsingFreecam(bool bUsing);
	void ServerSetUsingBehindView(bool bUsing);
	void SetUsingBehindView(bool bUsing);
	void ServerSetUsingSecondaryCamera(bool bUsing);
	void SetUsingSecondaryCamera(bool bUsing);
	void ServerSetCameraSettings(const struct FProfileCameraSettings& InSettings);
	void SetProfileSettings(const struct FProfileCameraSettings& InSettings);
	void Destroyed();
	void OnOwnerChanged();
	void ReplicatedEvent(const struct FName& VarName);
	void EventTargetSelect(class ACameraSettingsActor_TA* Actor, int Direction);
	void EventCameraChanged(class ACameraSettingsActor_TA* Actor);
};


// Class TAGame.GameViewportClient_TA
// 0x0074 (0x0200 - 0x018C)
class UGameViewportClient_TA : public UGameViewportClient_X
{
public:
	unsigned long                                      bSplitScreenDisabled : 1;                         		// 0x018C(0x0004)
	unsigned long                                      bUpdateSplitscreenSizes : 1;                      		// 0x018C(0x0004) (CPF_Transient)
	unsigned long                                      bDrawWorldFullScreen : 1;                         		// 0x018C(0x0004) (CPF_Transient)
	unsigned long                                      bDrawBuildInfo : 1;                               		// 0x018C(0x0004) (CPF_Transient)
	TArray<float>                                      LastSplitJoinTryTimes;                            		// 0x0190(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	float                                              UIScaleModifier;                                  		// 0x019C(0x0004)
	struct FScriptDelegate                             __EventPostInit__Delegate;                        		// 0x01A0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x01A0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSplitScreenTypeChanged__Delegate;          		// 0x01B0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x01B0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventDrawWorldFullScreenChanged__Delegate;      		// 0x01C0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x01C0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventUIScaleModifierUpdated__Delegate;          		// 0x01D0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x01D0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSafeZoneRatioUpdated__Delegate;            		// 0x01E0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x01E0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventUpdatedNumLocalPlayers__Delegate;          		// 0x01F0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData05[0x4];                               		// 0x01F0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameViewportClient_TA");
		return ptr;
	}


	void NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void SetUIScaleModifier(float Value);
	void SetSafeZone(float Value);
	void HandlePrimaryPlayerChange(class ULocalPlayer* OldPrimary, class ULocalPlayer* NewPrimary);
	int GetLocalPlayerCount();
	void UpdateNumLocalPlayers();
	void HandleGameStateChanged(class AGameEvent_TA* GameEvent);
	void HandleLocalPlayerChanged(class ULocalPlayer* NewPlayer);
	float GetAspectRatio(class ULocalPlayer* Player);
	class ULocalPlayer* CreatePlayer(int ControllerId, bool bSpawnActor, struct FString* OutError);
	void AddSplitScreenPlayer();
	void HandleUserSignInComplete_CreateSplitScreenPlayer(unsigned char LocalUserNum);
	void InitiateAsyncLoginForSplitscreen(int ControllerId);
	bool HandleSplitScreenJoinAsync(int ControllerId);
	bool HandleKeyPress(int ControllerId, const struct FName& Key, TEnumAsByte<enum class EInputEvent> EventType, float AmountDepressed, bool bGamepad);
	void SplitscreenJoinResponse(const struct FUniqueNetId& PlayerID, bool bAllow);
	void RequestSplitscreenJoin(int ControllerId);
	bool GameEventAllowSplitScreenPlayer();
	void CreateSplitScreenPlayer(int ControllerId);
	void HandleSplitscreenJoinPrivilegeCheck(class UPrivilegeCheck_X* PrivilegeCheck);
	void TryToCreateSplitScreenPlayer(int ControllerId);
	void HandleUserSwitchComplete(unsigned char LocalUserNum);
	bool IsPlayingOnline();
	bool GameWantsFullScreen();
	void LayoutPlayers();
	void SetSplitscreenSizes();
	class APlayerControllerBase_TA* GetPrimaryPlayerController();
	void UpdateActiveSplitscreenType();
	void DrawTransition(class UCanvas* Canvas);
	void NotifyConnectionError(TEnumAsByte<enum class EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title);
	bool Init(struct FString* OutError);
	void EventUpdatedNumLocalPlayers(class UGameViewportClient_TA* GVC, int LocalPlayerCount);
	void EventSafeZoneRatioUpdated(class UGameViewportClient_TA* GVC);
	void EventUIScaleModifierUpdated(class UGameViewportClient_TA* GVC);
	void EventDrawWorldFullScreenChanged(class UGameViewportClient_TA* GVC);
	void EventSplitScreenTypeChanged(class UGameViewportClient_TA* GVC);
	void EventPostInit(class UGameViewportClient_TA* GVC);
};


// Class TAGame.SeqAct_AttachFX_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_AttachFX_TA : public USequenceAction
{
public:
	class UParticleSystemComponent*                    PSC;                                              		// 0x00FC(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_AttachFX_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.Camera_Replay_TA
// 0x001C (0x0668 - 0x064C)
class ACamera_Replay_TA : public ACamera_TA
{
public:
	class UCameraState_X*                              KismetCameraState;                                		// 0x064C(0x0004) (CPF_Edit)
	struct FString                                     FocusActorString;                                 		// 0x0650(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FName                                       CameraMode;                                       		// 0x065C(0x0008)
	class UCameraState_Replay_TA*                      CurrentCameraState;                               		// 0x0664(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Camera_Replay_TA");
		return ptr;
	}


	float ClipToField(float CameraLocationZ);
	void UpdateAspectRatio(struct FCameraOrientation* OutPOV);
	void UpdateFOV();
	void ApplySwivel(struct FCameraOrientation* OutPOV);
	void SetFocusActor(const struct FString& InFocusActorString);
	void SetCameraMode(const struct FName& Mode);
	void UpdateCameraState();
	class UCameraState_X* GetCameraStateByName(const struct FName& ArchetypeName);
	void UpdateCamera(float DeltaTime);
	void InstanceCameraStates();
};


// Class TAGame.CameraState_Replay_TA
// 0x0020 (0x007C - 0x005C)
class UCameraState_Replay_TA : public UCameraState_X
{
public:
	unsigned long                                      bLocalMovement : 1;                               		// 0x005C(0x0004) (CPF_Edit)
	struct FString                                     FocusActorString;                                 		// 0x0060(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class AActor*                                      OldFocusActor;                                    		// 0x006C(0x0004) (CPF_Transient)
	struct FVector                                     OldFocusActorLocation;                            		// 0x0070(0x000C) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_Replay_TA");
		return ptr;
	}


	class AActor* GetFocusActor();
	void UpdateFlyPOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateFocusActorPOV(class AActor* FocusActor, float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void BeginCameraState();
	class UCameraState_X* GetProxyCameraState();
	bool AllowSwivel();
	bool IsDisabled(const struct FString& InFocusActorString);
};


// Class TAGame.CameraState_TA
// 0x000C (0x0068 - 0x005C)
class UCameraState_TA : public UCameraState_X
{
public:
	float                                              StateStartTime;                                   		// 0x005C(0x0004) (CPF_Transient)
	class ACar_TA*                                     Car;                                              		// 0x0060(0x0004) (CPF_Transient)
	class ACameraSettingsActor_TA*                     CameraSettings;                                   		// 0x0064(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	struct FRotator GetCarRotation();
	struct FVector GetCarLocation();
	bool IsOnGround();
	void BeginCameraState();
	bool ShouldExecute();
	bool UpdateCarRef();
};


// Class TAGame.CameraState_Car_TA
// 0x00D8 (0x0140 - 0x0068)
class UCameraState_Car_TA : public UCameraState_TA
{
public:
	float                                              InterpToAirRate;                                  		// 0x0068(0x0004) (CPF_Edit)
	float                                              InterpToGroundRate;                               		// 0x006C(0x0004) (CPF_Edit)
	struct UCameraState_Car_TA_FInterpVector           FocusInterp;                                      		// 0x0070(0x0024) (CPF_Edit)
	struct UCameraState_Car_TA_FInterpVector           FocusOffsetInterp;                                		// 0x0094(0x0024) (CPF_Edit)
	struct UCameraState_Car_TA_FInterpVector           DistanceInterp;                                   		// 0x00B8(0x0024) (CPF_Edit)
	float                                              GroundRotationInterpRate;                         		// 0x00DC(0x0004) (CPF_Edit)
	float                                              GroundRotationInterpRateWall;                     		// 0x00E0(0x0004) (CPF_Edit)
	float                                              AirVelocityInfluence;                             		// 0x00E4(0x0004) (CPF_Edit)
	float                                              AirVelocityInfluenceMaxSpeed;                     		// 0x00E8(0x0004) (CPF_Edit)
	float                                              DistanceSpeedScale;                               		// 0x00EC(0x0004) (CPF_Edit)
	float                                              DistanceOffsetMin;                                		// 0x00F0(0x0004) (CPF_Edit)
	float                                              MaxSpeedFOV;                                      		// 0x00F4(0x0004) (CPF_Edit)
	float                                              FOVInterpSpeed;                                   		// 0x00F8(0x0004) (CPF_Edit)
	float                                              SupersonicFOV;                                    		// 0x00FC(0x0004) (CPF_Edit)
	float                                              SupersonicFOVInterpSpeed;                         		// 0x0100(0x0004) (CPF_Edit)
	float                                              BouncyChassisScale;                               		// 0x0104(0x0004) (CPF_Edit)
	float                                              RollScale;                                        		// 0x0108(0x0004) (CPF_Edit)
	float                                              AirGroundBlend;                                   		// 0x010C(0x0004) (CPF_Transient)
	struct FCameraOrientation                          ViewOffset;                                       		// 0x0110(0x002C) (CPF_Transient)
	unsigned long                                      bFirstExecution : 1;                              		// 0x013C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_Car_TA");
		return ptr;
	}


	void UpdateInterpVector(const struct FVector& NewValue, float DeltaTime, struct UCameraState_Car_TA_FInterpVector* Interp);
	void UpdateRotationModifiers(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateFOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateDistance(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateAirPOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateGroundPOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateAirAndGroundCamera(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateFocus(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateFocusWorldOffset(float DeltaTime);
	void UpdateAirGroundBlend(float DeltaTime);
	void UpdateViewOffset();
	void UpdateValidPOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void BeginCameraState();
};


// Class TAGame.CameraState_BallCam_TA
// 0x006C (0x01AC - 0x0140)
class UCameraState_BallCam_TA : public UCameraState_Car_TA
{
public:
	float                                              RotationRate;                                     		// 0x0140(0x0004) (CPF_Edit)
	float                                              PitchScale;                                       		// 0x0144(0x0004) (CPF_Edit)
	float                                              PitchFocusZFactor;                                		// 0x0148(0x0004) (CPF_Edit)
	float                                              PitchExtentMin;                                   		// 0x014C(0x0004) (CPF_Edit)
	float                                              PitchExtentMax;                                   		// 0x0150(0x0004) (CPF_Edit)
	class UBallCamTarget_TA*                           Target;                                           		// 0x0154(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	struct FCameraOrientation                          BasePOV;                                          		// 0x0158(0x002C) (CPF_Transient)
	struct FVector                                     OldBallLocation;                                  		// 0x0184(0x000C) (CPF_Transient)
	unsigned long                                      bWasReverseCam : 1;                               		// 0x0190(0x0004) (CPF_Transient)
	TArray<struct FPlaneSelectData>                    PlaneSelectSettings;                              		// 0x0194(0x000C) (CPF_NeedCtorLink)
	TArray<struct FAngleSelectData>                    AngleSelectSettings;                              		// 0x01A0(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_BallCam_TA");
		return ptr;
	}


	void UpdateFocus(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateFocusWorldOffset(float DeltaTime);
	void UpdateAirAndGroundCamera(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateRotationModifiers(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateValidPOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void RefreshTarget();
	bool ShouldExecute();
	bool BallTargetIsValid(class UBallCamTarget_TA* BallTarget);
	bool RotatedPlaneContainsPoint(const struct FVector& Origin, const struct FRotator& PlaneRotation, float YExtent, float ZExtent, const struct FVector& Point, float* Out_DistanceToOrgin);
	class UBallCamTarget_TA* FindClosestTargetInRotatedPlane(float XExtent, float YExtent, float MaxRadius);
	class UBallCamTarget_TA* FindClosestTargetInDirection(const struct FRotator& StartRotation, int YDirection, float MaxRadius);
	class UBallCamTarget_TA* FindClosestTargetByAngle(float MinDotAngle, float MaxRadius);
	class UBallCamTarget_TA* GetBestBallTarget();
	bool ChooseTarget();
	void ResetTarget();
	void HandleBallExploded(class ABall_TA* Ball);
	void HandleRemoveBall(class UObject* NewTarget);
	void HandleAddBall(class UObject* NewTarget);
	void TargetSelect(class ACameraSettingsActor_TA* Actor, int Direction);
	void HandleCameraChanged(class ACameraSettingsActor_TA* Actor);
	void Init(class ACamera_X* InCamera);
};


// Class TAGame.GameInfo_GFxMenu_TA
// 0x002C (0x043C - 0x0410)
class AGameInfo_GFxMenu_TA : public AGameInfoBase_TA
{
public:
	class UCarPreviewSet_TA*                           CarPreviewSet;                                    		// 0x0410(0x0004) (CPF_Transient)
	struct FString                                     UIStateNames[0x2];                                		// 0x0414(0x000C) (CPF_Const, CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventIntroCarsInPosition__Delegate;             		// 0x042C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x042C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_GFxMenu_TA");
		return ptr;
	}


	void IntroCarsInPosition();
	class ACarPreviewActor_TA* GetPremiumGarageActor();
	struct FName SwapPremiumCarTo(class UDLCPack_TA* DLCPack, int SubIdx);
	void TriggerUIStateChangeEvents(TEnumAsByte<enum class EUIMenuState> UIState);
	void SetUIState(class ULocalPlayer_TA* Player, TEnumAsByte<enum class EUIMenuState> UIState);
	void HandlePrimaryPlayerIdChanged(class UOnlineGameAccount_X* Account, const struct FUniqueNetId& PlayerID);
	void HandlePrimaryPlayerSet(class APlayerController_Menu_TA* PC);
	void InitShell(class APlayerController_Menu_TA* PC);
	void GenericPlayerInitialization(class AController* C);
	bool CanStartMatch();
	void RestartPlayer(class AController* NewPlayer);
	void Destroyed();
	void InitCarPreviews();
	void PreBeginPlay();
	void EventIntroCarsInPosition(class AGameInfo_GFxMenu_TA* GameInfoMenu);
};


// Class TAGame.CarPreviewSet_TA
// 0x0048 (0x0084 - 0x003C)
class UCarPreviewSet_TA : public UObject
{
public:
	TArray<class ACarPreviewActor_TA*>                 CarPreviewActors;                                 		// 0x003C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class UOnlineGameParty_TA*                         OnlineParty;                                      		// 0x0048(0x0004) (CPF_Transient)
	unsigned long                                      bRemotePlayersHidden : 1;                         		// 0x004C(0x0004) (CPF_Transient)
	int                                                PremiumCarIdx;                                    		// 0x0050(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventPreviewActorsChanged__Delegate;            		// 0x0054(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0054(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPreviewActorSetProfile__Delegate;          		// 0x0064(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0064(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSwapFinished__Delegate;                    		// 0x0074(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0074(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarPreviewSet_TA");
		return ptr;
	}


	void HandleCarSwapComplete();
	struct FName SwapPremiumCarTo(class UDLCPack_TA* DLCPack, int SubIdx);
	void UpdateWheel(const struct FAssetLoadResult& Result);
	bool SetRemotePlayersHidden(bool bHidden);
	void ExitPremiumGarage();
	void EnterPremiumGarage();
	void HandlePrimaryPlayerSet(class APlayerController_Menu_TA* PC);
	void HandlePartyMemberLoadoutRemoved(int MemberIndex);
	void HandlePartyMemberLoadoutChange(int MemberIndex);
	void HandleReceiveController(class UPlayer* PlayerRef);
	void HandlePlayerJoin(class ULocalPlayer* P);
	void UpdatePreview(int Index);
	void UpdatePreviewForPlayer(class ULocalPlayer* P);
	class ACarPreviewActor_TA* GetPlayerCarPreviewActor(class ULocalPlayer* P);
	void UpdateAllPreviews();
	void InitPreviewActors();
	void HandleCarPreviewActorAdded(class UGameShare_TA* GameShare, class ACarPreviewActor_TA* PreviewActor);
	void Cleanup();
	void Init();
	void EventSwapFinished();
	void EventPreviewActorSetProfile(class ACarPreviewActor_TA* Car);
	void EventPreviewActorsChanged(class UCarPreviewSet_TA* G);
};


// Class TAGame.CameraState_PremiumGarage_TA
// 0x007C (0x013C - 0x00C0)
class UCameraState_PremiumGarage_TA : public UCameraState_CarPreview_TA
{
public:
	float                                              LastAdjustTime;                                   		// 0x00C0(0x0004) (CPF_Transient)
	struct FInterpCurveFloat                           CameraReturnBlendCurve;                           		// 0x00C4(0x0010) (CPF_NeedCtorLink)
	float                                              Momentum;                                         		// 0x00D4(0x0004)
	struct FViewTargetTransitionParams                 BetweenPremiumCameraBlend;                        		// 0x00D8(0x0010)
	float                                              FadeInFromBlackTime;                              		// 0x00E8(0x0004)
	float                                              FadeToBlackTime;                                  		// 0x00EC(0x0004)
	struct FInterpCurveFloat                           YawSpeedCurveGamepad;                             		// 0x00F0(0x0010) (CPF_NeedCtorLink)
	struct FInterpCurveFloat                           YawSpeedCurveMouse;                               		// 0x0100(0x0010) (CPF_NeedCtorLink)
	float                                              PitchDeadzone;                                    		// 0x0110(0x0004)
	float                                              PitchSensitivity;                                 		// 0x0114(0x0004)
	struct FInterpCurveFloat                           PitchAutocorrectCurve;                            		// 0x0118(0x0010) (CPF_NeedCtorLink)
	float                                              PitchMaxSpeed;                                    		// 0x0128(0x0004)
	float                                              PitchBlendbackModifier;                           		// 0x012C(0x0004)
	float                                              PitchBlendbackMin;                                		// 0x0130(0x0004)
	float                                              MomentumFalloff;                                  		// 0x0134(0x0004)
	class UGFxShell_TA*                                Shell;                                            		// 0x0138(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_PremiumGarage_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void AdjustOutPOVCameraRotation(const struct FRotator& AddedRotator, struct FCameraOrientation* OutPOV);
	float GetCameraCurveSpeed();
	void ManuallyAdjustCar(bool bInManualAdjust);
	void BeginCameraState();
	struct FViewTargetTransitionParams GetEndBlendParams(class UCameraState_X* NewState);
	void GetActorOrientation(struct FCameraOrientation* OutPOV, float* OutSideOffset);
	void GetSingleActorOrientation(class ACarPreviewActor_TA* ViewTarget, struct FVector* OutLoc, struct FRotator* OutRot);
};


// Class TAGame.CameraState_Demolished_TA
// 0x0024 (0x008C - 0x0068)
class UCameraState_Demolished_TA : public UCameraState_TA
{
public:
	float                                              RotationInterpRate;                               		// 0x0068(0x0004) (CPF_Edit)
	class APawn*                                       DemolishedPawn;                                   		// 0x006C(0x0004) (CPF_Transient)
	float                                              StateTime;                                        		// 0x0070(0x0004) (CPF_Transient)
	float                                              InitialFOV;                                       		// 0x0074(0x0004) (CPF_Edit)
	float                                              FOVBlendTime;                                     		// 0x0078(0x0004) (CPF_Edit)
	unsigned long                                      bInterp : 1;                                      		// 0x007C(0x0004) (CPF_Transient)
	float                                              MaxZoomInFOV;                                     		// 0x0080(0x0004) (CPF_Edit)
	float                                              MaxFOVBlendDistance;                              		// 0x0084(0x0004) (CPF_Edit)
	float                                              Distance;                                         		// 0x0088(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_Demolished_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void EndCameraState();
	void BeginCameraState();
	bool ShouldKeepExecuting();
	bool ShouldExecute();
	struct FViewTargetTransitionParams GetEndBlendParams(class UCameraState_X* NewState);
};


// Class TAGame.CameraState_Freecam_TA
// 0x0084 (0x00EC - 0x0068)
class UCameraState_Freecam_TA : public UCameraState_TA
{
public:
	struct FCameraOrientation                          ViewOffset_Near;                                  		// 0x0068(0x002C) (CPF_Edit)
	struct FCameraOrientation                          ViewOffset_Far;                                   		// 0x0094(0x002C) (CPF_Edit)
	struct FCameraOrientation                          ViewOffset;                                       		// 0x00C0(0x002C) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_Freecam_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	bool ShouldExecute();
};


// Class TAGame.CameraState_LiveReplay_TA
// 0x0070 (0x00CC - 0x005C)
class UCameraState_LiveReplay_TA : public UCameraState_X
{
public:
	struct FVector                                     LocationOffset;                                   		// 0x005C(0x000C) (CPF_Edit)
	struct FInterpCurveFloat                           FocusSpeedOverTime;                               		// 0x0068(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	float                                              CarBallFocusBlendDistance;                        		// 0x0078(0x0004) (CPF_Edit)
	float                                              Distance;                                         		// 0x007C(0x0004) (CPF_Edit)
	float                                              FOV;                                              		// 0x0080(0x0004) (CPF_Edit)
	float                                              SlomoInterpTime;                                  		// 0x0084(0x0004) (CPF_Edit)
	float                                              SlomoDistance;                                    		// 0x0088(0x0004) (CPF_Edit)
	float                                              SlomoFOV;                                         		// 0x008C(0x0004) (CPF_Edit)
	struct FVector                                     VelocityPrediction;                               		// 0x0090(0x000C) (CPF_Edit)
	float                                              InterpToFieldCenterRate;                          		// 0x009C(0x0004) (CPF_Edit)
	float                                              InterpToFieldCenterOffset;                        		// 0x00A0(0x0004) (CPF_Edit)
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x00A4(0x0004) (CPF_Transient)
	class ACar_TA*                                     FocusCar;                                         		// 0x00A8(0x0004) (CPF_Transient)
	class AActor*                                      FocusBall;                                        		// 0x00AC(0x0004) (CPF_Transient)
	unsigned long                                      bHasDoneFirstUpdate : 1;                          		// 0x00B0(0x0004) (CPF_Transient)
	unsigned long                                      bCanUpdate : 1;                                   		// 0x00B0(0x0004) (CPF_Transient)
	unsigned long                                      bSetGoalScorerFocusOffset : 1;                    		// 0x00B0(0x0004) (CPF_Transient)
	float                                              LastFocusChangeTime;                              		// 0x00B4(0x0004) (CPF_Transient)
	float                                              SlomoTime;                                        		// 0x00B8(0x0004) (CPF_Transient)
	class UGoal_TA*                                    Goal;                                             		// 0x00BC(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	struct FVector                                     GoalScorerFocusOffset;                            		// 0x00C0(0x000C) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_LiveReplay_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	struct FVector GetCameraBaseLocation(const struct FVector& CameraFocus);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void Tick(float DeltaTime);
	void UpdateSlomo(float DeltaTime);
	void EndCameraState();
	void BeginCameraState();
	struct FViewTargetTransitionParams GetEndBlendParams(class UCameraState_X* NewState);
	bool ShouldExecute();
};


// Class TAGame.CameraState_ReplayAutoCam_TA
// 0x01DC (0x0258 - 0x007C)
class UCameraState_ReplayAutoCam_TA : public UCameraState_Replay_TA
{
public:
	float                                              FOVInterpSpeed;                                   		// 0x007C(0x0004)
	float                                              StartViewFocusTime;                               		// 0x0080(0x0004)
	float                                              FocusPitchInterpSpeed;                            		// 0x0084(0x0004)
	float                                              FocusYawInterpSpeed;                              		// 0x0088(0x0004)
	float                                              AerialFOV;                                        		// 0x008C(0x0004)
	float                                              CountDownFOV;                                     		// 0x0090(0x0004)
	float                                              CountDownPanSpeed;                                		// 0x0094(0x0004)
	float                                              CountDownRotateSpeed;                             		// 0x0098(0x0004)
	float                                              CountDownPanBlendAmount;                          		// 0x009C(0x0004)
	float                                              CountDownFocusActorStartTime;                     		// 0x00A0(0x0004)
	float                                              LocationBlendSpeed;                               		// 0x00A4(0x0004)
	float                                              BallAerialZStartTime;                             		// 0x00A8(0x0004)
	float                                              MinBallAerialZHeight;                             		// 0x00AC(0x0004)
	float                                              MinPlayerAerialZHeight;                           		// 0x00B0(0x0004)
	float                                              MinFocusActorViewTime;                            		// 0x00B4(0x0004)
	float                                              BallFloorFocusPercent;                            		// 0x00B8(0x0004)
	float                                              LocationAngleInterpSpeed;                         		// 0x00BC(0x0004)
	float                                              LastLocationAngleUpdateTime;                      		// 0x00C0(0x0004)
	float                                              MinStartRadiusForPlayerAerial;                    		// 0x00C4(0x0004)
	float                                              MaxStartRadiusForPlayerAerial;                    		// 0x00C8(0x0004)
	float                                              DesiredCameraDistance;                            		// 0x00CC(0x0004)
	float                                              ResetToMapDefaultTime;                            		// 0x00D0(0x0004)
	float                                              MaxWaitTimeTillBallHit;                           		// 0x00D4(0x0004)
	float                                              FocusActorZViewOffset;                            		// 0x00D8(0x0004)
	float                                              FloorTraceDistance;                               		// 0x00DC(0x0004)
	float                                              BackAwayFromWallDistance;                         		// 0x00E0(0x0004)
	float                                              NoCarsNearBallDistance;                           		// 0x00E4(0x0004)
	float                                              MinPlayerCameraFloorHeight;                       		// 0x00E8(0x0004)
	float                                              FocusPointInterpSpeed;                            		// 0x00EC(0x0004)
	float                                              MinMaxPitch;                                      		// 0x00F0(0x0004)
	float                                              LastDesiredLocationBlendSpeed;                    		// 0x00F4(0x0004)
	float                                              AdditionalFocusZ;                                 		// 0x00F8(0x0004)
	float                                              TimeSinceIgnoredGoalFocusExtent;                  		// 0x00FC(0x0004)
	float                                              LastTimeAPlayerWasNearBall;                       		// 0x0100(0x0004)
	float                                              AdditionalBackAwayFromBallSpeed;                  		// 0x0104(0x0004)
	float                                              GoalScorerFocusDistance;                          		// 0x0108(0x0004)
	float                                              MapResetStartDistance;                            		// 0x010C(0x0004)
	float                                              MapResetStartHeight;                              		// 0x0110(0x0004)
	float                                              GoalScoredDistance;                               		// 0x0114(0x0004)
	float                                              MaxGoalYZoomOutDistance;                          		// 0x0118(0x0004)
	float                                              MaxGoalXZoomOutDistance;                          		// 0x011C(0x0004)
	float                                              MinCameraDistanceToBall;                          		// 0x0120(0x0004)
	unsigned long                                      bSnapFOV : 1;                                     		// 0x0124(0x0004)
	unsigned long                                      bSnapToFocus : 1;                                 		// 0x0124(0x0004)
	unsigned long                                      bBallHasBeenHit : 1;                              		// 0x0124(0x0004)
	unsigned long                                      bHasGoalScorerFocus : 1;                          		// 0x0124(0x0004)
	unsigned long                                      bHitWallLastFrame : 1;                            		// 0x0124(0x0004)
	struct FVector                                     BallFloorLocation;                                		// 0x0128(0x000C)
	struct FVector                                     BallFloorNormal;                                  		// 0x0134(0x000C)
	struct FVector                                     LastCarFocusOffset;                               		// 0x0140(0x000C)
	struct FVector                                     CountDownPanDirection;                            		// 0x014C(0x000C)
	struct FVector                                     CountDownPanStartOffset;                          		// 0x0158(0x000C)
	struct FVector                                     CountDownRotateOffset;                            		// 0x0164(0x000C)
	struct FVector                                     LastFocusOffset;                                  		// 0x0170(0x000C)
	struct FVector                                     LastFocusLocation;                                		// 0x017C(0x000C)
	struct FVector                                     LastDesiredLocation;                              		// 0x0188(0x000C)
	struct FRotator                                    LocationAngle;                                    		// 0x0194(0x000C)
	struct FRotator                                    DesiredLocationAngle;                             		// 0x01A0(0x000C)
	struct FRotator                                    DesiredRotation;                                  		// 0x01AC(0x000C)
	struct FRotator                                    MapResetStartRotation;                            		// 0x01B8(0x000C)
	class APRI_TA*                                     FocusActor;                                       		// 0x01C4(0x0004)
	class APRI_TA*                                     LastScorer;                                       		// 0x01C8(0x0004)
	TArray<class APRI_TA*>                             AerialPRIs;                                       		// 0x01CC(0x000C) (CPF_NeedCtorLink)
	TArray<class APRI_TA*>                             CountDownPRIs;                                    		// 0x01D8(0x000C) (CPF_NeedCtorLink)
	class UGoal_TA*                                    GoalFocus;                                        		// 0x01E4(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	TEnumAsByte<enum class ECountDownFocus>            CountDownFocusType;                               		// 0x01E8(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x01E9(0x0003) MISSED OFFSET
	class ABall_TA*                                    Ball;                                             		// 0x01EC(0x0004) (CPF_Transient)
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x01F0(0x0004) (CPF_Transient)
	class UCameraState_X*                              ReplayCameraState;                                		// 0x01F4(0x0004)
	struct FProfileSliderLimits                        CameraDistanceLimits;                             		// 0x01F8(0x000C) (CPF_Edit, CPF_Const)
	struct FProfileSliderLimits                        CameraZLimits;                                    		// 0x0204(0x000C) (CPF_Edit, CPF_Const)
	struct FProfileSliderLimits                        CameraMoveSpeedLimits;                            		// 0x0210(0x000C) (CPF_Edit, CPF_Const)
	struct FProfileSliderLimits                        CameraMoveSpeedZLimits;                           		// 0x021C(0x000C) (CPF_Edit, CPF_Const)
	struct FProfileSliderLimits                        PlayerCameraDistanceLimits;                       		// 0x0228(0x000C) (CPF_Edit, CPF_Const)
	struct FProfileSliderLimits                        RotateSpeedLimits;                                		// 0x0234(0x000C) (CPF_Edit, CPF_Const)
	struct FProfileSliderLimits                        PlayerFocusBlendSpeedLimits;                      		// 0x0240(0x000C) (CPF_Edit, CPF_Const)
	struct FProfileSliderLimits                        AerialPredictionLimits;                           		// 0x024C(0x000C) (CPF_Edit, CPF_Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_ReplayAutoCam_TA");
		return ptr;
	}


	void DrawRotatedBox(const struct FVector& Origin, const struct FRotator& BoxRotation, const struct FVector& Extent, const struct FColor& C, bool bPersistent);
	bool RotatedBoxContainsPoint(const struct FVector& Origin, const struct FRotator& BoxRotation, const struct FVector& Extent, const struct FVector& Point);
	struct FVector FlattenPointToPlane(const struct FVector& Center, const struct FRotator& Rot, const struct FVector& Point);
	class AGameEvent_Soccar_TA* GetSoccarGame();
	class UCameraState_X* GetProxyCameraState();
	bool LookingAtWall(const struct FRotator& CameraRotation);
	void HandleBallExploded(class ABall_TA* InBall);
	void ResetCameraToMapDefault();
	float GetDefaultMoveSpeed();
	bool WasJustIgnoringGoalFocusExtent(float MinTimeSince);
	float ModifyByAerialMultiplier(float Min, float Max);
	float GetAerialPredictionMultiplier();
	bool GetFocusOnGoals();
	bool GetCutToAerialCam();
	bool BallIsAboveMinAerialZ();
	bool GetAllowFocusActor();
	bool GetUseReplayCamera();
	float GetFocusActorBlendSpeed();
	float GetDesiredAerialActorDistance();
	float GetDesiredRotateSpeed();
	float GetDesiredMoveSpeedZ();
	float GetDesiredMoveSpeed();
	float GetDesiredCameraZ();
	bool BallHasBeenHit();
	void UpdateDesiredCameraDistance(float DeltaTime);
	float GetDefaultCameraDistance();
	float GetDesiredCameraDistance();
	float GetDesiredCameraFOV();
	void HandleGameStateChanged(class AGameEvent_TA* GameEvent);
	bool ChooseCountDownFocusActor();
	void UpdateCountDownTextureStreaming();
	class APRI_TA* GetNextEligibleCountDownFocusActor();
	bool IsCountDownFocusEligible(class APRI_TA* PRI);
	void ResetCountDownPRIs();
	void HandleFirstBallHit(class AGameEvent_Soccar_TA* GameEvent);
	bool InGameState(const struct FName& StateName);
	class APRI_TA* PredictFirstPlayerToBall();
	bool APlayerIsMovingTowardCenterWithinRadius(const struct FVector& Center, float Radius, float MinDotAngleTowardsBall);
	bool MovingTowardsBall(class APRI_TA* PRI, float MaxDotAngle);
	bool FlyingTowardsBall(class APRI_TA* PRI, float MinZFlyHeight, float MinAcceptableDistanceToBall);
	bool AddToAerialPRIs(class APRI_TA* PRI);
	void ResetFocusActorSettings();
	class APRI_TA* UpdateAerialPRIs(float PickWaitTime);
	bool SetFocusActor(class APRI_TA* PRI);
	bool UpdateFocusActor_PostGoal(const struct FVector& FocusPoint, float DeltaTime, struct FCameraOrientation* OutPOV);
	void HandlePlayerScored(class AGameEvent_Soccar_TA* GameEvent, class APRI_TA* Scorer);
	void UpdateFocusActor_POV(const struct FVector& FocusPoint, float DeltaTime, float BlendSpeed, bool bCutToCamera, struct FCameraOrientation* OutPOV);
	bool UpdateFocusActor_Active(const struct FVector& FocusPoint, float DeltaTime, struct FCameraOrientation* OutPOV);
	bool UpdateFocusActor_CountDown(const struct FVector& FocusPoint, float DeltaTime, struct FCameraOrientation* OutPOV);
	bool UpdateFocusActor(const struct FVector& FocusPoint, float DeltaTime, struct FCameraOrientation* OutPOV);
	void AdjustSideLocation(struct FVector* AdjustedLocation);
	bool AdjustDesiredLocationAngleFromHit(const struct FVector& TraceStart, const struct FVector& HitLocation, const struct FVector& HitNormal, float ExtraTraceDistance, struct FVector* Out_AdjustedLocation);
	bool CanFitAtLocation(const struct FVector& DesiredLocation, float ExtraTraceDistance, struct FVector* Out_TraceStart, struct FVector* out_HitLocation, struct FVector* out_HitNormal);
	void AdjustDesiredLocation(struct FVector* AdjustedLocation);
	bool CanMoveCameraToThisAngle(const struct FVector& CameraLocation, const struct FRotator& NewAngle, float DesiredTraceDistance);
	struct FRotator GetBallSideAngle(const struct FVector& CameraLocation);
	void SetDesiredLocationAngle(const struct FRotator& NewAngle);
	bool BallToCloseOrMovingTowardCamera(const struct FVector& CameraLocation);
	bool UpdateLocationAngle(struct FCameraOrientation* POV);
	struct FVector GetBallFloorFocusPoint(float DeltaTime);
	class UGoal_TA* FindGoalWithinRange();
	float GetZAngleFromLocation(const struct FVector& ActorLocation, const struct FRotator& ActorRotation, const struct FVector& TestLocation);
	float GetYAngleFromLocation(const struct FVector& ActorLocation, const struct FRotator& ActorRotation, const struct FVector& TestLocation);
	bool FloorTrace(const struct FVector& TraceStart, float TraceDistance, struct FVector* out_HitLocation, struct FVector* out_HitNormal);
	float GetDesiredZLocation(const struct FVector& OldCameraLocation, const struct FVector& NewCameraLocation, const struct FVector& DesiredLocation, float* Out_MinZHeight);
	void UpdateLocation(const struct FVector& FocusPoint, float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateRotation(const struct FVector& FocusPoint, float YawInterpSpeed, float PitchInterpSpeed, float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void SetFromMapInfo();
	void EndCameraState();
	void BeginCameraState();
	void Init(class ACamera_X* InCamera);
};


// Class TAGame.MapInfo_TA
// 0x0098 (0x00D4 - 0x003C)
class UMapInfo_TA : public UMapInfo
{
public:
	struct FWorldColorData                             WorldColors;                                      		// 0x003C(0x0040) (CPF_Edit)
	TEnumAsByte<enum class EMirrorFieldType>           MirrorFieldType;                                  		// 0x007C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x007D(0x0003) MISSED OFFSET
	int                                                MirrorFieldXYRotation;                            		// 0x0080(0x0004) (CPF_Edit)
	struct FVector                                     FieldCenter;                                      		// 0x0084(0x000C) (CPF_Edit)
	struct FRotator                                    MapResetStartRotation;                            		// 0x0090(0x000C) (CPF_Edit)
	float                                              MapResetStartHeight;                              		// 0x009C(0x0004) (CPF_Edit)
	float                                              MapResetStartDistance;                            		// 0x00A0(0x0004) (CPF_Edit)
	float                                              MaxWaitTimeTillBallHit;                           		// 0x00A4(0x0004) (CPF_Edit)
	float                                              GoalScoredDistance;                               		// 0x00A8(0x0004) (CPF_Edit)
	float                                              MaxGoalYZoomOutDistance;                          		// 0x00AC(0x0004) (CPF_Edit)
	float                                              MaxGoalXZoomOutDistance;                          		// 0x00B0(0x0004) (CPF_Edit)
	float                                              CountDownFOV;                                     		// 0x00B4(0x0004) (CPF_Edit)
	float                                              BackAwayFromWallDistance;                         		// 0x00B8(0x0004) (CPF_Edit)
	struct FVector                                     PylonExtentOverride;                              		// 0x00BC(0x000C) (CPF_Edit)
	struct FVector                                     TeamZeroHalfFieldDirection;                       		// 0x00C8(0x000C) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapInfo_TA");
		return ptr;
	}

};


// Class TAGame.CameraState_ReplayFly_TA
// 0x0018 (0x0094 - 0x007C)
class UCameraState_ReplayFly_TA : public UCameraState_Replay_TA
{
public:
	struct FVector                                     OldPCLocation;                                    		// 0x007C(0x000C) (CPF_Transient)
	struct FRotator                                    OldPCRotation;                                    		// 0x0088(0x000C) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_ReplayFly_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void BeginCameraState();
};


// Class TAGame.CameraState_ReplayFollow_TA
// 0x0020 (0x009C - 0x007C)
class UCameraState_ReplayFollow_TA : public UCameraState_Replay_TA
{
public:
	float                                              FollowDistance;                                   		// 0x007C(0x0004) (CPF_Edit)
	float                                              MinFollowDistance;                                		// 0x0080(0x0004) (CPF_Edit)
	float                                              MaxFollowDistance;                                		// 0x0084(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           FollowRotationRateCurve;                          		// 0x0088(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	unsigned long                                      bFirstExecution : 1;                              		// 0x0098(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_ReplayFollow_TA");
		return ptr;
	}


	void UpdateFocusActorPOV(class AActor* FocusActor, float DeltaTime, struct FCameraOrientation* OutPOV);
	bool IsDisabled(const struct FString& InFocusActorString);
	void BeginCameraState();
};


// Class TAGame.CameraState_ReplaySoftAttach_TA
// 0x001C (0x0098 - 0x007C)
class UCameraState_ReplaySoftAttach_TA : public UCameraState_Replay_TA
{
public:
	struct FRotator                                    AttachRotation;                                   		// 0x007C(0x000C) (CPF_Edit)
	struct FVector                                     AttachOffset;                                     		// 0x0088(0x000C) (CPF_Edit)
	float                                              MaxDistance;                                      		// 0x0094(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_ReplaySoftAttach_TA");
		return ptr;
	}


	void ClampPOV(struct FCameraOrientation* OutPOV);
	void UpdateFocusActorPOV(class AActor* FocusActor, float DeltaTime, struct FCameraOrientation* OutPOV);
	bool IsDisabled(const struct FString& InFocusActorString);
};


// Class TAGame.CameraState_ReplayHardAttach_TA
// 0x0000 (0x0098 - 0x0098)
class UCameraState_ReplayHardAttach_TA : public UCameraState_ReplaySoftAttach_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_ReplayHardAttach_TA");
		return ptr;
	}


	void UpdateFocusActorPOV(class AActor* FocusActor, float DeltaTime, struct FCameraOrientation* OutPOV);
	bool IsDisabled(const struct FString& InFocusActorString);
};


// Class TAGame.CameraState_ReplayPlayerView_TA
// 0x000C (0x0088 - 0x007C)
class UCameraState_ReplayPlayerView_TA : public UCameraState_Replay_TA
{
public:
	class UCameraState_X*                              CarCameraState;                                   		// 0x007C(0x0004) (CPF_Edit)
	class UCameraState_X*                              BallCameraState;                                  		// 0x0080(0x0004) (CPF_Edit)
	class UCameraState_X*                              CurrentCameraState;                               		// 0x0084(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_ReplayPlayerView_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	class UCameraState_X* GetProxyCameraState();
	void Init(class ACamera_X* InCamera);
	bool AllowSwivel();
	bool IsDisabled(const struct FString& InFocusActorString);
};


// Class TAGame.CameraState_SeasonIntro_TA
// 0x0010 (0x006C - 0x005C)
class UCameraState_SeasonIntro_TA : public UCameraState_X
{
public:
	float                                              RotateSpeed;                                      		// 0x005C(0x0004)
	float                                              ZHeightPercent;                                   		// 0x0060(0x0004)
	float                                              XOffsetDistance;                                  		// 0x0064(0x0004)
	float                                              DefaultFOV;                                       		// 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_SeasonIntro_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	bool ShouldExecute();
};


// Class TAGame.CameraState_Waiting_TA
// 0x0008 (0x0068 - 0x0060)
class UCameraState_Waiting_TA : public UCameraState_CamActor_X
{
public:
	float                                              MinExecutionTime;                                 		// 0x0060(0x0004) (CPF_Edit)
	float                                              ExecutionTime;                                    		// 0x0064(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_Waiting_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void Tick(float DeltaTime);
	bool ShouldKeepExecuting();
	struct FViewTargetTransitionParams GetEndBlendParams(class UCameraState_X* NewState);
	bool ShouldExecute();
};


// Class TAGame.Cannon_TA
// 0x001D (0x0209 - 0x01EC)
class ACannon_TA : public AActor
{
public:
	class USkeletalMeshComponent*                      Mesh;                                             		// 0x01EC(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UAnimTree*                                   CannonAnimTree;                                   		// 0x01F0(0x0004)
	class UAnimSet*                                    CannonAnimSet;                                    		// 0x01F4(0x0004)
	class UAnimNodeSlot*                               FullBodyAnimSlot;                                 		// 0x01F8(0x0004)
	class USkelControlSingleBone*                      PitchControl;                                     		// 0x01FC(0x0004)
	class UParticleSystem*                             EngineThrusterParticle;                           		// 0x0200(0x0004)
	class UAkSoundCue*                                 CannonFireSound;                                  		// 0x0204(0x0004)
	unsigned char                                      FireCount;                                        		// 0x0208(0x0001) (CPF_Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Cannon_TA");
		return ptr;
	}


	void Fire();
	void DoSimulatedFire();
	void PlayFullBodyAnim(const struct FName& AnimName, float Rate, float BlendIn, float BlendOut, bool bLoop);
	void SetPitch(float Pitch);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class TAGame.GFxData_LocalPlayer_TA
// 0x0075 (0x00C9 - 0x0054)
class UGFxData_LocalPlayer_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bOpenedStartMenu : 1;                             		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bCheckedStartupEvents : 1;                        		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bSaveDataLoaded : 1;                              		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bBadConnection : 1;                               		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bBallcam : 1;                                     		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bUseBallCamIndicator : 1;                         		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bAlternateNameplates : 1;                         		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bMetric : 1;                                      		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bPrimaryPlayer : 1;                               		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bPartyLeader : 1;                                 		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bIsInParty : 1;                                   		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bIsPlayerTrading : 1;                             		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bDemoBuild : 1;                                   		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bForceSplitScreenUI : 1;                          		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bPrivateMatchGameOwner : 1;                       		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bAgeRestricted : 1;                               		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bPendingIdleKick : 1;                             		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bVoteToForfeitDisabled : 1;                       		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bDisableCrossPlay : 1;                            		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bDisableContainerNotifications : 1;               		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bReplacingBot : 1;                                		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bNeedToAuthenticateName : 1;                      		// 0x0054(0x0004) (CPF_DataBinding)
	struct FString                                     SaveDataError;                                    		// 0x0058(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     OnlineError;                                      		// 0x0064(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     PlayerName;                                       		// 0x0070(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UTexture*                                    PlayerAvatarTexture;                              		// 0x007C(0x0004) (CPF_DataBinding)
	int                                                XpLevel;                                          		// 0x0080(0x0004) (CPF_DataBinding)
	struct FString                                     XPTitle;                                          		// 0x0084(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                XPTotal;                                          		// 0x0090(0x0004) (CPF_DataBinding)
	int                                                XPProgressInCurrentLevel;                         		// 0x0094(0x0004) (CPF_DataBinding)
	int                                                XPRequiredForNextLevel;                           		// 0x0098(0x0004) (CPF_DataBinding)
	int                                                Team;                                             		// 0x009C(0x0004) (CPF_DataBinding)
	float                                              CameraYaw;                                        		// 0x00A0(0x0004) (CPF_DataBinding)
	int                                                SplitScreenPosition;                              		// 0x00A4(0x0004) (CPF_DataBinding)
	int                                                ControllerId;                                     		// 0x00A8(0x0004) (CPF_DataBinding)
	int                                                LocalPlayerIndex;                                 		// 0x00AC(0x0004) (CPF_DataBinding)
	struct FName                                       LastMatchType;                                    		// 0x00B0(0x0008) (CPF_DataBinding)
	float                                              SafeZoneRatio;                                    		// 0x00B8(0x0004) (CPF_DataBinding)
	int                                                ContainerToOpenId;                                		// 0x00BC(0x0004) (CPF_DataBinding)
	class ULocalPlayer_TA*                             Player;                                           		// 0x00C0(0x0004) (CPF_Transient)
	class UGFxModal_X*                                 ModalOrphaned;                                    		// 0x00C4(0x0004) (CPF_Transient)
	unsigned char                                      OrphanedControllerId;                             		// 0x00C8(0x0001) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_LocalPlayer_TA");
		return ptr;
	}


	void HandleAuthenticatedNameChanged(class UOnlinePlayerAuthentication_X* Auth);
	void ClearContainerToOpen();
	bool HasContainerToOpen();
	bool AreDivisionsDisabled();
	void HandleCrossPlayChanged(class UProfile_TA* Profile);
	void OnExitToStartScreen(class UGFxModal_X* Modal);
	void OnPickAccount(class UGFxModal_X* Modal);
	void ShowOrphanedUserDialog(unsigned char InControllerID);
	void ShowSecondaryPlayerOrphanedModal();
	void ShowPrimaryPlayerOrphanedModal();
	void OnUserRestored(unsigned char InControllerID);
	void OnUserOrphaned(unsigned char InControllerID);
	void HandleVoteToForfeitDisabled(class APRI_TA* PRI);
	void HandlePendingIdleKickChanged(class APlayerController_TA* PC);
	void HandleCanPlayOnlineChanged(class UOnlinePlayer_X* P);
	void HandleLocalPlayerChanged(class ULocalPlayer* NewPlayer);
	void ClearPrivateMatchGameOwnerUpdated(class AGameEvent_TA* GameEvent);
	void HandlePrivateMatchGameOwnerUpdated(class AGameEvent_TA* GameEvent, class APRI_TA* NewGameOwner);
	void ChangeName(const struct FString& NewName);
	void Spectate();
	void OnJoinTeamFailed(int TeamNum);
	void OnServerChangeTeamFailed(int TeamNum);
	void ChangeTeam(int TeamIndex);
	class APRI_TA* GetPRI();
	bool GetOverlayEnabled();
	void SetCheckedStartupEvents(bool bHasChecked);
	void SetOpenedStartMenu(bool bHasBeenOpened);
	void UpdateXP(class UProfile_TA* Profile);
	void HandleXPInitialized(class UProfile_TA* Profile);
	void OnXpInitialized(int NewXP);
	void HandleSplitScreenPositionChanged(class ULocalPlayer_TA* LocalPlayer);
	class UOnlineGame_X* GetOnlineGame();
	void HandleGetAvatar(const struct FUniqueNetId& InPlayerId, class UTexture* Avatar, const struct FString& OnlinePlayerName);
	void HandleReceivedPRI(class APlayerController_X* PC);
	void HandleReceivedController(class UPlayer* PlayerRef);
	void CheckBootMessages();
	void HandlePsyWebLoginChanged(class UOnlinePlayerAuthentication_X* Auth);
	void HandleLoginStatusChanged(class UOnlinePlayer_X* OnlinePlayer);
	void UpdateCrossPlaySettings();
	void HandleProfileSet(class ULocalPlayer_TA* InLocalPlayer);
	void HandleSplitScreenTypeChanged(class UGameViewportClient_TA* GVC);
	void HandleDrawWorldFullScreenChanged(class UGameViewportClient_TA* GVC);
	void UpdateName();
	void HandleSaveDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* SaveData, class UError_X* Error);
	void UpdatePrimaryPlayer();
	void HandlePrimaryPlayerChange(class ULocalPlayer* OldPrimary, class ULocalPlayer* NewPrimary);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.CarComponent_AirControl_TA
// 0x0030 (0x0254 - 0x0224)
class ACarComponent_AirControl_TA : public ACarComponent_TA
{
public:
	struct FRotator                                    AirTorque;                                        		// 0x0224(0x000C) (CPF_Edit)
	struct FRotator                                    AirDamping;                                       		// 0x0230(0x000C) (CPF_Edit)
	float                                              ThrottleForce;                                    		// 0x023C(0x0004) (CPF_Edit)
	float                                              DampingScale;                                     		// 0x0240(0x0004) (CPF_Edit)
	float                                              BoostingTorqueScale;                              		// 0x0244(0x0004) (CPF_Edit)
	float                                              WaterPropForce;                                   		// 0x0248(0x0004) (CPF_Edit)
	float                                              DodgeDisableTimeRemaining;                        		// 0x024C(0x0004) (CPF_Transient)
	float                                              ControlScale;                                     		// 0x0250(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_AirControl_TA");
		return ptr;
	}


	void PrePhysicsStep(float DeltaTime);
	void ApplyForces(float ActiveTime);
	void OnCreated();
};


// Class TAGame.ParticleSystemComponent_TA
// 0x000C (0x031C - 0x0310)
class UParticleSystemComponent_TA : public UParticleSystemComponent
{
public:
	struct FVector                                     PreviewFakeVelocity;                              		// 0x0310(0x000C) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ParticleSystemComponent_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_Attachment_TA
// 0x0014 (0x0084 - 0x0070)
class UProductAsset_Attachment_TA : public UProductAsset_TA
{
public:
	TArray<struct FProductAttachment>                  Attachments;                                      		// 0x0070(0x000C) (CPF_Edit, CPF_Component, CPF_NeedCtorLink)
	struct FName                                       CustomAnimName;                                   		// 0x007C(0x0008) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Attachment_TA");
		return ptr;
	}


	void ModifyThumbnailMesh(class UMeshComponent* Component, struct FProductAttachment* Attachment, TArray<class UProductAttribute_TA*>* Attributes);
	class USkeletalMeshComponent* GetSceneSkeletalMesh(class UThumbnailScene_TA* Scene, int AttachmentIdx);
	void ModifyThumbnailScene(class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* Attributes);
};


// Class TAGame.CarLoadout_TA
// 0x0000 (0x0068 - 0x0068)
class UCarLoadout_TA : public UProductLoader_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarLoadout_TA");
		return ptr;
	}


	void OnAllProductsLoaded();
	void Init(class ACar_TA* InCar, struct FClientLoadoutData* NewLoadout);
};


// Class TAGame.TeamIndicator_TA
// 0x0020 (0x008C - 0x006C)
class UTeamIndicator_TA : public UActorComponent_X
{
public:
	class UParticleSystem*                             ParticleTemplate;                                 		// 0x006C(0x0004) (CPF_Edit)
	TArray<struct FVector>                             TeamColors;                                       		// 0x0070(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class AVehicle_TA*                                 Vehicle;                                          		// 0x007C(0x0004) (CPF_Transient)
	TArray<struct FTeamVehicleIndicator>               Indicators;                                       		// 0x0080(0x000C) (CPF_Transient, CPF_Component, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TeamIndicator_TA");
		return ptr;
	}


	void RemoveIndicator(int IndicatorIdx);
	void Tick(float DeltaTime);
	void Detached();
	void Attached();
};


// Class TAGame.DemolishExplosion_TA
// 0x001C (0x0214 - 0x01F8)
class ADemolishExplosion_TA : public AExplosion_X
{
public:
	float                                              PartRandomAngle;                                  		// 0x01F8(0x0004) (CPF_Edit)
	float                                              PartRandomSpeedMin;                               		// 0x01FC(0x0004) (CPF_Edit)
	float                                              PartRandomSpeedMax;                               		// 0x0200(0x0004) (CPF_Edit)
	float                                              PartRandomSpeedMinZ;                              		// 0x0204(0x0004) (CPF_Edit)
	float                                              PartRandomSpeedMaxZ;                              		// 0x0208(0x0004) (CPF_Edit)
	float                                              PartRandomAngularSpeed;                           		// 0x020C(0x0004) (CPF_Edit)
	float                                              BodyLifetime;                                     		// 0x0210(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DemolishExplosion_TA");
		return ptr;
	}


	struct FVector GetRandomAngularVelocity();
	struct FVector GetRandomVelocity(const struct FRotator& AttackerRotation);
	void SpawnParts(const struct FDemolishData& Data);
	void Init(const struct FDemolishData& Data);
};


// Class TAGame.CarComponent_FlipCar_TA
// 0x0010 (0x0234 - 0x0224)
class ACarComponent_FlipCar_TA : public ACarComponent_TA
{
public:
	float                                              FlipCarImpulse;                                   		// 0x0224(0x0004) (CPF_Edit)
	float                                              FlipCarTorque;                                    		// 0x0228(0x0004) (CPF_Edit)
	float                                              FlipCarTime;                                      		// 0x022C(0x0004) (CPF_Edit, CPF_Net)
	unsigned long                                      bFlipRight : 1;                                   		// 0x0230(0x0004) (CPF_Net, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_FlipCar_TA");
		return ptr;
	}


	void ApplyForces(float ActiveTime);
	bool CanActivate();
	void OnCreated();
};


// Class TAGame.CarComponent_DoubleJump_TA
// 0x0008 (0x022C - 0x0224)
class ACarComponent_DoubleJump_TA : public ACarComponent_TA
{
public:
	float                                              JumpImpulse;                                      		// 0x0224(0x0004) (CPF_Edit)
	float                                              ImpulseScale;                                     		// 0x0228(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_DoubleJump_TA");
		return ptr;
	}


	void ApplyForces(float ActiveTime);
	void OnCreated();
};


// Class TAGame.CarTrajectoryComponent_TA
// 0x004C (0x00B8 - 0x006C)
class UCarTrajectoryComponent_TA : public UActorComponent_X
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x006C(0x0004) (CPF_Transient)
	TArray<struct FVector>                             Points;                                           		// 0x0070(0x000C) (CPF_NeedCtorLink)
	int                                                TotalDrawPoints;                                  		// 0x007C(0x0004) (CPF_Const)
	int                                                FramesBetweenPoints;                              		// 0x0080(0x0004) (CPF_Const)
	float                                              LastAngle;                                        		// 0x0084(0x0004) (CPF_Transient)
	struct FRotator                                    VelocityRot;                                      		// 0x0088(0x000C) (CPF_Transient)
	struct FVector                                     CurrentVelocity;                                  		// 0x0094(0x000C) (CPF_Transient)
	struct FVector                                     LastRotateAxis;                                   		// 0x00A0(0x000C) (CPF_Transient)
	struct FVector                                     LastVelocity;                                     		// 0x00AC(0x000C) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarTrajectoryComponent_TA");
		return ptr;
	}


	float GetPointInterpSpeed(int PointIndex);
	void Tick(float DeltaTime);
	void Attached();
	void SetEnabled(bool bEnable);
};


// Class TAGame.Car_Season_TA
// 0x0000 (0x08E4 - 0x08E4)
class ACar_Season_TA : public ACar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Car_Season_TA");
		return ptr;
	}


	void HandleLogoChanged(class ATeam_TA* Team);
	void UpdateTeamLogo();
	void OnTeamPaintChanged();
};


// Class TAGame.ProductAsset_Boost_TA
// 0x000C (0x007C - 0x0070)
class UProductAsset_Boost_TA : public UProductAsset_TA
{
public:
	class AFXActor_X*                                  FXActor;                                          		// 0x0070(0x0004) (CPF_Edit)
	float                                              PreviewFrontWheelSpinSpeed;                       		// 0x0074(0x0004) (CPF_Edit)
	float                                              PreviewBackWheelSpinSpeed;                        		// 0x0078(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Boost_TA");
		return ptr;
	}


	struct FString CheckCanSave();
};


// Class TAGame.CarPreviewAnim_TA
// 0x005C (0x00C8 - 0x006C)
class UCarPreviewAnim_TA : public UActorComponent_X
{
public:
	class UProductSlot_TA*                             Slot;                                             		// 0x006C(0x0004) (CPF_Edit)
	TArray<struct FPreviewAnimKeyframe>                KeyFrames;                                        		// 0x0070(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	float                                              Delay;                                            		// 0x007C(0x0004) (CPF_Edit)
	class ACarPreviewActor_TA*                         PreviewActor;                                     		// 0x0080(0x0004) (CPF_Transient)
	class UPrimitiveComponent*                         Component;                                        		// 0x0084(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	struct FPreviewAnimKeyframe                        FinalKeyframe;                                    		// 0x0088(0x0034) (CPF_Transient)
	float                                              KeyframeTime;                                     		// 0x00BC(0x0004) (CPF_Transient)
	int                                                KeyframeIndex;                                    		// 0x00C0(0x0004) (CPF_Transient)
	unsigned long                                      bComponentWasAttached : 1;                        		// 0x00C4(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarPreviewAnim_TA");
		return ptr;
	}


	void Tick(float DeltaTime);
	void Start(class ACarPreviewActor_TA* InOwner, class UPrimitiveComponent* InComponent);
};


// Class TAGame.OnlineProductStore_TA
// 0x000C (0x0048 - 0x003C)
class UOnlineProductStore_TA : public UObject
{
public:
	TArray<class UOnlineProductStoreSet_TA*>           Sets;                                             		// 0x003C(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineProductStore_TA");
		return ptr;
	}


	class UOnlineProduct_TA* FindProduct();
	void RemoveSet(class UOnlineProductStoreSet_TA* Set);
	class UOnlineProductStoreSet_TA* CreateSet();
	class UOnlineProductStore_TA* STATIC_GetInstance();
};


// Class TAGame.TurnTableActor_TA
// 0x0058 (0x0284 - 0x022C)
class ATurnTableActor_TA : public ASkeletalMeshActor
{
public:
	unsigned long                                      bIsSwapping : 1;                                  		// 0x022C(0x0004) (CPF_Transient)
	unsigned long                                      bInReveal : 1;                                    		// 0x022C(0x0004) (CPF_Transient)
	unsigned long                                      bCarLocked : 1;                                   		// 0x022C(0x0004) (CPF_Transient)
	float                                              TurntableDirection;                               		// 0x0230(0x0004) (CPF_Transient)
	class UAkSoundCue*                                 SFX_Rotating;                                     		// 0x0234(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 SFX_Reversing;                                    		// 0x0238(0x0004) (CPF_Edit)
	float                                              RotationSpeed;                                    		// 0x023C(0x0004)
	struct FName                                       SwapCarName;                                      		// 0x0240(0x0008) (CPF_Edit)
	struct FName                                       LiftItemName;                                     		// 0x0248(0x0008) (CPF_Edit)
	struct FName                                       LockCarName;                                      		// 0x0250(0x0008) (CPF_Edit)
	struct FName                                       TriggerRevealCompleteName;                        		// 0x0258(0x0008) (CPF_Edit)
	int                                                DelayedPreviewSlot;                               		// 0x0260(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventCarSwapComplete__Delegate;                 		// 0x0264(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0264(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventRevealComplete__Delegate;                  		// 0x0274(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0274(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TurnTableActor_TA");
		return ptr;
	}


	struct FRotator GetDiscRotation();
	void DontStartSound();
	void DontPlayReverse();
	void StopRotatingSound();
	void SetDiscRotation(float InDirectionMag, float DeltaTime);
	bool CanSubstituteCars();
	void LockCar();
	void OnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void TriggerRevealComplete();
	void DelayPreviewSlot(int SlotIndex);
	void DoReveal();
	void TriggerNamedEvent(const struct FName& NamedEvent);
	void SwapCars(bool bReverse);
	void EventRevealComplete(int SlotIndex);
	void EventCarSwapComplete();
};


// Class TAGame.OnlineGameParty_TA
// 0x00B4 (0x0378 - 0x02C4)
class UOnlineGameParty_TA : public UOnlineGameParty_X
{
public:
	TArray<struct FPartyMemberLoadout>                 PartyLoadouts;                                    		// 0x02C4(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FStoredPartyMessage>                 StoredPartyMessages;                              		// 0x02D0(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	int                                                MaxPartyMessages;                                 		// 0x02DC(0x0004)
	struct FString                                     PlayerJoinPartyString;                            		// 0x02E0(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     PlayerLeavePartyString;                           		// 0x02EC(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     PlayerNewLeaderPartyString;                       		// 0x02F8(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	class UProductAssetCache_TA*                       AssetCache;                                       		// 0x0304(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	struct FScriptDelegate                             __EventPartyMemberLoadoutChange__Delegate;        		// 0x0308(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0308(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPartyMemberLoadoutRemoved__Delegate;       		// 0x0318(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0318(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTradeProductUpdate__Delegate;              		// 0x0328(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0328(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTradeVerify__Delegate;                     		// 0x0338(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x0338(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTradeVerifyTimeOut__Delegate;              		// 0x0348(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x0348(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTradePlayerError__Delegate;                		// 0x0358(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData05[0x4];                               		// 0x0358(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTradePlayerComplete__Delegate;             		// 0x0368(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData06[0x4];                               		// 0x0368(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameParty_TA");
		return ptr;
	}


	void RepopulateChatHistory();
	void HandleChatMessage(class UOnlineMessageComponent_X* Component, class UObject* Message);
	void SendPartyLobbyMessage(const struct FString& Message);
	void HandleTradePlayerComplete(class URPC_ProductsTradePlayerStatus_TA* RPC);
	void CheckTradeStatus();
	void HandleStartTradePlayerComplete(class URPC_ProductsTradePlayer_TA* RPC);
	void SendTradeToBackEnd();
	void HandleVerifyTrade(class URPC_ProductsLoadoutGet_TA* RPC);
	void HandleVerifyTradeTimeOut();
	void SendVerifyTradeToBackEnd();
	void HandleTradeProductUpdate(class UOnlineMessageComponent_X* Component, class UObject* Message);
	void SetPartyMessageHandlerTradeProductUpdate(bool bAddHandler);
	void TradeProductUpdate(const struct FOnlineProductData& ProductData, bool bAddProduct);
	bool IsProcessingTrade();
	bool CanAcceptTrade();
	void UpdateOnlineProducts(struct FPartyMemberLoadout* Loadout);
	void HandleDisableCrossPlayChanged(class UProfile_TA* P);
	bool UseGroupMMR();
	void UpdateAssetCache(int PartyMemberIdx);
	void HandleGameEventFinished(class AGameEvent_TA* GameEvent);
	bool WantsToFollowTheLeaderOutOfGame();
	int BuildMatchmakingRestrictions();
	void HandlePrimaryPlayerSet(class APlayerController_Menu_TA* PC);
	void BroadcastPlayer(const struct FPartyMemberLoadout& MemberLoadout);
	struct FPartyMemberLoadout CreatePartyMemberLoadout(class ULocalPlayer_TA* Player);
	void BroadcastAllLocalPlayers();
	void HandleLoadoutMessage(class UOnlineMessageComponent_X* Component, class UObject* Message);
	void HandlePreviewTeamChange(class UProfile_TA* InProfile, int InPreviewTeamIndex);
	void BroadcastPendingLocalPlayerLoadouts();
	void HandleLoadoutChange(class UProfile_TA* InProfile, class ULoadout_TA* Loadout);
	void RemovePartyMemberByLocalPlayer(class ULocalPlayer* Player);
	void HandleNewLeader(class UOnlineMessageComponent_X* Component, class UObject* Message);
	bool SetLeader(const struct FUniqueNetId& NewLeader);
	void OnNewLobby();
	void RemovePartyMemberByID(const struct FUniqueNetId& MemberId);
	void HandleLocalPlayerLeave(class ULocalPlayer* Player);
	void OnEditExistingPartyMember(int MemberIdx);
	void OnAddNewPartyMember(int MemberIdx);
	void RefreshLoadouts(int MemberIdx);
	void ClearPartyChat();
	void AddPartyServiceLobbyMessage(const struct FString& Message);
	int LocalPlayerSort(const struct FPartyMemberLoadout& Left, const struct FPartyMemberLoadout& Right);
	void SetLoadout(class ULocalPlayer* Player, struct FPartyMemberLoadout* Loadout);
	void HandleProfileSet(class ULocalPlayer_TA* P);
	void OnInit();
	void EventTradePlayerComplete(class UOnlineGameParty_TA* PartyObject, class URPC_ProductsTradePlayerStatus_TA* RPC);
	void EventTradePlayerError(class UOnlineGameParty_TA* PartyObject, class URPC_TA* RPC);
	void EventTradeVerifyTimeOut(class UOnlineGameParty_X* PartyObject);
	void EventTradeVerify(class UOnlineGameParty_X* PartyObject, TArray<class UOnlineProduct_TA*> ProductData);
	void EventTradeProductUpdate(class UOnlineGameParty_TA* PartyObject, const struct FOnlineProductData& ProductData, bool bAddProduct);
	void EventPartyMemberLoadoutRemoved(int MemberIndex);
	void EventPartyMemberLoadoutChange(int MemberIndex);
};


// Class TAGame.PlayerController_Menu_TA
// 0x0030 (0x0680 - 0x0650)
class APlayerController_Menu_TA : public APlayerControllerBase_TA
{
public:
	TArray<class UPlayerInputSequence_TA*>             InputSequences;                                   		// 0x0650(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	unsigned long                                      bExecutedKonamiCode : 1;                          		// 0x065C(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventKonamiCode__Delegate;                      		// 0x0660(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0660(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventBecomePrimaryPlayer__Delegate;             		// 0x0670(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0670(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerController_Menu_TA");
		return ptr;
	}


	void ShowAccountPicker();
	void MusicNextTrack();
	void KonamiCode();
	void PlayerTick(float DeltaTime);
	void ClientSetOnlineStatus();
	void RemoveInputSequence(const struct FName& SequenceName);
	void RemoveSplashScreenSequences();
	void Destroyed();
	int GetInputSequencePriority(class UPlayerInputSequence_TA* Sequence);
	void InitProfileSettings(bool bJustReceivedPlayer);
	void ReceivedPlayer();
	void EventBecomePrimaryPlayer(class APlayerController_Menu_TA* Primary);
	void EventKonamiCode();
};


// Class TAGame.OnlineProductStoreSet_TA
// 0x0040 (0x007C - 0x003C)
class UOnlineProductStoreSet_TA : public UObject
{
public:
	class ULocalPlayer*                                Player;                                           		// 0x003C(0x0004)
	struct FUniqueNetId                                PlayerID;                                         		// 0x0040(0x0030)
	TArray<class UOnlineProduct_TA*>                   Products;                                         		// 0x0070(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineProductStoreSet_TA");
		return ptr;
	}


	void ClearProducts();
	void RemoveProduct(class UOnlineProduct_TA* Product);
	void AddProduct(class UOnlineProduct_TA* Product);
	void SetProducts(TArray<class UOnlineProduct_TA*>* InProducts);
	class UOnlineProduct_TA* FindProduct();
	struct FUniqueNetId GetPlayerID();
	void InitRemote(const struct FUniqueNetId& InPlayerId);
	void InitLocal(class ULocalPlayer* InPlayer);
};


// Class TAGame.CarThumbnailActor_TA
// 0x0004 (0x01F0 - 0x01EC)
class ACarThumbnailActor_TA : public AActor
{
public:
	class UCarMeshComponent_TA*                        Mesh;                                             		// 0x01EC(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarThumbnailActor_TA");
		return ptr;
	}

};


// Class TAGame.CheatManagerBase_TA
// 0x002C (0x00BC - 0x0090)
class UCheatManagerBase_TA : public UCheatManager_X
{
public:
	int                                                RemainingItemsToGive;                             		// 0x0090(0x0004) (CPF_Transient)
	int                                                TotalAmountItemsAttempted;                        		// 0x0094(0x0004) (CPF_Transient)
	int                                                TotalRequested;                                   		// 0x0098(0x0004) (CPF_Transient)
	float                                              ProfileGameTimeSlice;                             		// 0x009C(0x0004) (CPF_Transient)
	struct FString                                     PendingReplayFileName;                            		// 0x00A0(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FReplayDuplicationParams                    PendingReplayDuplication;                         		// 0x00AC(0x0008) (CPF_Transient)
	unsigned char                                      UnknownData00[0x8];                               		// 0x00B4(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.CheatManagerBase_TA.LastEquippedIntanceID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CheatManagerBase_TA");
		return ptr;
	}

};


// Class TAGame.CheatManager_TA
// 0x000C (0x00C8 - 0x00BC)
class UCheatManager_TA : public UCheatManagerBase_TA
{
public:
	class AInputRecorder_TA*                           InputRecorder;                                    		// 0x00BC(0x0004) (CPF_Transient)
	struct FColor                                      DebugColor;                                       		// 0x00C0(0x0004) (CPF_Transient)
	int                                                TestClubColor;                                    		// 0x00C4(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CheatManager_TA");
		return ptr;
	}

};


// Class TAGame.Constraint2D_TA
// 0x0000 (0x0208 - 0x0208)
class AConstraint2D_TA : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Constraint2D_TA");
		return ptr;
	}

};


// Class TAGame.CrowdActor_TA
// 0x004C (0x0238 - 0x01EC)
class ACrowdActor_TA : public AActor
{
public:
	class UAkSoundCue*                                 CrowdSound;                                       		// 0x01EC(0x0004) (CPF_Edit)
	class UCrowdActorSettings_TA*                      Settings;                                         		// 0x01F0(0x0004) (CPF_Edit)
	class AGameEvent_Soccar_TA*                        GameEvent;                                        		// 0x01F4(0x0004) (CPF_Net, CPF_Transient)
	float                                              TargetIdleNoise;                                  		// 0x01F8(0x0004) (CPF_Transient)
	float                                              TargetIdleNoiseRate;                              		// 0x01FC(0x0004) (CPF_Transient)
	float                                              CurrentIdleNoise;                                 		// 0x0200(0x0004) (CPF_Transient)
	float                                              ModifiedNoise;                                    		// 0x0204(0x0004) (CPF_Net, CPF_Transient)
	float                                              CurrentNoise;                                     		// 0x0208(0x0004) (CPF_Transient)
	TArray<struct FCrowdNoiseModifierInstance>         NoiseModifiers;                                   		// 0x020C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FCrowdNoiseModifierInstance                 TimeAlmostOutNoiseInstance;                       		// 0x0218(0x0008) (CPF_Transient)
	float                                              CurrentBallGoalDistanceNoise;                     		// 0x0220(0x0004) (CPF_Transient)
	class UAkSoundCue*                                 ReplicatedOneShotSound;                           		// 0x0224(0x0004) (CPF_Net, CPF_Transient)
	int                                                ReplicatedCountDownNumber;                        		// 0x0228(0x0004) (CPF_Net, CPF_Transient)
	int                                                ReplicatedRoundCountDownNumber;                   		// 0x022C(0x0004) (CPF_Net, CPF_Transient)
	float                                              LastBallHitNoiseTime;                             		// 0x0230(0x0004) (CPF_Transient)
	int                                                LastBallHitNoiseLevel;                            		// 0x0234(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CrowdActor_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void HandleCarTouch(class ABall_TA* Ball, class ACar_TA* HitCar, TEnumAsByte<enum class EBallHitType> HitType);
	void HandleBallRemoved(class AGameEvent_Soccar_TA* G, class ABall_TA* Ball);
	void HandleBallAdded(class AGameEvent_Soccar_TA* G, class ABall_TA* Ball);
	void HandleGaveStat(class AStatFactory_TA* Factory, class APRI_TA* ToPRI, class UStatEvent_TA* StatEvent, class ABall_TA* Ball, int BallHitIndex, class APRI_TA* Victim);
	void HandleCountDownTimeUpdated(class AGameEvent_TA* InGameEvent, int Seconds);
	void HandleGameTimeUpdated(class AGameEvent_Soccar_TA* InGameEvent);
	void UpdateTimeAlmostOutNoiseModifier(class AGameEvent_Soccar_TA* InGameEvent);
	void HandleOvertimeUpdated(class AGameEvent_Soccar_TA* InGameEvent);
	void HandleGameStateChanged(class AGameEvent_TA* InGameEvent);
	void PlayRoundCountDownSound(int CountDownNumber);
	void PlayCountDownSound(int CountDownNumber);
	void HandleEndGameCountDown(class AGameEvent_Soccar_TA* G, int TimeRemaining);
	void HandleStingerForfeit(class AGameEvent_Soccar_TA* G);
	void HandleStingerLose(class AGameEvent_Soccar_TA* G);
	void HandleStingerWin(class AGameEvent_Soccar_TA* G);
	void Tick(float DeltaTime);
	void TickBallGoalDistance();
	void SetNoise(float NewNoise);
	void TickNoise(float DeltaTime, float TargetNoise);
	void ClearOneShotSound();
	void PlayOneShotSound(class UAkSoundCue* Sound);
	void AddNoiseModifier(class UCrowdNoiseModifier_TA* Modifier);
	struct FCrowdNoiseModifierInstance CreateNoiseModifierInstance(class UCrowdNoiseModifier_TA* Modifier);
	void TickNoiseModifiers(float DeltaTime);
	void TickIdleNoise(float DeltaTime);
	void UpdateTargetIdleNoise();
	void InitClientListeners(class AGameEvent_Soccar_TA* InGameEvent);
	void Init(class AGameEvent_Soccar_TA* InGameEvent);
	void Destroyed();
	void PostBeginPlay();
	float GetRandomValue(const struct FRandomRange& Range);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class TAGame.StatFactory_TA
// 0x010C (0x0304 - 0x01F8)
class AStatFactory_TA : public AStatFactoryBase_TA
{
public:
	struct FStatEventCollection                        Events;                                           		// 0x01F8(0x00A4) (CPF_Edit, CPF_Const)
	TArray<struct FBallInfo>                           BallCache;                                        		// 0x029C(0x000C) (CPF_Transient, CPF_Component, CPF_NeedCtorLink)
	float                                              GoalSizeFudge;                                    		// 0x02A8(0x0004) (CPF_Edit)
	float                                              ShotMaxTime;                                      		// 0x02AC(0x0004) (CPF_Edit)
	float                                              ShotArriveTime;                                   		// 0x02B0(0x0004) (CPF_Edit)
	float                                              ShotMaxDistance;                                  		// 0x02B4(0x0004) (CPF_Edit)
	float                                              EpicSaveArriveTime;                               		// 0x02B8(0x0004) (CPF_Edit)
	float                                              EpicSaveMinSpeed;                                 		// 0x02BC(0x0004) (CPF_Edit)
	float                                              RedZoneDistance;                                  		// 0x02C0(0x0004) (CPF_Edit)
	float                                              JuggleMinSpeed;                                   		// 0x02C4(0x0004) (CPF_Edit)
	float                                              BulletHitSpeed;                                   		// 0x02C8(0x0004) (CPF_Edit)
	float                                              AerialHitHeight;                                  		// 0x02CC(0x0004) (CPF_Edit)
	float                                              AerialHitMinRelSpeed;                             		// 0x02D0(0x0004) (CPF_Edit)
	float                                              BicycleSpinSpeed;                                 		// 0x02D4(0x0004) (CPF_Edit)
	float                                              LongGoalDistance;                                 		// 0x02D8(0x0004) (CPF_Edit)
	int                                                HatTrickThreshold;                                		// 0x02DC(0x0004) (CPF_Edit)
	int                                                PlaymakerThreshold;                               		// 0x02E0(0x0004) (CPF_Edit)
	int                                                SaviorThreshold;                                  		// 0x02E4(0x0004) (CPF_Edit)
	int                                                DemolitionThreshold;                              		// 0x02E8(0x0004) (CPF_Edit)
	unsigned long                                      bGaveFirstTouch : 1;                              		// 0x02EC(0x0004) (CPF_Transient)
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x02F0(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventGaveStat__Delegate;                        		// 0x02F4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x02F4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatFactory_TA");
		return ptr;
	}


	void OnMatchEnded(class AGameEvent_Soccar_TA* SoccarEvent);
	void DetermineTouchCounts(class AGameEvent_Soccar_TA* SoccarEvent);
	void DeterminePickupCounts(class AGameEvent_Soccar_TA* SoccarEvent);
	void OnActiveRoundChanged(class AGameEvent_Soccar_TA* InGameEvent);
	void HandleBumpedCar(class ACar_TA* Car, class ACar_TA* HitCar);
	void OnCarDemolished(class ACar_TA* Victim, const struct FDemolishData& Data);
	void OnGoalScored(class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIndex);
	void OnCarTouch(class ABall_TA* Ball, class ACar_TA* HitCar, TEnumAsByte<enum class EBallHitType> HitType);
	void OnBallHitWorld(class ABall_TA* Ball, const struct FVector& HitLoc, const struct FVector& HitNormal);
	void TickBalls(float DeltaTime);
	void Tick(float DeltaTime);
	void UpdateRedZone(int BallIdx);
	class UGoal_TA* CalculateShotGoal(class UGoal_TA* GoalToTest, class ABall_TA* Ball, float ArriveTime);
	void UpdateShotGoal(int BallIdx);
	class UGoal_TA* FindShotGoal(class ABall_TA* Ball);
	bool IsBulletHit(const struct FBallHitInfo& Hit);
	bool IsBackwardsHit(const struct FBallHitInfo& Hit);
	float GetDeltaSpeed(const struct FBallHitInfo& Hit);
	bool IsTurtleHit(const struct FBallHitInfo& Hit);
	bool IsJuggleHit(const struct FBallHitInfo& Hit);
	bool IsBicycleHit(const struct FBallHitInfo& Hit);
	bool IsAerialHit(const struct FBallHitInfo& Hit);
	bool IsInRedZone(class UGoal_TA* Goal, const struct FVector& BallLocation);
	bool IsEpicSave(class ABall_TA* Ball, const struct FBallHitInfo& Hit, class UGoal_TA* Goal);
	float GetHitDistanceToGoal(class ABall_TA* Ball, const struct FBallHitInfo& Hit, class UGoal_TA* Goal);
	void BroadcastStatTickerEvent(class APRI_TA* Receiver, class APRI_TA* Victim, class UStatEvent_TA* StatEvent);
	void GiveScore(class APRI_TA* ToPRI, class UStatEvent_TA* StatEvent, class ABall_TA* Ball, int BallHitIndex, class APRI_TA* Victim, int Count);
	void UnregisterCar(class APawn_X* Car);
	void RegisterCar(class ACar_TA* Car);
	void UnregisterBall(class APawn_X* Ball);
	void RegisterBall(class ABall_TA* Ball);
	int GetBallIndex(class ABall_TA* Ball);
	void SetGameEvent(class AGameEvent_Soccar_TA* InGameEvent);
	void EventGaveStat(class AStatFactory_TA* Factory, class APRI_TA* ToPRI, class UStatEvent_TA* StatEvent, class ABall_TA* Ball, int BallHitIndex, class APRI_TA* Victim);
};


// Class TAGame.CrowdManager_TA
// 0x002C (0x0218 - 0x01EC)
class ACrowdManager_TA : public AActor
{
public:
	TArray<class ACrowdActor_TA*>                      CrowdActors;                                      		// 0x01EC(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UCrowdActorSettings_TA*                      Settings;                                         		// 0x01F8(0x0004) (CPF_Edit)
	unsigned long                                      bInitialized : 1;                                 		// 0x01FC(0x0004) (CPF_Transient)
	TArray<class ACrowdActor_TA*>                      RandomChantCrowdActors;                           		// 0x0200(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class UAkSoundCue*                                 ReplicatedGlobalOneShotSound;                     		// 0x020C(0x0004) (CPF_Net, CPF_Transient)
	float                                              DefenseZoneTime;                                  		// 0x0210(0x0004) (CPF_Transient)
	class AGameEvent_Soccar_TA*                        GameEvent;                                        		// 0x0214(0x0004) (CPF_Net, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CrowdManager_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void TimerUpdateDefenseChant();
	void StartTimerDefenseChant();
	void PlayRandomChant();
	void SetRandomChantTimer();
	void PlayMatchEndedEncore();
	void HandleMatchEnded(class AGameEvent_Soccar_TA* G);
	void HandleOvertimeUpdated(class AGameEvent_Soccar_TA* InGameEvent);
	void HandleGameStateChanged(class AGameEvent_TA* G);
	void ClearGlobalOneShotSound();
	void PlayGlobalOneShotSound(class UAkSoundCue* Sound);
	void Init(class AGameEvent_Soccar_TA* InGameEvent);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class TAGame.MatchType_TA
// 0x0010 (0x004C - 0x003C)
class UMatchType_TA : public UObject
{
public:
	class AGameEvent_TA*                               GameEvent;                                        		// 0x003C(0x0004)
	unsigned long                                      bPreAssignedTeams : 1;                            		// 0x0040(0x0004) (CPF_Edit)
	int                                                WaitForPlayersTime;                               		// 0x0044(0x0004)
	float                                              WaitingForPlayersStartTime;                       		// 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_TA");
		return ptr;
	}


	bool ChooseTeam(int TeamIndex, class APlayerController_TA* Player);
	bool CanRestartPlayer(class AController* NewPlayer);
	bool AutoSelectTeam(class AController* NewPlayer);
	class ATeam_TA* PickTeam(class AController* C);
	bool CanCheckForBannedPlayers();
	bool ShouldSubmitMatchComplete();
	bool UseCustomMatchSettings();
	bool CanIncreaseMaxTeamSize();
	void OnStartWaitingForPlayers();
	bool IsOnlineMultiplayer();
	bool ShouldSetGameOwner();
	bool CanCheckForForfeit();
	bool ShouldCancelMatch();
	bool ShouldStartMatch();
	struct FName GetMatchTypeName();
	bool RecordPlayedMap();
	bool AllowSpectators();
	void OnPlayerAddedToTeam();
	bool CanRematchVote();
	bool CanUpdateStats();
	int GetMaxTeamSize();
	bool CanChangeTeam();
	bool GiveExtraXP();
	bool CanIdleKick();
	void OnInitGameEvent();
	class UOnlineGameLanServer_X* STATIC_GetOnlineGameLanServer();
	class UOnlineGameDedicatedServer_TA* GetOnlineGameDedicatedServer();
	class UOnlineGame_Base_X* GetOnlineGame();
	bool AllPlayersHaveACar();
	struct FCustomMatchSettings GetCustomMatchSettings();
	void Init(class AGameEvent_TA* InGameEvent, const struct FString& Options);
};


// Class TAGame.MatchType_Public_TA
// 0x0000 (0x004C - 0x004C)
class UMatchType_Public_TA : public UMatchType_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_Public_TA");
		return ptr;
	}


	bool ChooseTeam(int TeamIndex, class APlayerController_TA* Player);
	bool CanRestartPlayer(class AController* NewPlayer);
	bool AutoSelectTeam(class AController* NewPlayer);
	bool CanCheckForBannedPlayers();
	bool ShouldSubmitMatchComplete();
	bool IsOnlineMultiplayer();
	bool CanCheckForForfeit();
	bool CanUpdateStats();
	bool CanRematchVote();
	bool CanIdleKick();
	class ATeam_TA* PickTeamFromReservations(class AController* C);
	class ATeam_TA* PickTeam(class AController* C);
	int GetMaxTeamSize();
	bool ShouldCancelMatch();
	bool ShouldStartMatch();
	void OnStartWaitingForPlayers();
	bool GiveExtraXP();
	struct FName GetMatchTypeName();
};


// Class TAGame.MatchType_Private_TA
// 0x0008 (0x0054 - 0x004C)
class UMatchType_Private_TA : public UMatchType_Public_TA
{
public:
	unsigned long                                      bOnePlayerSelectedTeam : 1;                       		// 0x004C(0x0004) (CPF_Transient)
	int                                                LargestMaxTeamSize;                               		// 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_Private_TA");
		return ptr;
	}


	class ATeam_TA* PickTeamFromReservations(class AController* C);
	bool CanIncreaseMaxTeamSize();
	bool UseCustomMatchSettings();
	bool ShouldSetGameOwner();
	bool AllowSpectators();
	bool RecordPlayedMap();
	bool ShouldSubmitMatchComplete();
	void OnStartWaitingForPlayers();
	bool CanCheckForForfeit();
	bool ShouldCancelMatch();
	bool CanRematchVote();
	bool CanUpdateStats();
	bool GiveExtraXP();
	bool CanIdleKick();
	class ATeam_TA* PickTeam(class AController* C);
	bool CanRestartPlayer(class AController* NewPlayer);
	bool AutoSelectTeam(class AController* NewPlayer);
	int GetMaxTeamSize();
	bool ChooseTeam(int TeamIndex, class APlayerController_TA* Player);
	bool CanJoinATeam();
	struct FName GetMatchTypeName();
	bool CanChangeTeam();
	void OnPlayerAddedToTeam();
	bool ShouldStartMatch();
	void OnInitGameEvent();
};


// Class TAGame.MatchType_Offline_TA
// 0x0000 (0x0054 - 0x0054)
class UMatchType_Offline_TA : public UMatchType_Private_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_Offline_TA");
		return ptr;
	}


	bool IsOnlineMultiplayer();
	struct FCustomMatchSettings GetCustomMatchSettings();
	struct FName GetOfflinePlaylistName(class AGameEvent_TA* InGameEvent, const struct FString& Options);
	void OnInitGameEvent();
	struct FName GetMatchTypeName();
	void Init(class AGameEvent_TA* InGameEvent, const struct FString& Options);
};


// Class TAGame.MatchType_Tutorial_TA
// 0x0000 (0x0054 - 0x0054)
class UMatchType_Tutorial_TA : public UMatchType_Offline_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_Tutorial_TA");
		return ptr;
	}


	struct FCustomMatchSettings GetCustomMatchSettings();
	struct FName GetOfflinePlaylistName(class AGameEvent_TA* InGameEvent, const struct FString& Options);
	int GetMaxTeamSize();
	struct FName GetMatchTypeName();
};


// Class TAGame.DebugHelpMenu_TA
// 0x0030 (0x00B8 - 0x0088)
class UDebugHelpMenu_TA : public UInteraction
{
public:
	float                                              CategoryTextScale;                                		// 0x0088(0x0004) (CPF_Edit)
	float                                              ItemTextScale;                                    		// 0x008C(0x0004) (CPF_Edit)
	float                                              KeyTextScale;                                     		// 0x0090(0x0004) (CPF_Edit)
	TArray<struct FDebugCategory>                      HelpCategories;                                   		// 0x0094(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	int                                                SelectedCategoryIdx;                              		// 0x00A0(0x0004) (CPF_Transient)
	int                                                SelectedItemIdx;                                  		// 0x00A4(0x0004) (CPF_Transient)
	float                                              ItemsWidth;                                       		// 0x00A8(0x0004) (CPF_Transient)
	float                                              ItemsHeight;                                      		// 0x00AC(0x0004) (CPF_Transient)
	float                                              Fade;                                             		// 0x00B0(0x0004) (CPF_Transient)
	unsigned long                                      bClosing : 1;                                     		// 0x00B4(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DebugHelpMenu_TA");
		return ptr;
	}


	void Close();
	void ExecuteItem(int CatIdx, int ItemIdx);
	bool HandleInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<enum class EInputEvent> EventType, float AmountDepressed, bool bGamepad);
	void DrawItem(class UCanvas* C, int CategoryIdx, int ItemIdx);
	void DrawCategory(class UCanvas* C, int CategoryIdx);
	void PostRender(class UCanvas* C);
	void BuildHelpItems();
	int GetCategoryIndex(const struct FString& CategoryName);
	bool GetHelpValues(const struct FString& Cmd, struct FString* Command, struct FString* Category, struct FString* Description);
};


// Class TAGame.DebugInput_TA
// 0x0000 (0x0270 - 0x0270)
class UDebugInput_TA : public UPlayerInput
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DebugInput_TA");
		return ptr;
	}

};


// Class TAGame.DecalBlockingActor_TA
// 0x0000 (0x0204 - 0x0204)
class ADecalBlockingActor_TA : public AStaticMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DecalBlockingActor_TA");
		return ptr;
	}

};


// Class TAGame.DynamicMeshActor_TA
// 0x0004 (0x01F0 - 0x01EC)
class ADynamicMeshActor_TA : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x01EC(0x0004) (CPF_Edit, CPF_Const, CPF_ExportObject, CPF_EditConst, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DynamicMeshActor_TA");
		return ptr;
	}


	void ToggleBallPosition(bool bAdd);
	void Destroyed();
	void PostBeginPlay();
};


// Class TAGame.DynamicSpawnPoint_TA
// 0x0000 (0x01EC - 0x01EC)
class ADynamicSpawnPoint_TA : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DynamicSpawnPoint_TA");
		return ptr;
	}

};


// Class TAGame.SystemSettingsManager_TA
// 0x0004 (0x0040 - 0x003C)
class USystemSettingsManager_TA : public UObject
{
public:
	int                                                NumPlayers;                                       		// 0x003C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SystemSettingsManager_TA");
		return ptr;
	}


	void ApplySettings(class UGameViewportClient_TA* GVC);
	void UpdateNumPlayers(class UGameViewportClient_TA* GVC);
	void HandleSplitScreenTypeChanged(class UGameViewportClient_TA* GVC);
	void HandleWorldFullScreenChanged(class UGameViewportClient_TA* GVC);
	void Init();
};


// Class TAGame.AppMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class UAppMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AppMetrics_TA");
		return ptr;
	}


	void AppStart();
};


// Class TAGame.FloppyBits_TA
// 0x000C (0x0054 - 0x0048)
class UFloppyBits_TA : public UAttachmentBehavior_TA
{
public:
	class UPhysicsAsset*                               PhysAsset;                                        		// 0x0048(0x0004) (CPF_Edit)
	struct FRBCollisionChannelContainer                CollisionChannels;                                		// 0x004C(0x0004)
	class USkeletalMeshComponent*                      SkelMesh;                                         		// 0x0050(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FloppyBits_TA");
		return ptr;
	}


	void InitPhysics();
	void HandleAttached(class UCarMeshComponent_TA* CarMesh);
	void OnInit();
};


// Class TAGame.TeamColorScriptedTexture_TA
// 0x0010 (0x0150 - 0x0140)
class UTeamColorScriptedTexture_TA : public UScriptedTexture
{
public:
	TArray<struct FLinearColor>                        PixelColorList;                                   		// 0x0140(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	unsigned long                                      bMaxBrightness : 1;                               		// 0x014C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TeamColorScriptedTexture_TA");
		return ptr;
	}


	void OnRender(class UCanvas* Canvas);
	struct FLinearColor STATIC_GetFullBrightColor(const struct FLinearColor& C, float ValueScale);
	void SetColorsArray(TArray<struct FLinearColor> ColorList, bool bAllowMaxBrightness);
};


// Class TAGame.GameMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class UGameMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameMetrics_TA");
		return ptr;
	}


	void StatEvent(const struct FUniqueNetId& PlayerID, const struct FName& StatName, const struct FString& HitLocation);
	void RecordStatEvent(const struct FUniqueNetId& PlayerID, const struct FName& StatName, const struct FVector& HitLocation);
	void GameEnd(int WinningTeam, int Team0Score, int Team1Score);
	void Overtime();
	void GoalScoreHit(const struct FUniqueNetId& PlayerID, const struct FString& CarLocation, const struct FString& CarVelocity, const struct FString& BallLocation, const struct FString& BallVelocity, float ElapsedTimeSeconds);
	void RecordGoalScoreTouch(const struct FBallHitInfo& Hit);
	void GoalScored(int Team, const struct FString& BallLocation, const struct FString& BallVelocity);
	void RecordGoalScored(int Team, const struct FVector& BallLocation, const struct FVector& BallVelocity);
	void ForfeitVoteFail(int Team);
	void ForfeitVotePass(int Team);
	void ForfeitVoteStart(const struct FUniqueNetId& Instigator, int Team);
	void LeaveTeam(const struct FUniqueNetId& PlayerID);
	void JoinTeam(const struct FUniqueNetId& PlayerID, int Team);
	void EndRound(int SecondsRemaining);
	void StartRound(int SecondsRemaining);
	void IdleKick(const struct FUniqueNetId& PlayerID);
	void RemovePlayer(const struct FUniqueNetId& PlayerID);
	void AddPlayer(const struct FUniqueNetId& PlayerID);
	void PlayPlaylist(int PlaylistId);
	void PlayMutator(const struct FName& MutatorName);
	void GameInit(const struct FName& MapName, const struct FName& EventName, const struct FName& MatchType);
};


// Class TAGame.SeqEvent_StadiumTeamColorsChanged_TA
// 0x001C (0x0130 - 0x0114)
class USeqEvent_StadiumTeamColorsChanged_TA : public USequenceEvent
{
public:
	int                                                Team;                                             		// 0x0114(0x0004) (CPF_Edit)
	struct FVector                                     Primary;                                          		// 0x0118(0x000C)
	struct FVector                                     Secondary;                                        		// 0x0124(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_StadiumTeamColorsChanged_TA");
		return ptr;
	}


	void LinearColorToVector(struct FLinearColor* InColor, struct FVector* OutVector);
	void SetTeamColors(TArray<struct FLinearColor>* Colors);
};


// Class TAGame.Team_Soccar_TA
// 0x001C (0x0340 - 0x0324)
class ATeam_Soccar_TA : public ATeam_TA
{
public:
	int                                                GameScore;                                        		// 0x0324(0x0004) (CPF_Net, CPF_Transient)
	TArray<class AActor*>                              PrimaryStarts;                                    		// 0x0328(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class AActor*>                              SecondaryStarts;                                  		// 0x0334(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Team_Soccar_TA");
		return ptr;
	}


	void ScoreGame();
	void InitSpawnPoints();
	class AActor* MirrorStartPoint(class AActor* SpawnPoint, const struct FVector& Pivot);
	void Destroyed();
	void SetGameEvent(class AGameEvent_Team_TA* InGameEvent);
};


// Class TAGame.SkinOverrideTable_TA
// 0x000C (0x0048 - 0x003C)
class USkinOverrideTable_TA : public UObject
{
public:
	TArray<struct FProductSkinOverride>                Skins;                                            		// 0x003C(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkinOverrideTable_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Quality_TA
// 0x0001 (0x0055 - 0x0054)
class UProductAttribute_Quality_TA : public UProductAttribute_TA
{
public:
	TEnumAsByte<enum class EProductQuality>            Quality;                                          		// 0x0054(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Quality_TA");
		return ptr;
	}


	struct FString GetOnlineProductAttributeValue();
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* Attributes);
};


// Class TAGame.ProductAttribute_ProductLink_TA
// 0x0004 (0x0058 - 0x0054)
class UProductAttribute_ProductLink_TA : public UProductAttribute_TA
{
public:
	int                                                ProductID;                                        		// 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_ProductLink_TA");
		return ptr;
	}


	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* Attributes);
};


// Class TAGame.ProductAttribute_Masterpiece_TA
// 0x0000 (0x0054 - 0x0054)
class UProductAttribute_Masterpiece_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Masterpiece_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Level_TA
// 0x0004 (0x0058 - 0x0054)
class UProductAttribute_Level_TA : public UProductAttribute_TA
{
public:
	int                                                Level;                                            		// 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Level_TA");
		return ptr;
	}


	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* Attributes);
};


// Class TAGame.ProductAttribute_EquippableSlot_TA
// 0x0001 (0x0055 - 0x0054)
class UProductAttribute_EquippableSlot_TA : public UProductAttribute_TA
{
public:
	TEnumAsByte<enum class EEquippableProductSlot>     Slot;                                             		// 0x0054(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_EquippableSlot_TA");
		return ptr;
	}


	struct FName GetSlotName();
	struct FString GetOnlineProductAttributeValue();
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* Attributes);
};


// Class TAGame.Mutator_TA
// 0x0018 (0x0054 - 0x003C)
class UMutator_TA : public UGameSetting_X
{
public:
	TArray<struct FString>                             RequiresMutators;                                 		// 0x003C(0x000C) (CPF_NeedCtorLink)
	TArray<struct FString>                             DisallowedWithMutators;                           		// 0x0048(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_TA");
		return ptr;
	}


	void MutateObject(class UObject* O);
	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.MatchType_PublicRanked_TA
// 0x0000 (0x004C - 0x004C)
class UMatchType_PublicRanked_TA : public UMatchType_Public_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_PublicRanked_TA");
		return ptr;
	}


	bool ShouldCancelMatch();
};


// Class TAGame.MatchType_Lan_TA
// 0x0000 (0x0054 - 0x0054)
class UMatchType_Lan_TA : public UMatchType_Private_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_Lan_TA");
		return ptr;
	}


	struct FName GetMatchTypeName();
};


// Class TAGame.HUDBase_TA
// 0x004C (0x04CC - 0x0480)
class AHUDBase_TA : public AHUD_X
{
public:
	class UGFxShell_TA*                                Shell;                                            		// 0x0480(0x0004) (CPF_Transient)
	struct FString                                     DisconnectedString;                               		// 0x0484(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     ServerMaintString;                                		// 0x0490(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     PartyChatTitle;                                   		// 0x049C(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	class UGFxData_Chat_TA*                            ChatData;                                         		// 0x04A8(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventGameMessage__Delegate;                     		// 0x04AC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x04AC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventChatMessage__Delegate;                     		// 0x04BC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x04BC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.HUDBase_TA");
		return ptr;
	}


	void DrawLookupTextures();
	void DrawHUD();
	void NotifyChatDisabled(float Time);
	void NotifyServerShutdown();
	void NotifyBadConnection(float Ping, int InPacketLoss, int OutPacketLoss, float ReceiveTime, float AckTime, float NetSpeed);
	void ToggleScoreboard();
	bool ChatWithExternalKeyboard(const struct FString& Title, const struct FScriptDelegate& Callback);
	void OpenPartyChat();
	void OpenTeamChat();
	void OpenChat();
	void ToggleMidGameMenu();
	void UpdatePRIData();
	void ReceiveMessage(class UMessage_TA* Message, const struct FString& Text);
	void AddChatMessage(int Team, const struct FString& PlayerName, const struct FString& Message, TEnumAsByte<enum class EChatChannel> ChatChannel, bool bLocalPlayer, bool bTransient, bool bPreset);
	void OnChatMessage(const struct FChatMessage& NewMsg);
	void LobbyMessage_TA(const struct FString& PlayerName, const struct FString& Message, TEnumAsByte<enum class EChatChannel> ChatChannel, class APlayerReplicationInfo* SenderPRI, TEnumAsByte<enum class EPartyChatCommands> PartyChatCommand);
	void Message_TA(class APlayerReplicationInfo* PRI, const struct FString& Message, TEnumAsByte<enum class EChatChannel> ChatChannel, bool bPreset);
	class UOnlineGame_X* GetOnlineGame();
	class UOnlinePlayer_X* GetOnlinePlayer();
	class AGameEvent_TA* GetGameEvent();
	void Destroyed();
	void PostBeginPlay();
	void EventChatMessage(const struct FChatMessage& Message);
	void EventGameMessage(class UMessage_TA* Message, const struct FString& Text);
};


// Class TAGame.GFxHUD_TA
// 0x00B0 (0x057C - 0x04CC)
class AGFxHUD_TA : public AHUDBase_TA
{
public:
	struct FString                                     UIState;                                          		// 0x04CC(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)
	class UGFxMoviePlayer_X*                           MatchInfoMovieArchetype;                          		// 0x04D8(0x0004) (CPF_Edit)
	class UGFxMoviePlayer_X*                           MatchInfoMovie;                                   		// 0x04DC(0x0004) (CPF_Transient)
	class UGFxNameplatesManager_TA*                    NameplatesManager;                                		// 0x04E0(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	struct FString                                     PlayerJoinString;                                 		// 0x04E4(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     PlayerLeaveString;                                		// 0x04F0(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     ChatTitle;                                        		// 0x04FC(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     TeamChatTitle;                                    		// 0x0508(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     ChatDisabledMessage;                              		// 0x0514(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     ReplayQueSaveMessage;                             		// 0x0520(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	class APRI_TA*                                     OwnerPRI;                                         		// 0x052C(0x0004) (CPF_Transient)
	class ACar_TA*                                     OwnerCar;                                         		// 0x0530(0x0004) (CPF_Transient)
	class AGameEvent_TA*                               GameEvent;                                        		// 0x0534(0x0004) (CPF_Transient)
	class AGameEvent_Team_TA*                          TeamGameEvent;                                    		// 0x0538(0x0004) (CPF_Transient)
	class UGFxData_GameEvent_TA*                       GameEventData;                                    		// 0x053C(0x0004) (CPF_Transient)
	class UGFxData_LocalCar_TA*                        CarData;                                          		// 0x0540(0x0004) (CPF_Transient)
	class UGFxData_ItemDrops_TA*                       ItemDropData;                                     		// 0x0544(0x0004) (CPF_Transient)
	TArray<class UGFxData_PRI_TA*>                     PRIData;                                          		// 0x0548(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UGFxData_PlayerRecord_TA*>            PlayerRecordData;                                 		// 0x0554(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	float                                              CloseScoreboardTime;                              		// 0x0560(0x0004) (CPF_Transient)
	unsigned long                                      bShowedDisconnectMessage : 1;                     		// 0x0564(0x0004) (CPF_Transient)
	TArray<class APRI_TA*>                             PendingShowAddMessagePlayers;                     		// 0x0568(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class ARBActor_TA*                                 LastTarget;                                       		// 0x0574(0x0004) (CPF_Transient)
	float                                              TestLastLogTime;                                  		// 0x0578(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxHUD_TA");
		return ptr;
	}


	void HandleRespawnTimeUpdated(int NewTime);
	void HandleReplaceBot(class APRI_TA* InPRI);
	struct FScreenLocation GetScreenLocation(const struct FVector& WorldLocation, float SafeZone);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void DrawNameplatesTexture();
	void DrawHUD();
	void HandleReplayAutoSave(class AReplayDirector_TA* Director);
	void HandleVoteFinished(class AVoteActor_TA* VoteActor);
	void HandleVoteStarted(class AVoteActor_TA* VoteActor);
	void NotifyChatDisabled(float Time);
	void ChatPreset(int Index);
	void HandleInternetConnectionChanged(bool bConnected);
	void HandleTyping(class UGFxShell_X* InShell);
	void NotifyClientTravel();
	void NotifyServerShutdown();
	void BugReportDialogue(const struct FString& Description);
	void HandlePRICameraChanged(class APRI_TA* InPRI);
	void CloseScoreboard();
	void OpenScoreboard();
	void OpenMidgameMenu();
	void ReceiveMessage(class UMessage_TA* Message, const struct FString& Text);
	void HandleStatTickerMessage(class APRI_TA* Receiver, class APRI_TA* Victim, class UStatEvent_TA* StatEvent);
	void HandleStatEvent(class APRI_TA* PRI, class UStatEvent_TA* StatEvent, int Count);
	void OpenTeamChat();
	void OpenChat();
	bool CanOpenChat();
	bool AnyPlayerChatRestricted();
	void UpdateCarData();
	class ACar_TA* GetFocusCar();
	void UpdateCarDataFromCar(class ACar_TA* Car);
	void UpdateCameraYaw();
	void Tick(float DeltaTime);
	int GetBoostAmountForUI(class ACarComponent_Boost_TA* Boost);
	void SetBadConnection(bool bShow);
	void NotifyBadConnection(float Ping, int InPacketLoss, int OutPacketLoss, float ReceiveTime, float AckTime, float NetSpeed);
	void UpdatePRIData();
	void SetOwnerCar(class ACar_TA* NewCar);
	void HandlePawnChanged(class APlayerController_X* PC, class APawn* OldPawn, class APawn* NewPawn);
	void OnAllTeamsCreated();
	void HandleAllTeamsCreated(class AGameEvent_Team_TA* G);
	void HandleGameStateChanged(class AGameEvent_TA* G);
	void HandlePlayerRemoved(class AGameEvent_TA* G, class APRI_TA* InPRI);
	void HandlePlayerIDChanged(class APRI_X* InPRI);
	void HideNameplates();
	void ShowNameplates();
	void ToggleNameplates();
	void UpdatePendingAddMessagePlayers();
	void HandlePlayerAdded(class AGameEvent_TA* G, class APRI_TA* InPRI);
	struct FString GetPlayerName(class APRI_TA* PRI);
	void UpdateGFxPlayerRecord(class APRI_TA* InPRI);
	void UpdateSessionStatus();
	void DestroyGFxPRIData(class UGFxData_PRI_TA* OldData);
	class UGFxData_PRI_TA* CreateGFxPRIData();
	void HandleReservationsUpdated(class AGRI_X* GRI);
	bool IsValidID(const struct FUniqueNetId& PlayerID);
	class UGFxData_PRI_TA* GetPRIDataFromID(const struct FUniqueNetId& PlayerID);
	int GetPRIDataIndex(class APRI_TA* InPRI);
	void HandleMatchTypeSet(class AGameEvent_TA* InGameEvent);
	void SetGameEvent(class AGameEvent_TA* InGameEvent);
	void HandleGameEventChanged(class APRI_TA* InPRI);
	void SetTeam(class ATeam_TA* Team);
	void HandleTeamChanged(class APRI_X* InPRI);
	void SetOwnerPRI(class APRI_TA* InPRI);
	void HandleReceivedPRI(class APlayerController_X* PC);
	void UpdateMutatorTags(const struct FString& MatchTags);
	void UpdateMutatorTagsFromPreset(class UPresetMutators_X* Presets);
	void HandleGameDataSelected(int PlaylistId, int MutatorIndex);
	void HandleServerNameChanged(class AGRI_X* GRI);
	void HandleCanVoteForfeitChanged(class AGameEvent_TA* InGameEvent);
	void HandlePenaltyChanged(class AGameEvent_TA* InGameEvent);
	void HandleGRIReplicated(class AGRI_X* GRI);
	void HandleHideWorldUIChanged(class UGameShare_TA* G);
	void Destroyed();
	void InitGFxData();
	void InitGFx();
	void PostBeginPlay();
};


// Class TAGame.OnlineGameDedicatedServer_TA
// 0x0014 (0x0238 - 0x0224)
class UOnlineGameDedicatedServer_TA : public UOnlineGameDedicatedServer_X
{
public:
	unsigned char                                      UnknownData00[0x4];                               		// 0x0224(0x0004) UNKNOWN PROPERTY: ObjectProperty TAGame.OnlineGameDedicatedServer_TA.Tournaments
	int                                                LastPlaylistID;                                   		// 0x0228(0x0004) (CPF_Transient)
	TArray<class UObject*>                             AllRelevantProducts;                              		// 0x022C(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameDedicatedServer_TA");
		return ptr;
	}


	bool CanStartMatch();
	bool AllowSplitscreenJoin(class APlayerReplicationInfo* PrimaryPRI, const struct FUniqueNetId& PlayerID, const struct FString& PlayerName);
	bool AllowPlayerLogin(const struct FString& Options, const struct FUniqueNetId& PlayerID);
	void GoToNextMap();
	struct FName GetNextRandomMapName(int GameMode);
	void GotoPrivateMatchMap(const struct FName& MapName, int GameMode);
	unsigned char GetTeamNum(const struct FUniqueNetId& PlayerID);
	void ReportLowFPS();
	void SetPlaylist(int PlaylistId);
	void OnMainEventDestroyed();
	void HandleMigrationJoin();
	void ClearSettings();
	void HandleGameEventEnded(class AGameEvent_Soccar_TA* GameEvent);
	void HandleGameInitialized(class AGameInfo_Soccar_TA* Game);
	void StartMatch();
	class AGameEvent_TA* GetCurrentGameEvent();
	void LoadAllRelevantProducts();
	void OnInit();
};


// Class TAGame.RPC_GetBanStatus_TA
// 0x0018 (0x00AC - 0x0094)
class URPC_GetBanStatus_TA : public URPC_TA
{
public:
	TArray<struct FUniqueNetId>                        Players;                                          		// 0x0094(0x000C) (CPF_NeedCtorLink)
	TArray<struct FUniqueNetId>                        Banned;                                           		// 0x00A0(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_GetBanStatus_TA");
		return ptr;
	}


	class URPC_GetBanStatus_TA* SetPlayers(TArray<struct FUniqueNetId> InPlayers);
};


// Class TAGame.SeqEvent_GameEventStateChanged_TA
// 0x000C (0x0120 - 0x0114)
class USeqEvent_GameEventStateChanged_TA : public USequenceEvent
{
public:
	struct FString                                     StateName;                                        		// 0x0114(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_GameEventStateChanged_TA");
		return ptr;
	}

};


// Class TAGame.GameEvent_Lobby_TA
// 0x0008 (0x04A0 - 0x0498)
class AGameEvent_Lobby_TA : public AGameEvent_TA
{
public:
	class ABall_TA*                                    BallArchetype;                                    		// 0x0498(0x0004) (CPF_Edit)
	class ABall_TA*                                    Ball;                                             		// 0x049C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Lobby_TA");
		return ptr;
	}


	bool AllowShutdown();
	void Destroyed();
	void OnCarSpawned(class ACar_TA* NewCar);
	void InitField();
	void PostBeginPlay();
	void StartFirstState();
	void OnInit();
};


// Class TAGame.PlayerStart_TA
// 0x0000 (0x02D4 - 0x02D4)
class APlayerStart_TA : public APlayerStart
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerStart_TA");
		return ptr;
	}

};


// Class TAGame.GameEvent_PostGameLobby_TA
// 0x0000 (0x04A0 - 0x04A0)
class AGameEvent_PostGameLobby_TA : public AGameEvent_Lobby_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_PostGameLobby_TA");
		return ptr;
	}


	bool ShouldShowBallIndicator();
	void StartFirstState();
};


// Class TAGame.GameEvent_Soccar_SubRules_TA
// 0x0000 (0x003C - 0x003C)
class UGameEvent_Soccar_SubRules_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Soccar_SubRules_TA");
		return ptr;
	}


	void OnGetBallModifiedScore(class ABall_TA* Ball, int ScoreIndex, int* BallScore);
	void OnGetBallSpawnPosition(struct FVector* BallPosition);
	bool OnCanUseBallCam();
	class ATeam_TA* OnGetWinningTeam();
	bool ShouldSpawnBall();
	bool ShouldDisableStatXP();
	void SetBallListeners(class ABall_TA* Ball, bool bListen);
	void OnRestartPlayer(class AController* NewPlayer);
	void OnCarDemolished(class ACar_TA* Car, const struct FDemolishData& Data);
	void OnTick(float DeltaTime);
	void OnRemoveGameBall();
	void OnAddGameBall(class ABall_TA* Ball);
	void OnFirstBallHit();
	void OnMatchEnd();
	void OnNewRound();
	void Init();
};


// Class TAGame.GoalIndicator_TA
// 0x003C (0x0228 - 0x01EC)
class AGoalIndicator_TA : public AActor
{
public:
	class UGoal_TA*                                    Goal;                                             		// 0x01EC(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class APlayerController_TA*                        PCOwner;                                          		// 0x01F0(0x0004) (CPF_Transient)
	class APRI_TA*                                     PRI;                                              		// 0x01F4(0x0004) (CPF_Transient)
	class ULensFlareComponent_X*                       LensFlareComponent;                               		// 0x01F8(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x01FC(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UStaticMesh*                                 DefenseMesh;                                      		// 0x0200(0x0004)
	class UStaticMesh*                                 OffenseMesh;                                      		// 0x0204(0x0004)
	class UMaterialInterface*                          MaterialGoalDefense;                              		// 0x0208(0x0004)
	class UMaterialInterface*                          MaterialGoalOffense;                              		// 0x020C(0x0004)
	unsigned long                                      bSpawnForSpectator : 1;                           		// 0x0210(0x0004)
	class UStaticMesh*                                 SpectatorMesh;                                    		// 0x0214(0x0004)
	class UMaterialInterface*                          SpectatorMaterialGoal;                            		// 0x0218(0x0004)
	TArray<class ULensFlare*>                          LensFlareTeamList;                                		// 0x021C(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GoalIndicator_TA");
		return ptr;
	}


	void HandleViewerTeamChanged(class APRI_X* InPRI);
	void HandleViewerReceivedPRI(class APlayerController_X* PC);
	void Destroyed();
	void SetGoal(class AGameEvent_Soccar_TA* GameEvent, class UGoal_TA* In_Goal);
};


// Class TAGame.CountdownObject_TA
// 0x0014 (0x006C - 0x0058)
class UCountdownObject_TA : public UTickableStateObject_X
{
public:
	int                                                CountTime;                                        		// 0x0058(0x0004) (CPF_Edit)
	struct FScriptDelegate                             __EventCountChange__Delegate;                     		// 0x005C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x005C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CountdownObject_TA");
		return ptr;
	}


	void UpdateCountdown();
	void StopCount();
	void Start(int InCountTime);
	void EventCountChange(class UCountdownObject_TA* CountdownObject, int CountValue);
};


// Class TAGame.SeqEvent_GoalScored_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_GoalScored_TA : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_GoalScored_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_ScoreChanged_TA
// 0x0008 (0x011C - 0x0114)
class USeqEvent_ScoreChanged_TA : public USequenceEvent
{
public:
	int                                                BlueScore;                                        		// 0x0114(0x0004)
	int                                                RedScore;                                         		// 0x0118(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_ScoreChanged_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_CountDownStart_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_CountDownStart_TA : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_CountDownStart_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_CountDownCompleted_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_CountDownCompleted_TA : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_CountDownCompleted_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_RoundStart_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_RoundStart_TA : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_RoundStart_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_LiveReplay_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_LiveReplay_TA : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_LiveReplay_TA");
		return ptr;
	}

};


// Class TAGame.RPC_MatchComplete_TA
// 0x0028 (0x00BC - 0x0094)
class URPC_MatchComplete_TA : public URPC_TA
{
public:
	struct FString                                     MatchGUID;                                        		// 0x0094(0x000C) (CPF_NeedCtorLink)
	TArray<struct FOnlinePlayerMatchData>              MatchData;                                        		// 0x00A0(0x000C) (CPF_NeedCtorLink)
	TEnumAsByte<enum class EGameVersion>               GameVersion;                                      		// 0x00AC(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x00AD(0x0003) MISSED OFFSET
	TArray<struct FOnlineProductDrop>                  Drops;                                            		// 0x00B0(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_MatchComplete_TA");
		return ptr;
	}


	TArray<struct FOnlineProductData> GetDrops(struct FUniqueNetId* PlayerID);
	class URPC_MatchComplete_TA* SetMatchData(TArray<struct FOnlinePlayerMatchData>* InMatchData);
	class URPC_MatchComplete_TA* SetGameVersion(TEnumAsByte<enum class EGameVersion> InGameVersion);
	class URPC_MatchComplete_TA* SetMatchGUID(const struct FString& InGuid);
};


// Class TAGame.Replay_Soccar_TA
// 0x0038 (0x0220 - 0x01E8)
class UReplay_Soccar_TA : public UReplay_TA
{
public:
	int                                                TeamSize;                                         		// 0x01E8(0x0004) (CPF_DataBinding)
	unsigned long                                      bUnfairBots : 1;                                  		// 0x01EC(0x0004) (CPF_DataBinding)
	int                                                PrimaryPlayerTeam;                                		// 0x01F0(0x0004) (CPF_DataBinding)
	int                                                Team0Score;                                       		// 0x01F4(0x0004) (CPF_DataBinding)
	int                                                Team1Score;                                       		// 0x01F8(0x0004) (CPF_DataBinding)
	TArray<struct FScoredGoal>                         Goals;                                            		// 0x01FC(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FHighlight>                          HighLights;                                       		// 0x0208(0x000C) (CPF_NeedCtorLink)
	TArray<struct FReplayPlayerStats>                  PlayerStats;                                      		// 0x0214(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Replay_Soccar_TA");
		return ptr;
	}


	void PreExport();
	void RemoveTimelineKeyframe(int KeyframeIndex);
	void AddTimelineEvent(const struct FName& EventID, float TimeBeforeEvent);
	void RecordUserEvent();
	void RecordHighlight(class APRI_TA* FocusPlayer, const struct FName& BallName);
	void RecordSave(class APRI_TA* Saver, const struct FName& BallName);
	void RecordGoal(class APRI_TA* Scorer, const struct FName& BallName);
	void AddPlayer(class APRI_TA* PRI);
};


// Class TAGame.SpawnPointCluster_TA
// 0x000C (0x0048 - 0x003C)
class USpawnPointCluster_TA : public UObject
{
public:
	TArray<class USpawnPointGroup_TA*>                 SpawnTeams;                                       		// 0x003C(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpawnPointCluster_TA");
		return ptr;
	}


	class USpawnPointGroup_TA* GetGroup(class ATeamInfo* Team);
	int GetGroupId(class AActor* SpawnPoint);
	void RemoveFromSpawnPoints(class AController* ForPlayer);
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
	bool TryAddToSpawnPointAtIndex(class AController* ForPlayer, int PointIdx);
	bool TryAddToSpawnPoint(class AController* ForPlayer);
	void SetSpawnPoints(class AGameEvent_TA* GameEvent, const struct FVector& Center, const struct FRotator& Orientation);
	void Init(class AGameEvent_TA* GameEvent, const struct FVector& CenterOffset, const struct FRotator& CenterRotation);
};


// Class TAGame.StatCategory_TA
// 0x0010 (0x004C - 0x003C)
class UStatCategory_TA : public UObject
{
public:
	TArray<class UStatTitle_TA*>                       Titles;                                           		// 0x003C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	float                                              Multiplier;                                       		// 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatCategory_TA");
		return ptr;
	}

};


// Class TAGame.StatTitle_TA
// 0x002C (0x0068 - 0x003C)
class UStatTitle_TA : public UObject
{
public:
	struct FString                                     PrimaryTitle;                                     		// 0x003C(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     SecondaryTitle;                                   		// 0x0048(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	int                                                Points;                                           		// 0x0054(0x0004)
	int                                                MinStatValueRequired;                             		// 0x0058(0x0004)
	int                                                MaxStatValueAllowed;                              		// 0x005C(0x0004)
	class UStatEvent_TA*                               Stat;                                             		// 0x0060(0x0004)
	unsigned long                                      bPerStat : 1;                                     		// 0x0064(0x0004)
	unsigned long                                      bInverseStat : 1;                                 		// 0x0064(0x0004)
	unsigned long                                      bClampStatToOne : 1;                              		// 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatTitle_TA");
		return ptr;
	}


	bool GetNumPoints(class APRI_TA* Member, class UStatCategory_TA* Category, int* PointsEarned, int* StatCount);
};


// Class TAGame.TraceableSpawnPoint_TA
// 0x0004 (0x01F0 - 0x01EC)
class ATraceableSpawnPoint_TA : public AActor
{
public:
	class UCylinderComponent*                          CylinderComp;                                     		// 0x01EC(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TraceableSpawnPoint_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_GameTimeChanged_TA
// 0x0008 (0x011C - 0x0114)
class USeqEvent_GameTimeChanged_TA : public USequenceEvent
{
public:
	float                                              CallTimePercent;                                  		// 0x0114(0x0004) (CPF_Edit)
	unsigned long                                      bHasBeenCalled : 1;                               		// 0x0118(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_GameTimeChanged_TA");
		return ptr;
	}

};


// Class TAGame.RPC_Challenge_PlayedGame_TA
// 0x0018 (0x00AC - 0x0094)
class URPC_Challenge_PlayedGame_TA : public URPC_TA
{
public:
	TArray<struct FUniqueNetId>                        PlayerIDs;                                        		// 0x0094(0x000C) (CPF_NeedCtorLink)
	struct FString                                     GameMode;                                         		// 0x00A0(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_Challenge_PlayedGame_TA");
		return ptr;
	}


	class URPC_Challenge_PlayedGame_TA* SetGameMode(const struct FString& InGameMode);
	class URPC_Challenge_PlayedGame_TA* AddPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.PerfMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class UPerfMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PerfMetrics_TA");
		return ptr;
	}


	void ClientFPS(int TotalFrames, TArray<struct FFPSBucketMetrics> Buckets);
	void ServerFPS(int TotalFrames, TArray<struct FFPSBucketMetrics> Buckets);
};


// Class TAGame.MatchBroadcastRedirector_TA
// 0x0004 (0x004C - 0x0048)
class UMatchBroadcastRedirector_TA : public UComponent
{
public:
	class UMatchLog_TA*                                MatchLog;                                         		// 0x0048(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchBroadcastRedirector_TA");
		return ptr;
	}


	void AppendBroadcastLog(class AMatchBroadcast_TA* Broadcast, const struct FString& EventJson);
	void SetBroadcast(class AMatchBroadcast_TA* Broadcast);
	void InitServer(class AGameEvent_Soccar_TA* GameEvent);
	void HandleLocalPlayersChanged(class AGameEvent_TA* GameEvent);
	void InitClient(class AGameEvent_Soccar_TA* GameEvent);
	void CreateMatchLog();
	struct FString GetLogFileName();
	bool IsCommandlineEnabled();
	void Init(class AGameEvent_Soccar_TA* GameEvent);
};


// Class TAGame.SimilarSeasonLogos_TA
// 0x000C (0x0048 - 0x003C)
class USimilarSeasonLogos_TA : public UObject
{
public:
	TArray<struct FSimilarLogoGroup>                   LogoGroups;                                       		// 0x003C(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SimilarSeasonLogos_TA");
		return ptr;
	}

};


// Class TAGame.ScreenDisplayActor_TA
// 0x0058 (0x0288 - 0x0230)
class AScreenDisplayActor_TA : public ADynamicSMActor_Spawnable
{
public:
	class APlayerControllerBase_TA*                    PC;                                               		// 0x0230(0x0004)
	struct FVector                                     StartLocationOffset;                              		// 0x0234(0x000C)
	struct FVector                                     LocationOffset;                                   		// 0x0240(0x000C)
	struct FRotator                                    CurrentRotation;                                  		// 0x024C(0x000C)
	float                                              RotationSpeed;                                    		// 0x0258(0x0004)
	float                                              StartRotationOffset;                              		// 0x025C(0x0004)
	float                                              BlendInSpeed;                                     		// 0x0260(0x0004)
	float                                              BlendInAmount;                                    		// 0x0264(0x0004)
	float                                              CameraShakeDuration;                              		// 0x0268(0x0004)
	float                                              CameraShakeAmplitude;                             		// 0x026C(0x0004)
	float                                              CameraShakeFrequency;                             		// 0x0270(0x0004)
	class UParticleSystem*                             ParticleFX;                                       		// 0x0274(0x0004)
	class UParticleSystemComponent*                    ParticleComponent;                                		// 0x0278(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	struct FVector                                     FXOffset;                                         		// 0x027C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ScreenDisplayActor_TA");
		return ptr;
	}


	void SpawnFX();
	void PlayBlendInCameraShake();
	void OnOffsetBlendedIn();
	void Tick(float DeltaTime);
	void Init();
};


// Class TAGame.GameEvent_Soccar_SubRules_Basketball_TA
// 0x0008 (0x0044 - 0x003C)
class UGameEvent_Soccar_SubRules_Basketball_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	int                                                LongDistanceScore;                                		// 0x003C(0x0004)
	int                                                DefaultScore;                                     		// 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Soccar_SubRules_Basketball_TA");
		return ptr;
	}


	void OnGetBallModifiedScore(class ABall_TA* Ball, int ScoreIndex, int* BallScore);
};


// Class TAGame.Tutorial_TA
// 0x0110 (0x0168 - 0x0058)
class UTutorial_TA : public UTickableStateObject_X
{
public:
	class USequenceAction*                             KNode_Owner;                                      		// 0x0058(0x0004) (CPF_Transient)
	class APlayerController_TA*                        PC;                                               		// 0x005C(0x0004) (CPF_Transient)
	class AGameEvent_Tutorial_TA*                      GameEvent;                                        		// 0x0060(0x0004) (CPF_Transient)
	struct FString                                     ModalSectionName;                                 		// 0x0064(0x000C) (CPF_NeedCtorLink)
	class UGFxModal_X*                                 MessageModal;                                     		// 0x0070(0x0004) (CPF_Transient)
	TArray<struct FMessageInfo>                        Messages;                                         		// 0x0074(0x000C) (CPF_NeedCtorLink)
	int                                                MessageIndex;                                     		// 0x0080(0x0004)
	float                                              DisplayMessageStartTime;                          		// 0x0084(0x0004)
	unsigned long                                      bEndTutorialOnFinalMessage : 1;                   		// 0x0088(0x0004)
	unsigned long                                      bCompleteTutorialOnFinalMessage : 1;              		// 0x0088(0x0004)
	unsigned long                                      bInitialMessagesFinished : 1;                     		// 0x0088(0x0004)
	unsigned long                                      bFadeAudio : 1;                                   		// 0x0088(0x0004)
	unsigned long                                      bSkipFadeIn : 1;                                  		// 0x0088(0x0004)
	unsigned long                                      bFadeTransitionComplete : 1;                      		// 0x0088(0x0004)
	unsigned long                                      bTutorialStarted : 1;                             		// 0x0088(0x0004)
	unsigned long                                      bActionNameToDetectPressed : 1;                   		// 0x0088(0x0004)
	unsigned long                                      bCarTouched : 1;                                  		// 0x0088(0x0004)
	unsigned long                                      bCompleteOnBallTouch : 1;                         		// 0x0088(0x0004)
	unsigned long                                      bFailTutorialOnOtherCarHitBall : 1;               		// 0x0088(0x0004)
	unsigned long                                      bDestroyBallsOnFadeIn : 1;                        		// 0x0088(0x0004)
	unsigned long                                      bDestroyBotsOnFadeIn : 1;                         		// 0x0088(0x0004)
	unsigned long                                      bHasBot : 1;                                      		// 0x0088(0x0004)
	unsigned long                                      bFoundBot : 1;                                    		// 0x0088(0x0004)
	unsigned long                                      bStartWithSecondaryCamActive : 1;                 		// 0x0088(0x0004)
	unsigned long                                      bStartWithBoostMeterDisabled : 1;                 		// 0x0088(0x0004)
	unsigned long                                      bBotCanPlay : 1;                                  		// 0x0088(0x0004)
	unsigned long                                      bStartBotOnAllMessagesDisplayed : 1;              		// 0x0088(0x0004)
	unsigned long                                      bBallCanHitPlayersGoal : 1;                       		// 0x0088(0x0004)
	unsigned long                                      bCompleteOnLastBallTouched : 1;                   		// 0x0088(0x0004)
	unsigned long                                      bCompleteOnHitGoal : 1;                           		// 0x0088(0x0004)
	unsigned long                                      bFailOnHitGoal : 1;                               		// 0x0088(0x0004)
	unsigned long                                      bFreezeCarOnSpawn : 1;                            		// 0x0088(0x0004)
	unsigned long                                      bCanEverDodge : 1;                                		// 0x0088(0x0004)
	unsigned long                                      bCanEverDoubleJump : 1;                           		// 0x0088(0x0004)
	unsigned long                                      bTutorialFinished : 1;                            		// 0x0088(0x0004)
	unsigned long                                      bPauseDuringMessages : 1;                         		// 0x0088(0x0004)
	unsigned long                                      bCanResetTutorial : 1;                            		// 0x0088(0x0004)
	struct FMessageInfo                                CorrectAnswer;                                    		// 0x008C(0x0030) (CPF_NeedCtorLink)
	struct FMessageInfo                                IncorrectAnswer;                                  		// 0x00BC(0x0030) (CPF_NeedCtorLink)
	float                                              StartFadeDisplayTime;                             		// 0x00EC(0x0004)
	struct FColor                                      FadeColor;                                        		// 0x00F0(0x0004)
	float                                              FadeTime;                                         		// 0x00F4(0x0004)
	class UGFxShell_TA*                                Shell;                                            		// 0x00F8(0x0004) (CPF_Transient)
	struct FName                                       ActionNameToDetect;                               		// 0x00FC(0x0008)
	float                                              FailTimeAfterBallTouch;                           		// 0x0104(0x0004)
	float                                              CountdownTime;                                    		// 0x0108(0x0004)
	int                                                BotTeam;                                          		// 0x010C(0x0004)
	float                                              TutorialFailTime;                                 		// 0x0110(0x0004)
	float                                              TutorialCompleteTime;                             		// 0x0114(0x0004)
	float                                              BallDestroyTimeOnTouch;                           		// 0x0118(0x0004)
	float                                              AllMessagesDisplayedTime;                         		// 0x011C(0x0004)
	float                                              WaitTimeBeforeCheckCompleteAction;                		// 0x0120(0x0004)
	TEnumAsByte<enum class ETutorialStatus>            TutorialStatus;                                   		// 0x0124(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0125(0x0003) MISSED OFFSET
	TArray<struct FName>                               IgnoreActionPressList;                            		// 0x0128(0x000C) (CPF_NeedCtorLink)
	TArray<struct FName>                               FailedActionPressList;                            		// 0x0134(0x000C) (CPF_NeedCtorLink)
	TArray<struct FName>                               StartActionPressList;                             		// 0x0140(0x000C) (CPF_NeedCtorLink)
	TArray<struct FName>                               CompleteActionPressList;                          		// 0x014C(0x000C) (CPF_NeedCtorLink)
	TArray<struct FName>                               CompleteActionIgnorePressList;                    		// 0x0158(0x000C) (CPF_NeedCtorLink)
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x0164(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Tutorial_TA");
		return ptr;
	}


	void SelectMultipleChoiceButton(class UGFxModal_X* Modal, int buttonIndex);
	void MultipleChoice_Button3(class UGFxModal_X* Modal);
	void MultipleChoice_Button2(class UGFxModal_X* Modal);
	void MultipleChoice_Button1(class UGFxModal_X* Modal);
	void MultipleChoice_Button0(class UGFxModal_X* Modal);
	void ForceActivateOutput(TEnumAsByte<enum class ETutorialOutput> Output);
	void NotifyEventOnTutorial(const struct FString& EventName);
	void ReachedTimeAfterBallTouch();
	void HandleBallDestroyed(class APawn_X* Pawn);
	void HandleCarTouch(class ABall_TA* Ball, class ACar_TA* HitCar, TEnumAsByte<enum class EBallHitType> HitType);
	void HandleHitGoal(class ABall_TA* Ball, class UGoal_TA* Goal);
	void HandleBallAdded(class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* Ball);
	void RegisterGameBallDelegates();
	void CloseMessageModal();
	void TutorialCompleteTimeFinished();
	void TutorialFailTimeFinished();
	void EndTutorial();
	void FailedTutorial();
	void CompletedTutorial();
	bool CanResetTutorial();
	void SetIgnoreOnCompleteActionList();
	TArray<struct FString> GetActionDisplayNames(const struct FActionNameInfo& ActionInfo);
	bool RemoveMatchingKeys(const struct FString& KeyToAdd, TArray<struct FString>* Out_KeyList);
	struct FString GetMergedActionString(TArray<struct FString> KeyList);
	struct FString GetBodyText(const struct FMessageInfo& InMessage);
	bool DisplayMessage(const struct FMessageInfo& InMessage);
	bool DisplayNextMessage();
	void DisplayCurrentMessage();
	void OnAllMessagesDisplayed();
	void ShowNextMessage(class UGFxModal_X* Modal);
	struct FMessageInfo GetMessage();
	void Tick(float DeltaTime);
	void CheckActionNameToDetect();
	void OnActionNameToDetectReleased();
	void OnActionNameToDetectPressed();
	void OnActionKeyReleased(const struct FName& ActionName);
	void OnActionKeyPressed(const struct FName& ActionName);
	bool NotifyKeyInput(int ControllerId, const struct FName& Key, TEnumAsByte<enum class EInputEvent> EventType, float AmountDepressed, bool bGamepad);
	bool NotifyAxisInput(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad);
	bool CompleteActionPressed(const struct FName& Key, bool bGamepad);
	bool StartActionPressed(const struct FName& Key, bool bGamepad);
	void SetIgnoredInput(bool bClearPreviousActions);
	void SetAllDriving(TEnumAsByte<enum class EPlayerDriveType> PlayerDriveType, bool bDriving);
	void TutorialStart();
	void CountTimeElapsed();
	void InitTutorial();
	void OnScreenFadedOut();
	void OnScreenFadedIn();
	void HideFadeScreen();
	void ShowFadeScreen(float DisplayTime);
	void Destroyed();
	bool CanDestroy();
	void FoundBot();
	void HandleVehicleSetup(class AGameEvent_Tutorial_TA* InGameEvent, class ACar_TA* Car);
	void HandleInputTypeChanged(class UGFxShell_X* InShell);
	void Init(class APlayerController_TA* InPC, class AGameEvent_Tutorial_TA* InGameEvent, class USequenceAction* InKNode_Owner);
};


// Class TAGame.GameEvent_Training_Goalie_TA
// 0x0004 (0x08E8 - 0x08E4)
class AGameEvent_Training_Goalie_TA : public AGameEvent_Training_TA
{
public:
	int                                                Score;                                            		// 0x08E4(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Training_Goalie_TA");
		return ptr;
	}


	void CommitRedoRound();
	void ResetGameEvent();
	void GetBallAimInfo(const struct FVector& BallSpawnLoc, const struct FFieldSpawnInfo& SpawnInfo, struct FVector* Out_GoalAimLocation, float* Out_DepthPercent, float* Out_HeightPercent, float* Out_WidthPercent);
	struct FVector GetBallArchVelocity(const struct FVector& BallSpawnLoc, const struct FFieldSpawnInfo& SpawnInfo);
	struct FVector GetBallForwardVelocity(const struct FVector& BallSpawnLoc, const struct FFieldSpawnInfo& SpawnInfo);
	struct FVector GetBallAimVelocity(const struct FVector& BallSpawnLoc, const struct FFieldSpawnInfo& SpawnInfo);
	struct FVector DetermineBallInitialVelocity(const struct FVector& BallSpawnLoc, class ACar_TA* Car, const struct FFieldSpawnInfo& SpawnInfo);
	struct FRotator GetCarSpawnRotation(const struct FFieldSpawnInfo& SpawnInfo, const struct FVector& CarSpawnLocation);
	struct FVector GetCarSpawnLocation(const struct FFieldSpawnInfo& SpawnInfo);
	int GetScore();
};


// Class TAGame.TutorialSave_TA
// 0x000C (0x0048 - 0x003C)
class UTutorialSave_TA : public UObject
{
public:
	TArray<struct FString>                             TrainingEventsPlayed;                             		// 0x003C(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TutorialSave_TA");
		return ptr;
	}


	bool AddToTutorialPlayedList(const struct FString& EventName);
	bool HasPlayedTraining(const struct FString& EventName);
};


// Class TAGame.GFxShell_TA
// 0x0114 (0x01C8 - 0x00B4)
class UGFxShell_TA : public UGFxShell_X
{
public:
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x00B4(0x0004) (CPF_Edit)
	float                                              BugReportDelay;                                   		// 0x00B8(0x0004) (CPF_Edit)
	class ULocalPlayer_TA*                             TAPlayer;                                         		// 0x00BC(0x0004) (CPF_Transient)
	class UGFxData_System_TA*                          SystemData;                                       		// 0x00C0(0x0004) (CPF_Transient)
	class UGFxData_LocalPlayer_TA*                     LocalPlayerData;                                  		// 0x00C4(0x0004) (CPF_Transient)
	struct FString                                     BugReportEmail;                                   		// 0x00C8(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UBugReport_X*                                CurrentBugReport;                                 		// 0x00D4(0x0004) (CPF_Transient)
	struct FString                                     SaveReplayMessage;                                		// 0x00D8(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     BugReportWaitMessage;                             		// 0x00E4(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     DefaultDisconnectionTitle;                        		// 0x00F0(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     PsyNetReconnectMessage;                           		// 0x00FC(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     PSPlusTipTitle;                                   		// 0x0108(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     PSPlusTipMessage;                                 		// 0x0114(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     RankedReconnectTitle;                             		// 0x0120(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     RankedReconnectBody;                              		// 0x012C(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     BannedTitle;                                      		// 0x0138(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     BannedTimeRemainingMessage;                       		// 0x0144(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     PermaBannedMessage;                               		// 0x0150(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     SkillDecayTitle;                                  		// 0x015C(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     SkillDecayMessage;                                		// 0x0168(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	TArray<class UGFxModal_X*>                         ActiveModals;                                     		// 0x0174(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	unsigned long                                      bDisableStartupMovies : 1;                        		// 0x0180(0x0004) (CPF_DataBinding)
	unsigned long                                      bTrial : 1;                                       		// 0x0180(0x0004) (CPF_DataBinding)
	unsigned long                                      bAprilFoolsRankedIcons : 1;                       		// 0x0180(0x0004) (CPF_DataBinding)
	int                                                TrialMinutesRemaining;                            		// 0x0184(0x0004) (CPF_DataBinding)
	int                                                TrialHoursRemainingUntilNextGame;                 		// 0x0188(0x0004) (CPF_DataBinding)
	struct FString                                     PendingErrorTitle;                                		// 0x018C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     PendingErrorMessage;                              		// 0x0198(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	float                                              LastPsyNetReconnectTime;                          		// 0x01A4(0x0004) (CPF_Transient)
	struct FString                                     RankedReconnectAddress;                           		// 0x01A8(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class UGFxModal_X*                                 ModalKick;                                        		// 0x01B4(0x0004) (CPF_Transient)
	struct FString                                     BuildEdition;                                     		// 0x01B8(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UAprilConfig_X*                              AprilConfig;                                      		// 0x01C4(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxShell_TA");
		return ptr;
	}


	void UpdateAprilConfig();
	void PreloadLegalText();
	struct FString GetPrivacyPolicy();
	struct FString GetTermsOfService();
	struct FString GetEULA();
	void HandleSkillDecayed(class USaveData_TA* SaveData);
	void OnRankedReconnect(class UGFxModal_X* Model);
	void ShowRankedReconnectModal(const struct FString& BeaconAddress);
	void OnGotoStorePage(class UGFxModal_X* Modal);
	void ShowUnauthorizedModal();
	void HandlePlaylistsChanged(class UOnlineGamePlaylists_X* Playlists);
	void SetInputActionEnabled(const struct FName& ActionName, bool bEnabled);
	void VoteToForfeit();
	void ShowTextInput(const struct FString& Title, const struct FString& Body, const struct FScriptDelegate& Callback, bool bDisplayAsPassword, const struct FString& DefaultText, int MaxLength);
	void SyncSkills();
	void HandleCommerceDialogClosed();
	void SetViewingOnlineScene(bool bViewing);
	void HandlePsyNetLoginChange(class UOnlinePlayerAuthentication_X* Auth);
	void HandlePsyNetLoginConfirm(class UGFxModal_X* Modal);
	void HandlePrivilegeCheckRestriction(class UPrivilegeCheck_X* PrivilegeCheck);
	void HandleOnlineGameConnectionError(class UError_X* Error, class UOnlinePlayer_X* OnlinePlayer);
	void HandleBanned(class UOnlinePlayerAuthentication_X* Auth);
	void PopUISoundState(const struct FName& StateName);
	void PushUISoundState(const struct FName& StateName);
	void OpenStoreOverlay();
	void UpsellClosed();
	void UpsellOpened(const struct FString& context);
	void OnOpenUpsell(const struct FString& context);
	class UTrialMetrics_TA* GetTrialMetrics();
	void OnKickPlayerCanceled(class UGFxModal_X* Modal);
	void OnKickPlayerAccepted(class UGFxModal_X* Modal);
	void OnKickPlayerModalClosed(class UGFxModal_X* Modal);
	void HandleCloseKickPlayerDialog();
	void HandleDrawWorldFullScreenChanged(class UGameViewportClient_TA* GVC);
	void HandleSplitScreenTypeChanged(class UGameViewportClient_TA* GVC);
	void ShowKickPlayerModal(int ControllerIndex);
	void ShowLoginUI(int ControllerIndex);
	void HandleKickedResponse(class UGFxModal_X* Modal);
	void HandleUserSaveReplay(class UGFxModal_X* Modal);
	void ShowErrorMessage();
	void HandleGameInit(class AGRI_X* GRI);
	void HandleConnectionError(const struct FString& Title, const struct FString& Message);
	void OnCancelSaveSaveData(class UGFxModal_X* Modal);
	void OnRetrySaveSaveData(class UGFxModal_X* Modal);
	void HandleSaveDataSaved(class USaveGameManager_TA* SaveManager, class USaveData_TA* SaveData, class UError_X* Error);
	void NotifyEnableSaveDataProcess(class UGFxModal_X* Modal);
	void OnDisableSaveData(class UGFxModal_X* Modal);
	void OnCreateNewSaveData(class UGFxModal_X* Modal);
	void OnConfirmCreateNewSaveData(class UGFxModal_X* Modal);
	void OnRetryLoadSaveData(class UGFxModal_X* Modal);
	void HandleSaveDataLoaded(class USaveGameManager_TA* SaveManager, class USaveData_TA* SaveData, class UError_X* Error);
	void DelayedNotifyWhenSaveDataLoaded();
	void CancelBugReport();
	void SubmitBugReport(const struct FString& Title, const struct FString& Description, const struct FString& Email);
	bool StartBugReport();
	void OnOpenBugReportDialogue();
	void HandleModalClosed(class UGFxModal_X* Modal);
	class UGFxObject* OnCreateTutorialModal();
	class UGFxObject* OnCreateModal(const struct FString& ClassType);
	class UGFxObject* GetModalObject(class UClass* ModalClass);
	class UGFxModal_X* CreateModal(class UClass* ModalClass);
	void OpenFriendsList();
	void ViewProfile(const struct FString& ProfileId);
	struct FString GetKeyForAction(const struct FName& Action, bool bGamepad);
	void ExitToOpenContainer(int ContainerID);
	void LeaveMatch();
	void ExitToMainMenu();
	void ExitGame();
	void PlaySeason();
	void PlayNow();
	void OnPrintOpenScreens();
	void OnChampionshipTrophyScreenFinished();
	void ChampionshipTrophyScreenFinished();
	void SpawnChampionshipTrophy();
	void SeasonSkipPreMatch();
	void RestartMatch();
	class UProfile_TA* GetProfile();
	void HandleGameSessionEnded();
	void HandleGameInvitePassword(const struct FString& Password, bool bCanceled);
	void HandleGameInvitePasswordRequired();
	void ShowPasswordPrompt(const struct FScriptDelegate& Callback);
	void HandleGameInviteConfirmed(class UGFxModal_X* Modal);
	void HandleGameInviteConfirmation(const struct FName& ConfirmationReason);
	void HandleGameInviteAccepted();
	void ShowSingleButtonMessage(const struct FString& MessageType);
	bool IsTrialExpired();
	void HandleTrialStatusChanged(class UOnlineGameTrial_X* InTrial);
	void HandlePCDestroyed(class APlayerController_X* PC);
	void HandleReceivedController(class UPlayer* PlayerRef);
	void OnStart();
	class UOnlineGame_X* STATIC_GetOnlineGame();
};


// Class TAGame.UIStrings_TA
// 0x00D8 (0x0114 - 0x003C)
class UUIStrings_TA : public UUIStrings_X
{
public:
	struct FString                                     Continue;                                         		// 0x003C(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     ExitGame;                                         		// 0x0048(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Retry;                                            		// 0x0054(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     OK;                                               		// 0x0060(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Cancel;                                           		// 0x006C(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Yes;                                              		// 0x0078(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     No;                                               		// 0x0084(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     SignIn;                                           		// 0x0090(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Days;                                             		// 0x009C(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Hours;                                            		// 0x00A8(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Minutes;                                          		// 0x00B4(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Seconds;                                          		// 0x00C0(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Meters;                                           		// 0x00CC(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Kilometers;                                       		// 0x00D8(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Feet;                                             		// 0x00E4(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Miles;                                            		// 0x00F0(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Error;                                            		// 0x00FC(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Warning;                                          		// 0x0108(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.UIStrings_TA");
		return ptr;
	}

};


// Class TAGame.GameEvent_Training_Aerial_TA
// 0x0000 (0x08E4 - 0x08E4)
class AGameEvent_Training_Aerial_TA : public AGameEvent_Training_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Training_Aerial_TA");
		return ptr;
	}


	void CheckForReset();
	struct FVector DetermineBallInitialVelocity(const struct FVector& BallSpawnLoc, class ACar_TA* Car, const struct FFieldSpawnInfo& SpawnInfo);
};


// Class TAGame.GameEvent_Training_Striker_TA
// 0x0000 (0x08E4 - 0x08E4)
class AGameEvent_Training_Striker_TA : public AGameEvent_Training_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Training_Striker_TA");
		return ptr;
	}


	void CheckForReset();
	struct FVector DetermineBallInitialVelocity(const struct FVector& BallSpawnLoc, class ACar_TA* Car, const struct FFieldSpawnInfo& SpawnInfo);
	int GetScore();
};


// Class TAGame.GameEvent_Tutorial_Basic_TA
// 0x0000 (0x08E4 - 0x08E4)
class AGameEvent_Tutorial_Basic_TA : public AGameEvent_Tutorial_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Tutorial_Basic_TA");
		return ptr;
	}


	bool MoveToGround(class AActor* Mover, float HeightCheck);
	void OnVehicleSetup(class ACar_TA* Car);
	void InitBallVelocity();
	void CheckForReset();
	void StartRound();
	void RedoRound();
	void TutorialFinished();
	class ATeam_TA* PickTeam(class AController* C);
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
};


// Class TAGame.GameEvent_Tutorial_Advanced_TA
// 0x0000 (0x08E4 - 0x08E4)
class AGameEvent_Tutorial_Advanced_TA : public AGameEvent_Tutorial_Basic_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Tutorial_Advanced_TA");
		return ptr;
	}

};


// Class TAGame.GameEvent_Tutorial_FreePlay_TA
// 0x0020 (0x0904 - 0x08E4)
class AGameEvent_Tutorial_FreePlay_TA : public AGameEvent_Tutorial_TA
{
public:
	float                                              MaxSpawnRadius;                                   		// 0x08E4(0x0004)
	int                                                MaxTryCount;                                      		// 0x08E8(0x0004)
	float                                              HeightSpawnCheck;                                 		// 0x08EC(0x0004)
	struct FVector                                     AvgExtents;                                       		// 0x08F0(0x000C)
	float                                              ResetDelay;                                       		// 0x08FC(0x0004)
	float                                              LastResetTime;                                    		// 0x0900(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Tutorial_FreePlay_TA");
		return ptr;
	}


	void DestroyGoalIndicators(class APlayerController_TA* Player);
	void CreateGoalIndicators(class APlayerController_TA* Player);
	void InitGameSetup(class ACar_TA* Car);
	struct FVector GetCarSpawnLocation(const struct FFieldSpawnInfo& SpawnInfo);
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
	void OnVehicleSetup(class ACar_TA* Car);
	void InitBallEffects();
	void RedoRound();
};


// Class TAGame.GameInfo_BotPerfTest_TA
// 0x0008 (0x041C - 0x0414)
class AGameInfo_BotPerfTest_TA : public AGameInfo_TA
{
public:
	class AGameEvent_Soccar_TA*                        SoccarArchetype;                                  		// 0x0414(0x0004) (CPF_Edit)
	int                                                TeamSize;                                         		// 0x0418(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_BotPerfTest_TA");
		return ptr;
	}


	void HandleMainEventDestroyed(class AGameEvent_TA* GameEvent);
	void PreLogin(const struct FString& Options, const struct FString& Address, const struct FUniqueNetId& UniqueId, bool bSupportsAuth, struct FString* ErrorMessage);
	void PostBeginPlay();
};


// Class TAGame.MusicTheme_TA
// 0x000C (0x0048 - 0x003C)
class UMusicTheme_TA : public UObject
{
public:
	TArray<struct FGameVersionMusicTheme>              Versions;                                         		// 0x003C(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicTheme_TA");
		return ptr;
	}

};


// Class TAGame.GameInfo_Cinematic_TA
// 0x0004 (0x0414 - 0x0410)
class AGameInfo_Cinematic_TA : public AGameInfoBase_TA
{
public:
	class AAssetProfiler_TA*                           Profiler;                                         		// 0x0410(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Cinematic_TA");
		return ptr;
	}


	void SetStadiumColors();
	void StopProfile();
	void ProfileAssets();
	void GenericPlayerInitialization(class AController* C);
	class APlayerController* SpawnPlayerController(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
};


// Class TAGame.PlayerController_Cinematic_TA
// 0x0004 (0x0624 - 0x0620)
class APlayerController_Cinematic_TA : public APlayerController_X
{
public:
	class UPostProcessManager_X*                       PostProcessManagerArchetype;                      		// 0x0620(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerController_Cinematic_TA");
		return ptr;
	}


	void ReceivedPlayer();
};


// Class TAGame.GFxData_System_TA
// 0x0038 (0x008C - 0x0054)
class UGFxData_System_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     Language;                                         		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     UIState;                                          		// 0x0060(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     SharedUIState;                                    		// 0x006C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                LocalPlayerCount;                                 		// 0x0078(0x0004) (CPF_DataBinding)
	unsigned long                                      bSaveDataLoaded : 1;                              		// 0x007C(0x0004) (CPF_DataBinding)
	unsigned long                                      bLoggedInPsyNet : 1;                              		// 0x007C(0x0004) (CPF_DataBinding)
	unsigned long                                      bLoggedInPlatform : 1;                            		// 0x007C(0x0004) (CPF_DataBinding)
	TEnumAsByte<enum class ESplitScreenType>           SplitScreenType;                                  		// 0x0080(0x0001) (CPF_DataBinding)
	TEnumAsByte<enum class EInputPlatformType>         AvailableGamepadType;                             		// 0x0081(0x0001) (CPF_DataBinding)
	unsigned char                                      UnknownData00[0x2];                               		// 0x0082(0x0002) MISSED OFFSET
	float                                              SafeZoneRatio;                                    		// 0x0084(0x0004) (CPF_DataBinding)
	float                                              UIScale;                                          		// 0x0088(0x0004) (CPF_DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_System_TA");
		return ptr;
	}


	void HandleSafeZoneRatioUpdated(class UGameViewportClient_TA* GVC);
	void HandleUIScaleModifierUpdated(class UGameViewportClient_TA* GVC);
	void HandleAvailableGamepadTypeChanged(class UGFxEngine_X* Engine);
	void HandleLocalPlayerChanged(class ULocalPlayer* NewPlayer);
	void HandleSplitScreenTypeChanged(class UGameViewportClient_TA* GVC);
	void SetSharedUIState(const struct FString& NewSharedUIState);
	void HandleSaveDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* SaveData, class UError_X* Error);
	void HandleLocalPlayerLoginStatusChanged(class UOnlinePlayer_X* InPlayer);
	void HandlePsyWebLoginChanged(class UOnlinePlayerAuthentication_X* Auth);
	void OnShellSet();
};


// Class TAGame.GameInfo_PerfTest_TA
// 0x0000 (0x0410 - 0x0410)
class AGameInfo_PerfTest_TA : public AGameInfoBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_PerfTest_TA");
		return ptr;
	}


	int SortCameraActors(class ACameraActor* A, class ACameraActor* B);
	void SelectCamera(int Direction);
	void PrevCamera();
	void NextCamera();
	void GenericPlayerInitialization(class AController* C);
	class APlayerController* SpawnPlayerController(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
};


// Class TAGame.SeqEvent_ReplayTime_TA
// 0x0004 (0x0118 - 0x0114)
class USeqEvent_ReplayTime_TA : public USequenceEvent
{
public:
	float                                              TimeSeconds;                                      		// 0x0114(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_ReplayTime_TA");
		return ptr;
	}

};


// Class TAGame.DynamicPlayerStart_TA
// 0x0000 (0x02D4 - 0x02D4)
class ADynamicPlayerStart_TA : public APlayerStart_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DynamicPlayerStart_TA");
		return ptr;
	}

};


// Class TAGame.GameInfo_Season_TA
// 0x0008 (0x041C - 0x0414)
class AGameInfo_Season_TA : public AGameInfo_TA
{
public:
	class AGameEvent_Soccar_TA*                        SoccarArchetype;                                  		// 0x0414(0x0004) (CPF_Edit)
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x0418(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Season_TA");
		return ptr;
	}


	void RestartLevel();
	void RestartPlayer(class AController* aPlayer);
	bool PlayerCanRestart(class APlayerController* aPlayer);
	void PostLogin(class APlayerController* NewPlayer);
};


// Class TAGame.MapSelector_TA
// 0x0048 (0x0090 - 0x0048)
class UMapSelector_TA : public UComponent
{
public:
	unsigned long                                      bDebug : 1;                                       		// 0x0048(0x0004) (CPF_Edit)
	TArray<class UMapData_TA*>                         AllMaps;                                          		// 0x004C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FMapGroup>                           AllGroups;                                        		// 0x0058(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FMapGroup>                           RemainingGroupMaps;                               		// 0x0064(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<int>                                        RemainingGroups;                                  		// 0x0070(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<int>                                        PreviousGroups;                                   		// 0x007C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	int                                                PreviousGroupMax;                                 		// 0x0088(0x0004) (CPF_Edit)
	class UMapData_TA*                                 LastPlayedMap;                                    		// 0x008C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapSelector_TA");
		return ptr;
	}


	struct FName GetNextPreferredMapName(int NumPlayers, TArray<struct FName>* Likes, TArray<struct FName>* Dislikes);
	class UMapData_TA* GetNextPreferredMap(int NumPlayers, TArray<struct FName>* Likes, TArray<struct FName>* Dislikes);
	struct FMapGroup GetChosenGroup(TArray<float> GroupWeights);
	TArray<float> GetMapGroupWeights(int NumPlayers, TArray<struct FName>* Likes, TArray<struct FName>* Dislikes);
	float GetMapGroupWeight(const struct FMapGroup& Group, int NumPlayers, TArray<struct FName>* Likes, TArray<struct FName>* Dislikes);
	struct FName GetNextMapName();
	struct FString GetMapsString(TArray<class UMapData_TA*> Maps);
	void SetMapPlayed(class UMapData_TA* Map);
	class UMapData_TA* GetNextMap();
	void RebuildRemainingGroups();
	void GetCompatibleMaps(TArray<class UMapData_TA*>* SourceMaps, TArray<class UMapData_TA*>* CompatibleMaps);
	void BuildGroups();
	void SetMaps(TArray<class UMapData_TA*> Maps);
};


// Class TAGame.GRI_TA
// 0x0010 (0x04B0 - 0x04A0)
class AGRI_TA : public AGRI_X
{
public:
	unsigned long                                      bHasTalkers : 1;                                  		// 0x04A0(0x0004) (CPF_Transient)
	struct FString                                     NewDedicatedServerIP;                             		// 0x04A4(0x000C) (CPF_Net, CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GRI_TA");
		return ptr;
	}


	void SetNewDedicatedServerIP(const struct FString& IP);
	void SetVoiceChatActive(bool bActive);
	void HandleTalkingStatusChange(class UOnlineGameVoice_X* OnlineGameVoice, class APlayerReplicationInfo* PRI, bool bTalking);
	struct FString GetTimeString(int Seconds, bool bCountDown, bool bShowMinutes, float MS, bool bShowMS);
	void Destroyed();
	void SetDefaultScriptedColors();
	void PostBeginPlay();
};


// Class TAGame.GameInfo_Tutorial_TA
// 0x0000 (0x0434 - 0x0434)
class AGameInfo_Tutorial_TA : public AGameInfo_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Tutorial_TA");
		return ptr;
	}


	void ResetTraining();
	void InitTutorialGameEvent(class AGameEvent_TA* GameEventArchetype, int InDifficulty);
	void StartTutorialType(const struct FString& Type, const struct FString& Difficulty);
	void SetTutorialDifficulty(int Difficulty);
	void PostBeginPlay();
};


// Class TAGame.GameSettingPlaylist_TA
// 0x0004 (0x0084 - 0x0080)
class UGameSettingPlaylist_TA : public UGameSettingPlaylist_X
{
public:
	class UMapSet_TA*                                  MapSet;                                           		// 0x0080(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameSettingPlaylist_TA");
		return ptr;
	}


	void Setup(class UPlaylistSettings_X* Settings);
};


// Class TAGame.PlaylistSettings_TA
// 0x0004 (0x0084 - 0x0080)
class UPlaylistSettings_TA : public UPlaylistSettings_X
{
public:
	class UMapSet_TA*                                  MapSet;                                           		// 0x0080(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlaylistSettings_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_Chat_TA
// 0x0050 (0x00A4 - 0x0054)
class UGFxData_Chat_TA : public UGFxDataSingleton_X
{
public:
	int                                                MaxMessages;                                      		// 0x0054(0x0004) (CPF_Edit)
	TArray<struct FChatPresetMessageGroup>             PresetGroups;                                     		// 0x0058(0x000C) (CPF_Edit, CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FChatPresetMessage>                  PresetMessages;                                   		// 0x0064(0x000C) (CPF_Edit, CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FGFxChatMessage>                     Messages;                                         		// 0x0070(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FPendingFilterMessage>               PendingFilterMessages;                            		// 0x007C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     BlockedMessageString;                             		// 0x0088(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     ChatFilteredString;                               		// 0x0094(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	unsigned long                                      bGameEnded : 1;                                   		// 0x00A0(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Chat_TA");
		return ptr;
	}


	void OnOpenPartyChat();
	void OnOpenTeamChat();
	void OnOpenChat();
	void RepopulatedChat();
	void ClearChat();
	void OnChatMessage(int Team, const struct FString& PlayerName, const struct FString& Message, TEnumAsByte<enum class EChatChannel> ChatChannel, bool bLocalPlayer);
	void AddChatMessage(int Team, const struct FString& PlayerName, const struct FString& Message, TEnumAsByte<enum class EChatChannel> ChatChannel, bool bLocalPlayer, bool bTransient, bool bPreset);
	void DispatchChatMessage(const struct FString& Message, TEnumAsByte<enum class EChatChannel> ChatChannel);
	void HandleMessageSanitized(const struct FString& Original, const struct FString& Sanitized);
	void SendLocalChatMessage(const struct FString& Message);
	void SendPartyChatMessage(const struct FString& Message, bool bCanceled);
	void SendTeamChatMessage(const struct FString& Message, bool bCanceled);
	void SendGlobalChatMessage(const struct FString& Message, bool bCanceled);
	void SendChatChannelMessage(const struct FString& Message, TEnumAsByte<enum class EChatChannel> ChatChannel);
	void SendChatMessage(const struct FString& Message, bool bTeamMessage);
	TEnumAsByte<enum class EVoiceFilter> GetChatFilter();
	void OnPressChatPreset(int Index);
	void SendChatPresetMessage(const struct FName& MessageId, bool bTeam);
	void InitChatMessages();
	class APlayerController_TA* GetPlayerController();
	class AGameEvent_Soccar_TA* GetGameEvent();
	void HandleGameEnded(class AGameEvent_Soccar_TA* GameEvent);
	void HandleBindingsChanged(class UProfile_TA* Profile);
	void OnRemoved();
	void HandleGameEventChanged(class APRI_TA* PRI);
	void HandlePRIReceived(class APlayerController_X* PC);
	void OnShellSet();
	class UOnlineGame_X* GetOnlineGame();
};


// Class TAGame.GFxData_Community_TA
// 0x0068 (0x00BC - 0x0054)
class UGFxData_Community_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     BlogTitle;                                        		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     BlogBody;                                         		// 0x0060(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UTexture*                                    BlogTexture;                                      		// 0x006C(0x0004) (CPF_DataBinding)
	int                                                BlogTextureSizeX;                                 		// 0x0070(0x0004) (CPF_DataBinding)
	int                                                BlogTextureSizeY;                                 		// 0x0074(0x0004) (CPF_DataBinding)
	struct FString                                     News;                                             		// 0x0078(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	unsigned long                                      bNewsIsAlert : 1;                                 		// 0x0084(0x0004) (CPF_DataBinding)
	class UTexture*                                    YoutubeTexture;                                   		// 0x0088(0x0004) (CPF_DataBinding)
	int                                                YoutubeTextureSizeX;                              		// 0x008C(0x0004) (CPF_DataBinding)
	int                                                YoutubeTextureSizeY;                              		// 0x0090(0x0004) (CPF_DataBinding)
	int                                                YoutubeTexturePosX;                               		// 0x0094(0x0004) (CPF_DataBinding)
	int                                                YoutubeTexturePosY;                               		// 0x0098(0x0004) (CPF_DataBinding)
	struct FString                                     YoutubeCaption;                                   		// 0x009C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     YouTubeURL;                                       		// 0x00A8(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UOnlineGameCommunity_X*                      Community;                                        		// 0x00B4(0x0004) (CPF_Transient)
	float                                              UpdateBlogTimeout;                                		// 0x00B8(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Community_TA");
		return ptr;
	}


	void ShowHelp();
	void HandleImageDownloaded(const struct FDownloadedImage& Image, class UTexture** Tex, int* Width, int* Height);
	void HandleYouTubeImageDownloaded(class UOnlineImageDownloaderWeb_X* Downloader, const struct FDownloadedImage& Image);
	void HandleBlogImageDownloaded(class UOnlineImageDownloaderWeb_X* Downloader, const struct FDownloadedImage& Image);
	void DownloadImage(const struct FString& ImageURL, const struct FScriptDelegate& Callback);
	void UpdateBlogText();
	void UpdateBlogTextTimedOut();
	void UpdateBlog();
	void HandleBlogTextChanged(class UOnlineStaticTextSync_X* TextSync);
	void HandleInternetConnectionChanged(bool bConnected);
	void OnShellSet();
};


// Class TAGame.GFxData_Controls_TA
// 0x0054 (0x00A8 - 0x0054)
class UGFxData_Controls_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FLocalizedBindingCategory>           Categories;                                       		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FLocalizedAction>                    Actions;                                          		// 0x0060(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FUIPlayerBinding>                    PCBindings;                                       		// 0x006C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FUIPlayerBinding>                    GamepadBindings;                                  		// 0x0078(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UProfile_TA*                                 Profile;                                          		// 0x0084(0x0004) (CPF_Transient)
	TArray<struct FBindingAction>                      BindingActions;                                   		// 0x0088(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FName                                       PendingRecordBindingAction;                       		// 0x0094(0x0008) (CPF_Transient)
	struct FName                                       PendingRecordBindingAxis;                         		// 0x009C(0x0008) (CPF_Transient)
	class UInteraction*                                Interaction;                                      		// 0x00A4(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Controls_TA");
		return ptr;
	}


	void HandleActiveBindingsChanged(class UProfile_TA* InProfile);
	bool IsRemappableType(const struct FName& Action, TEnumAsByte<enum class ERemappable> RemappableType, TArray<struct FPlayerBinding>* Bindings);
	bool IsRemappable(const struct FName& Action, TArray<struct FPlayerBinding> Bindings);
	void Save();
	void ReseToDefaults();
	void OnBindingSet();
	TArray<struct FUIPlayerBinding> InitUIBindingsForArray(const struct FName& PresetName, TArray<struct FPlayerBinding>* Bindings);
	void InitUIBindings(const struct FName& PresetName);
	void InvertAxisForBinding(const struct FName& Action, TArray<struct FPlayerBinding>* OutBindings);
	void InvertAxis(const struct FName& Axis);
	void RemoveBinding(const struct FName& Action, const struct FName& Key, TEnumAsByte<enum class EAxisSign> AxisSign, TArray<struct FPlayerBinding>* OutBindings);
	void SetSingleBinding(const struct FName& Action, const struct FName& Key, TEnumAsByte<enum class EAxisSign> AxisSign, TArray<struct FPlayerBinding> DefaultBindings, TArray<struct FPlayerBinding>* OutBindings);
	void SetBinding(const struct FName& Action, const struct FName& Key, TEnumAsByte<enum class EAxisSign> AxisSign, TArray<struct FPlayerBinding> DefaultBindings, TArray<struct FPlayerBinding>* OutBindings);
	void SetCurrentBinding(const struct FName& Key, bool bGamepad, TEnumAsByte<enum class EAxisSign> AxisSign);
	bool HandleBindingInputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad);
	bool HandleBindingInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<enum class EInputEvent> EventType, float AmountDepressed, bool bGamepad);
	void ClearBindingFromArray(const struct FName& Action, TArray<struct FPlayerBinding>* OutBindings);
	void ClearBinding(const struct FName& Action);
	void CancelRecordBinding();
	void StartRecordBinding(const struct FName& Action);
	struct FString LocalizeKeyInternal(const struct FName& Key);
	struct FString LocalizeKey(const struct FName& Key, TEnumAsByte<enum class EAxisSign> AxisSign);
	struct FLocalizedAction GetLocalizedAction(const struct FName& ActionName);
	void HandleProfileSet(class ULocalPlayer_TA* InLocalPlayer);
	void OnShellSet();
};


// Class TAGame.GFxData_Credits_TA
// 0x0048 (0x009C - 0x0054)
class UGFxData_Credits_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FLocalizedDepartmentData>            LocalizedDepartmentGroups;                        		// 0x0054(0x000C) (CPF_NeedCtorLink)
	TArray<struct FLocalizedPostCreditData>            LocalizedCopyrightGroups;                         		// 0x0060(0x000C) (CPF_NeedCtorLink)
	TArray<struct FLocalizedPostCreditData>            LocalizedMusicGroups;                             		// 0x006C(0x000C) (CPF_NeedCtorLink)
	TArray<struct FDepartmentData>                     DepartmentGroups;                                 		// 0x0078(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FPostCreditData>                     CopyrightGroups;                                  		// 0x0084(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FPostCreditData>                     MusicGroups;                                      		// 0x0090(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Credits_TA");
		return ptr;
	}


	void AddToPostCreditData(const struct FLocalizedPostCreditData& LocalizedPostCredit, TArray<struct FPostCreditData>* Out_PostCredits);
	void AddToDepartmentData(const struct FString& LocalizedDepartmentTitle, const struct FLocalizedNameData& LocalizedNameInfo);
	void UnloadCredits();
	void MarkCreditsViewed();
	void LoadCredits();
};


// Class TAGame.GFxData_GameEvent_TA
// 0x0080 (0x00D4 - 0x0054)
class UGFxData_GameEvent_TA : public UGFxDataSingleton_X
{
public:
	int                                                TimeRemaining;                                    		// 0x0054(0x0004) (CPF_DataBinding)
	int                                                TimeToNextMatch;                                  		// 0x0058(0x0004) (CPF_DataBinding)
	unsigned long                                      bOverTime : 1;                                    		// 0x005C(0x0004) (CPF_DataBinding)
	unsigned long                                      bOnline : 1;                                      		// 0x005C(0x0004) (CPF_DataBinding)
	unsigned long                                      bUnfairTeams : 1;                                 		// 0x005C(0x0004) (CPF_DataBinding)
	unsigned long                                      bForfeit : 1;                                     		// 0x005C(0x0004) (CPF_DataBinding)
	unsigned long                                      bNoContest : 1;                                   		// 0x005C(0x0004) (CPF_DataBinding)
	unsigned long                                      bServerTraveling : 1;                             		// 0x005C(0x0004) (CPF_DataBinding)
	unsigned long                                      bRankedMatch : 1;                                 		// 0x005C(0x0004) (CPF_DataBinding)
	unsigned long                                      bSolo : 1;                                        		// 0x005C(0x0004) (CPF_DataBinding)
	unsigned long                                      bHasLeaveMatchPenalty : 1;                        		// 0x005C(0x0004) (CPF_DataBinding)
	unsigned long                                      bCanVoteToForfeit : 1;                            		// 0x005C(0x0004) (CPF_DataBinding)
	unsigned long                                      bViewingEndGameReplay : 1;                        		// 0x005C(0x0004) (CPF_DataBinding)
	struct FString                                     MatchState;                                       		// 0x0060(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FName                                       GameState;                                        		// 0x006C(0x0008) (CPF_DataBinding)
	struct FName                                       MatchType;                                        		// 0x0074(0x0008) (CPF_DataBinding)
	struct FName                                       EventType;                                        		// 0x007C(0x0008) (CPF_DataBinding)
	int                                                ReplayScoredBy;                                   		// 0x0084(0x0004) (CPF_DataBinding)
	int                                                ReplayAssistedBy;                                 		// 0x0088(0x0004) (CPF_DataBinding)
	float                                              ReplaySpeed;                                      		// 0x008C(0x0004) (CPF_DataBinding)
	float                                              ReplayTime;                                       		// 0x0090(0x0004) (CPF_DataBinding)
	int                                                WinningTeam;                                      		// 0x0094(0x0004) (CPF_DataBinding)
	int                                                MaxPlayers;                                       		// 0x0098(0x0004) (CPF_DataBinding)
	struct FString                                     PlaylistName;                                     		// 0x009C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FName                                       PlaylistId;                                       		// 0x00A8(0x0008) (CPF_DataBinding)
	struct FString                                     ServerName;                                       		// 0x00B0(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     PartyPlaylistName;                                		// 0x00BC(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     MutatorsString;                                   		// 0x00C8(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_GameEvent_TA");
		return ptr;
	}


	void SetIsViewingEndgameReplay(bool Value);
	void OnSkipScoreIntro();
	void OnCloseScoreboard();
	void OnOpenScoreboard();
	void OnCloseMidgameMenu();
	void OnOpenMidgameMenu();
	void OnTickerEvent(const struct FString& EventName, class UTexture* Texture, int ReceiverIndex, int VictimIndex);
	void OnGameMessage(const struct FName& Type, const struct FString& Message);
	void OnStatEvent(const struct FString& EventName, int Points, class UTexture* Texture, const struct FName& Sound);
	void ForceStartPlay();
	void SetReadyToPlay(bool bReady, bool bReadyAllLocalPlayers);
};


// Class TAGame.GFxData_Garage_TA
// 0x0180 (0x01D4 - 0x0054)
class UGFxData_Garage_TA : public UGFxDataSingleton_X
{
public:
	TArray<class UProductSlot_TA*>                     LoadoutSlots;                                     		// 0x0054(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class ACarPreviewActor_TA*                         PreviewActor;                                     		// 0x0060(0x0004) (CPF_Transient)
	TArray<struct FGarageProductSlot>                  ProductSlots;                                     		// 0x0064(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FGarageTeam>                         Teams;                                            		// 0x0070(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                PaintFinishSlotIndex;                             		// 0x007C(0x0004) (CPF_DataBinding)
	int                                                PreviewTeam;                                      		// 0x0080(0x0004) (CPF_DataBinding)
	TArray<struct FGFxTeamColor>                       CustomColors;                                     		// 0x0084(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FGFxTeamColor>                       Team0Colors;                                      		// 0x0090(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FGFxTeamColor>                       Team1Colors;                                      		// 0x009C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	unsigned long                                      bTeam0FinishDisabled : 1;                         		// 0x00A8(0x0004) (CPF_DataBinding)
	unsigned long                                      bTeam1FinishDisabled : 1;                         		// 0x00A8(0x0004) (CPF_DataBinding)
	unsigned long                                      bCustom0FinishDisabled : 1;                       		// 0x00A8(0x0004) (CPF_DataBinding)
	unsigned long                                      bCustom1FinishDisabled : 1;                       		// 0x00A8(0x0004) (CPF_DataBinding)
	unsigned long                                      bTeam0ColorForced : 1;                            		// 0x00A8(0x0004) (CPF_DataBinding)
	unsigned long                                      bTeam1ColorForced : 1;                            		// 0x00A8(0x0004) (CPF_DataBinding)
	unsigned long                                      bCustom0ColorForced : 1;                          		// 0x00A8(0x0004) (CPF_DataBinding)
	unsigned long                                      bCustom1ColorForced : 1;                          		// 0x00A8(0x0004) (CPF_DataBinding)
	unsigned long                                      bTrial : 1;                                       		// 0x00A8(0x0004) (CPF_Transient)
	struct FString                                     ForcedTeam0FinishName;                            		// 0x00AC(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     ForcedTeam1FinishName;                            		// 0x00B8(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                ForcedTeam0Color;                                 		// 0x00C4(0x0004) (CPF_DataBinding)
	int                                                ForcedTeam1Color;                                 		// 0x00C8(0x0004) (CPF_DataBinding)
	int                                                ForcedCustom0Color;                               		// 0x00CC(0x0004) (CPF_DataBinding)
	int                                                ForcedCustom1Color;                               		// 0x00D0(0x0004) (CPF_DataBinding)
	struct FName                                       PlayerTitle;                                      		// 0x00D4(0x0008) (CPF_DataBinding)
	TArray<struct FPlayerTitleData>                    PlayerTitles;                                     		// 0x00DC(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UProfile_TA*                                 Profile;                                          		// 0x00E8(0x0004) (CPF_Transient)
	struct FLoadoutData                                Loadouts[0x2];                                    		// 0x00EC(0x0034) (CPF_Transient, CPF_NeedCtorLink)
	struct FLoadoutData                                LastNonLicensedLoadout[0x2];                      		// 0x0154(0x0034) (CPF_Transient, CPF_NeedCtorLink)
	int                                                LoadoutSetIndex;                                  		// 0x01BC(0x0004) (CPF_Transient)
	class ULoadoutSet_TA*                              LoadoutSet;                                       		// 0x01C0(0x0004) (CPF_Transient)
	unsigned char                                      UnknownData00[0x8];                               		// 0x01C4(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_Garage_TA.PreviewOnlineID
	int                                                PreviewProductSlot;                               		// 0x01CC(0x0004) (CPF_Transient)
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x01D0(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Garage_TA");
		return ptr;
	}


	bool HasNewProducts();
	void SetPlayerTitle(const struct FName& Title);
	void UpdateColorSettings();
	void OnProductsChanged();
	void HandleDLCChange(class USaveData_TA* SaveData);
	void RemoveNewProduct();
	void HandleLoadoutChanged(class ULoadoutSet_TA* InLoadoutSet, class ULoadout_TA* InLoadout);
	void CommitLoadout();
	void SetPreviewTeam(int Team);
	void SetCustomFinish(int Team);
	bool IsCustomFinishDisabled(int Team);
	void SetPreviewCustomFinish();
	void SetTeamFinish(int Team);
	bool IsTeamFinishDisabled(int Team);
	void SetPreviewTeamFinish(int Team);
	void SetCustomColor(int Team, int ColorID);
	bool IsCustomColorDisabled(int Team);
	void SetPreviewCustomColor(int ColorID);
	void SetTeamColor(int Team, int ColorID);
	bool IsTeamColorDisabled(int Team);
	void SetPreviewTeamColor(int Team, int ColorID);
	void ClearPreviewPaint(int Team);
	bool ProductSlotIsEnabled(const struct FGarageProductSlot& ProductSlot);
	void RefreshEnabledProductSlots();
	void EquipProduct(int SlotIndex, int InEquipAction);
	class UProduct_TA* GetProduct();
	void HandleLicensedLoadouts();
	void ClearPreviewLoadout(int PendingPreviewProductID);
	void ClearPreviewProduct();
	void SetPreviewProduct(int SlotIndex);
	void SetSlot(int SlotIndex);
	void InitColors();
	void UpdateProductSlotNewItems();
	void InitProductSlots();
	void InitTeams();
	void InitLoadouts();
	void LoadUserLoadout();
	void HandlePreviewActorsChanged(class UCarPreviewSet_TA* G);
	void LoadTitles();
	void HandleTrialStatusChanged(class UOnlineGameTrial_X* InTrial);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_Products_TA
// 0x00D8 (0x012C - 0x0054)
class UGFxData_Products_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FLoadingProduct>                     LoadingProducts;                                  		// 0x0054(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     ProductLabel;                                     		// 0x0060(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     ProductLongLabel;                                 		// 0x006C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UTexture*                                    ProductIcon;                                      		// 0x0078(0x0004) (CPF_DataBinding)
	struct FString                                     ProductDescription;                               		// 0x007C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     ProductStatLabel;                                 		// 0x0088(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     ProductStatDescription;                           		// 0x0094(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     ProductStatValue;                                 		// 0x00A0(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     CertifiedStatLabel;                               		// 0x00AC(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	unsigned char                                      UnknownData00[0x8];                               		// 0x00B8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_Products_TA.ProductID
	unsigned char                                      UnknownData01[0x8];                               		// 0x00C0(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_Products_TA.BaseProductID
	unsigned char                                      UnknownData02[0x8];                               		// 0x00C8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_Products_TA.SchematicPointerID
	int                                                ProductSlot;                                      		// 0x00D0(0x0004) (CPF_DataBinding)
	struct FString                                     ProductSlotLabel;                                 		// 0x00D4(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	unsigned long                                      bProductEquipped_1 : 1;                           		// 0x00E0(0x0004) (CPF_DataBinding)
	unsigned long                                      bProductEquipped_2 : 1;                           		// 0x00E0(0x0004) (CPF_DataBinding)
	unsigned long                                      bProductUnlocked : 1;                             		// 0x00E0(0x0004) (CPF_DataBinding)
	unsigned long                                      bProductIsPack : 1;                               		// 0x00E0(0x0004) (CPF_DataBinding)
	unsigned long                                      bProductIsNew : 1;                                		// 0x00E0(0x0004) (CPF_DataBinding)
	unsigned long                                      bProductHasNewSkin : 1;                           		// 0x00E0(0x0004) (CPF_DataBinding)
	unsigned long                                      bProductCanBeTradedIn : 1;                        		// 0x00E0(0x0004) (CPF_DataBinding)
	unsigned long                                      bProductCanBePlayerTraded : 1;                    		// 0x00E0(0x0004) (CPF_DataBinding)
	unsigned long                                      bProductIsContainer : 1;                          		// 0x00E0(0x0004) (CPF_DataBinding)
	unsigned long                                      bProductIsContainerKey : 1;                       		// 0x00E0(0x0004) (CPF_DataBinding)
	unsigned long                                      bProductIsSchematic : 1;                          		// 0x00E0(0x0004) (CPF_DataBinding)
	unsigned long                                      bProductUpgradable : 1;                           		// 0x00E0(0x0004) (CPF_DataBinding)
	unsigned long                                      bDebugLoadingProducts : 1;                        		// 0x00E0(0x0004) (CPF_Edit)
	int                                                ProductPaintColor;                                		// 0x00E4(0x0004) (CPF_DataBinding)
	struct FString                                     ProductPaintColorName;                            		// 0x00E8(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TEnumAsByte<enum class EProductQuality>            ProductQuality;                                   		// 0x00F4(0x0001) (CPF_DataBinding)
	unsigned char                                      UnknownData03[0x3];                               		// 0x00F5(0x0003) MISSED OFFSET
	int                                                ProductQuantity;                                  		// 0x00F8(0x0004) (CPF_DataBinding)
	int                                                TradeHold;                                        		// 0x00FC(0x0004) (CPF_DataBinding)
	int                                                SeriesID;                                         		// 0x0100(0x0004) (CPF_DataBinding)
	struct FString                                     SeriesDescription;                                		// 0x0104(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                SchematicResources;                               		// 0x0110(0x0004) (CPF_DataBinding)
	class UGFxProductAttributeMap_TA*                  AttributeMap;                                     		// 0x0114(0x0004) (CPF_Edit, CPF_ExportObject, CPF_NeedCtorLink, CPF_EditInline)
	struct FString                                     AttributeTables;                                  		// 0x0118(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UMtxConfig_TA*                               MtxConfig;                                        		// 0x0124(0x0004) (CPF_Edit)
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x0128(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Products_TA");
		return ptr;
	}


	void OnSchematicResourcesChanged();
	void HandleSchematicResourcesChanged(class USaveData_TA* SaveData);
	void RefreshSchematicResources();
	void HandleNewOnlineProduct(class USaveData_TA* Data, class UOnlineProduct_TA* OnlineProduct);
	void OnProductsRefreshed();
	void HandleOnlineProductsSynced(class USaveData_TA* SaveData);
	void RefreshProducts();
	void GetFirstInstanceIdForProduct(int InProductID);
	int GetCountByProductID(int InProductID);
	int GetTimeHoldRemaining();
	void UpdateAllProductData();
	bool FolderContainsNewProducts();
	bool HasNewOnlineProducts();
	struct FString GetProductLongLabel(int InProductID);
	TEnumAsByte<enum class EProductQuality> GetProductQuality(int InProductID);
	struct FString GetProductTrademarkLabel(int InProductID);
	struct FString GetProductLabel(int InProductID);
	void OnProductLoaded(int ThumbnailSize);
	struct FString BuildAttributeTableStr(TArray<class UGFxData_ProductAttribute_TA*>* Attributes, TArray<struct FName>* MapLocal_58CF0E374C123E683361BB9B5E804C58);
	TArray<class UGFxData_ProductAttribute_TA*> InstanceAttributes(const TScriptInterface<class UIProductAttributeProvider_TA>& AttributeProvider, TArray<class UClass*>* MapLocal_F7EC1C18468C6EE0323BD088207A248B, TArray<class UGFxData_ProductAttribute_TA*>* MapLocal_991D92204F057674FC48F589D91D413A);
	void ClearAttributes();
	void UpdateProductData(const struct FLoadingProduct& ProductData, TArray<class UGFxData_ProductAttribute_TA*>* ConcatLocal_12920DDF455782C34B5354AAFBA4A8D8, TArray<class UGFxData_ProductAttribute_TA*>* ConcatLocal_5C881BA9474F7D59C6B5C1AD404C72B8);
	bool CanBePlayerTraded(class UProduct_TA* Product);
	bool CanBeTradedIn();
	void HandleRenderTargetUpdate(class UTextureRenderTarget2D* Texture);
	void HandleProductThumbnailRendered(const struct FProductThumbnailResult& Result);
	void RenderProductThumbnail(const struct FLoadingProduct& ProductData);
	void HandleProductLoaded(const struct FAssetLoadResult& Result);
	void LoadProduct(TEnumAsByte<enum class EProductThumbnailSize> ThumbnailSize, int ViewId);
	void OnClearViewedProduct(TEnumAsByte<enum class EProductThumbnailSize> ThumbnailSize);
	void CancelLoadingThumbnail(int LoadingIndex);
	bool IsProductIDReferenced(int InProductID);
	void ClearProductView(int LoadingIndex, int ViewId);
	void ClearReferencedProducts(int ViewId);
	void SetViewProducts(int ViewId, TEnumAsByte<enum class EProductThumbnailSize> ThumbnailSize);
	void GetSortedProductIDsForSlotAndPack(int SlotIndex, int PackID);
	void GetSortedProductIDsForPack(int PackID);
	void GetDLCProductIDs(int SlotIndex);
	void GetSortedProductIDs(int SlotIndex);
	void SortProductIDs();
	void GetVisibleProductIDs(int SlotIndex, int PackID, bool bUnlockedOnly);
	void GetVisibleDLCProductIDs(int SlotIndex);
	class ACarPreviewActor_TA* GetPremiumCarActor();
	void GetUnlockedProductIDs(int SlotIndex);
	bool STATIC_ShouldShowProduct(class UProfile_TA* Profile, class UProduct_TA* Product, int PackID, TArray<int>* ForcedProducts);
	void STATIC_GetForcedProducts(class UProfile_TA* Profile, int SlotIndex, TArray<int>* OutForcedProducts);
	class UProfile_TA* GetProfile();
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_ItemDrops_TA
// 0x000C (0x0060 - 0x0054)
class UGFxData_ItemDrops_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxItemDrop>                        Drops;                                            		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ItemDrops_TA");
		return ptr;
	}


	void GetUnseenContainerDrops();
	void RemoveContainerDrop();
	void ClearContainerDrops();
	void OnAllItemDropsHandled();
	bool AnyPlayerHasUnlocks();
	void OnDropsHandled();
	void OnDropHandled();
	void PlayerAllDropsHandled();
	void EquipNow();
	struct FGFxItemDrop CreateItemDrop(int ProductID);
	bool CanEquipNow(int ProductID);
	void HandleNewOnlineItem(class USaveData_TA* Data, class UOnlineProduct_TA* OnlineProduct);
	void HandleRewardUnlocked(class USaveData_TA* Data, int ProductID);
	void AddDrop(const struct FGFxItemDrop& Drop);
	void HandleSaveDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* MySaveData, class UError_X* Error);
	void OnShellSet();
};


// Class TAGame.GFxData_Leaderboards_TA
// 0x0034 (0x0088 - 0x0054)
class UGFxData_Leaderboards_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FLeaderboardData>                    LeaderboardDataSet;                               		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                PlayerLeaderboardValue;                           		// 0x0060(0x0004) (CPF_DataBinding)
	int                                                PlayerLeaderboardDivision;                        		// 0x0064(0x0004) (CPF_DataBinding)
	float                                              PlayerLeaderboardMMR;                             		// 0x0068(0x0004) (CPF_DataBinding)
	struct FString                                     PlayerLeaderboardName;                            		// 0x006C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	unsigned long                                      bShowGlobalLeaderboards : 1;                      		// 0x0078(0x0004) (CPF_DataBinding)
	class UOnlineGameLeaderboards_X*                   Leaderboards;                                     		// 0x007C(0x0004) (CPF_Transient)
	struct FName                                       PendingLeaderboardRequestID;                      		// 0x0080(0x0008) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Leaderboards_TA");
		return ptr;
	}


	void ViewProfile(int RowIndex);
	void HandlePlayerNameSanitized(const struct FString& Original, const struct FString& Sanitized);
	void SanitizePlayerNames(TArray<struct FLeaderboardData>* Table);
	void GetLeaderboardFriends(const struct FName& LeaderboardId);
	void HandlePlayerFriendLeaderboardRecieved(class UOnlineGameLeaderboards_X* LeaderboardsRef, const struct FName& LeaderboardId, class UError_X* Error, struct FLeaderboardData* PlayerLeaderboardData);
	void HandlePlayerLeaderboardRecieved(class UOnlineGameLeaderboards_X* LeaderboardsRef, const struct FName& LeaderboardId, class UError_X* Error, struct FLeaderboardData* PlayerLeaderboardData);
	void HandleLeaderboardAvatarReceived(class UTexture* Avatar, struct FUniqueNetId* PlayerID);
	void RequestPlayerAvatar(int LeaderboardIndex);
	void HandleLeaderboardReceived(const struct FName& NewLeaderboardID, TArray<struct FLeaderboardData>* NewLeaderboardData);
	void OnLeaderboardError(const struct FString& LeaderboardError);
	void OnLeaderboardLoaded();
	void HandleLeaderboardError(class UError_X* Error);
	void GetLeaderboard(const struct FName& LeaderboardName);
	void SetShowGlobalLeaderboards(bool bGlobal);
	void InitShowGlobalLeaderboards();
	void GetPlayerLeaderboardValue(const struct FName& LeaderboardName, const struct FScriptDelegate& NewDelegate);
	void BeginGetLeaderboard(const struct FName& LeaderboardName);
	void OnShellSet();
	class UOnlineGame_X* GetOnlineGame();
};


// Class TAGame.GFxData_LocalCar_TA
// 0x0024 (0x0078 - 0x0054)
class UGFxData_LocalCar_TA : public UGFxDataSingleton_X
{
public:
	int                                                Boost;                                            		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned long                                      bOnBack : 1;                                      		// 0x0058(0x0004) (CPF_DataBinding)
	unsigned long                                      bViewingCarCam : 1;                               		// 0x0058(0x0004) (CPF_DataBinding)
	unsigned long                                      bShowItemsDisplay : 1;                            		// 0x0058(0x0004) (CPF_DataBinding)
	unsigned long                                      bItemActive : 1;                                  		// 0x0058(0x0004) (CPF_DataBinding)
	int                                                TimeTillItem;                                     		// 0x005C(0x0004) (CPF_DataBinding)
	int                                                MaxTimeTillItem;                                  		// 0x0060(0x0004) (CPF_DataBinding)
	struct FString                                     ItemName;                                         		// 0x0064(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	float                                              ItemTimeRemaining;                                		// 0x0070(0x0004) (CPF_DataBinding)
	int                                                ItemTargetID;                                     		// 0x0074(0x0004) (CPF_DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_LocalCar_TA");
		return ptr;
	}


	void HandleCameraChanged(class APlayerController_X* PlayerController);
	void SetItemTargetScreenPosition(float ScreenX, float ScreenY, bool bOffScreen);
	void HandleCameraStateChanged(class ACamera_X* Camera, class UCameraState_X* CameraState);
	void SetOnBack(bool bIsInBack);
	void OnShellSet();
};


// Class TAGame.GFxData_MainMenu_TA
// 0x0030 (0x0084 - 0x0054)
class UGFxData_MainMenu_TA : public UGFxDataSingleton_X
{
public:
	float                                              PreviewCameraRotationScale;                       		// 0x0054(0x0004) (CPF_Edit)
	struct FName                                       RequestedDLCName;                                 		// 0x0058(0x0008) (CPF_Transient)
	int                                                RequestedSubIdx;                                  		// 0x0060(0x0004) (CPF_Transient)
	struct FName                                       QueuedName;                                       		// 0x0064(0x0008) (CPF_Transient)
	int                                                QueuedSubIdx;                                     		// 0x006C(0x0004) (CPF_Transient)
	TArray<struct FCameraStatePair>                    CameraStateStack;                                 		// 0x0070(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FName                                       CurrentCameraState;                               		// 0x007C(0x0008) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MainMenu_TA");
		return ptr;
	}


	class UShowroomMetrics_TA* GetShowroomMetrics();
	void SetLockPreviewActor(bool bLock);
	bool SetPreviewProduct(int SlotIndex);
	void ResetInvalidAssets(class ACarPreviewActor_TA* PreviewActor, int SlotIndex, int ProductID);
	void LoadBaseLoadout(class ACarPreviewActor_TA* PreviewActor);
	void OnRotatePreviewFinished();
	void RotatePreviewCamera(float X, float Y);
	void OnPremiumGarageExit();
	void OnPremiumGarageReady();
	void OnPremiumCarFinished();
	void SetPremiumCarFromBundle(const struct FName& PackID, int SubIdx);
	void SetPremiumDLCPack(const struct FName& PackID, int SubIdx);
	void ExitPremiumGarage();
	void EnterPremiumGarage();
	void PopCameraState(const struct FName& MenuID);
	void PushCameraState(const struct FName& CameraState, const struct FName& MenuID);
	void SetCameraState(const struct FName& NewCameraStateName);
	void OnShellSet();
};


// Class TAGame.GFxData_TeamInfo_TA
// 0x001C (0x0070 - 0x0054)
class UGFxData_TeamInfo_TA : public UGFxDataRow_X
{
public:
	struct FString                                     TeamName;                                         		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                TeamColor;                                        		// 0x0060(0x0004) (CPF_DataBinding)
	int                                                Score;                                            		// 0x0064(0x0004) (CPF_DataBinding)
	class UTexture*                                    TeamLogo;                                         		// 0x0068(0x0004) (CPF_DataBinding)
	class ATeam_TA*                                    Team;                                             		// 0x006C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TeamInfo_TA");
		return ptr;
	}


	void HandleScoreUpdated(class ATeam_TA* InTeam);
	void HandleColorsChanged(class ATeam_TA* InTeam);
	void HandleLogoChanged(class ATeam_TA* InTeam);
	void HandleNameChanged(class ATeam_TA* InTeam);
	void SetTeam(class ATeam_TA* InTeam);
};


// Class TAGame.ShowroomMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class UShowroomMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ShowroomMetrics_TA");
		return ptr;
	}


	void PurchaseItemInShowRoom(const struct FName& ItemName, int ItemIndex);
	void ViewItemInStore(const struct FName& ItemName, int ItemIndex);
	void ViewItemInShowroom(const struct FName& ItemName, int ItemIndex, int SubItemIndex);
	void ShowroomExit();
	void ShowroomEnter();
};


// Class TAGame.GFxData_DLC_TA
// 0x001C (0x0070 - 0x0054)
class UGFxData_DLC_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxDLCData>                         Packs;                                            		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	unsigned long                                      bReturningFromStore : 1;                          		// 0x0060(0x0004) (CPF_Transient)
	unsigned long                                      bRequestingAuthCode : 1;                          		// 0x0060(0x0004) (CPF_Transient)
	class UMtxConfig_TA*                               MtxConfig;                                        		// 0x0064(0x0004) (CPF_Edit)
	class UOnlineGameDLC_TA*                           OnlineDLC;                                        		// 0x0068(0x0004) (CPF_Edit)
	class UOnlineSubsystem*                            OnlineSub;                                        		// 0x006C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_DLC_TA");
		return ptr;
	}


	class UShowroomMetrics_TA* GetShowroomMetrics();
	void OnClaimedEntitlements();
	void HandleClaimEntitlements(class URPC_MicroTransactions_ClaimEntitlements_TA* RPC);
	void HandleNewMTXAuthCode(bool bSuccess, const struct FString& NewAuthCode);
	void RetryClaimEntitlements(class UGFxModal_X* Modal);
	void HandlePsyNetLoginChange(class UOnlinePlayerAuthentication_X* Auth);
	void ClaimEntitlements();
	void OnExternalUIChange(bool bIsOpening);
	void CheckNewPurchases();
	void OpenStoreForDLC(const struct FName& Id);
	void HandleUnlockedDLCChanged();
	void HandleGetAppPriceInfoComplete(const struct FName& AppName, const struct FString& Price, const struct FString& DiscountPrice, int DiscountPercentage);
	void UpdateAppPrices();
	void HandleDLCReleased(class UOnlineGameDLC_X* OnlineDLCX);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_Map_TA
// 0x0030 (0x0084 - 0x0054)
class UGFxData_Map_TA : public UGFxDataSingleton_X
{
public:
	struct FGFxMapData                                 RandomMapData;                                    		// 0x0054(0x0020) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FGFxMapData>                         Data;                                             		// 0x0074(0x000C) (CPF_Edit, CPF_NeedCtorLink, CPF_DataBinding)
	int                                                ActiveMapIndex;                                   		// 0x0080(0x0004) (CPF_Edit, CPF_DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Map_TA");
		return ptr;
	}


	void OnLargeMapImageFailed(const struct FName& MapName);
	void OnLargeMapImageLoaded(class UTexture2D* Image, const struct FName& MapName);
	void HandleLargeMapImageLoaded(const struct FMapImageLoadResult& Result);
	void LoadLargeMapImage(const struct FName& MapName);
	int GetMapIndex(const struct FName& MapName);
	void AddMapData(class UMapData_TA* Map);
	void UpdateMapList(int GameModeIndex, bool AddRandomOption);
	void OnShellSet();
};


// Class TAGame.GFxData_OnlineMatch_TA
// 0x0060 (0x00B4 - 0x0054)
class UGFxData_OnlineMatch_TA : public UGFxDataSingleton_X
{
public:
	class ULocalPlayer_TA*                             TAPlayer;                                         		// 0x0054(0x0004) (CPF_Transient)
	class UProfile_TA*                                 Profile;                                          		// 0x0058(0x0004) (CPF_Transient)
	struct FString                                     NoRegionsMessage;                                 		// 0x005C(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     NotLoggedInPsynetMessage;                         		// 0x0068(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     NoServersMessage;                                 		// 0x0074(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     BannedMessage;                                    		// 0x0080(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     NotPartyLeaderMsg;                                		// 0x008C(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	int                                                CountdownSeconds;                                 		// 0x0098(0x0004) (CPF_Transient)
	class UOnlineGameParty_X*                          OnlineParty;                                      		// 0x009C(0x0004) (CPF_Transient)
	struct FString                                     OnlineStatusError;                                		// 0x00A0(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UGFxData_OnlineMatchStatus_TA*               SearchStatusData;                                 		// 0x00AC(0x0004) (CPF_Transient)
	unsigned long                                      bSearching : 1;                                   		// 0x00B0(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_OnlineMatch_TA");
		return ptr;
	}


	TEnumAsByte<enum class SearchStatusOwner> GetStatusOwnerValue();
	bool IsStatusOwner();
	void HandlePartySizeChanged(class UOnlineGameParty_X* Party, int NewSize, int OldSize);
	void HandlePartySearchStatus(class UOnlineGameParty_X* Party, class UPartyMessage_SearchStatus_X* StatusMessage);
	void HandlePartyChanged(class UOnlineGameParty_X* Party);
	void HandleRegionsSynced(class UGFxData_Regions_TA* RegionsData);
	void SetError(const struct FString& msg);
	void SetOnlineStatusError(const struct FString& NewStatusError);
	void UpdateOnlineStatus();
	struct FString GetOnlineStatusError();
	void ClearUpdateOnlineStatusTimer();
	void SetUpdateOnlineStatusTimer(float StartDelay);
	class UOnlineGame_TA* GetOnlineGame();
	void OnProfileSet();
	void OnRemoved();
	void OnShellSet();
	void CancelSearch();
};


// Class TAGame.GFxData_OnlineMatchStatus_TA
// 0x0020 (0x0074 - 0x0054)
class UGFxData_OnlineMatchStatus_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bSearching : 1;                                   		// 0x0054(0x0004) (CPF_Transient, CPF_DataBinding)
	struct FName                                       SearchState;                                      		// 0x0058(0x0008) (CPF_Transient, CPF_DataBinding)
	TEnumAsByte<enum class SearchStatusOwner>          StatusOwner;                                      		// 0x0060(0x0001) (CPF_Transient, CPF_DataBinding)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0061(0x0003) MISSED OFFSET
	class UOnlineGameParty_X*                          OnlineParty;                                      		// 0x0064(0x0004) (CPF_Transient)
	struct FString                                     PartyLeaderSearchingMessage;                      		// 0x0068(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_OnlineMatchStatus_TA");
		return ptr;
	}


	void SetWarning(const struct FString& msg);
	void OnCountdownEnded();
	void OnCountdownStarted(int SecondsRemaining);
	void OnClearMessages();
	void OnSearchError(const struct FString& Message);
	void OnSearchMessage(const struct FString& Message, TEnumAsByte<enum class SearchMessageType> MessageType);
	void OnFindGameComplete();
	class UOnlineGame_X* GetOnlineGame();
	void HandleCountdownEnded();
	void HandleCountdownStarted();
	void HandlePartyJoinGameError(class UOnlineGameParty_X* Party, const struct FString& LocalizedErrorString);
	void HandleFindGameWarning(const struct FString& Message);
	void SetError(const struct FString& msg);
	void SetStatus(const struct FString& msg);
	void HandeFindGameComplete(bool bCancelled);
	void HandleFindGameStatusChanged(const struct FString& NewStatus);
	void SetSearching(bool bNewSearching, class UGFxData_OnlineMatch_TA* NewOwner);
	void SetSearchState(const struct FName& NewState);
	void SetPartyLeaderSearchingMessage();
	void HandlePartySizeChanged(class UOnlineGameParty_X* Party, int NewSize, int OldSize);
	void HandlePartySearchStatus(class UOnlineGameParty_X* Party, class UPartyMessage_SearchStatus_X* StatusMessage);
	void SetStatusOwner(TEnumAsByte<enum class SearchStatusOwner> NewOwner);
	void OnShellSet();
};


// Class TAGame.GFxData_Regions_TA
// 0x001C (0x0070 - 0x0054)
class UGFxData_Regions_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxRegion>                          Regions;                                          		// 0x0054(0x000C) (CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventRegionsSynced__Delegate;                   		// 0x0060(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0060(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Regions_TA");
		return ptr;
	}


	TArray<struct FGFxRegion> SelectRegions(TArray<struct FString>* SelectedRegions);
	void NotifyWhenSynced(const struct FScriptDelegate& Callback);
	void HandleRegionsSynced(class UOnlineGameRegions_X* RegionsObj);
	void OnShellSet();
	void EventRegionsSynced(class UGFxData_Regions_TA* RegionsData);
};


// Class TAGame.OnlineGame_TA
// 0x000C (0x0180 - 0x0174)
class UOnlineGame_TA : public UOnlineGame_X
{
public:
	unsigned char                                      UnknownData00[0x4];                               		// 0x0174(0x0004) UNKNOWN PROPERTY: ObjectProperty TAGame.OnlineGame_TA.Tournaments
	class UESportEvents_TA*                            ESportEvents;                                     		// 0x0178(0x0004)
	unsigned char                                      UnknownData01[0x4];                               		// 0x017C(0x0004) UNKNOWN PROPERTY: ObjectProperty TAGame.OnlineGame_TA.TourMatchmaking

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGame_TA");
		return ptr;
	}


	void InitializeTrophyAPI();
	void HandleTrialStatusChanged(class UOnlineGameTrial_X* Trial);
	void OnInit();
};


// Class TAGame.GFxData_Matchmaking_TA
// 0x007C (0x0130 - 0x00B4)
class UGFxData_Matchmaking_TA : public UGFxData_OnlineMatch_TA
{
public:
	struct FString                                     NoPlaylistSelectedMessage;                        		// 0x00B4(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     NoRegionSelectedMessage;                          		// 0x00C0(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     PartyTooBigMessage;                               		// 0x00CC(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     LeavePenaltyMessage;                              		// 0x00D8(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     PartySkillTooDistant;                             		// 0x00E4(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     PartyMemberNotOriginalAppOwner;                   		// 0x00F0(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	TArray<struct FGFxRegion>                          Regions;                                          		// 0x00FC(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                TotalPopulation;                                  		// 0x0108(0x0004) (CPF_DataBinding)
	unsigned long                                      bRankedPlaylistsEnabled : 1;                      		// 0x010C(0x0004) (CPF_DataBinding)
	int                                                SeasonEndDays;                                    		// 0x0110(0x0004) (CPF_DataBinding)
	int                                                SeasonEndHours;                                   		// 0x0114(0x0004) (CPF_DataBinding)
	int                                                SeasonEndMinutes;                                 		// 0x0118(0x0004) (CPF_DataBinding)
	TArray<struct FMessageUpdate>                      MessageUpdates;                                   		// 0x011C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	int                                                CurrentMessageUpdateIndex;                        		// 0x0128(0x0004) (CPF_Transient)
	class URankedConfig_X*                             RankedConfig;                                     		// 0x012C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Matchmaking_TA");
		return ptr;
	}


	void UpdateSeasonTimeRemaining();
	void HandleDisableCrossPlayChange(class UOnlineGameParty_X* PartyObject);
	TEnumAsByte<enum class SearchStatusOwner> GetStatusOwnerValue();
	void CancelSearch();
	void CancelNextDisplayMessage();
	void DisplayNextMessage();
	void AddMessageUpdate(int DelayFromStart, const struct FString& MessageKey);
	void PopulateMessageUpdates();
	void StartMatchmaking();
	void SetRegionSelection(int Row, bool bSelected);
	void HandleRegionsSynced(class UGFxData_Regions_TA* RegionsData);
	void SetPlaylistSelection(int Row, bool bSelected);
	void DeselectAllRankedPlaylists();
	void HandleRankedConfigChanged();
	void InitPlaylists();
	void HandleGetPlaylistPopulations(class UOnlineGamePopulation_X* Population);
	void UpdatePopulation();
	void SetViewingMatchmaking(bool bViewingMatchmaking);
	int GetMaxTeamSize();
	bool GetCompetitivePartySkillRestrictionError(struct FString* OutError);
	bool GetCompetitivePartyRestrictionError(struct FString* OutError);
	struct FString GetOnlineStatusError();
	void OnShellSet();
};


// Class TAGame.GFxData_Playlist_TA
// 0x003C (0x0090 - 0x0054)
class UGFxData_Playlist_TA : public UGFxDataRow_X
{
public:
	class UGameSettingPlaylist_X*                      Playlist;                                         		// 0x0054(0x0004) (CPF_Transient)
	int                                                Id;                                               		// 0x0058(0x0004) (CPF_DataBinding)
	struct FString                                     FriendlyName;                                     		// 0x005C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     Description;                                      		// 0x0068(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                TeamSize;                                         		// 0x0074(0x0004) (CPF_DataBinding)
	unsigned long                                      bStandardMatch : 1;                               		// 0x0078(0x0004) (CPF_DataBinding)
	unsigned long                                      bRanked : 1;                                      		// 0x0078(0x0004) (CPF_DataBinding)
	unsigned long                                      bSolo : 1;                                        		// 0x0078(0x0004) (CPF_DataBinding)
	unsigned long                                      bSelected : 1;                                    		// 0x0078(0x0004) (CPF_DataBinding)
	unsigned long                                      bEnabled : 1;                                     		// 0x0078(0x0004) (CPF_DataBinding)
	unsigned long                                      bRestricted : 1;                                  		// 0x0078(0x0004) (CPF_DataBinding)
	int                                                PlayerCount;                                      		// 0x007C(0x0004) (CPF_DataBinding)
	int                                                SkillTier;                                        		// 0x0080(0x0004) (CPF_DataBinding)
	int                                                SkillDivision;                                    		// 0x0084(0x0004) (CPF_DataBinding)
	int                                                SkillMatchesPlayed;                               		// 0x0088(0x0004) (CPF_DataBinding)
	float                                              SkillMMR;                                         		// 0x008C(0x0004) (CPF_DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Playlist_TA");
		return ptr;
	}


	void UpdateGroupSkillRank();
	void UpdateSingleSkillRank();
	void HandlePlaylistSkillRestrictionChange(class UOnlineGameParty_X* P);
	void HandlePartyChanged(class UOnlineGameParty_X* P);
	void HandleGroupSkillSynced(class UOnlineGameSkillGroups_X* Skill, TArray<struct FUniqueNetId> PlayerIDs, class UError_X* Error);
	void HandleSkillSynced(class UOnlineGameSkill_X* Skill, const struct FUniqueNetId& PlayerID, class UError_X* Error);
	void UpdateRestriction();
	void SetPlayerCount(int Count);
	void HandleLoginChanged(class UOnlinePlayer_X* OnlinePlayer);
	void SyncSkills();
	void SetPlaylist(class UGameSettingPlaylist_X* InPlaylist);
	class UOnlineGameParty_X* GetOnlineGameParty();
	class UOnlineGameSkillGroups_X* GetOnlineGameGroupSkill();
	class UOnlineGameSkill_X* GetOnlineGameSkill();
};


// Class TAGame.GFxData_MusicPlayer_TA
// 0x0058 (0x00AC - 0x0054)
class UGFxData_MusicPlayer_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     PlaylistTitle;                                    		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UTexture*                                    PlaylistIcon;                                     		// 0x0060(0x0004) (CPF_DataBinding)
	struct FString                                     TrackTitle;                                       		// 0x0064(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     TrackArtist;                                      		// 0x0070(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                CurrentTrackPlayingID;                            		// 0x007C(0x0004) (CPF_Transient)
	class UMusicPlaylist_TA*                           ActivePlaylist;                                   		// 0x0080(0x0004) (CPF_Transient)
	int                                                ActivePlaylistIndex;                              		// 0x0084(0x0004) (CPF_Transient)
	TArray<class UMusicPlaylist_TA*>                   Playlists;                                        		// 0x0088(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UAkSoundCue*>                         Playlist;                                         		// 0x0094(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class UAkSoundCue*                                 TitleThemeTrack;                                  		// 0x00A0(0x0004) (CPF_Transient)
	class UAkSoundCue*                                 CreditsTrack;                                     		// 0x00A4(0x0004) (CPF_Transient)
	class UMusicPlaylist_TA*                           KonamiCodePlaylist;                               		// 0x00A8(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MusicPlayer_TA");
		return ptr;
	}


	void ActivatePlaylist(class UMusicPlaylist_TA* InPlaylist);
	void NextPlaylist();
	class UMusicMetrics_TA* GetMetrics();
	void HandleTrackEnd(int PlayingID);
	void HandleTrackStart(int PlayingID, const struct FString& FileMarker);
	void PlayKonamiTheme();
	void NextTrack();
	void PlayCreditsTheme(TArray<class UAkSoundCue*>* ArrayInitializer__s_FA23D8FE4AC9E30568E874A1D3C1ADDE);
	void OnRemoved();
	void OnShellSet(TArray<class UAkSoundCue*>* ArrayInitializer__s_48CE6B344BDC2C137AE9C0B882E490F7);
};


// Class TAGame.GFxData_MusicPlayer_TA__OnShellSet__C7E85E654528A95DE78E11B5F6673432
// 0x0000 (0x003C - 0x003C)
class UGFxData_MusicPlayer_TA__OnShellSet__C7E85E654528A95DE78E11B5F6673432 : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MusicPlayer_TA__OnShellSet__C7E85E654528A95DE78E11B5F6673432");
		return ptr;
	}


	int LambdaCallback(const struct FGameVersionMusicTheme& Left, const struct FGameVersionMusicTheme& Right);
	class UGFxData_MusicPlayer_TA__OnShellSet__C7E85E654528A95DE78E11B5F6673432* STATIC_StaticConstruct(class UGFxData_MusicPlayer_TA* InOuter);
};


// Class TAGame.GFxData_MusicPlayer_TA__OnShellSet__934FCA484AE1BE811431B0B80AAE3C4E
// 0x0000 (0x003C - 0x003C)
class UGFxData_MusicPlayer_TA__OnShellSet__934FCA484AE1BE811431B0B80AAE3C4E : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MusicPlayer_TA__OnShellSet__934FCA484AE1BE811431B0B80AAE3C4E");
		return ptr;
	}


	bool LambdaCallback(const struct FGameVersionMusicTheme& Theme);
	class UGFxData_MusicPlayer_TA__OnShellSet__934FCA484AE1BE811431B0B80AAE3C4E* STATIC_StaticConstruct(class UGFxData_MusicPlayer_TA* InOuter);
};


// Class TAGame.MusicPlaylist_TA
// 0x0010 (0x004C - 0x003C)
class UMusicPlaylist_TA : public UObject
{
public:
	TArray<class UAkSoundCue*>                         Tracks;                                           		// 0x003C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UTexture*                                    Icon;                                             		// 0x0048(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicPlaylist_TA");
		return ptr;
	}


	struct FString GetTitle();
};


// Class TAGame.MusicMetrics_TA
// 0x0014 (0x0068 - 0x0054)
class UMusicMetrics_TA : public UMetricsGroup_X
{
public:
	struct FName                                       TrackName;                                        		// 0x0054(0x0008) (CPF_Transient)
	float                                              TrackStartTime;                                   		// 0x005C(0x0004) (CPF_Transient)
	int                                                TrackSequence;                                    		// 0x0060(0x0004) (CPF_Transient)
	float                                              PendingMusicVolume;                               		// 0x0064(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicMetrics_TA");
		return ptr;
	}


	class ULocalPlayer_TA* GetLocalPlayer();
	class UProfile_TA* GetProfile();
	float GetMusicVolume();
	void TrackSkip(const struct FName& Track, int Sequence, float Duration, float Volume);
	void RecordTrackSkip();
	void TrackEnd(const struct FName& Track, int Sequence, float Volume);
	void RecordTrackEnd();
	void TrackStart(const struct FName& Track, int Sequence, float Volume);
	void RecordTrackStart(class UAkSoundCue* Cue);
};


// Class TAGame.GFxData_Nameplate_TA
// 0x001C (0x0070 - 0x0054)
class UGFxData_Nameplate_TA : public UGFxDataRow_X
{
public:
	float                                              HideFullNameplateDistance;                        		// 0x0054(0x0004) (CPF_Edit)
	struct FString                                     PlayerName;                                       		// 0x0058(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                Team;                                             		// 0x0064(0x0004) (CPF_DataBinding)
	unsigned long                                      bHideFullNameplate : 1;                           		// 0x0068(0x0004) (CPF_DataBinding)
	unsigned long                                      bBusy : 1;                                        		// 0x0068(0x0004) (CPF_DataBinding)
	unsigned long                                      bLocalPlayer : 1;                                 		// 0x0068(0x0004) (CPF_DataBinding)
	class ACar_TA*                                     Car;                                              		// 0x006C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Nameplate_TA");
		return ptr;
	}


	void Tick();
	void HandlePlayerNameSanitized(const struct FString& Original, const struct FString& Sanitized);
	void SetPlayerName(class APRI_TA* InPRI);
	class UOnlineGame_X* GetOnlineGame();
	void SetCar(class ACar_TA* InCar);
};


// Class TAGame.GFxData_Party_TA
// 0x002C (0x0080 - 0x0054)
class UGFxData_Party_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxPartyMember>                     Members;                                          		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                MaxPartySize;                                     		// 0x0060(0x0004) (CPF_DataBinding)
	struct FName                                       Processing;                                       		// 0x0064(0x0008) (CPF_DataBinding)
	class UOnlineGameParty_X*                          OnlineParty;                                      		// 0x006C(0x0004) (CPF_Transient)
	struct FUniqueLobbyId                              PendingPartyId;                                   		// 0x0070(0x000C) (CPF_Transient)
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x007C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Party_TA");
		return ptr;
	}


	void HandleFollowTheLeaderToMainMenu(class UGFxModal_X* Modal);
	void HandleLeaderLeftOnlineGame(class UOnlineGameParty_X* PartyObject);
	void ClearPartyJoinGameDelegates();
	void HandlePartyJoinGameSuccess(class UOnlineGameParty_X* PartyObject);
	void HandlePartyJoinGameError(class UOnlineGameParty_X* PartyObject, const struct FString& LocalizedString);
	void HandlePartyJoinGameConfirmed(class UGFxModal_X* Modal);
	void HandlePartyJoinGameConfirmation(class UOnlineGameParty_X* PartyObject);
	void PrintAllMembers();
	struct FUniqueNetId FindPartyMemberNetID(const struct FString& ProfileId);
	void HandlePartyError(class UOnlineGameParty_X* PartyObject, class UError_X* Error);
	int SortMembersCallback(const struct FGFxPartyMember& A, const struct FGFxPartyMember& B);
	void RebuildPartyData();
	void OnPartyChanged(class UOnlineGameParty_X* PartyObject);
	void JoinParty(int ControllerId, struct FUniqueLobbyId* PartyID);
	void OnConfirmedLeaveCurrentPartyForAnotherPartyThatIsProbablyMuchBetterAnyways(class UGFxModal_X* Modal);
	void OnPlayerInvited(class UOnlineGameParty_X* Party, struct FUniqueLobbyId* PartyID, struct FUniqueNetId* FriendId);
	void HandleGetAvatar(const struct FUniqueNetId& InPlayerId, class UTexture* Avatar, const struct FString& OnlinePlayerName);
	void SetLeader(int Index);
	void OnPlayerTradeEnded();
	void HandleCloseInviteToTrade(class UOnlineGameParty_X* PartyObject, bool bWasCanceled);
	void OnPlayerTradeStarted();
	void HandleAcceptedInviteToTrade(class UOnlineGameParty_X* PartyObject);
	void HandleCancelInviteToTrade(class UGFxModal_X* Modal);
	void HandleAcceptInviteToTrade(class UGFxModal_X* Modal);
	void OnAnotherInviteToTrade(int MemberIdx);
	void HandleAnotherInviteToTrade(class UOnlineGameParty_X* PartyObject, const struct FUniqueNetId& InMemberId);
	void HandleInviteToTrade(class UOnlineGameParty_X* PartyObject, const struct FUniqueNetId& InMemberId);
	void JoinFriend(int PartyMemberIdx);
	void InvitePlayerToTrade(int Index);
	void HandlePlayerInMatchChanged(class UOnlineGameParty_X* PartyObject, const struct FUniqueNetId& InMemberId);
	void HandlePlayerIsCurrentlyTrading(class UOnlineGameParty_X* PartyObject, const struct FUniqueNetId& InMemberId);
	void HandlePlayerTradingChanged(class UOnlineGameParty_X* PartyObject, const struct FUniqueNetId& InMemberId, bool bIsPlayerTrading);
	void KickPlayer(int Index);
	void ShowInviteUI();
	void OnConfirmLeaveParty(class UGFxModal_X* Modal);
	void LeaveParty();
	void OnPartyCreated(class UOnlineGameParty_X* Party, bool bWasSuccessful);
	void CreateParty();
	bool IsProcessing();
	void HandleProcessingStateChanged(class UOnlineGameParty_X* P);
	void HandleProfileSet(class ULocalPlayer_TA* LocalPlayer);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_PlayerRecord_TA
// 0x005C (0x00B0 - 0x0054)
class UGFxData_PlayerRecord_TA : public UGFxDataRow_X
{
public:
	struct FString                                     PlayerIDString;                                   		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	unsigned long                                      bReported : 1;                                    		// 0x0060(0x0004) (CPF_DataBinding)
	struct FString                                     SanitizedPlayerName;                              		// 0x0064(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     PlayerName;                                       		// 0x0070(0x000C) (CPF_NeedCtorLink)
	class APRI_TA*                                     PRI;                                              		// 0x007C(0x0004) (CPF_Transient)
	struct FUniqueNetId                                PlayerID;                                         		// 0x0080(0x0030) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PlayerRecord_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void Report(TEnumAsByte<enum class EReportPlayerReason> Reason);
	void HandleUniqueIdChanged(class APRI_X* InPRI);
	void HandlePlayerNameSanitized(const struct FString& Original, const struct FString& Sanitized);
	void HandlePlayerNameChanged(class APRI_X* InPRI);
	void OnRemoved();
	void SetPRI(class APRI_TA* InPRI);
	class UOnlineGame_X* GetOnlineGame();
};


// Class TAGame.GFxData_PRI_TA
// 0x00F0 (0x0144 - 0x0054)
class UGFxData_PRI_TA : public UGFxDataRow_X
{
public:
	struct FString                                     PlayerName;                                       		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     PlayerIDString;                                   		// 0x0060(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     Platform;                                         		// 0x006C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UTexture*                                    Avatar;                                           		// 0x0078(0x0004) (CPF_DataBinding)
	int                                                Team;                                             		// 0x007C(0x0004) (CPF_DataBinding)
	int                                                Score;                                            		// 0x0080(0x0004) (CPF_DataBinding)
	int                                                Goals;                                            		// 0x0084(0x0004) (CPF_DataBinding)
	int                                                Assists;                                          		// 0x0088(0x0004) (CPF_DataBinding)
	int                                                Saves;                                            		// 0x008C(0x0004) (CPF_DataBinding)
	int                                                Shots;                                            		// 0x0090(0x0004) (CPF_DataBinding)
	int                                                Ping;                                             		// 0x0094(0x0004) (CPF_DataBinding)
	int                                                BreakoutDamage;                                   		// 0x0098(0x0004) (CPF_DataBinding)
	unsigned long                                      bMVP : 1;                                         		// 0x009C(0x0004) (CPF_DataBinding)
	unsigned long                                      bSpeaking : 1;                                    		// 0x009C(0x0004) (CPF_DataBinding)
	unsigned long                                      bMuted : 1;                                       		// 0x009C(0x0004) (CPF_DataBinding)
	unsigned long                                      bReady : 1;                                       		// 0x009C(0x0004) (CPF_DataBinding)
	unsigned long                                      bBotPlayer : 1;                                   		// 0x009C(0x0004) (CPF_DataBinding)
	unsigned long                                      bLocalPlayer : 1;                                 		// 0x009C(0x0004) (CPF_DataBinding)
	unsigned long                                      bDisconnected : 1;                                		// 0x009C(0x0004) (CPF_DataBinding)
	unsigned long                                      bSpectator : 1;                                   		// 0x009C(0x0004) (CPF_DataBinding)
	unsigned long                                      bGameEnded : 1;                                   		// 0x009C(0x0004) (CPF_Transient)
	unsigned long                                      bOnPodium : 1;                                    		// 0x009C(0x0004) (CPF_DataBinding)
	struct FString                                     ConnectionStatus;                                 		// 0x00A0(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     PartyID;                                          		// 0x00AC(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     XPTitle;                                          		// 0x00B8(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TEnumAsByte<enum class EPlayerTitleType>           TitleType;                                        		// 0x00C4(0x0001) (CPF_DataBinding)
	unsigned char                                      UnknownData00[0x3];                               		// 0x00C5(0x0003) MISSED OFFSET
	int                                                SkillTier;                                        		// 0x00C8(0x0004) (CPF_DataBinding)
	int                                                Boost;                                            		// 0x00CC(0x0004) (CPF_DataBinding)
	class APRI_TA*                                     PRI;                                              		// 0x00D0(0x0004) (CPF_Transient)
	struct FUniqueNetId                                PlayerID;                                         		// 0x00D4(0x0030) (CPF_Transient)
	float                                              PodiumSpotlightScreenPosX;                        		// 0x0104(0x0004) (CPF_DataBinding)
	float                                              PodiumSpotlightScreenPosY;                        		// 0x0108(0x0004) (CPF_DataBinding)
	struct FString                                     PrimaryTitle;                                     		// 0x010C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     SecondaryTitle;                                   		// 0x0118(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     PrimaryTitleStat;                                 		// 0x0124(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     SecondaryTitleStat;                               		// 0x0130(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                PrimaryStat;                                      		// 0x013C(0x0004) (CPF_DataBinding)
	int                                                SecondaryStat;                                    		// 0x0140(0x0004) (CPF_DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PRI_TA");
		return ptr;
	}


	void UpdateScreenPosition(class UCanvas* MyCanvas, const struct FVector& WorldPosition);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void HandleTitleData(class UOnlineGamePlayerTitles_X* Titles, const struct FName& TitleId);
	void SetXPLevelTitle();
	void HandleTitleChanged(class APRI_TA* InPRI);
	void HandleReplacingBotChanged(class APRI_TA* InPRI);
	void HandleStatTitlesSet(class APRI_TA* InPRI);
	void HandleWonMVP(class APRI_TA* InPRI);
	void HandleSkillTierChanged(class APRI_TA* InPRI);
	void HandlePawnTypeChanged(class APRI_TA* InPRI);
	void HandlePartyLeaderChanged(class APRI_TA* InPRI);
	void SetDisconnected();
	void SetMuted(bool bNewMuted);
	void UpdateMuted();
	void HandleMuteChanged(class APlayerController_TA* PC, const struct FUniqueNetId& InPlayerId, bool bMute);
	void UpdatePRIData();
	void HandlePlayerTalking(class UOnlineGameVoice_X* SelfRef, const struct FUniqueNetId& InPlayerId, bool bTalking);
	void HandleReadyChanged(class APRI_TA* InPRI);
	void HandleTeamChanged(class APRI_X* InPRI);
	void HandleGetAvatar(const struct FUniqueNetId& InPlayerId, class UTexture* InAvatar, const struct FString& OnlinePlayerName);
	void UpdateAvatar();
	void HandleFriendsChange();
	void HandleUniqueIdChanged(class APRI_X* InPRI);
	void HandleReceivedLocalPRI(class APlayerController_X* P);
	void HandlePlayerNameSanitized(const struct FString& Original, const struct FString& Sanitized);
	void SanitizePlayerName(const struct FString& InPlayerName, const struct FUniqueNetId& InPlayerId);
	void HandlePlayerNameChanged(class APRI_X* InPRI);
	void OnRemoved();
	void SetPRI(class APRI_TA* InPRI);
	struct FString GetReservationStatusString(TEnumAsByte<enum class EReservationStatus> Status);
	void SetReservation(const struct FReplicatedReservationData& Reservation);
	class UOnlineGame_X* GetOnlineGame();
};


// Class TAGame.GFxData_PrivateMatch_TA
// 0x00AA (0x015E - 0x00B4)
class UGFxData_PrivateMatch_TA : public UGFxData_OnlineMatch_TA
{
public:
	TArray<struct FGFxRegion>                          Regions;                                          		// 0x00B4(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     ServerName;                                       		// 0x00C0(0x000C) (CPF_Edit, CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     Password;                                         		// 0x00CC(0x000C) (CPF_Edit, CPF_NeedCtorLink, CPF_DataBinding)
	int                                                SelectedMaxPlayerCount;                           		// 0x00D8(0x0004) (CPF_Edit, CPF_DataBinding)
	unsigned long                                      bPublicMatch : 1;                                 		// 0x00DC(0x0004) (CPF_Edit, CPF_DataBinding)
	unsigned long                                      bHasNoPartyMemberError : 1;                       		// 0x00DC(0x0004) (CPF_Transient)
	int                                                MinServerNameLength;                              		// 0x00E0(0x0004) (CPF_Edit, CPF_Const)
	struct FString                                     NoPartyMembersErrorMessage;                       		// 0x00E4(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     CreatePartyTitle;                                 		// 0x00F0(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     CreatePartyConfirm;                               		// 0x00FC(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     PrivateMatchErrorTitle;                           		// 0x0108(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     AlreadySearchingMessage;                          		// 0x0114(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     AddPartyMemberTitle;                              		// 0x0120(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     InviteConfirm;                                    		// 0x012C(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     AlreadySearchingForPublicMessage;                 		// 0x0138(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     ServerNameLengthError;                            		// 0x0144(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     DuplicateLanServerMessage;                        		// 0x0150(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	TEnumAsByte<enum class SearchStatusOwner>          SearchStatusOwner;                                		// 0x015C(0x0001) (CPF_Transient)
	TEnumAsByte<enum class ECustomMatchSettingsType>   SettingsType;                                     		// 0x015D(0x0001) (CPF_Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PrivateMatch_TA");
		return ptr;
	}


	void SetError(const struct FString& msg);
	TEnumAsByte<enum class SearchStatusOwner> GetStatusOwnerValue();
	void HandleInviteFriends(class UGFxModal_X* Modal);
	void HandleCreateParty(class UGFxModal_X* Modal);
	void HandleLanSearchComplete(bool bCancelled);
	void HandleLanResponse(struct FServerResult* HostResponse);
	void StartLanSearch();
	void UpdateCustomMatchSettings();
	void StartSearch();
	void CancelSearch();
	void SetRegionSelection(int Row, bool bSelected);
	void HandleRegionsSynced(class UGFxData_Regions_TA* RegionsData);
	void SetPublic(bool bValue);
	void SetPassword(const struct FString& InPassword);
	void SetServerName(const struct FString& InServerName);
	void SetSelectedMaxPlayerCount(int MaxPlayerCount);
	bool HasNoPartyMemberError();
	struct FString GetOnlineStatusError();
	void SetCustomMatchSettings(struct FCustomMatchSettings* InSettings);
	struct FCustomMatchSettings GetCustomMatchSettings();
	void OnShellSet();
};


// Class TAGame.GFxData_Privileges_TA
// 0x0004 (0x0058 - 0x0054)
class UGFxData_Privileges_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bCheckingPrivileges : 1;                          		// 0x0054(0x0004) (CPF_DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Privileges_TA");
		return ptr;
	}


	void HandlePrivilegeCheck(class UPrivilegeCheck_X* PrivilegeCheck);
	void PrivilegeCheckFail();
	void PrivilegeCheckSuccess();
	void TryToUseUGC();
	void TryToUsePsyNet();
	void TryToPlayOnline();
	void TryToViewLeaderboards();
	void TryToBrowseInternet();
	void UpdateCheckingPrivileges();
	void HandlePrivilegesCheck(class UOnlineGamePrivileges_X* Privileges);
	void OnShellSet();
};


// Class TAGame.GFxData_Products_TA__BuildAttributeTableStr__6BE2DCDF42430D853AE5CBA72ACA66D0
// 0x0000 (0x003C - 0x003C)
class UGFxData_Products_TA__BuildAttributeTableStr__6BE2DCDF42430D853AE5CBA72ACA66D0 : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Products_TA__BuildAttributeTableStr__6BE2DCDF42430D853AE5CBA72ACA66D0");
		return ptr;
	}


	struct FName LambdaCallback(class UGFxData_ProductAttribute_TA* GFxAttribute);
	class UGFxData_Products_TA__BuildAttributeTableStr__6BE2DCDF42430D853AE5CBA72ACA66D0* STATIC_StaticConstruct(class UGFxData_Products_TA* InOuter);
};


// Class TAGame.GFxData_ProductAttribute_TA
// 0x000C (0x0060 - 0x0054)
class UGFxData_ProductAttribute_TA : public UGFxDataSingleton_X
{
public:
	class UClass*                                      AttributeClass;                                   		// 0x0054(0x0004) (CPF_Edit)
	TScriptInterface<class UIProductAttributeProvider_TA> AttributeProvider;                                		// 0x0058(0x0008) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_TA* Attribute);
	void Init(const TScriptInterface<class UIProductAttributeProvider_TA>& InProvider);
};


// Class TAGame.IProductAttributeProvider_TA
// 0x0000 (0x003C - 0x003C)
class UIProductAttributeProvider_TA : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IProductAttributeProvider_TA");
		return ptr;
	}


	class UProductAttribute_TA* GetAttribute(class UClass* AttributeClass);
	TArray<class UProductAttribute_TA*> GetAttributes();
};


// Class TAGame.GFxData_Products_TA__InstanceAttributes__7CD0D74F43A8A57604D8179A477E26FC
// 0x0000 (0x003C - 0x003C)
class UGFxData_Products_TA__InstanceAttributes__7CD0D74F43A8A57604D8179A477E26FC : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Products_TA__InstanceAttributes__7CD0D74F43A8A57604D8179A477E26FC");
		return ptr;
	}


	class UClass* LambdaCallback(class UProductAttribute_TA* Attribute);
	class UGFxData_Products_TA__InstanceAttributes__7CD0D74F43A8A57604D8179A477E26FC* STATIC_StaticConstruct(class UGFxData_Products_TA* InOuter);
};


// Class TAGame.GFxProductAttributeMap_TA
// 0x000C (0x0048 - 0x003C)
class UGFxProductAttributeMap_TA : public UObject
{
public:
	TArray<class UClass*>                              GFxClasses;                                       		// 0x003C(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxProductAttributeMap_TA");
		return ptr;
	}


	class UClass* MapAttribute(class UClass* AttributeClass);
	TArray<class UClass*> MapAttributes(TArray<class UClass*>* Attributes, TArray<class UClass*>* MapLocal_D8C3CF3F44472365051799A2C07BD26C, TArray<class UClass*>* FilterLocal_52BF45E94DD00FF46DA7E5826A03034B);
};


// Class TAGame.GFxData_Products_TA__InstanceAttributes__6915A3594EBCE9CE72DE4EB487EDDED8
// 0x0000 (0x003C - 0x003C)
class UGFxData_Products_TA__InstanceAttributes__6915A3594EBCE9CE72DE4EB487EDDED8 : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Products_TA__InstanceAttributes__6915A3594EBCE9CE72DE4EB487EDDED8");
		return ptr;
	}


	class UGFxData_ProductAttribute_TA* LambdaCallback(class UClass* GFxClass);
	class UGFxData_Products_TA__InstanceAttributes__6915A3594EBCE9CE72DE4EB487EDDED8* STATIC_StaticConstruct(class UGFxData_Products_TA* InOuter);
};


// Class TAGame.GFxData_Products_TA__InstanceAttributes__0D7CAFE54A3F653A634301A175F4255A
// 0x0008 (0x0044 - 0x003C)
class UGFxData_Products_TA__InstanceAttributes__0D7CAFE54A3F653A634301A175F4255A : public UObject
{
public:
	TScriptInterface<class UIProductAttributeProvider_TA> AttributeProvider;                                		// 0x003C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Products_TA__InstanceAttributes__0D7CAFE54A3F653A634301A175F4255A");
		return ptr;
	}


	void LambdaCallback(class UGFxData_ProductAttribute_TA* GFxAttribute);
	class UGFxData_Products_TA__InstanceAttributes__0D7CAFE54A3F653A634301A175F4255A* STATIC_StaticConstruct(class UGFxData_Products_TA* InOuter);
	class UGFxData_Products_TA__InstanceAttributes__0D7CAFE54A3F653A634301A175F4255A* SetAttributeProvider(const TScriptInterface<class UIProductAttributeProvider_TA>& Value);
};


// Class TAGame.GFxData_Products_TA__ClearAttributes__170602EF4EF34B6B46A116B7C5F53052
// 0x0000 (0x003C - 0x003C)
class UGFxData_Products_TA__ClearAttributes__170602EF4EF34B6B46A116B7C5F53052 : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Products_TA__ClearAttributes__170602EF4EF34B6B46A116B7C5F53052");
		return ptr;
	}


	void LambdaCallback(class UClass* GFxClass);
	class UGFxData_Products_TA__ClearAttributes__170602EF4EF34B6B46A116B7C5F53052* STATIC_StaticConstruct(class UGFxData_Products_TA* InOuter);
};


// Class TAGame.ProductAttribute_LevelSettings_TA
// 0x000C (0x0060 - 0x0054)
class UProductAttribute_LevelSettings_TA : public UProductAttribute_TA
{
public:
	TArray<struct FProductLevelData>                   Levels;                                           		// 0x0054(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_LevelSettings_TA");
		return ptr;
	}

};


// Class TAGame.MtxConfig_TA
// 0x0004 (0x004C - 0x0048)
class UMtxConfig_TA : public UOnlineConfig_X
{
public:
	unsigned long                                      bAllowMicroTransactions : 1;                      		// 0x0048(0x0004) (CPF_Edit)
	unsigned long                                      bAllowKeyTrades : 1;                              		// 0x0048(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MtxConfig_TA");
		return ptr;
	}

};


// Class TAGame.ProductStat_TA
// 0x0030 (0x006C - 0x003C)
class UProductStat_TA : public UObject
{
public:
	struct FString                                     Label;                                            		// 0x003C(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     Description;                                      		// 0x0048(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	class APRI_TA*                                     PRI;                                              		// 0x0054(0x0004) (CPF_Transient)
	int                                                ProductID;                                        		// 0x0058(0x0004) (CPF_Transient)
	class ACar_TA*                                     Car;                                              		// 0x005C(0x0004) (CPF_Transient)
	class AGameEvent_TA*                               GameEvent;                                        		// 0x0060(0x0004) (CPF_Transient)
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x0064(0x0004) (CPF_Transient)
	int                                                Value;                                            		// 0x0068(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_TA");
		return ptr;
	}


	struct FString STATIC_GetDistanceString(class APlayerControllerBase_TA* ForPC, int Meters);
	struct FString STATIC_GetTimeString(int Seconds);
	struct FString STATIC_GetDisplayValue(class APlayerControllerBase_TA* ForPC, int StatValue);
	struct FString STATIC_GetDescription();
	struct FString STATIC_GetLabel();
	void AddStatValue(int Amount);
	void SetCar(class ACar_TA* InCar);
	void SetGameEvent(class AGameEvent_TA* InGameEvent);
	void HandleCarDestroyed(class APawn_X* P);
	void HandleCarRefSet(class APRI_TA* InPRI);
	void HandleGameEventChanged(class APRI_TA* InPRI);
	void ShutDown();
	void OnInit();
	void Init(class APRI_TA* InPRI, int InProductID);
};


// Class TAGame.GFxProductAttributeMap_TA__MapAttribute__163A3FA04C2878B1A84093BA1475A0A8
// 0x0004 (0x0040 - 0x003C)
class UGFxProductAttributeMap_TA__MapAttribute__163A3FA04C2878B1A84093BA1475A0A8 : public UObject
{
public:
	class UClass*                                      AttributeClass;                                   		// 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxProductAttributeMap_TA__MapAttribute__163A3FA04C2878B1A84093BA1475A0A8");
		return ptr;
	}


	bool LambdaCallback(class UClass* GFxClass);
	class UGFxProductAttributeMap_TA__MapAttribute__163A3FA04C2878B1A84093BA1475A0A8* STATIC_StaticConstruct(class UGFxProductAttributeMap_TA* InOuter);
	class UGFxProductAttributeMap_TA__MapAttribute__163A3FA04C2878B1A84093BA1475A0A8* SetAttributeClass(class UClass* Value);
};


// Class TAGame.GFxProductAttributeMap_TA__MapAttributes__6D5E505C4867B8ED29CA53ADCB09A864
// 0x0000 (0x003C - 0x003C)
class UGFxProductAttributeMap_TA__MapAttributes__6D5E505C4867B8ED29CA53ADCB09A864 : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxProductAttributeMap_TA__MapAttributes__6D5E505C4867B8ED29CA53ADCB09A864");
		return ptr;
	}


	class UClass* LambdaCallback(class UClass* Attribute);
	class UGFxProductAttributeMap_TA__MapAttributes__6D5E505C4867B8ED29CA53ADCB09A864* STATIC_StaticConstruct(class UGFxProductAttributeMap_TA* InOuter);
};


// Class TAGame.GFxProductAttributeMap_TA__MapAttributes__52D4B8A640379D20220C42A28B17AD3E
// 0x0000 (0x003C - 0x003C)
class UGFxProductAttributeMap_TA__MapAttributes__52D4B8A640379D20220C42A28B17AD3E : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxProductAttributeMap_TA__MapAttributes__52D4B8A640379D20220C42A28B17AD3E");
		return ptr;
	}


	bool LambdaCallback(class UClass* GFxAttribute);
	class UGFxProductAttributeMap_TA__MapAttributes__52D4B8A640379D20220C42A28B17AD3E* STATIC_StaticConstruct(class UGFxProductAttributeMap_TA* InOuter);
};


// Class TAGame.GFxData_Replay_TA
// 0x0000 (0x0054 - 0x0054)
class UGFxData_Replay_TA : public UGFxDataRow_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Replay_TA");
		return ptr;
	}


	void SetReplay(class UReplay_TA* InReplay);
};


// Class TAGame.GFxData_ReplayManager_TA
// 0x0034 (0x0088 - 0x0054)
class UGFxData_ReplayManager_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     ReplaySaveID;                                     		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     ReplaySaveError;                                  		// 0x0060(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<class UGFxData_Replay_TA*>                  ReplayData;                                       		// 0x006C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0078(0x0004) (CPF_Transient)
	struct FString                                     PendingSaveName;                                  		// 0x007C(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ReplayManager_TA");
		return ptr;
	}


	void PrintReplays();
	void HandleReplayImported(class UReplayManager_TA* Manager, class UReplay_TA* InReplay, class UError_X* Error);
	void RenameReplay(const struct FString& Id, const struct FString& NewReplayName);
	void DeleteReplay(const struct FString& Id);
	void StartReplay(const struct FString& Map, const struct FString& Filename);
	void HandleReplayHeaderLoaded(class UReplayManager_TA* Manager, class UReplay_TA* Replay, class UError_X* Error);
	void StartReplayID(const struct FString& Id);
	int GetReplayIndexFromID(const struct FString& Id);
	void StartReplayIndex(int Index);
	void OnReplaysLoaded();
	void HandleHeadersLoaded(class UReplayManager_TA* Manager, TArray<struct FReplayHeaderLoadResult> Headers);
	void MarkReplayEditorOpened();
	void LoadReplays();
	void HandleReplayExported(class UReplayManager_TA* Manager, const struct FString& Id, class UError_X* Error);
	class AReplayDirector_TA* GetReplayDirector();
	bool CanSaveReplay(class UReplay_TA* Replay);
	void SaveReplay(const struct FString& SaveName);
	bool ShouldAutoSaveReplay();
};


// Class TAGame.GFxModal_Processing_TA
// 0x0000 (0x0078 - 0x0078)
class UGFxModal_Processing_TA : public UGFxModal_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxModal_Processing_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_ReplayViewer_TA
// 0x005C (0x00B0 - 0x0054)
class UGFxData_ReplayViewer_TA : public UGFxDataSingleton_X
{
public:
	int                                                CurrentFrame;                                     		// 0x0054(0x0004) (CPF_DataBinding)
	TArray<struct FLocalizedCameraMode>                CameraModes;                                      		// 0x0058(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FName                                       CameraMode;                                       		// 0x0064(0x0008) (CPF_DataBinding)
	struct FString                                     FocusActorString;                                 		// 0x006C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     LastFocusActorString;                             		// 0x0078(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	float                                              Slomo;                                            		// 0x0084(0x0004) (CPF_DataBinding)
	float                                              FOV;                                              		// 0x0088(0x0004) (CPF_DataBinding)
	unsigned long                                      bShowReplayHUD : 1;                               		// 0x008C(0x0004) (CPF_DataBinding)
	unsigned long                                      bShowMatchInfoHUD : 1;                            		// 0x008C(0x0004) (CPF_DataBinding)
	unsigned long                                      bShowPlayerNames : 1;                             		// 0x008C(0x0004) (CPF_DataBinding)
	unsigned long                                      bPausedForScrub : 1;                              		// 0x008C(0x0004) (CPF_Transient)
	unsigned long                                      bChangesMade : 1;                                 		// 0x008C(0x0004) (CPF_DataBinding)
	int                                                ViewRoll;                                         		// 0x0090(0x0004) (CPF_DataBinding)
	class UReplay_TA*                                  Replay;                                           		// 0x0094(0x0004) (CPF_Transient)
	int                                                PendingSkipToFrame;                               		// 0x0098(0x0004) (CPF_DataBinding)
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x009C(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventHudVisibilityUpdated__Delegate;            		// 0x00A0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x00A0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ReplayViewer_TA");
		return ptr;
	}


	void HandleReplayExported(class UReplayManager_TA* Manager, const struct FString& Id, class UError_X* Error);
	void SaveReplayAndExit();
	void OnToggleControls();
	void SetPausedForScrub(bool bPaused);
	void OnTimelineScrub();
	void OpenHUDMenu(int KeyCode, int MouseButton);
	void OpenTimelineMenu(int KeyCode, int MouseButton);
	void OpenCameraMenu(int KeyCode, int MouseButton);
	void OpenFocusMenu(int KeyCode, int MouseButton);
	void OpenSpeedMenu(int KeyCode, int MouseButton);
	void RemoveKeyframe(int KeyframeIndex);
	void AddKeyframe(const struct FName& Type);
	void SetFOV(float InFOV);
	void SetShowPlayerNames(bool bVisible);
	void SetShowMatchInfoHUD(bool bVisible);
	void SetShowReplayHUD(bool bVisible);
	void SetSlomo(float NewSlomo);
	void TimerSkipToFrame();
	void AdvanceTime(float DeltaTime);
	void AdvanceToFrame(int frame);
	void SetCameraMode(const struct FName& Mode);
	void SetFocusActorString(const struct FString& InFocusActorString);
	void RefreshDisabledModes();
	void InitCameraModes();
	void UpdateReplayData();
	void SetReplay(class UReplay_TA* InReplay);
	void EventHudVisibilityUpdated();
};


// Class TAGame.GFxData_SaveData_TA
// 0x0018 (0x006C - 0x0054)
class UGFxData_SaveData_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FUISavedKeyValue>                    GlobalValues;                                     		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FUISavedKeyValue>                    ProfileValues;                                    		// 0x0060(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_SaveData_TA");
		return ptr;
	}


	void SaveProfileValue(const struct FName& Key, const struct FString& Value);
	bool HasProfileValue(const struct FName& Key);
	struct FString GetProfileValue(const struct FName& Key);
	void SaveGlobalValue(const struct FName& Key, const struct FString& Value);
	bool HasGlobalValue(const struct FName& Key);
	struct FString GetGlobalValue(const struct FName& Key);
	void OnShellSet();
};


// Class TAGame.GFxData_Season_TA
// 0x002C (0x0080 - 0x0054)
class UGFxData_Season_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FSeasonTeamRank>                     TeamRankings;                                     		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FSeasonMatch>                        WeekMatches;                                      		// 0x0060(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FSeasonWeek>                         Weeks;                                            		// 0x006C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UProfile_TA*                                 Profile;                                          		// 0x0078(0x0004) (CPF_Transient)
	class USeason_TA*                                  Season;                                           		// 0x007C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Season_TA");
		return ptr;
	}


	int SortWeekMatch(const struct FSeasonMatch& A, const struct FSeasonMatch& B);
	void SetDifficulty(int NewDifficulty);
	void SetBots(const struct FString& BotID0, const struct FString& BotName0, const struct FString& BotID1, const struct FString& BotName1, const struct FString& BotID2, const struct FString& BotName2);
	void LoadWeekMatches(int Week);
	void CalcCurrentWeekRankings();
	void UpdateSeasonWeeks();
	void HandleWeekSimulated(class USeason_TA* InSeason);
	void SetSeason(class USeason_TA* InSeason);
	void LoadLatestSeason();
	void OnShellSet();
};


// Class TAGame.ProductAttribute_DisplayLabelSlot_TA
// 0x0004 (0x0058 - 0x0054)
class UProductAttribute_DisplayLabelSlot_TA : public UProductAttribute_TA
{
public:
	class UProductSlot_TA*                             DisplayLabelSlot;                                 		// 0x0054(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_DisplayLabelSlot_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Schematic_TA
// 0x0000 (0x0054 - 0x0054)
class UProductAttribute_Schematic_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Schematic_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Key_TA
// 0x0000 (0x0054 - 0x0054)
class UProductAttribute_Key_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Key_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Container_TA
// 0x0000 (0x0054 - 0x0054)
class UProductAttribute_Container_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Container_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Trademark_TA
// 0x0001 (0x0055 - 0x0054)
class UProductAttribute_Trademark_TA : public UProductAttribute_TA
{
public:
	TEnumAsByte<enum class ETrademarkGlyph>            Glyph;                                            		// 0x0054(0x0001) (CPF_Edit, CPF_Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Trademark_TA");
		return ptr;
	}


	struct FString GetGlyph();
};


// Class TAGame.GFxData_SeasonMode_TA
// 0x003C (0x0090 - 0x0054)
class UGFxData_SeasonMode_TA : public UGFxDataSingleton_X
{
public:
	TArray<class UProduct_TA*>                         PlayerBots;                                       		// 0x0054(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	int                                                NumSeasons;                                       		// 0x0060(0x0004) (CPF_DataBinding)
	TArray<struct FGFxLogoData>                        Logos;                                            		// 0x0064(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FGFxBotData>                         Bots;                                             		// 0x0070(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UProductAsset_Logo_TA*                       TeamLogo;                                         		// 0x007C(0x0004) (CPF_Transient)
	class UProfile_TA*                                 Profile;                                          		// 0x0080(0x0004) (CPF_Transient)
	class UCarPreviewSet_TA*                           PreviewSet;                                       		// 0x0084(0x0004) (CPF_Transient)
	unsigned long                                      bUseSeasonColors : 1;                             		// 0x0088(0x0004) (CPF_Transient)
	int                                                CurrentTeamSize;                                  		// 0x008C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_SeasonMode_TA");
		return ptr;
	}


	bool InMainMenu();
	void Save();
	void DeleteSeason();
	void CreateSeason(int TeamSize, int Difficulty, int NumRegularWeeks, int NumPlayoffsTeams, const struct FString& TeamName, const struct FName& TeamLogoAsset, const struct FString& BotID0, const struct FString& BotID1, const struct FString& BotID2);
	void ClearBotPreviewActors();
	void TeamSizeChanged(int TeamSize);
	void SetBot(int BotIndex, const struct FString& BotID);
	void UpdateColors(class ACarPreviewActor_TA* PreviewActor);
	void RestoreStadiumColors();
	void SetLogo(const struct FName& LogoAsset);
	struct FString GetBotNameFromID(const struct FString& Id);
	void BuildBotData();
	void BuildLogoData();
	void HandlePreviewActorsChanged(class UCarPreviewSet_TA* G);
	void HandleSetProfile(class ACarPreviewActor_TA* Car);
	void OnShellSet();
};


// Class TAGame.GFxData_ServerBrowser_TA
// 0x0030 (0x0084 - 0x0054)
class UGFxData_ServerBrowser_TA : public UGFxDataSingleton_X
{
public:
	class ULocalPlayer_TA*                             TAPlayer;                                         		// 0x0054(0x0004) (CPF_Transient)
	struct FString                                     ServerName;                                       		// 0x0058(0x000C) (CPF_Edit, CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     Password;                                         		// 0x0064(0x000C) (CPF_Edit, CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FServerResult>                       Results;                                          		// 0x0070(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UGFxModal_X*                                 ProcessingModal;                                  		// 0x007C(0x0004) (CPF_Transient)
	int                                                JoiningIndex;                                     		// 0x0080(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ServerBrowser_TA");
		return ptr;
	}


	void JoinServer(int Index, const struct FJoinMatchSettings& JoinSettings);
	void HandleLanSearchComplete(bool bCancelled);
	void HandleLanResponse(struct FServerResult* HostResponse);
	void HandleSearchComplete(TArray<struct FServerResult>* InResults);
	void HandleSearchError(const struct FString& msg);
	void CancelJoin();
	void CancelSearch();
	void StartLanSearch();
	void StartSearch();
	void SetPassword(const struct FString& InPassword);
	void SetServerName(const struct FString& InServerName);
	void OnShellSet();
	class UOnlineGame_X* GetOnlineGame();
};


// Class TAGame.GFxData_UserSetting_TA
// 0x00D8 (0x012C - 0x0054)
class UGFxData_UserSetting_TA : public UGFxDataRow_X
{
public:
	TEnumAsByte<enum class EUserSettingType>           Type;                                             		// 0x0054(0x0001) (CPF_DataBinding)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0055(0x0003) MISSED OFFSET
	struct FName                                       Group;                                            		// 0x0058(0x0008) (CPF_DataBinding)
	struct FName                                       Id;                                               		// 0x0060(0x0008) (CPF_DataBinding)
	struct FString                                     Label;                                            		// 0x0068(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     Description;                                      		// 0x0074(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     Values;                                           		// 0x0080(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FString>                             ValuesArray;                                      		// 0x008C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     Labels;                                           		// 0x0098(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     Value;                                            		// 0x00A4(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	unsigned long                                      bUserSetting : 1;                                 		// 0x00B0(0x0004) (CPF_DataBinding)
	unsigned long                                      bEnabled : 1;                                     		// 0x00B0(0x0004) (CPF_DataBinding)
	struct FString                                     DefaultValue;                                     		// 0x00B4(0x000C) (CPF_NeedCtorLink)
	struct FProfileSliderLimits                        Limits;                                           		// 0x00C0(0x000C) (CPF_Transient)
	struct FScriptDelegate                             __OnListValueGet__Delegate;                       		// 0x00CC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x00CC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnListValueSet__Delegate;                       		// 0x00DC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x00DC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnBooleanValueGet__Delegate;                    		// 0x00EC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x00EC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnBooleanValueSet__Delegate;                    		// 0x00FC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x00FC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnScalarValueGet__Delegate;                     		// 0x010C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData05[0x4];                               		// 0x010C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __OnScalarValueSet__Delegate;                     		// 0x011C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData06[0x4];                               		// 0x011C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_UserSetting_TA");
		return ptr;
	}


	void Clear();
	void SetScalarValue(const struct FString& InValue);
	void SetBooleanValue(const struct FString& InValue);
	void SetListValue(const struct FString& InValue);
	void SetValue(const struct FString& InValue);
	class UGFxData_UserSetting_TA* AddEnumValue(int InValue, const struct FString& InLabel);
	class UGFxData_UserSetting_TA* AddLocalizedValue(const struct FString& InValue, const struct FString& InLabel);
	class UGFxData_UserSetting_TA* AddValue(const struct FString& InValue, const struct FString& Key);
	void SetScalarLimits(const struct FProfileSliderLimits& InLimits);
	void Init(TEnumAsByte<enum class EUserSettingType> inType, const struct FName& InGroup, const struct FName& InID, const struct FString& InDefaultValue, bool bInUserSetting, bool bInEnabled);
	void OnScalarValueSet(class UGFxData_UserSetting_TA* Setting, float InValue);
	float OnScalarValueGet(class UGFxData_UserSetting_TA* Setting);
	void OnBooleanValueSet(class UGFxData_UserSetting_TA* Setting, bool InValue);
	bool OnBooleanValueGet(class UGFxData_UserSetting_TA* Setting);
	void OnListValueSet(class UGFxData_UserSetting_TA* Setting, const struct FString& InValue);
	struct FString OnListValueGet(class UGFxData_UserSetting_TA* Setting);
};


// Class TAGame.GFxData_Settings_TA
// 0x0070 (0x00C4 - 0x0054)
class UGFxData_Settings_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FIntPoint>                           SupportedResolutions;                             		// 0x0054(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	struct FProfileSliderLimits                        MouseSensitivityLimits;                           		// 0x0060(0x000C) (CPF_Edit)
	struct FProfileSliderLimits                        ControllerDeadzoneLimits;                         		// 0x006C(0x000C) (CPF_Edit)
	struct FProfileSliderLimits                        MouseDeadZoneLimits;                              		// 0x0078(0x000C) (CPF_Edit)
	struct FString                                     LoadingString;                                    		// 0x0084(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	TArray<class UGFxData_UserSetting_TA*>             UserSettings;                                     		// 0x0090(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     OldResolution;                                    		// 0x009C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     OldWindowMode;                                    		// 0x00A8(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	unsigned long                                      OldVSync : 1;                                     		// 0x00B4(0x0004) (CPF_Transient)
	unsigned long                                      bSettingRenderDetail : 1;                         		// 0x00B4(0x0004) (CPF_Transient)
	class UProfile_TA*                                 Profile;                                          		// 0x00B8(0x0004) (CPF_Transient)
	class USaveData_TA*                                SaveData;                                         		// 0x00BC(0x0004) (CPF_Transient)
	class UGameViewportClient_X*                       Viewport;                                         		// 0x00C0(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Settings_TA");
		return ptr;
	}


	void TriggerSettingChangedEvent(const struct FName& SettingName);
	void SetMouseXDeadZoneAir(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetMouseXDeadZoneAir(class UGFxData_UserSetting_TA* UserSetting);
	void SetMouseYDeadZoneAir(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetMouseYDeadZoneAir(class UGFxData_UserSetting_TA* UserSetting);
	void SetMouseXDeadZone(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetMouseXDeadZone(class UGFxData_UserSetting_TA* UserSetting);
	void SetMouseYDeadZone(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetMouseYDeadZone(class UGFxData_UserSetting_TA* UserSetting);
	void SetControllerDeadzone(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetControllerDeadzone(class UGFxData_UserSetting_TA* UserSetting);
	void SetMouseSensitivity(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetMouseSensitivity(class UGFxData_UserSetting_TA* UserSetting);
	void SetForceFeedback(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetForceFeedback(class UGFxData_UserSetting_TA* UserSetting);
	void SetAimAssistTrajectoryEnabled(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetAimAssistTrajectoryEnabled(class UGFxData_UserSetting_TA* UserSetting);
	void SetAimAssistEnabled(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetAimAssistEnabled(class UGFxData_UserSetting_TA* UserSetting);
	void SetAimAssistLevelOverride(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetAimAssistLevelOverride(class UGFxData_UserSetting_TA* UserSetting);
	void SetControlPreset(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetControlPreset(class UGFxData_UserSetting_TA* UserSetting);
	void AddToControlPresets(const struct FName& PresetName, TArray<struct FBindingPreset>* Presets);
	TArray<struct FBindingPreset> GetControlPresets();
	void InitControlsSettings();
	bool IsAutoCamSpectator();
	bool IsSpectator();
	void SetDefaults(const struct FName& Group);
	void SetCrossPlay(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetCrossPlay(class UGFxData_UserSetting_TA* UserSetting);
	void SetDisableContainerNotifactions(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetDisableContainerNotifications(class UGFxData_UserSetting_TA* UserSetting);
	void SetDisableDivisionsEvent(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetDisableDivisionsEvent(class UGFxData_UserSetting_TA* UserSetting);
	void SetMuteStatEvents(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetMuteStatEvents(class UGFxData_UserSetting_TA* UserSetting);
	void SetMetric(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetMetric(class UGFxData_UserSetting_TA* UserSetting);
	void SetTimeFormat(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetTimeFormat(class UGFxData_UserSetting_TA* UserSetting);
	void SetBallIndicator(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetBallIndicator(class UGFxData_UserSetting_TA* UserSetting);
	void UpdateEnableSavingValue();
	void HandleSaveDataPostEnableComplete(class USaveGameManager_TA* SaveManager, class USaveData_TA* ForSaveData, class UError_X* Error);
	void SetEnableSaving(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetEnableSaving(class UGFxData_UserSetting_TA* UserSetting);
	void SetHorizontalSplitscreen(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetHorizontalSplitscreen(class UGFxData_UserSetting_TA* UserSetting);
	void SetKeySelection(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetKeySelection(class UGFxData_UserSetting_TA* UserSetting);
	void SetChatFilter(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetChatFilter(class UGFxData_UserSetting_TA* UserSetting);
	void SetVoiceFilter(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetVoiceFilter(class UGFxData_UserSetting_TA* UserSetting);
	void InitGameplaySettings();
	bool GetFocusOnGoals(class UGFxData_UserSetting_TA* UserSetting);
	void SetFocusOnGoals(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetUseReplayCamera(class UGFxData_UserSetting_TA* UserSetting);
	void SetUseReplayCamera(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	float GetAutoCamAerialPrediction(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamAerialPrediction(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamPlayerFocusBlendSpeed(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamPlayerFocusBlendSpeed(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamAerialDistance(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamAerialDistance(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamRotateSpeed(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamRotateSpeed(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamMoveSpeedZ(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamMoveSpeedZ(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamMoveSpeed(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamMoveSpeed(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamZ(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamZ(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamDistance(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamDistance(class UGFxData_UserSetting_TA* UserSetting, float Value);
	void SetAutoCamFOV(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamFOV(class UGFxData_UserSetting_TA* UserSetting);
	void SetBallcamHold(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetBallcamHold(class UGFxData_UserSetting_TA* UserSetting);
	void SetBallcamIndicator(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetBallcamIndicator(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraType(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetCameraType(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraSwivelSpeed(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraSwivelSpeed(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraStiffness(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraStiffness(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraDistance(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraDistance(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraAngle(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraAngle(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraHeight(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraHeight(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraFOV(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraFOV(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraShake(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetCameraShake(class UGFxData_UserSetting_TA* UserSetting);
	void SetInvertSpectatorPitch(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetInvertSpectatorPitch(class UGFxData_UserSetting_TA* UserSetting);
	void SetInvertSwivelPitch(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetInvertSwivelPitch(class UGFxData_UserSetting_TA* UserSetting);
	void InitCameraSettings();
	void SetPushToTalk(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetPushToTalk(class UGFxData_UserSetting_TA* UserSetting);
	void SetOutputType(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetOutputType(class UGFxData_UserSetting_TA* UserSetting);
	void SetControllerSoundMode(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetControllerSoundMode(class UGFxData_UserSetting_TA* UserSetting);
	void SetControllerVolume(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetControllerVolume(class UGFxData_UserSetting_TA* UserSetting);
	void SetVoiceVolume(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetVoiceVolume(class UGFxData_UserSetting_TA* UserSetting);
	void SetAmbientVolume(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAmbientVolume(class UGFxData_UserSetting_TA* UserSetting);
	void SetMusicVolume(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetMusicVolume(class UGFxData_UserSetting_TA* UserSetting);
	void SetGameVolume(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetGameVolume(class UGFxData_UserSetting_TA* UserSetting);
	void SetMasterVolume(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetMasterVolume(class UGFxData_UserSetting_TA* UserSetting);
	void InitAudioSettings();
	void SetUIScale(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetUIScale(class UGFxData_UserSetting_TA* UserSetting);
	void SetSafeZone(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetSafeZone(class UGFxData_UserSetting_TA* UserSetting);
	void SetMotionBlur(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetMotionBlur(class UGFxData_UserSetting_TA* UserSetting);
	void SetDynamicShadows(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetDynamicShadows(class UGFxData_UserSetting_TA* UserSetting);
	void SetLensFlares(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetLensFlares(class UGFxData_UserSetting_TA* UserSetting);
	void SetLightShaftsAdvancedOption(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	void SetLightShafts(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetLightShafts(class UGFxData_UserSetting_TA* UserSetting);
	void SetBloom(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetBloom(class UGFxData_UserSetting_TA* UserSetting);
	void SetDepthOfField(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetDepthOfField(class UGFxData_UserSetting_TA* UserSetting);
	void SetAmbientOcclusion(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetAmbientOcclusion(class UGFxData_UserSetting_TA* UserSetting);
	void SetHighQualityShaders(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetHighQualityShaders(class UGFxData_UserSetting_TA* UserSetting);
	void SetWorldDetail(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetWorldDetail(class UGFxData_UserSetting_TA* UserSetting);
	void SetTextureDetail(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	void SetRenderDetail(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	void SaveVideoValueString(class UGFxData_UserSetting_TA* UserSetting);
	struct FString GetSavedVideoValueString(class UGFxData_UserSetting_TA* UserSetting);
	void SetRenderQuality(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetRenderQuality(class UGFxData_UserSetting_TA* UserSetting);
	void SetAntiAlias(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetAntiAlias(class UGFxData_UserSetting_TA* UserSetting);
	void OnAdvancedVideoOptionChanged();
	void InitVideoSettings();
	void SaveViewportSettings();
	void RevertViewportSettings();
	void SetViewportSettings(const struct FString& ResolutionValue, const struct FString& WindowModeValue, bool VSyncValue);
	void ApplyViewportSettings(const struct FString& ResolutionValue, const struct FString& WindowModeValue, bool VSyncValue);
	void SetMaxFPS(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetMaxFPS(class UGFxData_UserSetting_TA* UserSetting);
	void SetAlternateNameplates(class UGFxData_UserSetting_TA* UserSetting, bool bValue);
	bool GetAlternateNameplates(class UGFxData_UserSetting_TA* UserSetting);
	void SetColorBlind(class UGFxData_UserSetting_TA* UserSetting, bool bValue);
	bool GetColorBlind(class UGFxData_UserSetting_TA* UserSetting);
	void SetWeatherFX(class UGFxData_UserSetting_TA* UserSetting, bool bValue);
	bool GetWeatherFX(class UGFxData_UserSetting_TA* UserSetting);
	void SetVSync(class UGFxData_UserSetting_TA* UserSetting, bool bValue);
	bool GetVSync(class UGFxData_UserSetting_TA* UserSetting);
	struct FString GetWindowMode(class UGFxData_UserSetting_TA* UserSetting);
	struct FString GetResolution(class UGFxData_UserSetting_TA* UserSetting);
	void InitViewportSettings();
	int SortResolutions(const struct FIntPoint& A, const struct FIntPoint& B);
	int GetGreatestCommonDenominator(int X, int Y);
	void SetScalarValue(const struct FName& Id, float Value);
	void SetBooleanValue(const struct FName& Id, bool Value);
	void SetListValue(const struct FName& Id, const struct FString& Value);
	struct FString BoolToString(bool Value);
	bool StringToBool(const struct FString& Value);
	void DoSave();
	void Save();
	class UGFxData_UserSetting_TA* CreateScalarUserSetting(const struct FName& Group, const struct FName& Id, const struct FString& DefaultValue, const struct FScriptDelegate& GetFunc, const struct FScriptDelegate& SetFunc, const struct FProfileSliderLimits& Limits, bool bUserSetting, bool bEnabled);
	class UGFxData_UserSetting_TA* CreateBooleanUserSetting(const struct FName& Group, const struct FName& Id, const struct FString& DefaultValue, const struct FScriptDelegate& GetFunc, const struct FScriptDelegate& SetFunc, bool bUserSetting, bool bEnabled);
	class UGFxData_UserSetting_TA* CreateListUserSetting(const struct FName& Group, const struct FName& Id, const struct FString& DefaultValue, const struct FScriptDelegate& GetFunc, const struct FScriptDelegate& SetFunc, bool bUserSetting, bool bEnabled);
	class UGFxData_UserSetting_TA* GetUserSetting(const struct FName& Id);
	int GetUserSettingIndex(const struct FName& Id);
	void LoadUserSettings();
	void OnShellSet();
};


// Class TAGame.SeqEvent_WeatherToggled_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_WeatherToggled_TA : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_WeatherToggled_TA");
		return ptr;
	}

};


// Class TAGame.PostProcessManager_TA
// 0x0005 (0x0095 - 0x0090)
class UPostProcessManager_TA : public UPostProcessManager_X
{
public:
	float                                              BumpCarFXDuration;                                		// 0x0090(0x0004) (CPF_Edit)
	TEnumAsByte<enum class EPostProcessAAType>         PostProcessAAType;                                		// 0x0094(0x0001) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PostProcessManager_TA");
		return ptr;
	}


	void ClearBumpedCarFX();
	void HandleBumpedCar(class ACar_TA* InCar, class ACar_TA* HitCar);
	void OnCarChanged(class ACar_TA* OldCar, class ACar_TA* NewCar);
	void HandlePawnChange(class APlayerController_X* PC, class APawn* OldPawn, class APawn* NewPawn);
	void ApplyPostProcessTypeOverride();
	void SetAAType(TEnumAsByte<enum class EPostProcessAAType> NewType);
	void Init(class APlayerController_X* NewOwner);
};


// Class TAGame.SeqEvent_UserSettingChanged_TA
// 0x0008 (0x011C - 0x0114)
class USeqEvent_UserSettingChanged_TA : public USequenceEvent
{
public:
	struct FName                                       SettingName;                                      		// 0x0114(0x0008) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_UserSettingChanged_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_SplitscreenMatch_TA
// 0x0002 (0x0160 - 0x015E)
class UGFxData_SplitscreenMatch_TA : public UGFxData_PrivateMatch_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_SplitscreenMatch_TA");
		return ptr;
	}


	void StartSearch();
};


// Class TAGame.GFxData_StartMenu_TA
// 0x001C (0x0070 - 0x0054)
class UGFxData_StartMenu_TA : public UGFxDataSingleton_X
{
public:
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x0054(0x0004) (CPF_Edit)
	class UOnlineGame_X*                               OnlineGame;                                       		// 0x0058(0x0004) (CPF_Edit)
	struct FString                                     SigningInText;                                    		// 0x005C(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	class UGFxModal_X*                                 SignInModal;                                      		// 0x0068(0x0004) (CPF_Transient)
	int                                                ClickedControllerIndex;                           		// 0x006C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_StartMenu_TA");
		return ptr;
	}


	void OnRequiresLicenseAgreement(int ControllerIndex);
	void HandleTrialUpdated(class UOnlineGameTrial_X* InTrial);
	void SignInTimeout();
	void ShowWaitingForSignInModal();
	void ShowSignInRequiredModal();
	bool NeedsLoginForTrial(class ULocalPlayer_TA* LocalPlayer, class USaveData_TA* SaveData);
	bool MainMenuDisabled();
	void HandleSaveDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* SaveData, class UError_X* Error);
	void OnPrimaryPlayerSet(int ControllerIndex);
	class ULocalPlayer_TA* GetPrimaryLocalPlayer();
	void OnContinueWithNoUser(class UGFxModal_X* Modal);
	void OnShowAccountPicker(class UGFxModal_X* Modal);
	void HandleLoginCancelled();
	void HandlePrimaryPlayerLoginFailed(unsigned char PlayerNum, TEnumAsByte<enum class EOnlineServerConnectionStatus> ErrorCode);
	void HandlePrimaryPlayerLoginChange(unsigned char PlayerNum);
	void ClearPrimaryPlayerLoginDelegates(unsigned char PlayerNum);
	void TitleScreenClicked(int ControllerIndex);
	void OnKonamiCode();
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_Stats_TA
// 0x001C (0x0070 - 0x0054)
class UGFxData_Stats_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxStatData>                        Events;                                           		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UProfile_TA*                                 Profile;                                          		// 0x0060(0x0004) (CPF_Transient)
	TArray<class UStatEvent_TA*>                       StatEvents;                                       		// 0x0064(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Stats_TA");
		return ptr;
	}


	void SetGFxStatData(TArray<struct FStatValue> InStatValues);
	void HandleXPUpdated(class UProfile_TA* P);
	void BuildStatList();
	void LoadSavedStats();
	void OnShellSet();
};


// Class TAGame.GFxData_Training_TA
// 0x0030 (0x0084 - 0x0054)
class UGFxData_Training_TA : public UGFxDataSingleton_X
{
public:
	struct FName                                       TrainingType;                                     		// 0x0054(0x0008) (CPF_DataBinding)
	int                                                CurrentScore;                                     		// 0x005C(0x0004) (CPF_DataBinding)
	int                                                CurrentRound;                                     		// 0x0060(0x0004) (CPF_DataBinding)
	int                                                TotalRounds;                                      		// 0x0064(0x0004) (CPF_DataBinding)
	struct FString                                     Difficulty;                                       		// 0x0068(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     SelectedFreeplayMap;                              		// 0x0074(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	unsigned long                                      bShowBoostMeter : 1;                              		// 0x0080(0x0004) (CPF_DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Training_TA");
		return ptr;
	}


	void PlayTutorial(bool bAdvanced);
	void PlayFreeplayMap(const struct FString& Map);
	void PlayTraining(const struct FString& Type, const struct FString& TrainingDifficulty);
	void HandleBoostMeterChanged(class AGameEvent_Tutorial_TA* GameEvent);
	struct FString ParseDifficulty(TEnumAsByte<enum class EDifficulty> InDifficulty);
	struct FString ParseTutorialName(TEnumAsByte<enum class ETrainingType> inType);
	void HandleEditorDataChanged(class AGameEvent_TrainingEditor_TA* GameEvent);
	void HandleDifficultyUpdated(class AGameEvent_Tutorial_TA* GameEvent);
	void HandleScoreUpdated(class AGameEvent_Tutorial_TA* GameEvent);
	void SetTrainingEditorGameEvent(class AGameEvent_TrainingEditor_TA* InGameEvent);
	void SetTrainingGameEvent(class AGameEvent_Tutorial_TA* InGameEvent);
	void HandleSaveDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* MySaveData, class UError_X* Error);
	void OnShellSet();
};


// Class TAGame.GameEvent_GameEditor_TA
// 0x0048 (0x07D8 - 0x0790)
class AGameEvent_GameEditor_TA : public AGameEvent_Soccar_TA
{
public:
	class UClass*                                      SaveDataClass;                                    		// 0x0790(0x0004)
	class USaveData_GameEditor_TA*                     SaveData;                                         		// 0x0794(0x0004)
	int                                                ActiveRoundNumber;                                		// 0x0798(0x0004)
	TArray<struct FSpawnArchetypeData>                 SpawnableArchetypes;                              		// 0x079C(0x000C) (CPF_NeedCtorLink)
	TArray<class ADynamicSpawnPointMesh_TA*>           CarSpawnPoints;                                   		// 0x07A8(0x000C) (CPF_NeedCtorLink)
	class AGameEditor_Pawn_TA*                         EditorPawnArchetype;                              		// 0x07B4(0x0004)
	int                                                MaxRounds;                                        		// 0x07B8(0x0004)
	TArray<struct U_Types_TA_FActorHistory>            UndoHistory;                                      		// 0x07BC(0x000C) (CPF_NeedCtorLink)
	int                                                HistoryPosition;                                  		// 0x07C8(0x0004)
	int                                                MaxUndoHistory;                                   		// 0x07CC(0x0004)
	class AFXActor_X*                                  FXActorArchetype;                                 		// 0x07D0(0x0004) (CPF_Edit)
	class AFXActor_X*                                  FXActor;                                          		// 0x07D4(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_GameEditor_TA");
		return ptr;
	}


	void HandleTriggerTouched(class AGameEditor_Trigger_TA* Trigger, class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void RotateActor(class APlayerController_TA* PC, bool bSnapOrientation);
	void OnPlayerAdded(class AController* NewPlayer);
	void PrevRound();
	void NextRound();
	void DecreaseTime();
	void IncreaseTime();
	void StopEditing(class APlayerController_TA* PC);
	void StartEditing();
	void CycleActor(class APlayerController_TA* PC);
	void ReleaseGrabbedActor(class APlayerController_TA* PC);
	void ReleaseRotateActor(class APlayerController_TA* PC);
	void ToggleRotateActor(class APlayerController_TA* PC);
	void SetSaveData(class USaveData_GameEditor_TA* Data);
	void ToggleGrabActor(class APlayerController_TA* PC);
	void ToggleReleaseActor(class APlayerController_TA* PC);
	void ReleaseActor(class APlayerController_TA* PC);
	void GrabActor(class APlayerController_TA* PC);
	bool CanQueSaveReplay();
	bool ShouldUpdateCrosshair();
	int GetPlayerTeamNumber();
	bool CanAddHistory();
	void ToggleEditorRound();
	void CommitRedoRound();
	void ResetRound();
	void Save();
	void Redo(class APlayerController_TA* PC);
	void Undo(class APlayerController_TA* PC);
	class AActor* FindActorByName(const struct FName& actorName);
	bool RestoreFromHistory(class APlayerController_TA* PC, TEnumAsByte<enum class EHistoryType> HistoryType, const struct U_Types_TA_FActorHistory& RestoreHistory);
	TEnumAsByte<enum class EHistoryType> GetOtherHistoryType(TEnumAsByte<enum class EHistoryType> HistoryType);
	void ClampUndoHistory();
	bool AddToHistoryArray(const TScriptInterface<class UInterface_GameEditor_TA>& EditorActor, const struct U_Types_TA_FActorHistory& NewHistory);
	bool HistoriesAreEqual(const TScriptInterface<class UInterface_GameEditor_TA>& EditorActor, const struct U_Types_TA_FActorHistory& H0, const struct U_Types_TA_FActorHistory& H1);
	bool AddUndoHistory(const TScriptInterface<class UInterface_GameEditor_TA>& EditorActor, TEnumAsByte<enum class EHistory> HistoryEditType, bool bClearRedoHistory);
	bool AddHistory(TEnumAsByte<enum class EHistoryType> HistoryType, const TScriptInterface<class UInterface_GameEditor_TA>& EditorActor, TEnumAsByte<enum class EHistory> HistoryEditType, bool bClearRedoHistory);
	struct U_Types_TA_FActorHistory MakeHistory(const TScriptInterface<class UInterface_GameEditor_TA>& EditorActor, TEnumAsByte<enum class EHistory> HistoryEditType);
	void ClearRedoHistory();
	void ClearAllHistory();
	class AActor* DeserializeAndSpawn(const struct FString& SerializedData, class UClass* ClassType, TEnumAsByte<enum class EHistoryType> HistoryType);
	bool DestroyActor(class AActor* A, TEnumAsByte<enum class EHistoryType> HistoryType);
	bool IsInEditorMode();
	void RemoveAllPointsFromScore(int TeamIndex);
	void RemovePointsFromScore(int PointsToRemove, int TeamIndex);
	struct FName GetDesiredSoundState();
	void DeleteAllExistingActorsBasedOffSpawnList();
	int GetSpawnedActorCount(const struct FSpawnArchetypeData& ArchetypeData);
	bool RoundContainsASwitch();
	void EnableTriggers(bool bEnable);
	void HideCarSpawnPoints(bool bHide);
	void ResetSpawnLocations();
	void OnSpawnedArchetype(class AActor* SpawnedActor, TEnumAsByte<enum class EHistoryType> HistoryType);
	void SpawnArchetype(class APlayerController_TA* Controller, int ArchetypeIndex);
	struct FSpawnArchetypeData GetSelectedSpawnArchetype(int Index);
	void IncrementSelectedSpawnArchetypeIndex(int Direction, int* Index);
	bool CanChangeTeam();
	void ResetBallsToDefaultPosition();
	void FireBalls();
	void Interact();
	bool ShouldResetBalls();
	void OnVehicleSetup(class ACar_TA* Car);
	void HandleVehicleSetup(class ACar_TA* Car);
	void OnPlayerRestarted(class ACar_TA* PlayerCar);
	void GetSpawnLocationAndRotation(class AController* Player, struct FVector* SpawnLocation, struct FRotator* SpawnRotation);
	bool RestartPlayer(class AController* NewPlayer);
	class AGameEditor_Pawn_TA* SpawnEditorPawn(class AController* NewPlayer, const struct FVector& SpawnLoc, const struct FRotator& SpawnRot);
	void SetupInitialPawnOrientation(class APlayerController* NewPlayer);
	bool ChooseTeam(int TeamIndex, class APlayerController_TA* Player);
	void InitFX();
	void PostBeginPlay();
};


// Class TAGame.GameEvent_TrainingEditor_TA
// 0x00A0 (0x0878 - 0x07D8)
class AGameEvent_TrainingEditor_TA : public AGameEvent_GameEditor_TA
{
public:
	float                                              MinRoundTime;                                     		// 0x07D8(0x0004)
	float                                              MaxRoundTime;                                     		// 0x07DC(0x0004)
	unsigned long                                      bNoEditor : 1;                                    		// 0x07E0(0x0004) (CPF_Transient)
	unsigned long                                      bDisplayedRedoPenaltyMessage : 1;                 		// 0x07E0(0x0004) (CPF_Transient)
	unsigned long                                      bUnsavedChanges : 1;                              		// 0x07E0(0x0004) (CPF_Transient)
	int                                                PointsScoredThisRound;                            		// 0x07E4(0x0004) (CPF_Transient)
	class UGFxModal_X*                                 ResetModal;                                       		// 0x07E8(0x0004)
	int                                                ShotAttempt;                                      		// 0x07EC(0x0004) (CPF_Transient)
	int                                                GoalieScore;                                      		// 0x07F0(0x0004) (CPF_Transient)
	TEnumAsByte<enum class EPlayTestType>              PlayTestType;                                     		// 0x07F4(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData00[0x3];                               		// 0x07F5(0x0003) MISSED OFFSET
	TArray<class AActor*>                              GoalMeshBlockers;                                 		// 0x07F8(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class AActor*                                      GoalMeshBlockerArchetype;                         		// 0x0804(0x0004)
	class USaveData_GameEditor_Training_TA*            TrainingData;                                     		// 0x0808(0x0004) (CPF_Transient)
	struct FName                                       PrePlaytestState;                                 		// 0x080C(0x0008) (CPF_Transient)
	float                                              SaveDelayTime;                                    		// 0x0814(0x0004)
	float                                              SaveCooldown;                                     		// 0x0818(0x0004)
	struct FString                                     TrainingFileName;                                 		// 0x081C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventRoundTimeChanged__Delegate;                		// 0x0828(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0828(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventRoundChanged__Delegate;                    		// 0x0838(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0838(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventPlaytestStarted__Delegate;                 		// 0x0848(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x0848(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventUnsavedChanges__Delegate;                  		// 0x0858(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x0858(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSaveResult__Delegate;                      		// 0x0868(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData05[0x4];                               		// 0x0868(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_TrainingEditor_TA");
		return ptr;
	}


	void BroadcastGoMessage();
	int GetTotalRounds();
	TEnumAsByte<enum class EDifficulty> GetDifficulty();
	TEnumAsByte<enum class ETrainingType> GetTrainingType();
	void Save();
	void HandleSaveResult(const struct FSaveObjectResult& Result);
	void SaveInternal(struct FSaveObjectResult* StructInitializer__s_AB63B0B24731BBD06E1441B3818922B9);
	void OnTrainingModeLoaded();
	void DuplicateRound(int Index);
	void SetMetaData(const struct FString& NewName, TEnumAsByte<enum class ETrainingType> NewType, TEnumAsByte<enum class EDifficulty> NewDifficulty, TArray<int> NewTags);
	void ReorderRound(int FromIndex, int ToIndex);
	void SetRoundTimeLimit(float NewRoundTime);
	bool HandleNextGame();
	void ResetBalls();
	class UTrainingEditorMetrics_TA* GetTrainingMetrics();
	void Load(const struct FString& SaveName, class APlayerController_TA* PC);
	class AActor* GetFirstFoundArchetype(const struct FName& ArchetypeName);
	void DestroyGoalMeshBlockers();
	void UpdateGoalMeshBlocker();
	int GetScore();
	bool CanAwardAchievements();
	void RemovePointsFromScore(int PointsToRemove, int TeamIndex);
	bool ShowScorerGoalMessage();
	void OnResetRoundCancel(class UGFxModal_X* Modal);
	void OnResetRoundConfirm(class UGFxModal_X* Modal);
	void ShowResetRoundMessage();
	bool ShowPenaltyMessage();
	int GetPlayerTeamNumber();
	int GetBallGoalScoreNumber();
	void RemoveAllPointsFromScore(int TeamIndex);
	bool IncrementRound(bool bLoop);
	int GetStoredArchetypeCount(int RoundNumber, class UClass* ClassType);
	void SetupInitialPawnOrientation(class APlayerController* NewPlayer);
	void LoadRoundData(const struct FEditorRoundData& Round, class UClass* ClassType);
	void LoadRound(const struct FEditorRoundData& Round);
	struct FVector AdjustToFloorLocation(const struct FVector& TraceStart, const struct FVector& CollsionExtent);
	class AActor* SpawnArchetypeAtAndAdjustToFloor(class AActor* Archetype, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	void SpawnBallAndStartPointAt(const struct FVector& BallSpawnLocation, const struct FRotator& BallSpawnRotation, const struct FVector& StartPointSpawnLocation, const struct FRotator& StartPointSpawnRotation);
	void SetupDefaultRound();
	void SwitchToRoundNumber(int RoundNumber, bool BackupCurrentRound);
	void SetRoundByNumber(int RoundNumber, const struct FEditorRoundData& RoundData);
	void DeleteRound(int RoundToDelete);
	struct FEditorRoundData GetCurrentRoundData();
	bool CanPlayTestRound(const struct FEditorRoundData& Round);
	void RestartPlayTest();
	void EndPlayTest();
	void StartPlayTest(TEnumAsByte<enum class EPlayTestType> InPlayTestType);
	bool CanPlayTestRoundNumber(int RoundNumber);
	void SetUnsavedChanges(bool bInUnsavedChanges);
	void UpdateActiveRoundData();
	void StartNewRound();
	bool IsValidRoundIndex(int ArrayIndex);
	void AddLocalPlayer(class APlayerController_TA* Player);
	void OnInit();
	void Destroyed();
	void PostBeginPlay();
	void EventSaveResult(bool bSuccess);
	void EventUnsavedChanges(bool bOutUnsavedChanges);
	void EventPlaytestStarted(class AGameEvent_TrainingEditor_TA* GamEvent);
	void EventRoundChanged(class AGameEvent_TrainingEditor_TA* GamEvent);
	void EventRoundTimeChanged(class AGameEvent_TrainingEditor_TA* GameEvent);
};


// Class TAGame.GFxData_Vote_TA
// 0x0024 (0x0078 - 0x0054)
class UGFxData_Vote_TA : public UGFxDataRow_X
{
public:
	struct FString                                     Subject;                                          		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                YesVotes;                                         		// 0x0060(0x0004) (CPF_DataBinding)
	int                                                NoVotes;                                          		// 0x0064(0x0004) (CPF_DataBinding)
	int                                                RequiredVotes;                                    		// 0x0068(0x0004) (CPF_DataBinding)
	int                                                TimeRemaining;                                    		// 0x006C(0x0004) (CPF_DataBinding)
	TEnumAsByte<enum class EVoteStatus>                VoteStatus;                                       		// 0x0070(0x0001) (CPF_DataBinding)
	TEnumAsByte<enum class EVoteStatus>                LocalVoteStatus;                                  		// 0x0071(0x0001) (CPF_DataBinding)
	unsigned char                                      UnknownData00[0x2];                               		// 0x0072(0x0002) MISSED OFFSET
	class AVoteActor_TA*                               VoteActor;                                        		// 0x0074(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Vote_TA");
		return ptr;
	}


	void SetVoteStatus(TEnumAsByte<enum class EVoteStatus> Status);
	void ClearVote();
	void VoteNo();
	void VoteYes();
	void HandleDestroyed(class AVoteActor_TA* InVoteActor);
	void HandleFinished(class AVoteActor_TA* InVoteActor);
	void UpdateData(class AVoteActor_TA* InVoteActor);
	void OnRemoved();
	void SetVoteActor(class AVoteActor_TA* InVoteActor);
};


// Class TAGame.LoadingScreen_TA
// 0x0084 (0x00C0 - 0x003C)
class ULoadingScreen_TA : public UObject
{
public:
	TArray<struct FString>                             ProtipMessages;                                   		// 0x003C(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	TArray<struct FString>                             ProtipMessagesQueue;                              		// 0x0048(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     MaximumPlayerCounts;                              		// 0x0054(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class UGFxEngine_TA*                               GFxEngineRef;                                     		// 0x0060(0x0004) (CPF_Transient)
	class UOnlineGame_X*                               OnlineGame;                                       		// 0x0064(0x0004) (CPF_Transient)
	struct FLoadingMovieMapInfo                        LoadingScreenInfo;                                		// 0x0068(0x0058) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadingScreen_TA");
		return ptr;
	}


	void HandlePreLoadMap(const struct FString& MapName);
	struct FString GetProtipMessageWithIcons(const struct FString& ProtipMessage, const struct FString& OpenDelimiter, const struct FString& CloseDelimiter, TEnumAsByte<enum class EInputPlatformType> InputType);
	TEnumAsByte<enum class EInputPlatformType> GetProtipInputType();
	void OnLargeImageMapLoaded(const struct FMapImageLoadResult& LoadResult);
	void HandleCurrentPlaylistSet(class UOnlineGameAccount_X* InAccount, class UGameSettingPlaylist_X* NewPlaylist);
	void HandleMaxPlayersChanged(class UOnlineGameJoinGame_X* OnlineGameJoinGame, int MaxPlayers);
	void HandleJoiningGame(class UOnlineGameJoinGame_X* OnlineGameJoinGame);
	void HandleOnlineGameInitialized();
	void HandlePostLoadMap();
	struct FString GetLocalizedMaximumPlayerCounts(int MaxPlayers);
	void HandleMatchSettingsChanged(class AGameEvent_TA* GameEvent, const struct FCustomMatchSettings& NewMatchSettings);
	void Init(class UGFxEngine_TA* NewGFxEngine);
};


// Class TAGame.GFxHUD_Spectator_TA
// 0x002C (0x05A8 - 0x057C)
class AGFxHUD_Spectator_TA : public AGFxHUD_TA
{
public:
	class UGFxData_ReplayViewer_TA*                    ViewerData;                                       		// 0x057C(0x0004) (CPF_Transient)
	float                                              ZoomSpeed;                                        		// 0x0580(0x0004) (CPF_Edit)
	float                                              ZoomClickTime;                                    		// 0x0584(0x0004) (CPF_Edit)
	class AGFxHUD_TA*                                  GameHUD;                                          		// 0x0588(0x0004) (CPF_Transient)
	unsigned long                                      bZoomIn : 1;                                      		// 0x058C(0x0004) (CPF_Transient)
	unsigned long                                      bZoomOut : 1;                                     		// 0x058C(0x0004) (CPF_Transient)
	float                                              ZoomInTime;                                       		// 0x0590(0x0004) (CPF_Transient)
	float                                              ZoomOutTime;                                      		// 0x0594(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __OpenMenuWithKeycodeDelegate__Delegate;          		// 0x0598(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0598(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxHUD_Spectator_TA");
		return ptr;
	}


	class ACar_TA* GetFocusCar();
	class APRI_TA* GetPRIFromPlayerIDString(const struct FString& PlayerIDString);
	void HandleViewedPlayerTeamChanged(class APRI_X* InPRI);
	void ViewCycle(int Direction);
	void ViewPrev();
	void ViewNext();
	void GetViewableActors(TArray<struct FString>* Actors, int* CurrentIndex);
	void AddViewableActor(const struct FString& actorName, TArray<struct FString>* Actors, int* CurrentIndex);
	void ViewFly(const struct FString& actorName);
	void OnViewedPlayerChanged(const struct FString& PreviousPlayerIDString, class APRI_TA* NewPlayerPRI);
	void ViewPlayer(int Team, int Player);
	void ToggleControls();
	void OpenHUDMenu();
	void OpenCameraMenu();
	void CycleCamera();
	void OpenFocusMenu();
	void CycleFocus();
	TArray<struct FString> GetFocusPlayerNames();
	void OpenMenuWithKeycode(const struct FScriptDelegate& Callback);
	void OpenMenuWithKeycodeDelegate(int KeyCode, int MouseButton);
	void UpdateHudVisibility();
	void CycleHUD();
	bool ProcessZoomPress(bool bPressed, int DeltaFOV, float* Time);
	void ZoomOut(bool bPressed);
	void ZoomIn(bool bPressed);
	void AdjustZoom(float DeltaFOV);
	void TickZoom(float DeltaTime, bool bZoom, float Speed, float* Time);
	void Tick(float DeltaTime);
	void SetGameEvent(class AGameEvent_TA* InGameEvent);
	class UGFxData_PRI_TA* CreateGFxPRIData();
	void HandleReservationsUpdated(class AGRI_X* GRI);
	void Destroyed();
	void PostBeginPlay();
};


// Class TAGame.Mutator_Preset_TA
// 0x0004 (0x0058 - 0x0054)
class UMutator_Preset_TA : public UMutator_TA
{
public:
	class UPresetMutators_X*                           Presets;                                          		// 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Preset_TA");
		return ptr;
	}

};


// Class TAGame.GFxNameplatesManager_TA
// 0x0044 (0x008C - 0x0048)
class UGFxNameplatesManager_TA : public UComponent
{
public:
	class UGFxMoviePlayer_X*                           MovieArchetype;                                   		// 0x0048(0x0004) (CPF_Edit)
	class UNameplateComponent_TA*                      NameplateArchetype;                               		// 0x004C(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UGFxShell_X*                                 Shell;                                            		// 0x0050(0x0004) (CPF_Transient)
	class UGFxMoviePlayer_X*                           Movie;                                            		// 0x0054(0x0004) (CPF_Transient)
	unsigned long                                      bHidden : 1;                                      		// 0x0058(0x0004) (CPF_Transient)
	unsigned long                                      bDebug : 1;                                       		// 0x0058(0x0004) (CPF_Edit)
	TArray<class ACar_TA*>                             CarSlots;                                         		// 0x005C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class ACar_TA*>                             PendingCars;                                      		// 0x0068(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UGFxData_Nameplate_TA*>               NameplateRows;                                    		// 0x0074(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UNameplateComponent_TA*>              Nameplates;                                       		// 0x0080(0x000C) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_NeedCtorLink, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxNameplatesManager_TA");
		return ptr;
	}


	void DrawDebug(class UNameplateComponent_TA* Nameplate);
	void Tick();
	void UpdateNameplatesVisibility();
	void SetHidden(bool bHide);
	class UNameplateComponent_TA* GetNameplate(class ACar_TA* Car);
	class UNameplateComponent_TA* SetNameplate(int Index, class ACar_TA* Car);
	void SetPlayerData(int Index, class ACar_TA* Car);
	void Update();
	class UGameShare_TA* GetGameShare();
	void QueUpdate();
	void HandlePRIXChanged(class APRI_X* P);
	void HandleVehicleChanged(class AVehicle_TA* Vehicle);
	void HandleCarChanged(class ACar_TA* Car);
	void UpdatePendingCars();
	void HandleCarRemoved(class UGameShare_TA* G, class ACar_TA* Car);
	void HandleCarAdded(class UGameShare_TA* G, class ACar_TA* Car);
	void Destroyed();
	void Init(class UGFxShell_X* InShell);
};


// Class TAGame.GFxHUD_Replay_TA
// 0x0018 (0x05C0 - 0x05A8)
class AGFxHUD_Replay_TA : public AGFxHUD_Spectator_TA
{
public:
	class AGameInfo_Replay_TA*                         Game;                                             		// 0x05A8(0x0004) (CPF_Transient)
	float                                              PrevKeyframeBufferTime;                           		// 0x05AC(0x0004) (CPF_Edit)
	unsigned long                                      bUserPaused : 1;                                  		// 0x05B0(0x0004) (CPF_Transient)
	unsigned long                                      bPausedForEndOfReplay : 1;                        		// 0x05B0(0x0004) (CPF_Transient)
	TArray<class UProductAsset_TA*>                    ReferencedProducts;                               		// 0x05B4(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxHUD_Replay_TA");
		return ptr;
	}


	void Destroyed();
	void ReplayPause();
	void ScrubTimeline(float DeltaTime);
	void OpenTimelineMenu();
	void OpenSpeedMenu();
	void PrevKeyframe();
	void NextKeyframe();
	void RemoveKeyframe();
	void AddKeyframe();
	void DrawLogs();
	void DrawHUD();
	void SetGameEvent(class AGameEvent_TA* InGameEvent);
	void HandleGameEventSet(class AGameInfo_Replay_TA* InGame);
	void SetPausedForEndOfReplay(bool bPaused);
	void HandlePostTimeSkip(class UReplay_TA* Replay);
	void HandlePreTimeSkip(class UReplay_TA* Replay);
	void HandlePlaybackStopped(class UReplay_TA* Replay);
	void HandleReplayStarted(class AGameInfo_Replay_TA* InGame);
	void PostBeginPlay();
};


// Class TAGame.GFxHUD_Soccar_TA
// 0x0004 (0x0580 - 0x057C)
class AGFxHUD_Soccar_TA : public AGFxHUD_TA
{
public:
	class AGameEvent_Soccar_TA*                        SoccarGame;                                       		// 0x057C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxHUD_Soccar_TA");
		return ptr;
	}


	void HandleLobbyHover(class ULocalPlayer_TA* LocalPlayer, class AActor* SelectedActor);
	void UpdateCarData();
	void HandleMatchWinnerSet(class AGameEvent_Soccar_TA* G);
	void HandlePlayerRemoved(class AGameEvent_TA* G, class APRI_TA* InPRI);
	void HandlePlayerAdded(class AGameEvent_TA* G, class APRI_TA* InPRI);
	void UpdateReplayData();
	void HandleScoreDataChanged(class AReplayDirector_TA* ReplayDirector);
	void HandleReplayDirectorSet(class AGameEvent_Soccar_TA* G);
	void HandleNextMatchTimeUpdated(class AGameEvent_TA* InGameEvent);
	void HandleOvertimeUpdated(class AGameEvent_Soccar_TA* InGameEvent);
	void HandleGameTimeUpdated(class AGameEvent_Soccar_TA* InGameEvent);
	void OnAllTeamsCreated();
	void SetGameEvent(class AGameEvent_TA* InGameEvent);
	void Destroyed();
};


// Class TAGame.GFxHUD_Season_TA
// 0x0000 (0x0580 - 0x0580)
class AGFxHUD_Season_TA : public AGFxHUD_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxHUD_Season_TA");
		return ptr;
	}

};


// Class TAGame.GFxHUD_Training_TA
// 0x0004 (0x0584 - 0x0580)
class AGFxHUD_Training_TA : public AGFxHUD_Soccar_TA
{
public:
	class UGFxData_Training_TA*                        TrainingData;                                     		// 0x0580(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxHUD_Training_TA");
		return ptr;
	}


	void SetGameEvent(class AGameEvent_TA* InGameEvent);
};


// Class TAGame.GFxModal_FriendJoin_TA
// 0x0024 (0x009C - 0x0078)
class UGFxModal_FriendJoin_TA : public UGFxModal_X
{
public:
	struct FString                                     ConnectingTitleString;                            		// 0x0078(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     ConnectingBodyString;                             		// 0x0084(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     JoiningGameFailedString;                          		// 0x0090(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxModal_FriendJoin_TA");
		return ptr;
	}


	void HandlePasswordRequired();
	void HandleGameInviteComplete(bool bSuccess, const struct FString& FailReason);
	void SetGFxObject(class UGFxObject* Obj);
	void Close();
	class UOnlineGame_X* GetOnlineGame();
};


// Class TAGame.GFxModal_RankedReconnect_TA
// 0x0018 (0x0090 - 0x0078)
class UGFxModal_RankedReconnect_TA : public UGFxModal_X
{
public:
	struct FString                                     ConnectingTitleString;                            		// 0x0078(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     ConnectingBodyString;                             		// 0x0084(0x000C) (CPF_Edit, CPF_Const, CPF_Localized, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxModal_RankedReconnect_TA");
		return ptr;
	}


	void HandleJoin(bool bSuccess, const struct FString& FailReason);
	void SetGFxObject(class UGFxObject* Obj);
	void Close();
	class UOnlineGame_X* GetOnlineGame();
};


// Class TAGame.GFxModal_TextInput_TA
// 0x0010 (0x0088 - 0x0078)
class UGFxModal_TextInput_TA : public UGFxModal_X
{
public:
	struct FScriptDelegate                             Callback;                                         		// 0x0078(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0078(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxModal_TextInput_TA");
		return ptr;
	}


	void HandleInputComplete(const struct FString& InputText, bool bCanceled);
	void SetData(class UGFxObject* Data);
	class UGFxModal_TextInput_TA* SetTextInputData(const struct FScriptDelegate& InCallback, bool bDisplayAsPassword, const struct FString& DefaultText, int MaxLength);
};


// Class TAGame.GFxModal_Tutorial_TA
// 0x0000 (0x0078 - 0x0078)
class UGFxModal_Tutorial_TA : public UGFxModal_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxModal_Tutorial_TA");
		return ptr;
	}


	void HandleButtonClicked(int Index);
};


// Class TAGame.GFxData_Features_TA
// 0x0000 (0x0054 - 0x0054)
class UGFxData_Features_TA : public UGFxDataSingleton_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Features_TA");
		return ptr;
	}


	void OnShellSet();
};


// Class TAGame.GFxShell_TA__OnStart__00CFEBB34194C4073C596FABB0CEFA12
// 0x0000 (0x003C - 0x003C)
class UGFxShell_TA__OnStart__00CFEBB34194C4073C596FABB0CEFA12 : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxShell_TA__OnStart__00CFEBB34194C4073C596FABB0CEFA12");
		return ptr;
	}


	void LambdaCallback(class UOnlineGamePlaylists_X* Playlists);
	class UGFxShell_TA__OnStart__00CFEBB34194C4073C596FABB0CEFA12* STATIC_StaticConstruct(class UGFxShell_TA* InOuter);
};


// Class TAGame.TrialMetrics_TA
// 0x001C (0x0070 - 0x0054)
class UTrialMetrics_TA : public UMetricsGroup_X
{
public:
	class UOnlineGame_X*                               OnlineGame;                                       		// 0x0054(0x0004) (CPF_Edit)
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x0058(0x0004) (CPF_Edit)
	struct FGuid                                       UpsellGuid;                                       		// 0x005C(0x0010) (CPF_Transient)
	unsigned long                                      bPendingPurchase : 1;                             		// 0x006C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TrialMetrics_TA");
		return ptr;
	}


	void CheckPendingPurchase();
	void OnExternalUIChanged(bool bIsOpening);
	void PurchaseCancel(const struct FGuid& Id);
	void PurchaseSuccess(const struct FGuid& Id);
	void PurchaseOpen(const struct FGuid& Id);
	void RecordPurchaseOpen();
	void UpsellClose(const struct FGuid& Id);
	void RecordUpsellClose();
	void UpsellOpen(const struct FGuid& Id, const struct FString& context);
	void RecordUpsellOpen(const struct FString& context);
};


// Class TAGame.GoalVolume_TA
// 0x0004 (0x021C - 0x0218)
class AGoalVolume_TA : public AVolume
{
public:
	class UGoal_TA*                                    Goal;                                             		// 0x0218(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GoalVolume_TA");
		return ptr;
	}

};


// Class TAGame.LightBarComponent_TA
// 0x0027 (0x008C - 0x0065)
class ULightBarComponent_TA : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                               		// 0x0065(0x0003) MISSED OFFSET
	class ATeam_TA*                                    Team;                                             		// 0x0068(0x0004) (CPF_Transient)
	unsigned long                                      bStrobeActive : 1;                                		// 0x006C(0x0004) (CPF_Transient)
	unsigned long                                      bRandStrobeColor : 1;                             		// 0x006C(0x0004) (CPF_Transient)
	int                                                StrobeCount;                                      		// 0x0070(0x0004) (CPF_Transient)
	int                                                MaxStrobeCount;                                   		// 0x0074(0x0004) (CPF_Transient)
	float                                              StrobeTime;                                       		// 0x0078(0x0004) (CPF_Transient)
	TArray<struct FColor>                              StrobeColorList;                                  		// 0x007C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	int                                                StrobeColorIndex;                                 		// 0x0088(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LightBarComponent_TA");
		return ptr;
	}


	void HandleBoostAmountChanged(class ACarComponent_Boost_TA* Boost);
	void HandleTeamChanged(class APRI_X* PRI);
	void Strobe_MVP(class ATeam_TA* InTeam);
	void Strobe_GoalScored(int ScoredOnTeam);
	void StrobeColor();
	void StartStrobeColor(float Duration, float InStrobeCount, bool bRandColor);
	void ResetColor();
	void SetColor(const struct FColor& NewColor);
};


// Class TAGame.LightEnvironment_TA
// 0x0000 (0x013C - 0x013C)
class ULightEnvironment_TA : public UParticleLightEnvironmentComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LightEnvironment_TA");
		return ptr;
	}

};


// Class TAGame.LoadoutRenderer_TA
// 0x001C (0x0058 - 0x003C)
class ULoadoutRenderer_TA : public UObject
{
public:
	class UThumbnailRenderer_TA*                       ThumbnailRenderer;                                		// 0x003C(0x0004) (CPF_Edit)
	class UProductLoader_TA*                           Loader;                                           		// 0x0040(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class ATeam_TA*                                    TeamArchetype;                                    		// 0x0044(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventLoadoutRendered__Delegate;                 		// 0x0048(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0048(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutRenderer_TA");
		return ptr;
	}


	void HandleAllProductsLoaded(class UProductLoader_TA* InLoader);
	void RenderLoadout(const struct FClientLoadoutData& Loadout, class ATeam_TA* InTeamArchetype, const struct FScriptDelegate& Callback);
	void EventLoadoutRendered(class ULoadoutRenderer_TA* Renderer, class UTexture2D* Tex);
};


// Class TAGame.SeqAct_SetReplayCamera_TA
// 0x0028 (0x0124 - 0x00FC)
class USeqAct_SetReplayCamera_TA : public USequenceAction
{
public:
	struct FString                                     FocusActor;                                       		// 0x00FC(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	struct FVector                                     LocationOffset;                                   		// 0x0108(0x000C) (CPF_Edit)
	struct FRotator                                    Rotation;                                         		// 0x0114(0x000C) (CPF_Edit)
	float                                              FOV;                                              		// 0x0120(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetReplayCamera_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.Mutator_Ball_TA
// 0x0030 (0x0084 - 0x0054)
class UMutator_Ball_TA : public UMutator_TA
{
public:
	float                                              BallScale;                                        		// 0x0054(0x0004)
	float                                              BallBounciness;                                   		// 0x0058(0x0004)
	float                                              BallCarBounciness;                                		// 0x005C(0x0004)
	int                                                TotalGameBalls;                                   		// 0x0060(0x0004)
	class ABall_TA*                                    BallArchetype;                                    		// 0x0064(0x0004)
	float                                              BallGravityScale;                                 		// 0x0068(0x0004)
	float                                              BallSloMoDuration;                                		// 0x006C(0x0004)
	float                                              BallSloMoDilation;                                		// 0x0070(0x0004)
	float                                              BallSloMoCooldown;                                		// 0x0074(0x0004)
	float                                              BallSloMoRadius;                                  		// 0x0078(0x0004)
	float                                              BallSloMoDiffSpeed;                               		// 0x007C(0x0004)
	float                                              BallMaxLinearSpeedScale;                          		// 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Ball_TA");
		return ptr;
	}


	void MutateObject(class UObject* O);
	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.Mutator_Booster_TA
// 0x0018 (0x006C - 0x0054)
class UMutator_Booster_TA : public UMutator_TA
{
public:
	unsigned long                                      bNoBooster : 1;                                   		// 0x0054(0x0004) (CPF_Edit)
	unsigned long                                      bUnlimitedBoost : 1;                              		// 0x0054(0x0004) (CPF_Edit)
	unsigned long                                      bOverrideStartBoost : 1;                          		// 0x0054(0x0004) (CPF_Edit)
	unsigned long                                      bOnlyApplyRechargeToMyHalf : 1;                   		// 0x0054(0x0004) (CPF_Edit)
	unsigned long                                      bOnlyApplyRechargeToOpposingHalf : 1;             		// 0x0054(0x0004) (CPF_Edit)
	unsigned long                                      bDemolishOnEmptyMyHalf : 1;                       		// 0x0054(0x0004) (CPF_Edit)
	unsigned long                                      bDemolishOnEmptyOpposingHalf : 1;                 		// 0x0054(0x0004) (CPF_Edit)
	float                                              BoostStrength;                                    		// 0x0058(0x0004) (CPF_Edit)
	float                                              BoostRechargeRate;                                		// 0x005C(0x0004) (CPF_Edit)
	float                                              BoostRechargeDelay;                               		// 0x0060(0x0004) (CPF_Edit)
	float                                              BoostStartAmount;                                 		// 0x0064(0x0004) (CPF_Edit)
	class UVehiclePickup_BoostModifier_TA*             BoostModifier;                                    		// 0x0068(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Booster_TA");
		return ptr;
	}


	void MutateObject(class UObject* O);
};


// Class TAGame.VehiclePickup_BoostModifier_TA
// 0x0000 (0x0048 - 0x0048)
class UVehiclePickup_BoostModifier_TA : public UComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehiclePickup_BoostModifier_TA");
		return ptr;
	}


	void PickupEffect(class ACar_TA* Car);
	bool CanPickup(class ACar_TA* Car);
	void InitModifier();
};


// Class TAGame.Mutator_Car_TA
// 0x0014 (0x0068 - 0x0054)
class UMutator_Car_TA : public UMutator_TA
{
public:
	float                                              CarScale;                                         		// 0x0054(0x0004) (CPF_Edit)
	float                                              ControlScale;                                     		// 0x0058(0x0004) (CPF_Edit)
	float                                              JumpScale;                                        		// 0x005C(0x0004) (CPF_Edit)
	unsigned long                                      bDemolishOnOpposingGround : 1;                    		// 0x0060(0x0004) (CPF_Edit)
	unsigned long                                      bDemolishOnGoalZone : 1;                          		// 0x0060(0x0004) (CPF_Edit)
	class UMessage_TA*                                 DemolishWarningMessage;                           		// 0x0064(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Car_TA");
		return ptr;
	}


	void MutateObject(class UObject* O);
	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.Mutator_Demolish_TA
// 0x0008 (0x005C - 0x0054)
class UMutator_Demolish_TA : public UMutator_TA
{
public:
	TEnumAsByte<enum class EDemolishTarget>            DemolishTarget;                                   		// 0x0054(0x0001) (CPF_Edit)
	TEnumAsByte<enum class EDemolishSpeed>             DemolishSpeed;                                    		// 0x0055(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x2];                               		// 0x0056(0x0002) MISSED OFFSET
	unsigned long                                      bBallDemolish : 1;                                		// 0x0058(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Demolish_TA");
		return ptr;
	}


	void MutateObject(class UObject* O);
};


// Class TAGame.Mutator_GameSpeed_TA
// 0x0004 (0x0058 - 0x0054)
class UMutator_GameSpeed_TA : public UMutator_TA
{
public:
	float                                              GameSpeed;                                        		// 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_GameSpeed_TA");
		return ptr;
	}


	void MutateObject(class UObject* O);
	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.Mutator_Gravity_TA
// 0x0004 (0x0058 - 0x0054)
class UMutator_Gravity_TA : public UMutator_TA
{
public:
	float                                              Gravity;                                          		// 0x0054(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Gravity_TA");
		return ptr;
	}


	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.Mutator_Handicap_TA
// 0x0004 (0x0058 - 0x0054)
class UMutator_Handicap_TA : public UMutator_TA
{
public:
	int                                                AutoBalanceDifference;                            		// 0x0054(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Handicap_TA");
		return ptr;
	}


	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.Mutator_Match_TA
// 0x0018 (0x006C - 0x0054)
class UMutator_Match_TA : public UMutator_TA
{
public:
	int                                                MatchGames;                                       		// 0x0054(0x0004) (CPF_Edit)
	int                                                GameTime;                                         		// 0x0058(0x0004) (CPF_Edit)
	int                                                GameScore;                                        		// 0x005C(0x0004) (CPF_Edit)
	class UMessage_TA*                                 PickupMessage;                                    		// 0x0060(0x0004)
	class UGameEvent_Soccar_SubRules_TA*               SubRules;                                         		// 0x0064(0x0004)
	unsigned long                                      bUnlimitedTime : 1;                               		// 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Match_TA");
		return ptr;
	}


	void MutateObject(class UObject* O);
	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.Mutator_RespawnTime_TA
// 0x0008 (0x005C - 0x0054)
class UMutator_RespawnTime_TA : public UMutator_TA
{
public:
	int                                                RespawnTime;                                      		// 0x0054(0x0004)
	unsigned long                                      bDisableGoalDelay : 1;                            		// 0x0058(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_RespawnTime_TA");
		return ptr;
	}


	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.NameplateRenderTarget_TA
// 0x0014 (0x0154 - 0x0140)
class UNameplateRenderTarget_TA : public UScriptedTexture
{
public:
	class UGFxMoviePlayer_X*                           NameplatesMovie;                                  		// 0x0140(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __Render__Delegate;                               		// 0x0144(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0144(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NameplateRenderTarget_TA");
		return ptr;
	}


	void Render(class UCanvas* C);
};


// Class TAGame.ESportEvents_TA
// 0x004C (0x0088 - 0x003C)
class UESportEvents_TA : public UObject
{
public:
	class UCacheTimer_X*                               CacheTimer;                                       		// 0x003C(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UOnlineResource_X*                           OnlineResource;                                   		// 0x0040(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	int                                                SoonInSeconds;                                    		// 0x0044(0x0004)
	TArray<struct FEsportEventData>                    Events;                                           		// 0x0048(0x000C) (CPF_Transient, CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FString>                             ImageRequests;                                    		// 0x0054(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     CDNPath;                                          		// 0x0060(0x000C) (CPF_NeedCtorLink)
	struct FString                                     CDNFileName;                                      		// 0x006C(0x000C) (CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventESportsEventsChanged__Delegate;            		// 0x0078(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0078(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ESportEvents_TA");
		return ptr;
	}


	void UpdateSoonLiveEvents();
	void HandleImageDownloaded(class UOnlineImageDownloaderWeb_X* Downloader, const struct FDownloadedImage& Image);
	void DownloadImage(const struct FString& ImageURL, const struct FScriptDelegate& Callback);
	void HandleDataChanged(class UOnlineResource_X* Resource);
	void HandleCacheExpired(class UCacheTimer_X* Timer);
	struct FString GetCDNURL();
	void Init();
	void EventESportsEventsChanged(class UESportEvents_TA* NewObject);
};


// Class TAGame.ProductAssetCache_TA
// 0x0028 (0x0070 - 0x0048)
class UProductAssetCache_TA : public UComponent
{
public:
	unsigned long                                      bDebug : 1;                                       		// 0x0048(0x0004) (CPF_Edit)
	TArray<int>                                        NewProductIDs;                                    		// 0x004C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<int>                                        LoadedProductIDs;                                 		// 0x0058(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UProductAsset_TA*>                    Assets;                                           		// 0x0064(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAssetCache_TA");
		return ptr;
	}


	struct FString GetDebugName();
	void HandleProductLoaded(const struct FAssetLoadResult& Result);
	void FinishedAddingProducts();
	void AddProducts(TArray<int> InProductIDs);
	void Clear();
};


// Class TAGame.OnlineGameJoinGame_TA
// 0x0004 (0x0298 - 0x0294)
class UOnlineGameJoinGame_TA : public UOnlineGameJoinGame_X
{
public:
	class UProductAssetCache_TA*                       AssetCache;                                       		// 0x0294(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameJoinGame_TA");
		return ptr;
	}


	TArray<int> GetLoadout(const struct FUniqueNetId& PlayerID);
	class UAddReservationMessage_X* AddLoadoutsToMessage(class UAddReservationMessage_X* Message);
	void ClearAssetCache();
	void HandlePreLoadMap(const struct FString& MapName);
	void OnInit();
};


// Class TAGame.OnlineGameLanServer_TA
// 0x000C (0x0184 - 0x0178)
class UOnlineGameLanServer_TA : public UOnlineGameLanServer_X
{
public:
	TArray<class UObject*>                             AllRelevantProducts;                              		// 0x0178(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameLanServer_TA");
		return ptr;
	}


	void HandleGameEventEnded(class AGameEvent_Soccar_TA* GameEvent);
	void StartMatch();
	class AGameEvent_TA* GetCurrentGameEvent();
	struct FName GetRandomMapName(int GameMode);
	void GoToNextMap();
	void LoadAllRelevantProducts();
	void OnInit();
};


// Class TAGame.PartyMessage_Loadout_TA
// 0x007C (0x00B8 - 0x003C)
class UPartyMessage_Loadout_TA : public UPartyMessage_X
{
public:
	struct FPartyMemberLoadout                         MemberLoadout;                                    		// 0x003C(0x007C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyMessage_Loadout_TA");
		return ptr;
	}


	class UPartyMessage_Loadout_TA* SetLoadout(struct FPartyMemberLoadout* InMemberLoadout);
};


// Class TAGame.PartyMessage_Chat_TA
// 0x003C (0x0078 - 0x003C)
class UPartyMessage_Chat_TA : public UPartyMessage_X
{
public:
	struct FString                                     PartyChatMessage;                                 		// 0x003C(0x000C) (CPF_NeedCtorLink)
	struct FUniqueNetId                                SenderId;                                         		// 0x0048(0x0030)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyMessage_Chat_TA");
		return ptr;
	}


	class UPartyMessage_Chat_TA* SetSenderId(const struct FUniqueNetId& InSenderId);
	class UPartyMessage_Chat_TA* SetChatMessage(const struct FString& InChatMessage);
};


// Class TAGame.RPC_ProductsTradePlayerStatus_TA
// 0x005C (0x00F0 - 0x0094)
class URPC_ProductsTradePlayerStatus_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	struct FGuid                                       TradeId;                                          		// 0x00C4(0x0010)
	unsigned long                                      bIsComplete : 1;                                  		// 0x00D4(0x0004) (CPF_Transient)
	TArray<struct FOnlineProductData>                  ProductData;                                      		// 0x00D8(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   Products;                                         		// 0x00E4(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsTradePlayerStatus_TA");
		return ptr;
	}


	void OnComplete();
	bool HasCompleted();
	class URPC_ProductsTradePlayerStatus_TA* SetTradeId(const struct FGuid& InTradeId);
	class URPC_ProductsTradePlayerStatus_TA* SetLocalPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_ProductsTradePlayer_TA
// 0x0088 (0x011C - 0x0094)
class URPC_ProductsTradePlayer_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	struct FUniqueNetId                                OtherPlayerID;                                    		// 0x00C4(0x0030)
	struct FGuid                                       TradeId;                                          		// 0x00F4(0x0010)
	unsigned char                                      UnknownData00[0xC];                               		// 0x0104(0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_ProductsTradePlayer_TA.InstancesToGive
	unsigned char                                      UnknownData01[0xC];                               		// 0x0110(0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_ProductsTradePlayer_TA.InstancesToGet

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsTradePlayer_TA");
		return ptr;
	}


	class URPC_ProductsTradePlayer_TA* SetRemoteProducts();
	class URPC_ProductsTradePlayer_TA* SetLocalProducts();
	class URPC_ProductsTradePlayer_TA* SetTradeId(const struct FGuid& InTradeId);
	class URPC_ProductsTradePlayer_TA* SetRemotePlayerID(const struct FUniqueNetId& InPlayerId);
	class URPC_ProductsTradePlayer_TA* SetLocalPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_ProductsLoadoutGet_TA
// 0x0060 (0x00F4 - 0x0094)
class URPC_ProductsLoadoutGet_TA : public URPC_TA
{
public:
	TArray<struct FInstanceToSlotRow>                  InstanceToSlotTable;                              		// 0x0094(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FUniqueNetId                                PlayerID;                                         		// 0x00A0(0x0030)
	unsigned char                                      UnknownData00[0xC];                               		// 0x00D0(0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_ProductsLoadoutGet_TA.Loadout
	TArray<struct FOnlineProductData>                  ProductData;                                      		// 0x00DC(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   Products;                                         		// 0x00E8(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsLoadoutGet_TA");
		return ptr;
	}


	void GetProducts(int TeamIndex, TArray<class UOnlineProduct_TA*>* InLoadout);
	void OnSuccess();
	class URPC_ProductsLoadoutGet_TA* SetLoadouts(struct FOnlineProductArray* InLoadouts);
	class URPC_ProductsLoadoutGet_TA* SetLoadout();
	class URPC_ProductsLoadoutGet_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.PartyMessage_TradeProductUpdate_TA
// 0x0084 (0x00C0 - 0x003C)
class UPartyMessage_TradeProductUpdate_TA : public UPartyMessage_X
{
public:
	struct FUniqueNetId                                MemberId;                                         		// 0x003C(0x0030)
	struct FUniqueNetId                                TradingMemberId;                                  		// 0x006C(0x0030)
	struct FOnlineProductData                          ProductData;                                      		// 0x009C(0x0020) (CPF_NeedCtorLink)
	unsigned long                                      bAddProduct : 1;                                  		// 0x00BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyMessage_TradeProductUpdate_TA");
		return ptr;
	}


	class UPartyMessage_TradeProductUpdate_TA* SetAddProduct(bool InAddProduct);
	class UPartyMessage_TradeProductUpdate_TA* SetProductData(const struct FOnlineProductData& InProductData);
	class UPartyMessage_TradeProductUpdate_TA* SetTradingMemberId(const struct FUniqueNetId& InTradingMemberId);
	class UPartyMessage_TradeProductUpdate_TA* SetMemberId(const struct FUniqueNetId& InMemberId);
};


// Class TAGame.GFxData_TradeLobby_TA
// 0x0060 (0x00B4 - 0x0054)
class UGFxData_TradeLobby_TA : public UGFxDataSingleton_X
{
public:
	class UOnlineGameParty_TA*                         OnlineParty;                                      		// 0x0054(0x0004) (CPF_Transient)
	class UProfile_TA*                                 Profile;                                          		// 0x0058(0x0004) (CPF_Transient)
	TArray<class UOnlineProduct_TA*>                   LocalOfferings;                                   		// 0x005C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   RemoteOfferings;                                  		// 0x0068(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0074(0x0004) (CPF_Transient)
	unsigned long                                      bIsProcessingTrade : 1;                           		// 0x0078(0x0004) (CPF_Transient)
	struct FUniqueNetId                                TradingPlayerID;                                  		// 0x007C(0x0030) (CPF_Transient)
	class UOnlineProductStoreSet_TA*                   OnlineProductSet;                                 		// 0x00AC(0x0004) (CPF_Transient)
	float                                              CountdownSecondsToTrade;                          		// 0x00B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TradeLobby_TA");
		return ptr;
	}


	struct FString GetRemotePlayerName();
	TArray<class UOnlineProduct_TA*> GetRemoteKeyOfferings();
	TArray<class UOnlineProduct_TA*> GetLocalKeyOfferings();
	TArray<class UOnlineProduct_TA*> GetProductOfferings(TArray<class UOnlineProduct_TA*>* Offerings, TArray<class UOnlineProduct_TA*>* FilterLocal_15C5F44C45C231D50BFB1BA5B3767061);
	TArray<class UOnlineProduct_TA*> GetKeyOfferings(TArray<class UOnlineProduct_TA*>* Offerings, TArray<class UOnlineProduct_TA*>* FilterLocal_FC7F40BA436A86C92CD2F0B3157DF2D3);
	bool IsNotKeyProduct(class UOnlineProduct_TA* OnlineProduct);
	bool IsKeyProduct(class UOnlineProduct_TA* OnlineProduct);
	int GetRemoteKeyOfferingCount();
	int GetLocalKeyOfferingCount();
	struct FString GetRemoteProductOfferings();
	struct FString GetLocalProductOfferings();
	void OnTradePlayerComplete();
	void HandleTradePlayerComplete(class UOnlineGameParty_TA* PartyObject, class URPC_ProductsTradePlayerStatus_TA* RPC);
	void HandleTradePlayerError(class UOnlineGameParty_TA* PartyObject, class URPC_TA* RPC);
	void SendTradeToBackEnd();
	bool VerifyRemoteOffering(class UOnlineProduct_TA* OnlineProduct);
	bool CompareAttributes(TArray<class UProductAttribute_TA*>* Left, TArray<class UProductAttribute_TA*>* Right);
	void HandleVerifyTradeTimeOut(class UOnlineGameParty_X* PartyObject);
	void HandleVerifyTrade(class UOnlineGameParty_X* PartyObject, TArray<class UOnlineProduct_TA*> Products);
	void SendVerifyTradeToBackEnd();
	bool IsProcessingTrade();
	void StartCountdownToTrade(int CountdownTime);
	void HandleSendVerifyTradeToBackEnd(class UOnlineGameParty_X* PartyObject);
	void HandleNotReadyToTrade(class UOnlineGameParty_X* PartyObject);
	void HandleReadyToTrade(class UOnlineGameParty_X* PartyObject);
	void SetRemotePlayerReadyToTrade(bool bReadyToTrade);
	void SetLocalPlayerReadyToTrade(bool bReadyToTrade);
	void SetReadyToTrade(bool bReadyToTrade);
	void UpdateOfferings(bool bLocal);
	void StartUpdateOfferings(bool bLocal);
	void RemoveRemoteOffering();
	void RemoveLocalOffering();
	void AddRemoteOffering(class UOnlineProduct_TA* InOnlineProduct);
	void HandleTradeProductUpdate(class UOnlineGameParty_TA* PartyObject, const struct FOnlineProductData& ProductData, bool bAddProduct);
	void AddLocalOffering();
	void CloseTradingWindow(bool bWasCanceled, bool bNoReceivedProducts);
	void CancelTrading();
	void HandleCloseInviteToTrade(class UOnlineGameParty_X* PartyObject, bool bWasCanceled);
	void CloseTradeLobby();
	void HandleAcceptedInviteToTrade(class UOnlineGameParty_X* PartyObject);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_ProductTradeIn_TA
// 0x001C (0x0070 - 0x0054)
class UGFxData_ProductTradeIn_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FTradeInDropTable>                   DropTables;                                       		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0060(0x0004) (CPF_Transient)
	struct FString                                     InvalidProductString;                             		// 0x0064(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductTradeIn_TA");
		return ptr;
	}


	class UProfile_TA* GetProfile();
	void OnTradeInFailed();
	void OnTradeInComplete();
	void HandleTradeInComplete(class URPC_ProductsTradeIn_TA* RPC);
	void TradeIn();
	bool IsProcessingTrade();
};


// Class TAGame.OnlineGamePlaylists_TA
// 0x0000 (0x0084 - 0x0084)
class UOnlineGamePlaylists_TA : public UOnlineGamePlaylists_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGamePlaylists_TA");
		return ptr;
	}

};


// Class TAGame.OnlineGameRegions_TA
// 0x0004 (0x00BC - 0x00B8)
class UOnlineGameRegions_TA : public UOnlineGameRegions_X
{
public:
	class USaveData_TA*                                SaveData;                                         		// 0x00B8(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameRegions_TA");
		return ptr;
	}

};


// Class TAGame.OnlineGameReservations_TA
// 0x000C (0x00C8 - 0x00BC)
class UOnlineGameReservations_TA : public UOnlineGameReservations_X
{
public:
	TArray<struct FReservationLoadout>                 Loadouts;                                         		// 0x00BC(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameReservations_TA");
		return ptr;
	}


	bool CanAcceptReservations(class UAddReservationMessagePublic_X* Message);
	TArray<int> GetPrecacheProductIDs();
	class UReservationsReadyMessage_X* CreateReadyMessage();
	void ClearReservations();
	void AddLoadout(const struct FUniqueNetId& PlayerID, TArray<int> ProductIDs);
	TArray<struct FReservationData> AddPlayersFromReservationMessage(class UAddReservationMessage_X* ReservationMessage, class UTcpConnection* Connection);
};


// Class TAGame.OnlineGameSkill_TA
// 0x0000 (0x0088 - 0x0088)
class UOnlineGameSkill_TA : public UOnlineGameSkill_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameSkill_TA");
		return ptr;
	}


	void ClientSetSkill(const struct FPlayerSkillRating& Rating, int Playlist);
	void ReplicatePlayerSkillRating(const struct FUniqueNetId& PlayerID, int Playlist);
	void ReplicateSkillUpdate(class UMatchRecorder_X* MatchRecorder);
	void HandleSkillsUpdateFailed(class URPC_X* RPCObject);
	void HandleSkillsUpdated(class URPC_X* RPCObject);
};


// Class TAGame.OnlinePlayerFriends_TA
// 0x0000 (0x007C - 0x007C)
class UOnlinePlayerFriends_TA : public UOnlinePlayerFriends_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlinePlayerFriends_TA");
		return ptr;
	}


	struct FString GetFriendPresence(const struct FOnlineFriend& Friend);
};


// Class TAGame.OnlineProfile_TA
// 0x0014 (0x0050 - 0x003C)
class UOnlineProfile_TA : public UObject
{
public:
	int                                                LocalID;                                          		// 0x003C(0x0004)
	TArray<struct FProductStat>                        ProductStats;                                     		// 0x0040(0x000C) (CPF_NeedCtorLink)
	struct FProfileAddProperties                       AddProperties;                                    		// 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineProfile_TA");
		return ptr;
	}


	bool NeedsUpload();
	void AddProductStatValue(int ProductID, int Delta);
	void GiveXP(float Amount);
	void Reconcile(class UProfile_TA* Profile);
	void Init(int InLocalID);
};


// Class TAGame.SaveDataMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class USaveDataMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveDataMetrics_TA");
		return ptr;
	}


	void ReconcileXP(int OnlineXP, int LocalXP);
	void RecordReconcileXP(int OnlineXP, int LocalXP);
};


// Class TAGame.SpectatorVolume_TA
// 0x0000 (0x0218 - 0x0218)
class ASpectatorVolume_TA : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpectatorVolume_TA");
		return ptr;
	}

};


// Class TAGame.PlayerInputSequence_TA
// 0x003C (0x00C4 - 0x0088)
class UPlayerInputSequence_TA : public UInteraction
{
public:
	TArray<struct FName>                               Sequence;                                         		// 0x0088(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	struct FString                                     ConsoleCommand;                                   		// 0x0094(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	float                                              Timeout;                                          		// 0x00A0(0x0004) (CPF_Edit)
	unsigned long                                      bOrderMatters : 1;                                		// 0x00A4(0x0004) (CPF_Edit)
	unsigned long                                      bCheat : 1;                                       		// 0x00A4(0x0004) (CPF_Edit)
	unsigned long                                      bRemoveOnComplete : 1;                            		// 0x00A4(0x0004) (CPF_Edit)
	unsigned long                                      bRemoveAfterSplashScreen : 1;                     		// 0x00A4(0x0004) (CPF_Edit)
	unsigned long                                      bCaptureInput : 1;                                		// 0x00A4(0x0004) (CPF_Edit)
	unsigned long                                      bConfirm : 1;                                     		// 0x00A4(0x0004) (CPF_Edit)
	unsigned long                                      bPrimaryPlayerOnly : 1;                           		// 0x00A4(0x0004) (CPF_Edit)
	struct FString                                     Message;                                          		// 0x00A8(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UTickComponent_X*                            Timer;                                            		// 0x00B4(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	TArray<struct FName>                               CurrentSequence;                                  		// 0x00B8(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInputSequence_TA");
		return ptr;
	}


	void OnCommandConfirmed(class UGFxModal_X* Modal);
	void RemoveSequence();
	void OnSequenceCompleted();
	void ResetSequence();
	bool HandleFinalInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<enum class EInputEvent> EventType, float AmountDepressed, bool bGamepad);
	bool HandleInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<enum class EInputEvent> EventType, float AmountDepressed, bool bGamepad);
	void SwapIndexes(const struct FName& A, const struct FName& B);
	void Initialize();
	bool ShouldInstance(class APlayerController* ForPC);
};


// Class TAGame.PlayerInput_Menu_TA
// 0x000C (0x0330 - 0x0324)
class UPlayerInput_Menu_TA : public UPlayerInput_TA
{
public:
	TArray<struct FName>                               AllowedActions;                                   		// 0x0324(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInput_Menu_TA");
		return ptr;
	}


	void RemoveAllActionsBut(TArray<struct FName>* KeepActions, TArray<struct FPlayerBinding>* OutBindings);
	void HandleActiveBindingsChanged(class UProfile_TA* Profile);
};


// Class TAGame.PlayerController_Replay_TA
// 0x0004 (0x0654 - 0x0650)
class APlayerController_Replay_TA : public APlayerControllerBase_TA
{
public:
	class AHUD*                                        SplitscreenHUDArchetype;                          		// 0x0650(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerController_Replay_TA");
		return ptr;
	}


	void ReceivedPlayer();
};


// Class TAGame.PlatformMetrics_TA
// 0x0004 (0x0058 - 0x0054)
class UPlatformMetrics_TA : public UMetricsGroup_X
{
public:
	unsigned long                                      bDroveWithGP : 1;                                 		// 0x0054(0x0004) (CPF_Transient)
	unsigned long                                      bDroveWithKBM : 1;                                		// 0x0054(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlatformMetrics_TA");
		return ptr;
	}


	void DriveWithKBM();
	void DriveWithGP();
	void RecordDriveInput(class UPlayerInput_TA* PlayerInput);
	void RecordInput(class UPlayerInput_TA* PlayerInput);
};


// Class TAGame.NetworkJitterSettings_TA
// 0x0014 (0x0050 - 0x003C)
class UNetworkJitterSettings_TA : public UObject
{
public:
	float                                              MinTimeBetweenPackets;                            		// 0x003C(0x0004) (CPF_Edit)
	float                                              MaxTimeBetweenPackets;                            		// 0x0040(0x0004) (CPF_Edit)
	float                                              BufferStdDeviations;                              		// 0x0044(0x0004) (CPF_Edit)
	float                                              MinBufferTime;                                    		// 0x0048(0x0004) (CPF_Edit)
	float                                              UpdateRate;                                       		// 0x004C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NetworkJitterSettings_TA");
		return ptr;
	}

};


// Class TAGame.PlayerController_TA__PostBeginPlay__11E8622343871CF5C08769A2531D38D8
// 0x0000 (0x003C - 0x003C)
class UPlayerController_TA__PostBeginPlay__11E8622343871CF5C08769A2531D38D8 : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerController_TA__PostBeginPlay__11E8622343871CF5C08769A2531D38D8");
		return ptr;
	}


	void LambdaCallback(class UNetworkJitterSettings_TA* O);
	class UPlayerController_TA__PostBeginPlay__11E8622343871CF5C08769A2531D38D8* STATIC_StaticConstruct(class APlayerController_TA* InOuter);
};


// Class TAGame.ProductMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class UProductMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductMetrics_TA");
		return ptr;
	}


	struct FPaintMetricsData GetPaintMetricsData(const struct FLoadoutTeamPaint& Paint);
	void PlayWithLoadout(int Team, TArray<int> Products, const struct FPaintMetricsData& Paint);
	void RecordLoadout(int Team, class ULoadout_TA* Loadout);
	void RecordLoadoutSet(class ULoadoutSet_TA* LoadoutSet);
};


// Class TAGame.AimAssistComponent_TA
// 0x0180 (0x01EC - 0x006C)
class UAimAssistComponent_TA : public UActorComponent_X
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x006C(0x0004) (CPF_Transient)
	unsigned long                                      bAllEnabled : 1;                                  		// 0x006C(0x0004) (CPF_Transient)
	unsigned long                                      bForceDisabled : 1;                               		// 0x006C(0x0004) (CPF_Transient)
	unsigned long                                      bWasOnGround : 1;                                 		// 0x006C(0x0004)
	unsigned long                                      bCanAerialBall : 1;                               		// 0x006C(0x0004) (CPF_Transient)
	unsigned long                                      bWasAerialing : 1;                                		// 0x006C(0x0004) (CPF_Transient)
	struct FRotator                                    DesiredAirRotation;                               		// 0x0070(0x000C) (CPF_Transient)
	float                                              LastUserAirControlTime;                           		// 0x007C(0x0004) (CPF_Transient)
	float                                              MinHandBrakeDist;                                 		// 0x0080(0x0004) (CPF_Const)
	float                                              MinThrottleDistToBall;                            		// 0x0084(0x0004) (CPF_Const)
	float                                              FullThrottleAccelDecelTime;                       		// 0x0088(0x0004) (CPF_Const)
	float                                              BallAimOffset;                                    		// 0x008C(0x0004) (CPF_Const)
	float                                              MaxAerialRadius;                                  		// 0x0090(0x0004) (CPF_Const)
	float                                              MinAerialHeight;                                  		// 0x0094(0x0004) (CPF_Const)
	float                                              PredictedBallGroundTime;                          		// 0x0098(0x0004) (CPF_Transient)
	struct FVector                                     PredictedBallGroundPosition;                      		// 0x009C(0x000C) (CPF_Transient)
	struct FVector                                     PredictedBallGroundVelocity;                      		// 0x00A8(0x000C) (CPF_Transient)
	float                                              PredictedBallAerialTime;                          		// 0x00B4(0x0004) (CPF_Transient)
	struct FVector                                     PredictedBallAerialPosition;                      		// 0x00B8(0x000C) (CPF_Transient)
	struct FVector                                     PredictedBallAerialVelocity;                      		// 0x00C4(0x000C) (CPF_Transient)
	TArray<class UAimControl_TA*>                      AimControls;                                      		// 0x00D0(0x000C) (CPF_NeedCtorLink)
	class UAimControl_TA*                              AimControl;                                       		// 0x00DC(0x0004) (CPF_Transient)
	class ABall_TA*                                    Ball;                                             		// 0x00E0(0x0004) (CPF_Transient)
	struct FVector                                     DirectionToBall;                                  		// 0x00E4(0x000C) (CPF_Transient)
	float                                              CarDistanceFromBall;                              		// 0x00F0(0x0004) (CPF_Transient)
	float                                              CarDistanceFromBallZ;                             		// 0x00F4(0x0004) (CPF_Transient)
	float                                              CarDistanceFromBallXY;                            		// 0x00F8(0x0004) (CPF_Transient)
	float                                              CarDotBall;                                       		// 0x00FC(0x0004) (CPF_Transient)
	float                                              CarDotBallXY;                                     		// 0x0100(0x0004) (CPF_Transient)
	struct FVector                                     DirectionToBallAerial;                            		// 0x0104(0x000C) (CPF_Transient)
	float                                              CarDistanceFromBallAerialZ;                       		// 0x0110(0x0004) (CPF_Transient)
	float                                              CarDistanceFromBallAerialXY;                      		// 0x0114(0x0004) (CPF_Transient)
	float                                              CarDotBallAerialXY;                               		// 0x0118(0x0004) (CPF_Transient)
	struct FVector                                     CarAimTarget;                                     		// 0x011C(0x000C) (CPF_Transient)
	struct FVector                                     DirectionToAimTarget;                             		// 0x0128(0x000C) (CPF_Transient)
	struct FVector                                     InputDirToAimTarget;                              		// 0x0134(0x000C) (CPF_Transient)
	struct FVector                                     InputDirToBall;                                   		// 0x0140(0x000C) (CPF_Transient)
	struct FVector                                     ControlInputDir;                                  		// 0x014C(0x000C) (CPF_Transient)
	float                                              SteerDotAngle;                                    		// 0x0158(0x0004) (CPF_Transient)
	float                                              BallVelocitySize;                                 		// 0x015C(0x0004) (CPF_Transient)
	float                                              BallZVelocitySize;                                		// 0x0160(0x0004) (CPF_Transient)
	float                                              CarDotAimTarget;                                  		// 0x0164(0x0004) (CPF_Transient)
	float                                              CarDotAimTargetXY;                                		// 0x0168(0x0004) (CPF_Transient)
	float                                              VelocitySize;                                     		// 0x016C(0x0004) (CPF_Transient)
	float                                              PlayerDriveInputSize;                             		// 0x0170(0x0004) (CPF_Transient)
	float                                              CarDistanceFromAimTarget;                         		// 0x0174(0x0004) (CPF_Transient)
	float                                              CarDistanceFromAimTargetXY;                       		// 0x0178(0x0004) (CPF_Transient)
	float                                              TimeOffGround;                                    		// 0x017C(0x0004) (CPF_Transient)
	float                                              TimeOnGround;                                     		// 0x0180(0x0004) (CPF_Transient)
	float                                              DodgeInactiveTime;                                		// 0x0184(0x0004) (CPF_Transient)
	float                                              BallDistanceToGround;                             		// 0x0188(0x0004) (CPF_Transient)
	struct FVector                                     AirStartLocation;                                 		// 0x018C(0x000C) (CPF_Transient)
	float                                              AerialBallHitWallTime;                            		// 0x0198(0x0004) (CPF_Transient)
	struct FBallPredictionInfo                         AerialPredictionInfo;                             		// 0x019C(0x003C) (CPF_Transient)
	class AGameEvent_TA*                               GameEvent;                                        		// 0x01D8(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventAimAssistChanged__Delegate;                		// 0x01DC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x01DC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AimAssistComponent_TA");
		return ptr;
	}


	void HandleGameEventChanged(class APRI_TA* PRI);
	int AimControlSort(class UAimControl_TA* A, class UAimControl_TA* B);
	void UpdateActiveAimControl(class UProfile_TA* Profile);
	void UpdateXP(class UProfile_TA* Profile);
	void HandleXPInitialized(class UProfile_TA* Profile);
	void SetEnableAll(bool bEnable);
	void ResetVars();
	void HandlePawnChanged(class APlayerController_X* PC, class APawn* OldPawn, class APawn* NewPawn);
	void UpdateProfileDelegates();
	void SetEnabled(bool bEnable);
	void HandleAimAssistEnabledChanged(class UProfile_TA* Profile);
	bool FloorTrace(const struct FVector& TraceStart, float TraceDistance, struct FVector* out_HitLocation, struct FVector* out_HitNormal);
	struct FRotator RotateAroundAxisToTarget(const struct FVector& Axis, const struct FVector& CompareAxis, const struct FVector& TurnDirCompareAxis, const struct FRotator& RotToRotate, const struct FRotator& RotTarget, float Multiplier, float MinAngle, float MaxAngle);
	class ABall_TA* GetBall();
	struct FRotator GetOrthoRotationFromForwardAxis(const struct FVector& ForwardAxis, const struct FVector& UpAxis);
	struct FRotator GetOrthoRotationFromUpAxis(const struct FVector& ForwardAxis, const struct FVector& UpAxis);
	struct FVector ConvertWorldDirToInputDir(const struct FRotator& InputRotation, const struct FVector& WorldDir);
	bool CanAerialBoost();
	bool CanGroundBoost();
	bool CanBoost();
	bool BallIsFallingDown();
	bool BallIsBouncing();
	bool ShouldOverrideInput(const struct FAimAssistSettings& Settings);
	float DetermineInputValue(float ControlValue, float AimValue, float Alpha);
	void SetVehicleInputOverrides(struct FVehicleInputs* ControlInput, struct FVehicleInputs* AimInput);
	bool AdjustThrottleBasedOnDistance(float DistanceToLocation, float TimeToReachLocation, float TimeTolerance, struct FVehicleInputs* AimInput);
	void PredictThrottle(struct FVehicleInputs* ControlInput, struct FVehicleInputs* AimInput);
	void PredictHandbrake(struct FVehicleInputs* ControlInput, struct FVehicleInputs* AimInput);
	bool PredictAerial(struct FVehicleInputs* ControlInput, struct FVehicleInputs* AimInput);
	bool ShouldAerialTowardsBall();
	bool ShouldJumpForAerial();
	bool ShouldPrepareForAerialJump();
	bool CanAerial(float MinVelocityDotBall);
	bool AerialPredictionHitWall();
	void PredictDodge(struct FVehicleInputs* ControlInput, struct FVehicleInputs* AimInput);
	bool WithinDodgeRange(float VelDistMultiplier, float MinCarZDistanceFromBall, float MaxCarZDistanceFromBall);
	bool CanJumpForDodge();
	void PredictJump(struct FVehicleInputs* ControlInput, struct FVehicleInputs* AimInput);
	void ModifyInput_Ground(struct FVehicleInputs* ControlInput, struct FVehicleInputs* AimInput);
	void PredictAirInput(const struct FRotator& InDesiredAirRotation, struct FVehicleInputs* AimInput);
	float DetermineAxisInput(float AxisAngularVelocity, float RadiansFromCarToDesired, float RadiansFromCarToPredict, float Direction, float PredictMultiplier);
	float GetFlattenedRadiansBetweenRotators(const struct FVector& Axis, const struct FVector& CompareAxis, const struct FRotator& Rot0, const struct FRotator& Rot1);
	float GetTurnDirection(const struct FVector& Axis, const struct FVector& CompareAxis, const struct FVector& TurnDirCompareAxis, const struct FRotator& Rot0, const struct FRotator& Rot1);
	float GetAngularVelocityAxisInputDirection(const struct FVector& Axis, const struct FVector& CompareAxis, const struct FVector& TurnDirCompareAxis, const struct FRotator& CurrentRotation, const struct FRotator& DesiredRotation, const struct FVector& InAngularVelocity, float AxisDamping, float TurnDirectionMultiplier);
	struct FRotator PredictAngularEndRotation(const struct FVector& Axis, const struct FRotator& CurrentRotation, const struct FVector& InAngularVelocity, float AxisDamping);
	void ModifyInput_Air(struct FVehicleInputs* ControlInput, struct FVehicleInputs* AimInput);
	struct FVector GetCarAimTarget(const struct FVector& Origin, const struct FVector& TargetVelocity, float MaxVelocity);
	struct FVector GetFurthestPointInExtent(const struct FVector& Origin, const struct FRotator& ExtentRotation, const struct FVector& Extent, const struct FVector& Direction);
	void DetermineOverrides();
	void PredictBallPosition();
	void UpdateVars(struct FVehicleInputs* ControlInput);
	void ModifyVehicleInput(struct FVehicleInputs* ControlInput);
	void UpdateEnabledFromProfile();
	void HandleProfileSet(class ULocalPlayer_TA* LocalPlayer);
	void HandleReceivedPlayer(class APlayerController_X* PC);
	void Attached();
	void EventAimAssistChanged(class APlayerController_TA* PC);
};


// Class TAGame.RPC_ReportPlayer_TA
// 0x009C (0x0130 - 0x0094)
class URPC_ReportPlayer_TA : public URPC_TA
{
public:
	struct FString                                     GameID;                                           		// 0x0094(0x000C) (CPF_NeedCtorLink)
	struct FReportPlayerData                           Reporter;                                         		// 0x00A0(0x003C) (CPF_NeedCtorLink)
	struct FReportPlayerData                           Offender;                                         		// 0x00DC(0x003C) (CPF_NeedCtorLink)
	struct FString                                     Reason;                                           		// 0x0118(0x000C) (CPF_NeedCtorLink)
	TArray<struct FPlayerChatMessage>                  Messages;                                         		// 0x0124(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ReportPlayer_TA");
		return ptr;
	}


	class URPC_ReportPlayer_TA* SetMessages(TArray<struct FPlayerChatMessage> InMessages);
	class URPC_ReportPlayer_TA* SetReason(const struct FString& InReason);
	class URPC_ReportPlayer_TA* SetOffender(const struct FUniqueNetId& PlayerID, const struct FString& PlayerName);
	class URPC_ReportPlayer_TA* SetReporter(const struct FUniqueNetId& PlayerID, const struct FString& PlayerName);
	class URPC_ReportPlayer_TA* SetGameID(const struct FString& InGameID);
};


// Class TAGame.Interface_GameEditor_TA
// 0x0000 (0x003C - 0x003C)
class UInterface_GameEditor_TA : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Interface_GameEditor_TA");
		return ptr;
	}


	void EditingEnd();
	void EditingBegin();
	void NotifyOnSelectionChange(const struct FScriptDelegate& Callback);
	bool SerializedDataIsEqual(const struct FString& S0, const struct FString& S1);
	void Deserialize(class UJsonObject* Data);
	struct FString Serialize();
	struct FVector CollisionExtent();
	struct FVector GetCameraPositionOffset();
	struct FVector GetGrabRotationOffset(const struct FRotator& CurrentRotation);
	void ModfiyBlendedRotation(const struct FRotator& ControllerRot, const struct FRotator& DeltaRot, struct FRotator* out_Rotation);
	struct FRotator GetDesiredRotation();
	struct FVector EditorGetLocation();
	bool EditorSetLocation(const struct FVector& NewLocation);
	bool EditorMoveToLocation(const struct FVector& NewLocation);
	bool CanEdit();
	struct FRotator EditorGetRotation();
	void EditorSetRotation(const struct FRotator& NewRotation);
	void EditorSetRotationFromInput(float Forward, float Strafe);
	void EventSelectionChange(const TScriptInterface<class UInterface_GameEditor_TA>& Object, bool bSelected);
};


// Class TAGame.Ball_GameEditor_TA
// 0x0098 (0x0884 - 0x07EC)
class ABall_GameEditor_TA : public ABall_TA
{
public:
	struct FVector                                     StartLocation;                                    		// 0x07EC(0x000C)
	float                                              VelocityStartSpeed;                               		// 0x07F8(0x0004)
	struct FRotator                                    VelocityStartRotation;                            		// 0x07FC(0x000C)
	float                                              BallResetTime;                                    		// 0x0808(0x0004)
	float                                              FirstHitTime;                                     		// 0x080C(0x0004)
	struct FVector                                     CameraPositionOffset;                             		// 0x0810(0x000C)
	class AFXActor_X*                                  EditingFXActorArchetype;                          		// 0x081C(0x0004) (CPF_Edit)
	class AFXActor_X*                                  EditingFXActor;                                   		// 0x0820(0x0004) (CPF_Transient)
	unsigned long                                      bUpdateTrajectory : 1;                            		// 0x0824(0x0004)
	struct FVector                                     ToLocation;                                       		// 0x0828(0x000C)
	struct FScriptDelegate                             __EventBallWentThruRing__Delegate;                		// 0x0834(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0834(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventVelocityStartSpeedChanged__Delegate;       		// 0x0844(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0844(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventFire__Delegate;                            		// 0x0854(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x0854(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventReset__Delegate;                           		// 0x0864(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x0864(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventSelectionChange__Delegate;                 		// 0x0874(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x0874(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Ball_GameEditor_TA");
		return ptr;
	}


	void EditingEnd();
	void EditingBegin();
	void NotifyOnSelectionChange(const struct FScriptDelegate& Callback);
	struct FVector GetCameraPositionOffset();
	struct FVector CollisionExtent();
	void ModfiyBlendedRotation(const struct FRotator& ControllerRot, const struct FRotator& DeltaRot, struct FRotator* out_Rotation);
	bool CanEdit();
	struct FRotator EditorGetRotation();
	struct FVector EditorGetLocation();
	bool SerializedDataIsEqual(const struct FString& S0, const struct FString& S1);
	void Deserialize(class UJsonObject* Data);
	struct FString Serialize();
	struct FVector GetGrabRotationOffset(const struct FRotator& CurrentRotation);
	void Tick(float DeltaTime);
	struct FRotator GetDesiredRotation();
	void EditorSetRotationFromInput(float Forward, float Strafe);
	void EditorSetRotation(const struct FRotator& NewRotation);
	bool EditorSetLocation(const struct FVector& NewLocation);
	bool EditorMoveToLocation(const struct FVector& Loc);
	void WentThruRing();
	void OnWentThruRing();
	void NotifyIfWentThruRing();
	bool IsRoundActive();
	void OnCarTouch(class ACar_TA* HitCar, TEnumAsByte<enum class EBallHitType> HitType);
	void OnHitWorld(const struct FVector& HitLoc, const struct FVector& HitNormal, class UPhysicalMaterial* PhysMat);
	void Reset();
	void Fire();
	struct FVector GetBallFireVelocity();
	void AddVelocityStartSpeed(float Amount);
	bool TakeDamage_X(class UDamageComponent_X* Damage);
	void AddVelocityStartRotation(const struct FRotator& Amount, float MaxDegrees);
	void RecordCarHit(class ACar_TA* HitCar, const struct FVector& HitLocation, const struct FVector& HitNormal, TEnumAsByte<enum class EBallHitType> HitType);
	bool ShouldDrawTrajectory();
	struct FVector GetTrajectoryStartVelocity();
	struct FVector GetTrajectoryStartLocation();
	bool CanEverShowTrajectory();
	void InitFX();
	void PostBeginPlay();
	void EventSelectionChange(const TScriptInterface<class UInterface_GameEditor_TA>& Object, bool bSelected);
	void EventReset(class ABall_GameEditor_TA* Ball);
	void EventFire(class ABall_GameEditor_TA* Ball);
	void EventVelocityStartSpeedChanged(class ABall_GameEditor_TA* Ball);
	void EventBallWentThruRing(class ABall_GameEditor_TA* Ball);
};


// Class TAGame.GameEditor_Actor_TA
// 0x0034 (0x0220 - 0x01EC)
class AGameEditor_Actor_TA : public AActor
{
public:
	class UPrimitiveComponent*                         Mesh;                                             		// 0x01EC(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	struct FVector                                     RotateCameraOffset;                               		// 0x01F0(0x000C)
	float                                              MaxRotatePitch;                                   		// 0x01FC(0x0004)
	float                                              MaxInputRotatePitch;                              		// 0x0200(0x0004)
	unsigned long                                      bModifiyPitchOnEditorSetRotation : 1;             		// 0x0204(0x0004)
	class AFXActor_X*                                  FXActorArchetype;                                 		// 0x0208(0x0004) (CPF_Edit)
	class AFXActor_X*                                  FXActor;                                          		// 0x020C(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventSelectionChange__Delegate;                 		// 0x0210(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0210(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEditor_Actor_TA");
		return ptr;
	}


	void EditingEnd();
	void EditingBegin();
	void NotifyOnSelectionChange(const struct FScriptDelegate& Callback);
	struct FVector EditorGetLocation();
	struct FRotator EditorGetRotation();
	bool CanEdit();
	bool SerializedDataIsEqual(const struct FString& S0, const struct FString& S1);
	void Deserialize(class UJsonObject* Data);
	struct FString Serialize();
	struct FVector GetCameraPositionOffset();
	struct FVector CollisionExtent();
	void ModfiyBlendedRotation(const struct FRotator& ControllerRot, const struct FRotator& DeltaRot, struct FRotator* out_Rotation);
	struct FVector GetGrabRotationOffset(const struct FRotator& CurrentRotation);
	struct FRotator GetDesiredRotation();
	void ReInitPhysics();
	void ReInitPhysicsDelayed();
	bool EditorSetLocation(const struct FVector& NewLocation);
	bool EditorMoveToLocation(const struct FVector& NewLocation);
	void AddToRotation(const struct FRotator& Rot, float MaxDegrees);
	void EditorSetRotationFromInput(float Forward, float Strafe);
	void EditorSetRotation(const struct FRotator& NewRotation);
	void InitFX();
	void PostBeginPlay();
	void EventSelectionChange(const TScriptInterface<class UInterface_GameEditor_TA>& Object, bool bSelected);
};


// Class TAGame.GameEditor_Trigger_TA
// 0x0014 (0x0234 - 0x0220)
class AGameEditor_Trigger_TA : public AGameEditor_Actor_TA
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x0220(0x0004)
	struct FScriptDelegate                             __OnTriggerTouched__Delegate;                     		// 0x0224(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0224(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEditor_Trigger_TA");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void EnableTrigger(bool bEnable);
	void OnTriggerTouched(class AGameEditor_Trigger_TA* Trigger, class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class TAGame.GameEditor_Ring_TA
// 0x0024 (0x0258 - 0x0234)
class AGameEditor_Ring_TA : public AGameEditor_Trigger_TA
{
public:
	TArray<struct FActorTouchRecordData>               ActorTouchRecords;                                		// 0x0234(0x000C) (CPF_NeedCtorLink)
	float                                              MaxRadius;                                        		// 0x0240(0x0004)
	TEnumAsByte<enum class EDetectionType>             DetectionType;                                    		// 0x0244(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0245(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __OnRingScored__Delegate;                         		// 0x0248(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x0245(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEditor_Ring_TA");
		return ptr;
	}


	void ModfiyBlendedRotation(const struct FRotator& ControllerRot, const struct FRotator& DeltaRot, struct FRotator* out_Rotation);
	void EnableTrigger(bool bEnable);
	struct FRotator GetDesiredRotation();
	void Tick(float DeltaTime);
	struct FVector GetTouchDirection(class AActor* A);
	void OnActorWentThruRing(int RecordIndex);
	bool ActorWentThruRing(const struct FActorTouchRecordData& TouchRecord);
	void UnTouch(class AActor* Other);
	bool AddToBallTouchRecords(const struct FActorTouchRecordData& NewTouchRecord);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool IsTouchableActor(class AActor* A);
	void PostBeginPlay();
	void OnRingScored(class AGameEditor_Ring_TA* Ring, class AActor* Other);
};


// Class TAGame.OnlineGameSkillGroups_TA
// 0x0000 (0x00A0 - 0x00A0)
class UOnlineGameSkillGroups_TA : public UOnlineGameSkillGroups_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameSkillGroups_TA");
		return ptr;
	}


	void ClientSetSkill(TArray<struct FUniqueNetId> PlayerIDs, int Playlist, const struct FTierSkillRating& Rating);
	void ReplicateGroupSkillRating(int Playlist, TArray<struct FUniqueNetId>* Party);
	void ReplicateSkillUpdate(class UMatchRecorder_X* MatchRecorder);
	void HandleSkillsUpdateFailed(class URPC_X* RPCObject);
	void HandleSkillsUpdated(class URPC_X* RPCObject);
};


// Class TAGame.GameMusicComponent_TA
// 0x0000 (0x006C - 0x006C)
class UGameMusicComponent_TA : public UTickComponent_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameMusicComponent_TA");
		return ptr;
	}


	void Tick(float DeltaTime);
	void Init();
};


// Class TAGame.ListenerLocationComponent_TA
// 0x0020 (0x008C - 0x006C)
class UListenerLocationComponent_TA : public UActorComponent_X
{
public:
	float                                              ListenerHeight;                                   		// 0x006C(0x0004) (CPF_Edit)
	unsigned long                                      bShowDebugTransform : 1;                          		// 0x0070(0x0004) (CPF_Edit)
	struct FVector                                     ListenerLocation;                                 		// 0x0074(0x000C) (CPF_Transient)
	struct FRotator                                    ListenerRotation;                                 		// 0x0080(0x000C) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ListenerLocationComponent_TA");
		return ptr;
	}


	void GetHearSoundTransform(struct FVector* OutLocation, struct FRotator* OutRotation);
	void Tick(float DeltaTime);
	void Attached();
};


// Class TAGame.AudioPriorityComponent_TA
// 0x0044 (0x00B0 - 0x006C)
class UAudioPriorityComponent_TA : public UActorComponent_X
{
public:
	struct FInterpCurveFloat                           CarDistanceCurve;                                 		// 0x006C(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	struct FInterpCurveFloat                           BallDistanceCurve;                                		// 0x007C(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	float                                              DrivingAtListenerDotThreshold;                    		// 0x008C(0x0004) (CPF_Edit)
	int                                                DrivingAtPlayerBonus;                             		// 0x0090(0x0004) (CPF_Edit)
	int                                                BoostingAtPlayerBonus;                            		// 0x0094(0x0004) (CPF_Edit)
	TArray<struct FColor>                              DebugColors;                                      		// 0x0098(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FPriorityCandidate>                  PriorityArray;                                    		// 0x00A4(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AudioPriorityComponent_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	int SortPriorityDelegate(const struct FPriorityCandidate& A, const struct FPriorityCandidate& B);
	struct FPriorityCandidate CreateCandidate(class ACar_TA* Car, class AGameEvent_Soccar_TA* GameEvent, const struct FVector& CenterLocation);
	void Tick(float DeltaTime);
};


// Class TAGame.PlayerInput_Game_TA
// 0x0000 (0x0324 - 0x0324)
class UPlayerInput_Game_TA : public UPlayerInput_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInput_Game_TA");
		return ptr;
	}


	void HandleActiveBindingsChanged(class UProfile_TA* Profile);
};


// Class TAGame.PlayerInput_TA__GetKeyForActionArray__60D29F5B40514E02342CAB8A63650986
// 0x0008 (0x0044 - 0x003C)
class UPlayerInput_TA__GetKeyForActionArray__60D29F5B40514E02342CAB8A63650986 : public UObject
{
public:
	struct FName                                       Action;                                           		// 0x003C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInput_TA__GetKeyForActionArray__60D29F5B40514E02342CAB8A63650986");
		return ptr;
	}


	bool LambdaCallback(const struct FPlayerBinding& Binding);
	class UPlayerInput_TA__GetKeyForActionArray__60D29F5B40514E02342CAB8A63650986* STATIC_StaticConstruct(class UPlayerInput_TA* InOuter);
	class UPlayerInput_TA__GetKeyForActionArray__60D29F5B40514E02342CAB8A63650986* SetAction(const struct FName& Value);
};


// Class TAGame.PlayerInput_Replay_TA
// 0x0000 (0x0324 - 0x0324)
class UPlayerInput_Replay_TA : public UPlayerInput_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInput_Replay_TA");
		return ptr;
	}


	void HandleActiveBindingsChanged(class UProfile_TA* Profile);
};


// Class TAGame.PlayerInput_Spectator_TA
// 0x0000 (0x0324 - 0x0324)
class UPlayerInput_Spectator_TA : public UPlayerInput_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInput_Spectator_TA");
		return ptr;
	}


	void HandleActiveBindingsChanged(class UProfile_TA* Profile);
};


// Class TAGame.SeqEvent_InputSequence_TA
// 0x0008 (0x011C - 0x0114)
class USeqEvent_InputSequence_TA : public USequenceEvent
{
public:
	struct FName                                       SequenceName;                                     		// 0x0114(0x0008) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_InputSequence_TA");
		return ptr;
	}

};


// Class TAGame.PointInSpace_TA
// 0x0008 (0x01F4 - 0x01EC)
class APointInSpace_TA : public AActor
{
public:
	class USpriteComponent*                            Sprite;                                           		// 0x01EC(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UArrowComponent*                             Arrow;                                            		// 0x01F0(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PointInSpace_TA");
		return ptr;
	}

};


// Class TAGame.CameraSettingsActorCopy_TA
// 0x0000 (0x0234 - 0x0234)
class ACameraSettingsActorCopy_TA : public ACameraSettingsActor_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraSettingsActorCopy_TA");
		return ptr;
	}


	void Tick(float DeltaTime);
};


// Class TAGame.ProductAttribute_PreviewOnly_TA
// 0x0000 (0x0054 - 0x0054)
class UProductAttribute_PreviewOnly_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_PreviewOnly_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_AntennaPack_TA
// 0x0000 (0x0070 - 0x0070)
class UProductAsset_AntennaPack_TA : public UProductAsset_Pack_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_AntennaPack_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_CountryFlags_TA
// 0x0000 (0x0070 - 0x0070)
class UProductAsset_CountryFlags_TA : public UProductAsset_Pack_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_CountryFlags_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_UnderGlow_TA
// 0x0000 (0x0084 - 0x0084)
class UProductAsset_UnderGlow_TA : public UProductAsset_Attachment_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_UnderGlow_TA");
		return ptr;
	}

};


// Class TAGame.ProductStat_BoostTime_TA
// 0x000C (0x0078 - 0x006C)
class UProductStat_BoostTime_TA : public UProductStat_TA
{
public:
	class ACarComponent_Boost_TA*                      BoostComponent;                                   		// 0x006C(0x0004) (CPF_Transient)
	float                                              BoostStartTime;                                   		// 0x0070(0x0004) (CPF_Transient)
	float                                              LeftoverTime;                                     		// 0x0074(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_BoostTime_TA");
		return ptr;
	}


	struct FString STATIC_GetDisplayValue(class APlayerControllerBase_TA* ForPC, int StatValue);
	void FinalizeTime();
	void HandleActivationChanged(class ACarComponent_TA* InComponent);
	void HandleBoostAdded(class UObject* BoostObject);
	void SetCar(class ACar_TA* InCar);
};


// Class TAGame.ProductStat_SoccarEventBase_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_SoccarEventBase_TA : public UProductStat_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_SoccarEventBase_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
	void HandleStatEvent(class APRI_TA* InPRI, class UStatEvent_TA* StatEvent, int Count);
	void ShutDown();
	void OnInit();
};


// Class TAGame.ProductStat_Demolishes_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Demolishes_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Demolishes_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_DistanceDriven_TA
// 0x000C (0x0078 - 0x006C)
class UProductStat_DistanceDriven_TA : public UProductStat_TA
{
public:
	struct FVector                                     OldLocation;                                      		// 0x006C(0x000C) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_DistanceDriven_TA");
		return ptr;
	}


	struct FString STATIC_GetDisplayValue(class APlayerControllerBase_TA* ForPC, int StatValue);
	void UpdateDistance();
	void SetCar(class ACar_TA* InCar);
};


// Class TAGame.ProductStat_GamesPlayed_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_GamesPlayed_TA : public UProductStat_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_GamesPlayed_TA");
		return ptr;
	}


	void OnInit();
};


// Class TAGame.ProductStat_Goals_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Goals_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Goals_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_Saves_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Saves_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Saves_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_TimePlayed_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_TimePlayed_TA : public UProductStat_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_TimePlayed_TA");
		return ptr;
	}


	struct FString STATIC_GetDisplayValue(class APlayerControllerBase_TA* ForPC, int StatValue);
	void UpdateTime();
	void SetCar(class ACar_TA* InCar);
};


// Class TAGame.ProductStat_Wins_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Wins_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Wins_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.GameTags_TA
// 0x000C (0x0048 - 0x003C)
class UGameTags_TA : public UObject
{
public:
	TArray<struct FKeyValuePair>                       Tags;                                             		// 0x003C(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameTags_TA");
		return ptr;
	}


	void InitFromExisting(TArray<struct FKeyValuePair>* InTags);
	struct FString CreateGameTagsStr();
	void SetValue(const struct FString& Key, const struct FString& Value);
	struct FString GetValue(const struct FString& Key);
	void ResetTags();
	void InitTags(const struct FString& AllTags);
};


// Class TAGame.Profile_TA__GetKeyForActionArray__5370A1E84153578E446924B4CA9A2CA1
// 0x0008 (0x0044 - 0x003C)
class UProfile_TA__GetKeyForActionArray__5370A1E84153578E446924B4CA9A2CA1 : public UObject
{
public:
	struct FName                                       Action;                                           		// 0x003C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Profile_TA__GetKeyForActionArray__5370A1E84153578E446924B4CA9A2CA1");
		return ptr;
	}


	bool LambdaCallback(const struct FPlayerBinding& Binding);
	class UProfile_TA__GetKeyForActionArray__5370A1E84153578E446924B4CA9A2CA1* STATIC_StaticConstruct(class UProfile_TA* InOuter);
	class UProfile_TA__GetKeyForActionArray__5370A1E84153578E446924B4CA9A2CA1* SetAction(const struct FName& Value);
};


// Class TAGame.MapPrefsMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class UMapPrefsMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapPrefsMetrics_TA");
		return ptr;
	}


	void MapPrefs(TArray<struct FMapPrefsMetric> Playlists);
	struct FMapPrefsMetric GetMetric(struct FPlaylistMapPrefs* InPrefs);
	TArray<struct FMapPrefsMetric> GetAllMetrics(TArray<struct FPlaylistMapPrefs>* InMapPrefs);
	void RecordMapPrefs(TArray<struct FPlaylistMapPrefs>* InMapPrefs);
};


// Class TAGame.VehiclePartSkeletalMeshComponent_TA
// 0x0000 (0x063C - 0x063C)
class UVehiclePartSkeletalMeshComponent_TA : public USkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehiclePartSkeletalMeshComponent_TA");
		return ptr;
	}

};


// Class TAGame.RPC_ProductsPlayerClear_TA
// 0x0030 (0x00C4 - 0x0094)
class URPC_ProductsPlayerClear_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsPlayerClear_TA");
		return ptr;
	}


	class URPC_ProductsPlayerClear_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_ProductsPlayerGet_TA
// 0x0048 (0x00DC - 0x0094)
class URPC_ProductsPlayerGet_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	TArray<struct FOnlineProductData>                  ProductData;                                      		// 0x00C4(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   Products;                                         		// 0x00D0(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsPlayerGet_TA");
		return ptr;
	}


	void OnSuccess();
	class URPC_ProductsPlayerGet_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_SaveDataClear_TA
// 0x0030 (0x00C4 - 0x0094)
class URPC_SaveDataClear_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_SaveDataClear_TA");
		return ptr;
	}


	class URPC_SaveDataClear_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_SaveDataGet_TA
// 0x0040 (0x00D4 - 0x0094)
class URPC_SaveDataGet_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	class UOnlineSaveData_TA*                          SaveData;                                         		// 0x00C4(0x0004) (CPF_Const, CPF_Transient)
	TArray<class UOnlineProfile_TA*>                   Profiles;                                         		// 0x00C8(0x000C) (CPF_Const, CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_SaveDataGet_TA");
		return ptr;
	}


	class URPC_SaveDataGet_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_SaveDataUpdate_TA
// 0x0040 (0x00D4 - 0x0094)
class URPC_SaveDataUpdate_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	class UOnlineSaveData_TA*                          SaveData;                                         		// 0x00C4(0x0004)
	TArray<class UOnlineProfile_TA*>                   Profiles;                                         		// 0x00C8(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_SaveDataUpdate_TA");
		return ptr;
	}


	class URPC_SaveDataUpdate_TA* AddProfile(class UOnlineProfile_TA* Profile);
	class URPC_SaveDataUpdate_TA* SetSaveData(class UOnlineSaveData_TA* InSaveData);
	class URPC_SaveDataUpdate_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_SchematicResourcesGet_TA
// 0x0034 (0x00C8 - 0x0094)
class URPC_SchematicResourcesGet_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	int                                                TotalSchematicResources;                          		// 0x00C4(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_SchematicResourcesGet_TA");
		return ptr;
	}


	class URPC_SchematicResourcesGet_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.Scout_TA
// 0x0000 (0x04FC - 0x04FC)
class AScout_TA : public AScout
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Scout_TA");
		return ptr;
	}

};


// Class TAGame.ScriptedTextureComponent_TA
// 0x0020 (0x008C - 0x006C)
class UScriptedTextureComponent_TA : public UActorComponent_X
{
public:
	struct FVector                                     Resolution;                                       		// 0x006C(0x000C) (CPF_Edit)
	float                                              Height;                                           		// 0x0078(0x0004) (CPF_Edit)
	unsigned long                                      bFaceCamera : 1;                                  		// 0x007C(0x0004) (CPF_Edit)
	class UStaticMeshComponent*                        Mesh;                                             		// 0x0080(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UScriptedTexture*                            TextureTarget;                                    		// 0x0084(0x0004) (CPF_Transient)
	class APlayerController*                           Viewer;                                           		// 0x0088(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ScriptedTextureComponent_TA");
		return ptr;
	}


	void FaceViewer();
	void Tick(float DeltaTime);
	void Detached();
	void Attached();
};


// Class TAGame.SeqAct_AddGameBall_TA
// 0x001C (0x0118 - 0x00FC)
class USeqAct_AddGameBall_TA : public USequenceAction
{
public:
	class ABall_TA*                                    SpawnedBall;                                      		// 0x00FC(0x0004)
	class AActor*                                      Instigator;                                       		// 0x0100(0x0004)
	class AActor*                                      SpawnTransform;                                   		// 0x0104(0x0004)
	unsigned long                                      bWake : 1;                                        		// 0x0108(0x0004) (CPF_Edit)
	struct FString                                     BallArchetype;                                    		// 0x010C(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_AddGameBall_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_ApplyCarProducts_TA
// 0x0038 (0x0134 - 0x00FC)
class USeqAct_ApplyCarProducts_TA : public USequenceAction
{
public:
	TArray<class UProductAsset_TA*>                    Assets;                                           		// 0x00FC(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	struct FLinearColor                                TeamColor;                                        		// 0x0108(0x0010) (CPF_Edit)
	struct FLinearColor                                AccentColor;                                      		// 0x0118(0x0010) (CPF_Edit)
	class UProductAsset_PaintFinish_TA*                TeamFinish;                                       		// 0x0128(0x0004) (CPF_Edit)
	class UProductAsset_PaintFinish_TA*                CustomFinish;                                     		// 0x012C(0x0004) (CPF_Edit)
	class ACarPreviewActor_TA*                         CarPreviewActor;                                  		// 0x0130(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_ApplyCarProducts_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_ControlCarMovement_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_ControlCarMovement_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_ControlCarMovement_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_DisplayMessage_TA
// 0x0038 (0x0134 - 0x00FC)
class USeqAct_DisplayMessage_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC(0x0004)
	struct FString                                     Title;                                            		// 0x0100(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	struct FString                                     Body;                                             		// 0x010C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	unsigned long                                      bShowButtonOne : 1;                               		// 0x0118(0x0004) (CPF_Edit)
	unsigned long                                      bShowButtonTwo : 1;                               		// 0x0118(0x0004) (CPF_Edit)
	struct FString                                     ButtonOneTitle;                                   		// 0x011C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	struct FString                                     ButtonTwoTitle;                                   		// 0x0128(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_DisplayMessage_TA");
		return ptr;
	}


	void HandleButtonTwoClick(class UGFxModal_X* Modal);
	void HandleButtonOneClick(class UGFxModal_X* Modal);
	void DisplayMessage(class APlayerController_TA* PC);
	void Activated();
};


// Class TAGame.SeqAct_DriveSpline_TA
// 0x001C (0x012C - 0x0110)
class USeqAct_DriveSpline_TA : public USeqAct_Latent
{
public:
	float                                              ForwardOffset;                                    		// 0x0110(0x0004) (CPF_Edit)
	class ASplineActor*                                Spline;                                           		// 0x0114(0x0004) (CPF_Edit)
	float                                              Throttle;                                         		// 0x0118(0x0004) (CPF_Edit)
	unsigned long                                      bDebug : 1;                                       		// 0x011C(0x0004) (CPF_Edit)
	TArray<struct FCarSplineData>                      Cars;                                             		// 0x0120(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_DriveSpline_TA");
		return ptr;
	}


	float GetSteer(class ACar_TA* Car, const struct FVector& Destination);
	struct FCarSplineData DriveSpline(const struct FCarSplineData& CarData, float DeltaTime);
	bool Update(float DeltaTime);
	void Activated();
};


// Class TAGame.SeqAct_EndTutorial_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_EndTutorial_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_EndTutorial_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_ExplodeGameBall_TA
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_ExplodeGameBall_TA : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_ExplodeGameBall_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_ExportMatinee_TA
// 0x0010 (0x010C - 0x00FC)
class USeqAct_ExportMatinee_TA : public USequenceAction
{
public:
	struct FString                                     Filename;                                         		// 0x00FC(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	int                                                RecordTime;                                       		// 0x0108(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_ExportMatinee_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GetDetailMode_TA
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_GetDetailMode_TA : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetDetailMode_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GetSaveData_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_GetSaveData_TA : public USequenceAction
{
public:
	class USaveData_TA*                                SaveData;                                         		// 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetSaveData_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GetTutorialType_TA
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_GetTutorialType_TA : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetTutorialType_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GetWeatherEnabled_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_GetWeatherEnabled_TA : public USequenceAction
{
public:
	unsigned long                                      bEnabled : 1;                                     		// 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetWeatherEnabled_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GiveBoost_TA
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_GiveBoost_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC(0x0004)
	float                                              BoostAmount;                                      		// 0x0100(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GiveBoost_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_IsActionPressed_TA
// 0x000C (0x0108 - 0x00FC)
class USeqAct_IsActionPressed_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC(0x0004)
	struct FName                                       ActionName;                                       		// 0x0100(0x0008) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_IsActionPressed_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_IsHumanPlayer_TA
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_IsHumanPlayer_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC(0x0004)
	class AActor*                                      Target;                                           		// 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_IsHumanPlayer_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_NotifyEventOnTutorial_TA
// 0x0010 (0x010C - 0x00FC)
class USeqAct_NotifyEventOnTutorial_TA : public USequenceAction
{
public:
	struct FString                                     EventName;                                        		// 0x00FC(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class AActor*                                      Instigator;                                       		// 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_NotifyEventOnTutorial_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_ScreenFade
// 0x0010 (0x010C - 0x00FC)
class USeqAct_ScreenFade : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC(0x0004)
	struct FColor                                      FadeColor;                                        		// 0x0100(0x0004) (CPF_Edit)
	float                                              FadeTime;                                         		// 0x0104(0x0004) (CPF_Edit)
	unsigned long                                      bFadeAudio : 1;                                   		// 0x0108(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_ScreenFade");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_ScreenFade_TA
// 0x0010 (0x010C - 0x00FC)
class USeqAct_ScreenFade_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC(0x0004)
	struct FColor                                      FadeColor;                                        		// 0x0100(0x0004) (CPF_Edit)
	float                                              FadeTime;                                         		// 0x0104(0x0004) (CPF_Edit)
	unsigned long                                      bFadeAudio : 1;                                   		// 0x0108(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_ScreenFade_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetBallCamTarget_TA
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_SetBallCamTarget_TA : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetBallCamTarget_TA");
		return ptr;
	}


	void SetBallCamTarget(bool bTarget);
	void Activated();
};


// Class TAGame.SeqAct_SetBallMaterial_TA
// 0x000C (0x0108 - 0x00FC)
class USeqAct_SetBallMaterial_TA : public USequenceAction
{
public:
	class ABall_TA*                                    Ball;                                             		// 0x00FC(0x0004)
	class UMaterialInterface*                          Material;                                         		// 0x0100(0x0004) (CPF_Edit)
	int                                                MaterialID;                                       		// 0x0104(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetBallMaterial_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetCarTransform_TA
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_SetCarTransform_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC(0x0004)
	class AActor*                                      Transform;                                        		// 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetCarTransform_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetLoadout_TA
// 0x0034 (0x0130 - 0x00FC)
class USeqAct_SetLoadout_TA : public USequenceAction
{
public:
	TArray<class UProductAsset_TA*>                    Products;                                         		// 0x00FC(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UProductAsset_PaintFinish_TA*                TeamFinish;                                       		// 0x0108(0x0004) (CPF_Edit)
	class UProductAsset_PaintFinish_TA*                AccentFinish;                                     		// 0x010C(0x0004) (CPF_Edit)
	struct FLinearColor                                TeamColor;                                        		// 0x0110(0x0010) (CPF_Edit)
	struct FLinearColor                                AccentColor;                                      		// 0x0120(0x0010) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetLoadout_TA");
		return ptr;
	}


	void HandleOverrideLoadout(class ACar_TA* Car);
	void HandleFirstLoadout(class ACar_TA* Car);
	void Activated();
};


// Class TAGame.SeqAct_SetMatInstParam_Vector
// 0x0018 (0x0114 - 0x00FC)
class USeqAct_SetMatInstParam_Vector : public USequenceAction
{
public:
	struct FName                                       ParamName;                                        		// 0x00FC(0x0008) (CPF_Edit)
	class AMaterialInstanceActor*                      MatInstActor;                                     		// 0x0104(0x0004) (CPF_Edit)
	struct FVector                                     VectorValue;                                      		// 0x0108(0x000C) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetMatInstParam_Vector");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetStadiumTeamColors_TA
// 0x0018 (0x0114 - 0x00FC)
class USeqAct_SetStadiumTeamColors_TA : public USequenceAction
{
public:
	TArray<struct FLinearColor>                        BlueColors;                                       		// 0x00FC(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FLinearColor>                        OrangeColors;                                     		// 0x0108(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetStadiumTeamColors_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetTutorialGameEvent_TA
// 0x000C (0x0108 - 0x00FC)
class USeqAct_SetTutorialGameEvent_TA : public USequenceAction
{
public:
	struct FString                                     TutorialType;                                     		// 0x00FC(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetTutorialGameEvent_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetVehicleInput_TA
// 0x0020 (0x011C - 0x00FC)
class USeqAct_SetVehicleInput_TA : public USequenceAction
{
public:
	struct FVehicleInputs                              Input;                                            		// 0x00FC(0x0020) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetVehicleInput_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SpawnBot_TA
// 0x0014 (0x0110 - 0x00FC)
class USeqAct_SpawnBot_TA : public USequenceAction
{
public:
	class ACar_TA*                                     SpawnedBot;                                       		// 0x00FC(0x0004)
	class AActor*                                      SpawnTransform;                                   		// 0x0100(0x0004)
	float                                              SkillLevel;                                       		// 0x0104(0x0004) (CPF_Edit)
	unsigned long                                      bDisableAllLogic : 1;                             		// 0x0108(0x0004) (CPF_Edit)
	unsigned long                                      bCollideWithBall : 1;                             		// 0x0108(0x0004) (CPF_Edit)
	int                                                TeamIndex;                                        		// 0x010C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SpawnBot_TA");
		return ptr;
	}


	void ChooseTeam(class AAIController_TA* AIC);
	void Activated();
};


// Class TAGame.SeqAct_SpawnCarColors_TA
// 0x0054 (0x0150 - 0x00FC)
class USeqAct_SpawnCarColors_TA : public USequenceAction
{
public:
	struct FSpawnCarColorSet                           AccentColors;                                     		// 0x00FC(0x0008) (CPF_Edit)
	struct FLinearColor                                AccentTeamColor;                                  		// 0x0104(0x0010) (CPF_Edit)
	struct FSpawnCarColorSet                           BlueTeamColors;                                   		// 0x0114(0x0008) (CPF_Edit)
	struct FSpawnCarColorSet                           OrangeTeamColors;                                 		// 0x011C(0x0008) (CPF_Edit)
	struct FLinearColor                                TeamAccentColor;                                  		// 0x0124(0x0010) (CPF_Edit)
	class UProductAsset_Body_TA*                       Body;                                             		// 0x0134(0x0004) (CPF_Edit)
	class UProductAsset_Skin_TA*                       Skin;                                             		// 0x0138(0x0004) (CPF_Edit)
	int                                                CarYaw;                                           		// 0x013C(0x0004) (CPF_Edit)
	float                                              CarOffsetX;                                       		// 0x0140(0x0004) (CPF_Edit)
	float                                              CarOffsetY;                                       		// 0x0144(0x0004) (CPF_Edit)
	float                                              SetOffsetY;                                       		// 0x0148(0x0004) (CPF_Edit)
	float                                              BaseOffsetY;                                      		// 0x014C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SpawnCarColors_TA");
		return ptr;
	}


	class ACarPreviewActor_TA* SpawnCar(const struct FLinearColor& TeamColor, const struct FLinearColor& AccentColor, float OffsetX, float OffsetY);
	struct FLinearColor GetRGBFromColorSet(const struct FLinearColor& Hue, const struct FLinearColor& SV);
	void SpawnTeamCars(class UCarColorSet_TA* TeamColorSet, const struct FLinearColor& AccentColor);
	void SpawnAccentCars(class UCarColorSet_TA* AccentColorSet, const struct FLinearColor& TeamColor);
	class UProductAsset_Body_TA* GetOctaneBody();
	void Activated();
};


// Class TAGame.SeqAct_StartTutorial_TA
// 0x0010 (0x010C - 0x00FC)
class USeqAct_StartTutorial_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                       		// 0x00FC(0x0004)
	struct FString                                     TutorialName;                                     		// 0x0100(0x000C) (CPF_Edit, CPF_Const, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_StartTutorial_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_UpdateAd_TA
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_UpdateAd_TA : public USequenceAction
{
public:
	class AStaticMeshActor*                            MeshActor;                                        		// 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_UpdateAd_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SkyLightVolume_TA
// 0x0006 (0x021E - 0x0218)
class ASkyLightVolume_TA : public AVolume
{
public:
	class USkyLightVolumeComponent_TA*                 SkyLight;                                         		// 0x0218(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	TEnumAsByte<enum class EPaintTeam>                 UpperPaintTeam;                                   		// 0x021C(0x0001) (CPF_Edit)
	TEnumAsByte<enum class EPaintTeam>                 LowerPaintTeam;                                   		// 0x021D(0x0001) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkyLightVolume_TA");
		return ptr;
	}


	void HandleTeamColorsChanged(class ATeam_TA* Team);
	void HandleAllTeamsCreated(class AGameEvent_Team_TA* TeamGameEvent);
	void HandleGameEventAdded(class UObject* GameEventObj);
	void SetTeamColorListeners();
	void PostBeginPlay();
};


// Class TAGame.Trigger_GodBeam_TA
// 0x001C (0x0214 - 0x01F8)
class ATrigger_GodBeam_TA : public ATrigger_Dynamic
{
public:
	class UParticleSystemComponent*                    PSC;                                              		// 0x01F8(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UParticleSystem*                             OffParticle;                                      		// 0x01FC(0x0004)
	unsigned long                                      bFinished : 1;                                    		// 0x0200(0x0004) (CPF_Net)
	struct FScriptDelegate                             __OnTouched__Delegate;                            		// 0x0204(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0204(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Trigger_GodBeam_TA");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnFinished();
	void ReplicatedEvent(const struct FName& VarName);
	void OnTouched(class ACar_TA* Toucher);
};


// Class TAGame.SeqEvent_TutorialStarted_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_TutorialStarted_TA : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_TutorialStarted_TA");
		return ptr;
	}

};


// Class TAGame.Tutorial_Boost_TA
// 0x0000 (0x0168 - 0x0168)
class UTutorial_Boost_TA : public UTutorial_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Tutorial_Boost_TA");
		return ptr;
	}


	void OnActionNameToDetectReleased();
};


// Class TAGame.Tutorial_Dodge_TA
// 0x000C (0x0174 - 0x0168)
class UTutorial_Dodge_TA : public UTutorial_TA
{
public:
	unsigned long                                      bDidDodge : 1;                                    		// 0x0168(0x0004)
	unsigned long                                      bBallHitGoal : 1;                                 		// 0x0168(0x0004)
	unsigned long                                      bCheckFailOnLand : 1;                             		// 0x0168(0x0004)
	int                                                Dodges;                                           		// 0x016C(0x0004)
	int                                                MaxDodges;                                        		// 0x0170(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Tutorial_Dodge_TA");
		return ptr;
	}


	void CheckBallHitGoal();
	void HandleHitGoal(class ABall_TA* Ball, class UGoal_TA* Goal);
	void HandleCarTouch(class ABall_TA* Ball, class ACar_TA* HitCar, TEnumAsByte<enum class EBallHitType> HitType);
	void HandleCarLanded(class ACar_TA* Car);
	void OnDodged();
	void HandleDodgeActivationChanged(class ACarComponent_TA* CarComponent);
	void HandleVehicleSetup(class AGameEvent_Tutorial_TA* InGameEvent, class ACar_TA* Car);
};


// Class TAGame.Tutorial_HandBrake_TA
// 0x0018 (0x0180 - 0x0168)
class UTutorial_HandBrake_TA : public UTutorial_TA
{
public:
	unsigned long                                      bCheckHandbrakeDir : 1;                           		// 0x0168(0x0004)
	unsigned long                                      bTriggerTouched : 1;                              		// 0x0168(0x0004)
	struct FVector                                     HandbrakeStartDir;                                		// 0x016C(0x000C)
	float                                              MinHandbrakeDotAngleForStart;                     		// 0x0178(0x0004)
	float                                              MinHandbrakeDotAngleForComplete;                  		// 0x017C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Tutorial_HandBrake_TA");
		return ptr;
	}


	bool HasGoodStartRotation();
	void OnActionNameToDetectReleased();
	void OnActionNameToDetectPressed();
	void CheckActionNameToDetect();
	void NotifyEventOnTutorial(const struct FString& EventName);
};


// Class TAGame.VehiclePickup_BoostModifier_LaunchPad_TA
// 0x0004 (0x004C - 0x0048)
class UVehiclePickup_BoostModifier_LaunchPad_TA : public UVehiclePickup_BoostModifier_TA
{
public:
	float                                              LaunchImpulse;                                    		// 0x0048(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehiclePickup_BoostModifier_LaunchPad_TA");
		return ptr;
	}


	void PickupEffect(class ACar_TA* Car);
	bool CanPickup(class ACar_TA* Car);
};


// Class TAGame.VehiclePickup_BoostModifier_Mine_TA
// 0x0008 (0x0050 - 0x0048)
class UVehiclePickup_BoostModifier_Mine_TA : public UVehiclePickup_BoostModifier_TA
{
public:
	unsigned long                                      bPickupEffectIfFull : 1;                          		// 0x0048(0x0004) (CPF_Edit)
	unsigned long                                      bPickupEffectIfEmpty : 1;                         		// 0x0048(0x0004) (CPF_Edit)
	unsigned long                                      bDrain : 1;                                       		// 0x0048(0x0004) (CPF_Edit)
	unsigned long                                      bPickupEffectIfOpposingHalf : 1;                  		// 0x0048(0x0004) (CPF_Edit)
	int                                                PickupEffectIfWinningBy;                          		// 0x004C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehiclePickup_BoostModifier_Mine_TA");
		return ptr;
	}


	void PickupEffect(class ACar_TA* Car);
	bool CarOnOpposingHalf(class ACar_TA* Car);
	bool CanPickup(class ACar_TA* Car);
};


// Class TAGame.VehiclePickup_BoostModifier_Teleporter_TA
// 0x0000 (0x0048 - 0x0048)
class UVehiclePickup_BoostModifier_Teleporter_TA : public UVehiclePickup_BoostModifier_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehiclePickup_BoostModifier_Teleporter_TA");
		return ptr;
	}


	void PickupEffect(class ACar_TA* Car);
	void TeleportCar(class ACar_TA* Car);
	bool CanPickup(class ACar_TA* Car);
};


// Class TAGame.ZCheatManager
// 0x0000 (0x0054 - 0x0054)
class UZCheatManager : public UCheatManager
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ZCheatManager");
		return ptr;
	}


	void SetLocalGravity();
};


// Class TAGame.ZGameInfo
// 0x0000 (0x03BC - 0x03BC)
class AZGameInfo : public AGameInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ZGameInfo");
		return ptr;
	}

};


// Class TAGame.ZPlayerController
// 0x000C (0x062C - 0x0620)
class AZPlayerController : public APlayerController_X
{
public:
	struct FRotator                                    ViewOffset;                                       		// 0x0620(0x000C) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ZPlayerController");
		return ptr;
	}


	void UpdateRotation(float DeltaTime);
};


// Class TAGame.SplineLoftActorSpawnable_TA
// 0x0000 (0x0284 - 0x0284)
class ASplineLoftActorSpawnable_TA : public ASplineLoftActorMovable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SplineLoftActorSpawnable_TA");
		return ptr;
	}

};


// Class TAGame.FXActor_BreakoutPlatform_TA
// 0x005C (0x02A8 - 0x024C)
class AFXActor_BreakoutPlatform_TA : public AFXActor_TA
{
public:
	class UMaterialInterface*                          PlatformMaterial;                                 		// 0x024C(0x0004) (CPF_Edit)
	class UMaterialInterface*                          RaysMaterial;                                     		// 0x0250(0x0004) (CPF_Edit)
	struct FName                                       LocationParam;                                    		// 0x0254(0x0008) (CPF_Edit)
	TArray<struct FPlatformParam>                      DamagedParams;                                    		// 0x025C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FPlatformParam>                      BrokenParams;                                     		// 0x0268(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class UAkSoundCue*                                 DamageSFX;                                        		// 0x0274(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 DirectBreakSFX;                                   		// 0x0278(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 IndirectBreakSFX;                                 		// 0x027C(0x0004) (CPF_Edit)
	float                                              DamageDistanceSpeed;                              		// 0x0280(0x0004) (CPF_Edit)
	class UFXActorEvent_X*                             DamagedState;                                     		// 0x0284(0x0004)
	class UFXActorEvent_X*                             BrokenState;                                      		// 0x0288(0x0004)
	class ABreakOutActor_Platform_TA*                  BreakoutPlatform;                                 		// 0x028C(0x0004) (CPF_Transient)
	class UMaterialInstanceConstant*                   MIC;                                              		// 0x0290(0x0004) (CPF_Transient)
	class UMaterialInstanceConstant*                   RaysMIC;                                          		// 0x0294(0x0004) (CPF_Transient)
	unsigned char                                      DamageState;                                      		// 0x0298(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0299(0x0003) MISSED OFFSET
	float                                              DamageTime;                                       		// 0x029C(0x0004) (CPF_Transient)
	float                                              BrokenTime;                                       		// 0x02A0(0x0004) (CPF_Transient)
	float                                              RemainingTime;                                    		// 0x02A4(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_BreakoutPlatform_TA");
		return ptr;
	}


	void SetTeamColor(const struct FLinearColor& TeamColor);
	void PlayDestroyIndirectSFX();
	void PlayDestroyDirectSFX();
	void PlayDamageSFX();
	void UpdateParamsAtTime(TArray<struct FPlatformParam> Params, float Time);
	void UpdateDamageParams(float DeltaTime);
	void TickFX(float DeltaTime);
	void HandleDamageStateChanged(class ABreakOutActor_Platform_TA* Platform, const struct FBreakoutDamageState& InState);
	void SetAttachmentActor(class AActor* AttachToActor);
};


// Class TAGame.WheelSkelMeshMAT_TA
// 0x0000 (0x063C - 0x063C)
class UWheelSkelMeshMAT_TA : public USkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.WheelSkelMeshMAT_TA");
		return ptr;
	}

};


// Class TAGame.WheelStaticMeshMAT_TA
// 0x0000 (0x026C - 0x026C)
class UWheelStaticMeshMAT_TA : public UStaticMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.WheelStaticMeshMAT_TA");
		return ptr;
	}

};


// Class TAGame.SpawnPointGroup_TA
// 0x0034 (0x0070 - 0x003C)
class USpawnPointGroup_TA : public UObject
{
public:
	TArray<struct FVector>                             SpawnOffset;                                      		// 0x003C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FRotator>                            SpawnFacing;                                      		// 0x0048(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<class AActor*>                              SpawnPoints;                                      		// 0x0054(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class APRI_TA*>                             SpotPRI;                                          		// 0x0060(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	int                                                MaxSpots;                                         		// 0x006C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpawnPointGroup_TA");
		return ptr;
	}


	void RemoveFromSpawnPoints(class AController* ForPlayer);
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
	bool IsPointAvailable(int PointIdx);
	int GetPointId(class AActor* Point);
	bool TryAddToGroupAtPoint(class AController* Car, int PointIdx);
	bool TryAddToGroup(class AController* Car);
	void SetupPoints(class AGameEvent_TA* GameEvent, struct FVector* Center, struct FRotator* Orientation);
};


// Class TAGame.AimControl_TA
// 0x0274 (0x02B0 - 0x003C)
class UAimControl_TA : public UObject
{
public:
	int                                                LevelCap;                                         		// 0x003C(0x0004)
	struct FAimAssistSettings                          GroundBoost;                                      		// 0x0040(0x0034)
	struct FAimAssistSettings                          BoostSteer;                                       		// 0x0074(0x0034)
	struct FAimAssistSettings                          Throttle;                                         		// 0x00A8(0x0034)
	struct FAimAssistSettings                          Steer;                                            		// 0x00DC(0x0034)
	struct FAimAssistSettings                          Jump;                                             		// 0x0110(0x0034)
	struct FAimAssistSettings                          Dodge;                                            		// 0x0144(0x0034)
	struct FAimAssistSettings                          AirTilt;                                          		// 0x0178(0x0034)
	struct FAimAssistSettings                          Handbrake;                                        		// 0x01AC(0x0034)
	struct FAimAssistSettings                          Aerial;                                           		// 0x01E0(0x0034)
	struct FAimAssistSettings                          AerialJump;                                       		// 0x0214(0x0034)
	struct FAimAssistSettings                          AerialBoost;                                      		// 0x0248(0x0034)
	struct FAimAssistSettings                          FlipOver;                                         		// 0x027C(0x0034)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AimControl_TA");
		return ptr;
	}

};


// Class TAGame.Save_TA
// 0x0030 (0x006C - 0x003C)
class USave_TA : public UObject
{
public:
	class USaveObjectManager_TA*                       SaveObjectManager;                                		// 0x003C(0x0004) (CPF_Transient)
	int                                                Version;                                          		// 0x0040(0x0004)
	struct FString                                     DirectoryPath;                                    		// 0x0044(0x000C) (CPF_NeedCtorLink)
	struct FString                                     SaveType;                                         		// 0x0050(0x000C) (CPF_NeedCtorLink)
	struct FString                                     SaveExt;                                          		// 0x005C(0x000C) (CPF_NeedCtorLink)
	unsigned long                                      bExactFileMatch : 1;                              		// 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Save_TA");
		return ptr;
	}


	void CancelGetHeaders(const struct FScriptDelegate& Callback);
	void GetHeaders(class ULocalPlayer_TA* Player, const struct FString& FolderPath, const struct FString& Pattern, const struct FScriptDelegate& Callback);
	struct FString GetFullSavePath(class ULocalPlayer_TA* Player, const struct FString& SaveName);
	struct FString GetFullSaveDirectory(class ULocalPlayer_TA* Player);
	bool Delete(class ULocalPlayer_TA* Player, const struct FString& SavePath);
	void Save(class ULocalPlayer_TA* Player, const struct FString& SaveName);
	void LoadAsync(class ULocalPlayer_TA* Player, const struct FString& SaveFileName, const struct FScriptDelegate& Callback);
	bool Load(class ULocalPlayer_TA* Player, const struct FString& SaveFileName);
	struct FString GetUniqueSaveKey(class ULocalPlayer_TA* Player);
	void Init();
};


// Class TAGame.SaveData_GameEditor_TA
// 0x0000 (0x006C - 0x006C)
class USaveData_GameEditor_TA : public USave_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveData_GameEditor_TA");
		return ptr;
	}

};


// Class TAGame.GameEditor_Switch_TA
// 0x0000 (0x0234 - 0x0234)
class AGameEditor_Switch_TA : public AGameEditor_Trigger_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEditor_Switch_TA");
		return ptr;
	}

};


// Class TAGame.DynamicSpawnPointMesh_TA
// 0x0000 (0x0220 - 0x0220)
class ADynamicSpawnPointMesh_TA : public AGameEditor_Actor_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DynamicSpawnPointMesh_TA");
		return ptr;
	}

};


// Class TAGame.GameEditor_Pawn_TA
// 0x0000 (0x04CC - 0x04CC)
class AGameEditor_Pawn_TA : public APawn_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEditor_Pawn_TA");
		return ptr;
	}

};


// Class TAGame.SaveData_GameEditor_Training_TA
// 0x0040 (0x00AC - 0x006C)
class USaveData_GameEditor_Training_TA : public USaveData_GameEditor_TA
{
public:
	struct FString                                     LoadedSaveName;                                   		// 0x006C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class UTrainingEditorData_TA*                      TrainingData;                                     		// 0x0078(0x0004)
	int                                                PlayerTeamNumber;                                 		// 0x007C(0x0004)
	unsigned long                                      bUnowned : 1;                                     		// 0x0080(0x0004)
	int                                                ShotsCompleted;                                   		// 0x0084(0x0004)
	struct FString                                     FavoritesFolderPath;                              		// 0x0088(0x000C) (CPF_Const, CPF_NeedCtorLink)
	struct FString                                     MyTrainingFolderPath;                             		// 0x0094(0x000C) (CPF_Const, CPF_NeedCtorLink)
	struct FString                                     DownloadedFolderPath;                             		// 0x00A0(0x000C) (CPF_Const, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveData_GameEditor_Training_TA");
		return ptr;
	}


	struct FString GetTrainingFullPath(class ULocalPlayer_TA* Player, TEnumAsByte<enum class ETrainingSaveType> InSaveType);
	struct FString GetTrainingPath(TEnumAsByte<enum class ETrainingSaveType> InSaveType);
	struct FString GetTrainingFolder(TEnumAsByte<enum class ETrainingSaveType> InSaveType);
	TEnumAsByte<enum class ETrainingSaveType> STATIC_GetTrainingSaveType(bool bOwned, bool bFavorited);
	struct FString GetFullSavePath(class ULocalPlayer_TA* Player, const struct FString& SaveName);
	struct FString GetFullSaveDirectory(class ULocalPlayer_TA* Player);
	void Init();
};


// Class TAGame.TrainingEditorData_TA
// 0x00A8 (0x00E4 - 0x003C)
class UTrainingEditorData_TA : public UObject
{
public:
	struct FGuid                                       TM_Guid;                                          		// 0x003C(0x0010)
	struct FString                                     Code;                                             		// 0x004C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     TM_Name;                                          		// 0x0058(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TEnumAsByte<enum class ETrainingType>              Type;                                             		// 0x0064(0x0001) (CPF_DataBinding)
	TEnumAsByte<enum class EDifficulty>                Difficulty;                                       		// 0x0065(0x0001) (CPF_DataBinding)
	unsigned char                                      UnknownData00[0x2];                               		// 0x0066(0x0002) MISSED OFFSET
	struct FString                                     CreatorName;                                      		// 0x0068(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     Description;                                      		// 0x0074(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<int>                                        Tags;                                             		// 0x0080(0x000C) (CPF_NeedCtorLink)
	struct FName                                       MapName;                                          		// 0x008C(0x0008) (CPF_DataBinding)
	int                                                NumRounds;                                        		// 0x0094(0x0004) (CPF_Transient, CPF_DataBinding)
	unsigned char                                      UnknownData01[0x8];                               		// 0x0098(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TrainingEditorData_TA.CreatedAt
	unsigned char                                      UnknownData02[0x8];                               		// 0x00A0(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TrainingEditorData_TA.UpdatedAt
	struct FUniqueNetId                                CreatorPlayerID;                                  		// 0x00A8(0x0030)
	TArray<struct FEditorRoundData>                    Rounds;                                           		// 0x00D8(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TrainingEditorData_TA");
		return ptr;
	}


	void Init();
};


// Class TAGame.TrainingEditorMetrics_TA
// 0x0000 (0x0054 - 0x0054)
class UTrainingEditorMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TrainingEditorMetrics_TA");
		return ptr;
	}


	void TrainingShotComplete(const struct FGuid& Id, int Index, bool bSuccess, int ShotAttempt);
	void TrainingShotAttempt(const struct FGuid& Id, int Index, int ShotAttempt);
	void TrainingSetComplete(const struct FGuid& Id);
	void TrainingSetExit(const struct FGuid& Id);
	void TrainingSetEnter(const struct FGuid& Id);
	void TrainingSetDelete(const struct FGuid& Id);
	void TrainingSetDownload(const struct FGuid& Id);
	void TrainingEditorExit(const struct FGuid& Id);
	void TrainingEditorEnter(const struct FGuid& Id);
	void TrainingSetSubmitted(const struct FGuid& Id, const struct FString& TrainingType, int Difficulty, int TotalRounds, const struct FString& UserTags);
	void TrainingSetCreate(const struct FGuid& Id, const struct FString& TrainingType, int Difficulty, const struct FString& UserTags);
};


// Class TAGame.RPC_ProductsTradeIn_TA
// 0x0058 (0x00EC - 0x0094)
class URPC_ProductsTradeIn_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	unsigned char                                      UnknownData00[0xC];                               		// 0x00C4(0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_ProductsTradeIn_TA.ProductInstances
	TEnumAsByte<enum class EGameVersion>               GameVersion;                                      		// 0x00D0(0x0001)
	unsigned char                                      UnknownData01[0x3];                               		// 0x00D1(0x0003) MISSED OFFSET
	TArray<struct FOnlineProductData>                  Drops;                                            		// 0x00D4(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   Products;                                         		// 0x00E0(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsTradeIn_TA");
		return ptr;
	}


	void OnComplete();
	class URPC_ProductsTradeIn_TA* SetGameVersion(TEnumAsByte<enum class EGameVersion> InGameVersion);
	class URPC_ProductsTradeIn_TA* SetProducts();
	class URPC_ProductsTradeIn_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GFxData_TradeLobby_TA__GetRemoteProductOfferings__7FE9CC544F60C96D7D0226A12798696F
// 0x0000 (0x003C - 0x003C)
class UGFxData_TradeLobby_TA__GetRemoteProductOfferings__7FE9CC544F60C96D7D0226A12798696F : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TradeLobby_TA__GetRemoteProductOfferings__7FE9CC544F60C96D7D0226A12798696F");
		return ptr;
	}


	void LambdaCallback(class UOnlineProduct_TA* Offering);
	class UGFxData_TradeLobby_TA__GetRemoteProductOfferings__7FE9CC544F60C96D7D0226A12798696F* STATIC_StaticConstruct(class UGFxData_TradeLobby_TA* InOuter);
};


// Class TAGame.GFxData_TradeLobby_TA__GetLocalProductOfferings__557823A94BF3D165438D669BBE86D363
// 0x0000 (0x003C - 0x003C)
class UGFxData_TradeLobby_TA__GetLocalProductOfferings__557823A94BF3D165438D669BBE86D363 : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TradeLobby_TA__GetLocalProductOfferings__557823A94BF3D165438D669BBE86D363");
		return ptr;
	}


	void LambdaCallback(class UOnlineProduct_TA* Offering);
	class UGFxData_TradeLobby_TA__GetLocalProductOfferings__557823A94BF3D165438D669BBE86D363* STATIC_StaticConstruct(class UGFxData_TradeLobby_TA* InOuter);
};


// Class TAGame.ProductStat_Baskets_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Baskets_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Baskets_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_TurtleGoals_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_TurtleGoals_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_TurtleGoals_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_BicycleGoals_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_BicycleGoals_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_BicycleGoals_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_AerialGoals_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_AerialGoals_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_AerialGoals_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_Assists_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Assists_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Assists_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_BackwardsGoals_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_BackwardsGoals_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_BackwardsGoals_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_Centers_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Centers_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Centers_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_Clears_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Clears_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Clears_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_EpicSaves_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_EpicSaves_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_EpicSaves_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_Juggles_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_Juggles_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Juggles_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_LongGoals_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_LongGoals_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_LongGoals_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_MVPs_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_MVPs_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_MVPs_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_ShotsOnGoal_TA
// 0x0000 (0x006C - 0x006C)
class UProductStat_ShotsOnGoal_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_ShotsOnGoal_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.GFxData_ProductAttribute_ContainerKey_TA
// 0x0000 (0x0060 - 0x0060)
class UGFxData_ProductAttribute_ContainerKey_TA : public UGFxData_ProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_ContainerKey_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_ProductAttribute_Container_TA
// 0x0000 (0x0060 - 0x0060)
class UGFxData_ProductAttribute_Container_TA : public UGFxData_ProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Container_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_ProductAttribute_Painted_TA
// 0x0010 (0x0070 - 0x0060)
class UGFxData_ProductAttribute_Painted_TA : public UGFxData_ProductAttribute_TA
{
public:
	int                                                ProductPaintColor;                                		// 0x0060(0x0004) (CPF_DataBinding)
	struct FString                                     ProductPaintColorName;                            		// 0x0064(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Painted_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_Painted_TA* Attribute);
};


// Class TAGame.GFxData_ProductAttribute_Level_TA
// 0x0004 (0x0064 - 0x0060)
class UGFxData_ProductAttribute_Level_TA : public UGFxData_ProductAttribute_TA
{
public:
	unsigned long                                      bProductUpgradable : 1;                           		// 0x0060(0x0004) (CPF_DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Level_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_Level_TA* Attribute);
};


// Class TAGame.GFxData_ProductAttribute_Schematic_TA
// 0x0000 (0x0060 - 0x0060)
class UGFxData_ProductAttribute_Schematic_TA : public UGFxData_ProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Schematic_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_ProductAttribute_Certified_TA
// 0x000C (0x006C - 0x0060)
class UGFxData_ProductAttribute_Certified_TA : public UGFxData_ProductAttribute_TA
{
public:
	struct FString                                     CertifiedStatLabel;                               		// 0x0060(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Certified_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_Certified_TA* Attribute);
};


// Class TAGame.GFxData_ProductAttribute_ProductLink_TA
// 0x0008 (0x0068 - 0x0060)
class UGFxData_ProductAttribute_ProductLink_TA : public UGFxData_ProductAttribute_TA
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_ProductAttribute_ProductLink_TA.ProductID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_ProductLink_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_ProductLink_TA* Attribute);
};


// Class TAGame.RPC_MicroTransactions_ClaimEntitlements_TA
// 0x0048 (0x00DC - 0x0094)
class URPC_MicroTransactions_ClaimEntitlements_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	struct FString                                     AuthCode;                                         		// 0x00C4(0x000C) (CPF_NeedCtorLink)
	TArray<struct FOnlineProductData>                  Products;                                         		// 0x00D0(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_MicroTransactions_ClaimEntitlements_TA");
		return ptr;
	}


	class URPC_MicroTransactions_ClaimEntitlements_TA* SetAuthCode(const struct FString& InAuthCode);
	class URPC_MicroTransactions_ClaimEntitlements_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GFxData_MTXGarage_TA
// 0x005C (0x00B0 - 0x0054)
class UGFxData_MTXGarage_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FMTXPurchaseInfo>                    CatalogItems;                                     		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FMTCatalogInfo>                      CatalogProducts;                                  		// 0x0060(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FCartInfo>                           CartItems;                                        		// 0x006C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     CartTotal;                                        		// 0x0078(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     Currency;                                         		// 0x0084(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	unsigned long                                      TransactionInProgress : 1;                        		// 0x0090(0x0004) (CPF_Transient)
	unsigned long                                      bCatalogReady : 1;                                		// 0x0090(0x0004)
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0094(0x0004) (CPF_Transient)
	int                                                BlackMarketSkinProductID;                         		// 0x0098(0x0004)
	float                                              CatalogExpirationTime;                            		// 0x009C(0x0004) (CPF_Transient)
	float                                              CatalogCacheDuration;                             		// 0x00A0(0x0004)
	float                                              PurchaseTimeoutTime;                              		// 0x00A4(0x0004) (CPF_Const)
	float                                              GetPriceTimeoutTime;                              		// 0x00A8(0x0004) (CPF_Const)
	class UMtxConfig_TA*                               MtxConfig;                                        		// 0x00AC(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MTXGarage_TA");
		return ptr;
	}


	void HandleMTXError(class UError_X* Error);
	void ProductRevealExit();
	void OnRevealFinished(int SlotIndex);
	void ProductReveal();
	void OnKeyPurchase();
	void HandlePsynetConfirmPurchase(class URPC_MicroTransactions_FinalizePurchase_TA* RPC);
	void OnPlayerConfirmPurchase(bool bAuthorized);
	void HandleStartPurchase(class URPC_MicroTransactions_StartPurchase_TA* RPC);
	void MTXPurchaseEnd();
	void PurchaseTimeout();
	bool IsUserAbleToPurchase();
	void CheckOut();
	TArray<struct FMTCartItem> MapCartToCatalog();
	void UpdateCartTotal();
	void AddToCart(int CatalogID, int Count);
	void RemoveFromCart(int CatalogID, int Count);
	void ClearCart();
	void OnGetCatalog(bool bSuccess);
	void HandleGetPriceInfoComplete(const struct FName& ProductName, const struct FString& Price, const struct FString& DiscountPrice, int DiscountPercentage);
	void HandleGetPriceTimeout();
	void UpdatePriceInfo(TArray<struct FMTCatalogInfo> PriceRequests);
	void HandleGetCatalogResponse(class URPC_MicroTransactions_GetCatalog_TA* RPC);
	void GetCatalog();
	void OnUnlockContainer(int ProductID);
	void RevealContainerUnlocks(TArray<struct FOnlineProductData>* Drops);
	void HandleUnlockContainerResponse(class URPC_MicroTransactions_UnlockContainer_TA* RPC);
	void UnlockContainer();
	int GetKeyInstanceId(int KeyProductID);
	void GetTradeHoldSortedProductsByID(int BaseProductID, bool bIsAscending);
	TArray<int> GetUniqueKeyList(int ProductID);
	void OnKeyListUpdated();
	bool CanUnlockContainer();
	bool CanKeyUnlockContainer(int KeyProductID, int ContainerProductID);
	bool CanStartTransaction();
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.OnlinePlayerAuthentication_TA
// 0x0010 (0x0160 - 0x0150)
class UOnlinePlayerAuthentication_TA : public UOnlinePlayerAuthentication_X
{
public:
	struct FScriptDelegate                             __EventMTXAuthCodeResponse__Delegate;             		// 0x0150(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0150(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlinePlayerAuthentication_TA");
		return ptr;
	}


	void HandleReceivedMTXAuthorizationCode(bool bSuccess, const struct FString& AuthorizationCode, const struct FString& EncryptedTicket, int IssuerID);
	bool RequestMTXAuthCode();
	bool RequiresMTXAuthorizationCode();
	int GetGameVersion();
	struct FString GetBuildRegion();
	void EventMTXAuthCodeResponse(bool bSuccess, const struct FString& OutAuthCode);
};


// Class TAGame.OnlineGameDLC_TA
// 0x0014 (0x00A4 - 0x0090)
class UOnlineGameDLC_TA : public UOnlineGameDLC_X
{
public:
	class URPC_GetDLC_TA*                              LatestDLC;                                        		// 0x0090(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventUpdated__Delegate;                         		// 0x0094(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x0094(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameDLC_TA");
		return ptr;
	}


	bool GetDLCIsNew(int I);
	struct FName GetDLCName(int I);
	int GetNumDLC();
	void HandleDLCReceived(class URPC_GetDLC_TA* InDLC);
	void Sync();
	void NotifyWhenReleased(const struct FScriptDelegate& Callback);
	void OnInit();
	void EventUpdated(class UOnlineGameDLC_X* DLC);
};


// Class TAGame.SeqEvent_MTXGarageReveal_TA
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_MTXGarageReveal_TA : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_MTXGarageReveal_TA");
		return ptr;
	}

};


// Class TAGame.RPC_MicroTransactions_FinalizePurchase_TA
// 0x0048 (0x00DC - 0x0094)
class URPC_MicroTransactions_FinalizePurchase_TA : public URPC_TA
{
public:
	unsigned char                                      UnknownData00[0x8];                               		// 0x0094(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_MicroTransactions_FinalizePurchase_TA.OrderId
	unsigned long                                      Authorized : 1;                                   		// 0x009C(0x0004)
	struct FUniqueNetId                                PlayerID;                                         		// 0x00A0(0x0030)
	TArray<struct FOnlineProductData>                  Products;                                         		// 0x00D0(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_MicroTransactions_FinalizePurchase_TA");
		return ptr;
	}


	class URPC_MicroTransactions_FinalizePurchase_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	class URPC_MicroTransactions_FinalizePurchase_TA* SetAuthorized(bool bAuthorized);
	class URPC_MicroTransactions_FinalizePurchase_TA* SetOrderID();
};


// Class TAGame.RPC_MicroTransactions_StartPurchase_TA
// 0x0048 (0x00DC - 0x0094)
class URPC_MicroTransactions_StartPurchase_TA : public URPC_TA
{
public:
	struct FString                                     Language;                                         		// 0x0094(0x000C) (CPF_NeedCtorLink)
	struct FUniqueNetId                                PlayerID;                                         		// 0x00A0(0x0030)
	TArray<struct FMTCartItem>                         CartItems;                                        		// 0x00D0(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_MicroTransactions_StartPurchase_TA");
		return ptr;
	}


	class URPC_MicroTransactions_StartPurchase_TA* SetLanguage(const struct FString& InLanguage);
	class URPC_MicroTransactions_StartPurchase_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	class URPC_MicroTransactions_StartPurchase_TA* SetCartItems(TArray<struct FMTCartItem> InCartItems);
};


// Class TAGame.RPC_MicroTransactions_GetCatalog_TA
// 0x0048 (0x00DC - 0x0094)
class URPC_MicroTransactions_GetCatalog_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	TArray<struct FMTCatalogInfo>                      MTXProducts;                                      		// 0x00C4(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     Currency;                                         		// 0x00D0(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_MicroTransactions_GetCatalog_TA");
		return ptr;
	}


	class URPC_MicroTransactions_GetCatalog_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_MicroTransactions_UnlockContainer_TA
// 0x0050 (0x00E4 - 0x0094)
class URPC_MicroTransactions_UnlockContainer_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	unsigned char                                      UnknownData00[0x8];                               		// 0x00C4(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_MicroTransactions_UnlockContainer_TA.InstanceID
	unsigned char                                      UnknownData01[0x8];                               		// 0x00CC(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_MicroTransactions_UnlockContainer_TA.KeyInstanceID
	int                                                GameVersion;                                      		// 0x00D4(0x0004)
	TArray<struct FOnlineProductData>                  Drops;                                            		// 0x00D8(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_MicroTransactions_UnlockContainer_TA");
		return ptr;
	}


	class URPC_MicroTransactions_UnlockContainer_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	class URPC_MicroTransactions_UnlockContainer_TA* SetGameVersion(int InGameVersion);
	class URPC_MicroTransactions_UnlockContainer_TA* SetKeyID();
	class URPC_MicroTransactions_UnlockContainer_TA* SetContainerID();
};


// Class TAGame.RPC_GetDLC_TA
// 0x000C (0x00A0 - 0x0094)
class URPC_GetDLC_TA : public URPC_TA
{
public:
	TArray<struct FDLCInfo>                            DLC;                                              		// 0x0094(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_GetDLC_TA");
		return ptr;
	}

};


// Class TAGame.AchievementIcons_TA
// 0x0018 (0x0054 - 0x003C)
class UAchievementIcons_TA : public UObject
{
public:
	TArray<class UTexture*>                            LockedIcons;                                      		// 0x003C(0x000C) (CPF_NeedCtorLink)
	TArray<class UTexture*>                            UnlockedIcons;                                    		// 0x0048(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AchievementIcons_TA");
		return ptr;
	}

};


// Class TAGame.ActorFactorySkeletalMeshactorMat_Products_TA
// 0x0000 (0x0078 - 0x0078)
class UActorFactorySkeletalMeshactorMat_Products_TA : public UActorFactorySkeletalMeshMAT
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ActorFactorySkeletalMeshactorMat_Products_TA");
		return ptr;
	}

};


// Class TAGame.AIController_Breakout_TA
// 0x0010 (0x05C8 - 0x05B8)
class AAIController_Breakout_TA : public AAIController_Soccar_TA
{
public:
	struct FVector                                     ClosestEnemyGoalLocation;                         		// 0x05B8(0x000C)
	int                                                DefaultSoccarSize;                                		// 0x05C4(0x0004) (CPF_Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AIController_Breakout_TA");
		return ptr;
	}


	void GetGoalProxy(class UBTProxyType* Type, const struct FAICachedGoalInfo& GoalInfo, struct FBTProxyData* OutData);
	void GetBallProxy(struct FBTProxyData* OutData);
	void Init(class AGameEvent_TA* InGameEvent);
};


// Class TAGame.AnimNotify_PlayAKSound_TA
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_PlayAKSound_TA : public UAnimNotify_Scripted
{
public:
	class UAkSoundCue*                                 SFX_SoundCue;                                     		// 0x0040(0x0004) (CPF_Edit)
	unsigned long                                      bPlayInReverse : 1;                               		// 0x0044(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AnimNotify_PlayAKSound_TA");
		return ptr;
	}


	void Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};


// Class TAGame.AnimNotify_TriggerTurntableEvent_TA
// 0x000C (0x004C - 0x0040)
class UAnimNotify_TriggerTurntableEvent_TA : public UAnimNotify_Scripted
{
public:
	struct FName                                       TurntableEventName;                               		// 0x0040(0x0008) (CPF_Edit)
	unsigned long                                      bPlayInReverse : 1;                               		// 0x0048(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AnimNotify_TriggerTurntableEvent_TA");
		return ptr;
	}


	void Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};


// Class TAGame.BeamTraceComponent_TA
// 0x0028 (0x0094 - 0x006C)
class UBeamTraceComponent_TA : public UActorComponent_X
{
public:
	TArray<class UParticleSystemComponent*>            BeamSystems;                                      		// 0x006C(0x000C) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_NeedCtorLink, CPF_EditInline)
	float                                              TraceDistance;                                    		// 0x0078(0x0004) (CPF_Edit)
	float                                              MinRetraceRate;                                   		// 0x007C(0x0004) (CPF_Edit)
	float                                              MaxRetraceRate;                                   		// 0x0080(0x0004) (CPF_Edit)
	TArray<struct FBeamTraceProps>                     Beams;                                            		// 0x0084(0x000C) (CPF_Transient, CPF_Component, CPF_NeedCtorLink)
	class AFXActor_X*                                  FXOwner;                                          		// 0x0090(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BeamTraceComponent_TA");
		return ptr;
	}


	void Tick(float DeltaTime);
	void Detached();
	void Attached();
};


// Class TAGame.BreakoutFloor_TA
// 0x0000 (0x0204 - 0x0204)
class ABreakoutFloor_TA : public AStaticMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BreakoutFloor_TA");
		return ptr;
	}

};


// Class TAGame.BTC_GameInfoType
// 0x0010 (0x006C - 0x005C)
class UBTC_GameInfoType : public UBTCondition
{
public:
	TArray<class UClass*>                              ValidGameInfoClasses;                             		// 0x005C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class AGameInfo_TA*                                CurrentGameInfo;                                  		// 0x0068(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_GameInfoType");
		return ptr;
	}


	bool GetResult();
	void OnInit();
};


// Class TAGame.Camera_Edit_TA
// 0x000C (0x0658 - 0x064C)
class ACamera_Edit_TA : public ACamera_TA
{
public:
	struct FName                                       CameraMode;                                       		// 0x064C(0x0008)
	class UCameraState_Edit_TA*                        CurrentCameraState;                               		// 0x0654(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Camera_Edit_TA");
		return ptr;
	}


	void UpdateCameraState();
	void UpdateCamera(float DeltaTime);
	void InstanceCameraStates();
};


// Class TAGame.CameraState_Edit_TA
// 0x0004 (0x006C - 0x0068)
class UCameraState_Edit_TA : public UCameraState_TA
{
public:
	unsigned long                                      bLocalMovement : 1;                               		// 0x0068(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_Edit_TA");
		return ptr;
	}


	void UpdateFlyPOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void BeginCameraState();
	class UCameraState_X* GetProxyCameraState();
	bool AllowSwivel();
};


// Class TAGame.Camera_GameEditor_TA
// 0x000C (0x0658 - 0x064C)
class ACamera_GameEditor_TA : public ACamera_TA
{
public:
	struct FName                                       CameraMode;                                       		// 0x064C(0x0008)
	class UCameraState_GameEditor_TA*                  CurrentCameraState;                               		// 0x0654(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Camera_GameEditor_TA");
		return ptr;
	}


	void UpdateCameraState();
	void UpdateCamera(float DeltaTime);
	void InstanceCameraStates();
};


// Class TAGame.CameraState_GameEditor_TA
// 0x0000 (0x0068 - 0x0068)
class UCameraState_GameEditor_TA : public UCameraState_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_GameEditor_TA");
		return ptr;
	}


	void UpdateFlyPOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void BeginCameraState();
	class UCameraState_X* GetProxyCameraState();
	bool AllowSwivel();
};


// Class TAGame.CameraState_BreakoutLiveReplay_TA
// 0x0004 (0x00D0 - 0x00CC)
class UCameraState_BreakoutLiveReplay_TA : public UCameraState_LiveReplay_TA
{
public:
	float                                              GoalVerticalOffset;                               		// 0x00CC(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_BreakoutLiveReplay_TA");
		return ptr;
	}


	struct FVector GetCameraBaseLocation(const struct FVector& CameraFocus);
};


// Class TAGame.CameraState_CustomFocus_TA
// 0x0018 (0x0158 - 0x0140)
class UCameraState_CustomFocus_TA : public UCameraState_Car_TA
{
public:
	float                                              RotationRate;                                     		// 0x0140(0x0004) (CPF_Edit)
	float                                              PitchScale;                                       		// 0x0144(0x0004) (CPF_Edit)
	float                                              PitchFocusZFactor;                                		// 0x0148(0x0004) (CPF_Edit)
	float                                              PitchExtentMin;                                   		// 0x014C(0x0004) (CPF_Edit)
	float                                              PitchExtentMax;                                   		// 0x0150(0x0004) (CPF_Edit)
	class ACustomFocusTarget_TA*                       FocusTarget;                                      		// 0x0154(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_CustomFocus_TA");
		return ptr;
	}


	void UpdateFocus(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateFocusWorldOffset(float DeltaTime);
	void UpdateAirAndGroundCamera(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateRotationModifiers(float DeltaTime, struct FCameraOrientation* OutPOV);
	bool ShouldExecute();
	void Init(class ACamera_X* InCam);
};


// Class TAGame.CustomFocusTarget_TA
// 0x0000 (0x01EC - 0x01EC)
class ACustomFocusTarget_TA : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CustomFocusTarget_TA");
		return ptr;
	}


	struct FVector GetFocusLocation(class ACar_TA* ForCar);
};


// Class TAGame.CameraState_GarageComplex_TA
// 0x0004 (0x0060 - 0x005C)
class UCameraState_GarageComplex_TA : public UCameraState_X
{
public:
	class AGarageComplex_TA*                           GarageComplex;                                    		// 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_GarageComplex_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void BeginCameraState();
};


// Class TAGame.GarageComplex_TA
// 0x007C (0x0268 - 0x01EC)
class AGarageComplex_TA : public AActor
{
public:
	int                                                ActiveRowIndex;                                   		// 0x01EC(0x0004)
	float                                              RotateAmount;                                     		// 0x01F0(0x0004)
	struct FVector                                     RowLocation;                                      		// 0x01F4(0x000C)
	int                                                LoadingRowIndex;                                  		// 0x0200(0x0004)
	int                                                TotalRows;                                        		// 0x0204(0x0004) (CPF_Edit)
	int                                                CarsPerRow;                                       		// 0x0208(0x0004) (CPF_Edit)
	float                                              RowRotateSpeed;                                   		// 0x020C(0x0004) (CPF_Edit)
	float                                              DistanceBetweenRows;                              		// 0x0210(0x0004) (CPF_Edit)
	struct FVector                                     CarCenterSpawnOffset;                             		// 0x0214(0x000C) (CPF_Edit)
	struct FVector                                     UpDirection;                                      		// 0x0220(0x000C) (CPF_Edit)
	class UStaticMesh*                                 RowMesh;                                          		// 0x022C(0x0004) (CPF_Edit)
	float                                              FOV;                                              		// 0x0230(0x0004) (CPF_Edit, CPF_Const)
	struct FVector                                     RowOffset;                                        		// 0x0234(0x000C) (CPF_Edit, CPF_Const)
	float                                              BlendRateBetweenRows;                             		// 0x0240(0x0004) (CPF_Edit, CPF_Const)
	struct FRotator                                    RotationOffset;                                   		// 0x0244(0x000C) (CPF_Edit, CPF_Const)
	TArray<struct FSpawnOrientation>                   SpawnOrientations;                                		// 0x0250(0x000C) (CPF_NeedCtorLink)
	TArray<class AGarageComplexRow_TA*>                Rows;                                             		// 0x025C(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GarageComplex_TA");
		return ptr;
	}


	class AActor* GetLastLoadedCarIfLoading();
	void HandleRowFinishedLoadingCars(class AGarageComplexRow_TA* Row);
	void PopulateNextRowWithCars();
	void StartPopulatingCars();
	bool IsLoadingCars();
	void UpdateRowLocation();
	void ShiftCameraVertical(int Direction);
	void RotateRowRight();
	void RotateRowLeft();
	void ShiftCameraDown();
	void ShiftCameraUp();
	void DestroyRows();
	void SetupRows();
	void CalculateCircleSpawnOrientations(int InCarsPerRow, const struct FRotator& StartRotation);
	void Init(int InCarsPerRow, int InRows, float InCarDistanceFromCam, float InDistanceBetweenRows);
};


// Class TAGame.CameraState_IntroMenu_TA
// 0x0024 (0x0080 - 0x005C)
class UCameraState_IntroMenu_TA : public UCameraState_X
{
public:
	float                                              FOV;                                              		// 0x005C(0x0004)
	struct FVector                                     Offset;                                           		// 0x0060(0x000C)
	float                                              BlendRate;                                        		// 0x006C(0x0004)
	class ASkeletalMeshActorMAT_IntroCar_TA*           Focus;                                            		// 0x0070(0x0004) (CPF_Transient)
	TArray<class ASkeletalMeshActorMAT_IntroCar_TA*>   FocusActors;                                      		// 0x0074(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_IntroMenu_TA");
		return ptr;
	}


	int FocusActorSort(class ASkeletalMeshActorMAT_IntroCar_TA* A, class ASkeletalMeshActorMAT_IntroCar_TA* B);
	class ASkeletalMeshActorMAT_IntroCar_TA* GetInitialCarFocus();
	void SetupFocusActors();
	void ShiftFocus(int Direction);
	void ShiftLeftFocus();
	void ShiftRightFocus();
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void BeginCameraState();
};


// Class TAGame.SkeletalMeshActorMAT_IntroCar_TA
// 0x0010 (0x02BC - 0x02AC)
class ASkeletalMeshActorMAT_IntroCar_TA : public ASkeletalMeshActorMAT_Products_TA
{
public:
	int                                                ViewIndex;                                        		// 0x02AC(0x0004) (CPF_Edit)
	struct FRotator                                    AngleOffset;                                      		// 0x02B0(0x000C) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkeletalMeshActorMAT_IntroCar_TA");
		return ptr;
	}

};


// Class TAGame.CameraState_PodiumSpotlight_TA
// 0x0030 (0x008C - 0x005C)
class UCameraState_PodiumSpotlight_TA : public UCameraState_X
{
public:
	float                                              ArcT;                                             		// 0x005C(0x0004)
	float                                              CameraDistance;                                   		// 0x0060(0x0004)
	float                                              CameraOffsetYaw;                                  		// 0x0064(0x0004)
	float                                              CameraOffsetPitch;                                		// 0x0068(0x0004)
	float                                              XOffsetDistanceStart;                             		// 0x006C(0x0004)
	float                                              XOffsetDistanceEnd;                               		// 0x0070(0x0004)
	float                                              XOffsetDollySpeed;                                		// 0x0074(0x0004)
	float                                              DefaultFOV;                                       		// 0x0078(0x0004)
	float                                              FadeInDuration;                                   		// 0x007C(0x0004)
	TArray<struct FCachedPodiumCar>                    Cars;                                             		// 0x0080(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_PodiumSpotlight_TA");
		return ptr;
	}


	void UpdateCarLocations(class AGameEvent_TA* GameEvent);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void BeginCameraState();
	bool ShouldExecute();
};


// Class TAGame.CameraState_PrePodiumSpotlight_TA
// 0x0010 (0x006C - 0x005C)
class UCameraState_PrePodiumSpotlight_TA : public UCameraState_X
{
public:
	float                                              ElapsedTime;                                      		// 0x005C(0x0004)
	unsigned long                                      bFadeOut : 1;                                     		// 0x0060(0x0004)
	float                                              FadeOutDelay;                                     		// 0x0064(0x0004)
	float                                              FadeOutDuration;                                  		// 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_PrePodiumSpotlight_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	bool ShouldExecute();
};


// Class TAGame.Car_Freeplay_TA
// 0x000C (0x08F0 - 0x08E4)
class ACar_Freeplay_TA : public ACar_TA
{
public:
	TArray<struct FLinearColor>                        CarColors;                                        		// 0x08E4(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Car_Freeplay_TA");
		return ptr;
	}


	void STATIC_SetCarColor(class UCarMeshComponentBase_TA* InMesh);
	int GetTeamIndex();
	bool HasTeam();
	void HandleLoadoutSelected(class APRI_TA* MyPRI);
};


// Class TAGame.CarJointSpinner_TA
// 0x002C (0x0098 - 0x006C)
class UCarJointSpinner_TA : public UActorComponent_X
{
public:
	struct FName                                       ControlName;                                      		// 0x006C(0x0008) (CPF_Edit)
	float                                              IdleSpeed;                                        		// 0x0074(0x0004) (CPF_Edit)
	float                                              DrivingSpeed;                                     		// 0x0078(0x0004) (CPF_Edit)
	float                                              BoostSpeed;                                       		// 0x007C(0x0004) (CPF_Edit)
	struct FVector                                     RotationAxis;                                     		// 0x0080(0x000C) (CPF_Edit)
	class ACar_TA*                                     Car;                                              		// 0x008C(0x0004) (CPF_Transient)
	class USkelControlSingleBone*                      Control;                                          		// 0x0090(0x0004) (CPF_Transient)
	float                                              Speed;                                            		// 0x0094(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarJointSpinner_TA");
		return ptr;
	}


	void Tick(float DeltaTime);
	void Attached();
};


// Class TAGame.CarMeshComponent_GarageComplex_TA
// 0x0000 (0x0748 - 0x0748)
class UCarMeshComponent_GarageComplex_TA : public UCarMeshComponent_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarMeshComponent_GarageComplex_TA");
		return ptr;
	}

};


// Class TAGame.CarPreviewActor_GarageComplex_TA
// 0x0000 (0x02CC - 0x02CC)
class ACarPreviewActor_GarageComplex_TA : public ACarPreviewActor_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarPreviewActor_GarageComplex_TA");
		return ptr;
	}


	void InitBoostFX();
	void InitBodyFX();
	void UpdateBoostFX();
	void SetBodyFXActor(class AFXActor_X* InBodyFX);
};


// Class TAGame.CheatGFx_TA
// 0x0000 (0x003C - 0x003C)
class UCheatGFx_TA : public UCheatObject_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CheatGFx_TA");
		return ptr;
	}


	void GFxPrintKeys();
};


// Class TAGame.CollisionTestTrack_TA
// 0x0004 (0x01F0 - 0x01EC)
class ACollisionTestTrack_TA : public AActor
{
public:
	class UCollisionTestComponent_TA*                  CollisionTestComponent;                           		// 0x01EC(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CollisionTestTrack_TA");
		return ptr;
	}

};


// Class TAGame.FXActor_BallBreakout_TA
// 0x0040 (0x02D8 - 0x0298)
class AFXActor_BallBreakout_TA : public AFXActor_Ball_TA
{
public:
	class UAkSoundCue*                                 MaxChargeSFX;                                     		// 0x0298(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 SwitchTeamSFX;                                    		// 0x029C(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 IdleSFX;                                          		// 0x02A0(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 ResetSFX;                                         		// 0x02A4(0x0004) (CPF_Edit)
	TArray<class UAkSoundCue*>                         ChargeSFX;                                        		// 0x02A8(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<class UAkSoundCue*>                         DamageSFX;                                        		// 0x02B4(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<class UFXActorEvent_X*>                     DamageEvents;                                     		// 0x02C0(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class ABall_Breakout_TA*                           BallBreakout;                                     		// 0x02CC(0x0004) (CPF_Transient)
	int                                                LastDamage;                                       		// 0x02D0(0x0004)
	float                                              LastNoDamageHit;                                  		// 0x02D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_BallBreakout_TA");
		return ptr;
	}


	void UpdateGoalProximity();
	void UpdateBallFade(float DeltaTime);
	void StartBallFadeOut();
	void StartBallFadeIn();
	void HandleAppliedDamage(class ABall_Breakout_TA* InBall, const struct FAppliedBreakoutDamage& Damage);
	void HandleNoDamageHit(class ABall_Breakout_TA* InBall);
	void HandleLastTeamTouchChanged(class ABall_Breakout_TA* InBall, unsigned char InLastTeamTouch);
	void HandleDamageIndexChanged(class ABall_Breakout_TA* InBall, int InDamageIndex);
	void PostBeginPlay();
};


// Class TAGame.FXActor_GameEditorActor_TA
// 0x0014 (0x025C - 0x0248)
class AFXActor_GameEditorActor_TA : public AFXActor_X
{
public:
	float                                              SpeedMultiplier;                                  		// 0x0248(0x0004) (CPF_Edit)
	class UFXActorEvent_X*                             EditingState;                                     		// 0x024C(0x0004)
	struct FVector                                     PrevLocation;                                     		// 0x0250(0x000C) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_GameEditorActor_TA");
		return ptr;
	}


	void HandleSelectionChange(const TScriptInterface<class UInterface_GameEditor_TA>& EditorObject, bool bSelected);
	void TickFX(float DeltaTime);
	void PostBeginPlay();
};


// Class TAGame.FXActor_TrainingEditor_TA
// 0x0020 (0x0268 - 0x0248)
class AFXActor_TrainingEditor_TA : public AFXActor_X
{
public:
	float                                              AdjustSpeedStateRemoveDelay;                      		// 0x0248(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 AkBallSpeedDirectionChange;                       		// 0x024C(0x0004) (CPF_Edit)
	class UFXActorEvent_X*                             SimulatingBallState;                              		// 0x0250(0x0004)
	class UFXActorEvent_X*                             AdjustingSpeedState;                              		// 0x0254(0x0004)
	class UFXActorEvent_X*                             PlaytestingState;                                 		// 0x0258(0x0004)
	class AGameEvent_TrainingEditor_TA*                GameEvent;                                        		// 0x025C(0x0004) (CPF_Transient)
	float                                              PrevLaunchSpeed;                                  		// 0x0260(0x0004) (CPF_Transient)
	float                                              PrevLaunchSpeedSign;                              		// 0x0264(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_TrainingEditor_TA");
		return ptr;
	}


	void AdjustSpeedStateEnd();
	void HandleLaunchVelocityChange(class ABall_GameEditor_TA* InBall);
	void HandleBallReset(class ABall_GameEditor_TA* InBall);
	void HandleBallFire(class ABall_GameEditor_TA* InBall);
	void HandlePlaytestStarted(class AGameEvent_TrainingEditor_TA* InGameEvent);
	void HandleGameStateChange(class AGameEvent_TA* InGameEvent);
	void HandleBallRemoved(class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* Ball);
	void HandleBallAdded(class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* Ball);
	void PostBeginPlay();
};


// Class TAGame.GameEvent_CarPreview_TA
// 0x0000 (0x04D4 - 0x04D4)
class AGameEvent_CarPreview_TA : public AGameEvent_Team_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_CarPreview_TA");
		return ptr;
	}


	class AAIController_TA* SpawnBot();
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
};


// Class TAGame.GameEvent_Soccar_SubRules_500_TA
// 0x003C (0x0078 - 0x003C)
class UGameEvent_Soccar_SubRules_500_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	TArray<struct FBallScoreData>                      BallScoreDistribution;                            		// 0x003C(0x000C) (CPF_NeedCtorLink)
	float                                              RespawnDelay;                                     		// 0x0048(0x0004)
	float                                              MinLaunchSpeed;                                   		// 0x004C(0x0004)
	float                                              MaxLaunchSpeed;                                   		// 0x0050(0x0004)
	int                                                PreviousTime;                                     		// 0x0054(0x0004) (CPF_Transient)
	class UMessage_TA*                                 BallSpawningMessage;                              		// 0x0058(0x0004)
	class UMessage_TA*                                 PlayerScoredMessage;                              		// 0x005C(0x0004)
	class UMessage_TA*                                 WinnersMessage;                                   		// 0x0060(0x0004)
	class ACannon_TA*                                  CannonArchetype;                                  		// 0x0064(0x0004)
	class ACannon_TA*                                  FiringCannon;                                     		// 0x0068(0x0004)
	TArray<struct FCannonFacingInfo>                   CannonData;                                       		// 0x006C(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Soccar_SubRules_500_TA");
		return ptr;
	}


	class ATeam_TA* OnGetWinningTeam();
	void OnTick(float DeltaTime);
	void Handle500CarTouch(class ABall_TA* Ball, class ACar_TA* HitCar, TEnumAsByte<enum class EBallHitType> HitType);
	void Handle500GroundTouch(class ABall_TA* Ball, const struct FVector& HitLoc, const struct FVector& HitNormal);
	void SpawnWarning();
	void SetBallListeners(class ABall_TA* Ball, bool bListen);
	bool ShouldDisableStatXP();
	bool ShouldSpawnBall();
	void OnGetBallSpawnPosition(struct FVector* BallPosition);
	void OnAddGameBall(class ABall_TA* Ball);
	void OnMatchEnd();
	void OnNewRound();
	void Init();
};


// Class TAGame.GameEvent_Soccar_SubRules_Football_TA
// 0x0008 (0x0044 - 0x003C)
class UGameEvent_Soccar_SubRules_Football_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	int                                                BallCarryingScore;                                		// 0x003C(0x0004)
	int                                                DefaultScore;                                     		// 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Soccar_SubRules_Football_TA");
		return ptr;
	}


	void HandleCarTouch(class ABall_TA* Ball, class ACar_TA* HitCar, TEnumAsByte<enum class EBallHitType> HitType);
	void SetBallListeners(class ABall_TA* Ball, bool bListen);
	void OnGetBallModifiedScore(class ABall_TA* Ball, int ScoreIndex, int* BallScore);
};


// Class TAGame.GameEvent_Soccar_SubRules_Items_TA
// 0x001C (0x0058 - 0x003C)
class UGameEvent_Soccar_SubRules_Items_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	class UPlayerItemDispenser_TA*                     DispenserArchetype;                               		// 0x003C(0x0004) (CPF_Edit)
	float                                              StaggerTime;                                      		// 0x0040(0x0004) (CPF_Edit)
	float                                              CurrentStaggerByTeam[0x2];                        		// 0x0044(0x0004) (CPF_Transient)
	TArray<class UPlayerItemDispenser_TA*>             ItemDispensers;                                   		// 0x004C(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Soccar_SubRules_Items_TA");
		return ptr;
	}


	void RandomizeDispenserOrder();
	void CheckPlayers();
	void OnMatchEnd();
	void HandleGoalScored(class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIdx);
	void HandleCarSpawned(class AGameEvent_TA* GameEvent, class ACar_TA* Car);
	void HandleStartNewRound(class AGameEvent_Soccar_TA* GameEvent);
	void HandleTeamsCreated(class AGameEvent_Team_TA* GameEvent);
	void HandlePRIRemoved(class AGameEvent_TA* GameEvent, class APRI_TA* PRI);
	void HandlePRIAdded(class AGameEvent_TA* GameEvent, class APRI_TA* PRI);
	void OnNewRound();
	void Init();
};


// Class TAGame.PlayerItemDispenser_TA
// 0x0034 (0x0070 - 0x003C)
class UPlayerItemDispenser_TA : public UObject
{
public:
	float                                              ItemGiveRate;                                     		// 0x003C(0x0004) (CPF_Edit)
	TArray<struct FRandomWeight>                       Items;                                            		// 0x0040(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	float                                              PickWeightMultiplier;                             		// 0x004C(0x0004) (CPF_Edit)
	unsigned long                                      bResetWeightsOnGoal : 1;                          		// 0x0050(0x0004) (CPF_Edit)
	unsigned long                                      bResetTimerOnDemolish : 1;                        		// 0x0050(0x0004) (CPF_Edit)
	unsigned long                                      bUseItemPool : 1;                                 		// 0x0050(0x0004) (CPF_Edit)
	unsigned long                                      bWaitingForNextRound : 1;                         		// 0x0050(0x0004) (CPF_Edit)
	unsigned long                                      bGiven : 1;                                       		// 0x0050(0x0004) (CPF_Transient)
	float                                              NextItemTime;                                     		// 0x0054(0x0004) (CPF_Transient)
	class APRI_TA*                                     PRI;                                              		// 0x0058(0x0004) (CPF_Transient)
	TArray<class ASpecialPickup_TA*>                   ItemPool;                                         		// 0x005C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class ASpecialPickup_TA*                           DemolishedItem;                                   		// 0x0068(0x0004) (CPF_Transient)
	class ASpecialPickup_TA*                           LastPickup;                                       		// 0x006C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerItemDispenser_TA");
		return ptr;
	}


	void RefillPool();
	void HandleItemCarDestroyed(class APawn_X* Car);
	void HandleItemCarDemolished(class ACar_TA* Car, const struct FDemolishData& Data);
	void GiveItem(class ASpecialPickup_TA* OverrideItem);
	void OnGoalScored();
	void OnMatchEnd();
	void OnNewRound(float InStaggerTime, float InGameTimeRemaining);
	void Update();
	float GetTotalGameTimePlayed();
	void Init(class APRI_TA* InPRI, float InStaggerTime);
};


// Class TAGame.GameEvent_Soccar_SubRules_RedGreen_TA
// 0x0018 (0x0054 - 0x003C)
class UGameEvent_Soccar_SubRules_RedGreen_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	int                                                MaxRedDuration;                                   		// 0x003C(0x0004)
	int                                                MinRedDuration;                                   		// 0x0040(0x0004)
	int                                                MaxGreenDuration;                                 		// 0x0044(0x0004)
	int                                                MinGreenDuration;                                 		// 0x0048(0x0004)
	int                                                CurrentTime;                                      		// 0x004C(0x0004)
	class UMessage_TA*                                 StopMessage;                                      		// 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Soccar_SubRules_RedGreen_TA");
		return ptr;
	}


	void OnTick(float DeltaTime);
	void OnRemoveGameBall();
	void RedBallActivate();
	void GreenBallActivate();
	void OnMatchEnd();
	void OnFirstBallHit();
};


// Class TAGame.GameEvent_Soccar_SubRules_TreasureHunt_TA
// 0x0028 (0x0064 - 0x003C)
class UGameEvent_Soccar_SubRules_TreasureHunt_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	float                                              RespawnDelay;                                     		// 0x003C(0x0004)
	int                                                PreviousTime;                                     		// 0x0040(0x0004) (CPF_Transient)
	class UMessage_TA*                                 BallFoundMessage;                                 		// 0x0044(0x0004)
	class UMessage_TA*                                 BallSpawningMessage;                              		// 0x0048(0x0004)
	class UMessage_TA*                                 BallSpawnedMessage;                               		// 0x004C(0x0004)
	class UMessage_TA*                                 BallDistanceMessage;                              		// 0x0050(0x0004)
	class UMessage_TA*                                 BallNearbyMessage;                                		// 0x0054(0x0004)
	TArray<int>                                        PreviousDistances;                                		// 0x0058(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Soccar_SubRules_TreasureHunt_TA");
		return ptr;
	}


	class ATeam_TA* OnGetWinningTeam();
	void OnTick(float DeltaTime);
	void UpdateDistances();
	void HandleTreasureHuntCarTouch(class ABall_TA* Ball, class ACar_TA* HitCar, TEnumAsByte<enum class EBallHitType> HitType);
	void PrepNewBall();
	void SetBallListeners(class ABall_TA* Ball, bool bListen);
	void DummyTimer();
	bool OnCanUseBallCam();
	bool ShouldDisableStatXP();
	bool ShouldSpawnBall();
	void OnGetBallSpawnPosition(struct FVector* BallPosition);
	void OnAddGameBall(class ABall_TA* Ball);
	void OnMatchEnd();
	void OnNewRound();
};


// Class TAGame.GameEvent_Soccar_SubRules_TurnBased_TA
// 0x000C (0x0048 - 0x003C)
class UGameEvent_Soccar_SubRules_TurnBased_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	unsigned char                                      AllowTeamMove;                                    		// 0x003C(0x0001) (CPF_Transient)
	unsigned char                                      DisabledTeamMove;                                 		// 0x003D(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData00[0x2];                               		// 0x003E(0x0002) MISSED OFFSET
	float                                              TurnBasedDuration;                                		// 0x0040(0x0004)
	class UMessage_TA*                                 StopMessage;                                      		// 0x0044(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Soccar_SubRules_TurnBased_TA");
		return ptr;
	}


	void OnRemoveGameBall();
	void OnRestartPlayer(class AController* NewPlayer);
	void OnCarDemolished(class ACar_TA* Car, const struct FDemolishData& Data);
	void EnableNewTurnBall();
	void SetTeamCanMove(unsigned char TeamNum, bool bCanMove);
	void SwitchTurns();
	void DisableOldTurnBall();
	void HandleTurnBasedGroundTouch(class ABall_TA* Ball, const struct FVector& HitLoc, const struct FVector& HitNormal);
	void HandleTurnBasedCarTouch(class ABall_TA* Ball, class ACar_TA* HitCar, TEnumAsByte<enum class EBallHitType> HitType);
	void SetBallListeners(class ABall_TA* Ball, bool bListen);
	void OnMatchEnd();
	void OnNewRound();
};


// Class TAGame.GameEvent_Track_TA
// 0x0000 (0x04D4 - 0x04D4)
class AGameEvent_Track_TA : public AGameEvent_Team_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Track_TA");
		return ptr;
	}


	void OnInit();
	void GatherSpawns();
	void PostBeginPlay();
};


// Class TAGame.GameEvent_Volleyball_TA
// 0x0018 (0x07A8 - 0x0790)
class AGameEvent_Volleyball_TA : public AGameEvent_Soccar_TA
{
public:
	float                                              TimeCounter;                                      		// 0x0790(0x0004) (CPF_Net)
	int                                                LastBallTeamSide;                                 		// 0x0794(0x0004)
	float                                              TeamSecondsBeforeExplode;                         		// 0x0798(0x0004)
	struct FVector                                     DebugTeamSideOffset;                              		// 0x079C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Volleyball_TA");
		return ptr;
	}

};


// Class TAGame.GameInfo_CarPreview_TA
// 0x0008 (0x0418 - 0x0410)
class AGameInfo_CarPreview_TA : public AGameInfoBase_TA
{
public:
	class AGameEvent_CarPreview_TA*                    GameEventArchetype;                               		// 0x0410(0x0004) (CPF_Edit)
	class AGameEvent_CarPreview_TA*                    GameEvent;                                        		// 0x0414(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_CarPreview_TA");
		return ptr;
	}


	void RestartPlayer(class AController* NewPlayer);
	void PostLogin(class APlayerController* NewPlayer);
};


// Class TAGame.GameInfo_CollisionTest_TA
// 0x001C (0x042C - 0x0410)
class AGameInfo_CollisionTest_TA : public AGameInfoBase_TA
{
public:
	TArray<class UCollisionTestComponent_TA*>          TestComponents;                                   		// 0x0410(0x000C) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_NeedCtorLink, CPF_EditInline)
	class UCollisionTestComponent_TA*                  CurrentTest;                                      		// 0x041C(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	int                                                CurrentIndex;                                     		// 0x0420(0x0004) (CPF_Transient)
	class AActor*                                      CurrentActor;                                     		// 0x0424(0x0004) (CPF_Transient)
	unsigned long                                      bRepeat : 1;                                      		// 0x0428(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_CollisionTest_TA");
		return ptr;
	}


	class AActor* SpawnActor(class UCollisionTestComponent_TA* Test, float Alpha);
	class AActor* SpawnActorFromTest(class UCollisionTestComponent_TA* Test);
	void SkipTest();
	void Repeat(int Index);
	void SkipTo(int Index);
	void Skip(int Steps);
	void FireNext();
	void StartNextTest();
	void FindTestActors();
	void SetStadiumColors();
	void GenericPlayerInitialization(class AController* C);
	class APlayerController* SpawnPlayerController(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
};


// Class TAGame.GameInfo_GameEditor_TA
// 0x0000 (0x0434 - 0x0434)
class AGameInfo_GameEditor_TA : public AGameInfo_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_GameEditor_TA");
		return ptr;
	}


	void RestartGameEvent();
	void ResetTraining();
	void SetupPlayer(class APlayerController* NewPlayer);
	void PostLogin(class APlayerController* NewPlayer);
	void PostBeginPlay();
};


// Class TAGame.GameInfo_Hockey_TA
// 0x0000 (0x0434 - 0x0434)
class AGameInfo_Hockey_TA : public AGameInfo_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Hockey_TA");
		return ptr;
	}

};


// Class TAGame.GameInfo_Items_TA
// 0x0000 (0x0434 - 0x0434)
class AGameInfo_Items_TA : public AGameInfo_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Items_TA");
		return ptr;
	}

};


// Class TAGame.GameInfo_PlayTest_TA
// 0x0000 (0x0434 - 0x0434)
class AGameInfo_PlayTest_TA : public AGameInfo_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_PlayTest_TA");
		return ptr;
	}

};


// Class TAGame.GameInfo_Track_TA
// 0x0008 (0x041C - 0x0414)
class AGameInfo_Track_TA : public AGameInfo_TA
{
public:
	class AGameEvent_TA*                               GameEventArchetype;                               		// 0x0414(0x0004) (CPF_Edit)
	class AGameEvent_TA*                               CurrentGame;                                      		// 0x0418(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Track_TA");
		return ptr;
	}


	void RestartLevel();
	void RestartPlayer(class AController* aPlayer);
	bool PlayerCanRestart(class APlayerController* aPlayer);
	void PostLogin(class APlayerController* NewPlayer);
	void PostBeginPlay();
};


// Class TAGame.GameInfo_TrainingEditor_TA
// 0x0000 (0x0434 - 0x0434)
class AGameInfo_TrainingEditor_TA : public AGameInfo_GameEditor_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_TrainingEditor_TA");
		return ptr;
	}


	void SetupPlayer(class APlayerController* NewPlayer);
	void OnCreateCurrentGame();
};


// Class TAGame.GameInfo_Transition_TA
// 0x0000 (0x0410 - 0x0410)
class AGameInfo_Transition_TA : public AGameInfoBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Transition_TA");
		return ptr;
	}

};


// Class TAGame.GameInfo_Volleyball_TA
// 0x0000 (0x0434 - 0x0434)
class AGameInfo_Volleyball_TA : public AGameInfo_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Volleyball_TA");
		return ptr;
	}

};


// Class TAGame.GarageComplexRow_TA
// 0x0040 (0x022C - 0x01EC)
class AGarageComplexRow_TA : public AActor
{
public:
	int                                                ViewIndex;                                        		// 0x01EC(0x0004)
	class AGarageComplex_TA*                           GarageComplex;                                    		// 0x01F0(0x0004) (CPF_Transient)
	struct FRotator                                    DesiredRotation;                                  		// 0x01F4(0x000C) (CPF_Transient)
	float                                              LastRotDiff;                                      		// 0x0200(0x0004) (CPF_Transient)
	class UProductLoader_TA*                           RandomLoadoutLoader;                              		// 0x0204(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	TArray<class ACarPreviewActor_TA*>                 CarPreviewActors;                                 		// 0x0208(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x0214(0x0004) (CPF_Edit, CPF_Const, CPF_ExportObject, CPF_EditConst, CPF_Component, CPF_EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                 		// 0x0218(0x0004) (CPF_Edit, CPF_Const, CPF_ExportObject, CPF_EditConst, CPF_Component, CPF_EditInline)
	struct FScriptDelegate                             __EventFinishedLoadingCars__Delegate;             		// 0x021C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x021C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GarageComplexRow_TA");
		return ptr;
	}


	class AActor* GetLastLoadedCar();
	void HandleLoadoutLoaded(class UProductLoader_TA* Loader);
	void LoadNextCar();
	void PopulateRowWithCarsRandom();
	void DestroyCars();
	void DestroyRow();
	void Tick(float DeltaTime);
	void RotateRow(int Direction);
	void Init(class AGarageComplex_TA* InGarageComplex);
	void EventFinishedLoadingCars(class AGarageComplexRow_TA* Row);
};


// Class TAGame.LoadoutRandomizer_TA
// 0x0000 (0x003C - 0x003C)
class ULoadoutRandomizer_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutRandomizer_TA");
		return ptr;
	}


	int STATIC_GetRandomColorID(class UCarColorSet_TA* Set);
	void STATIC_RandomizeTeamPaint(struct FLoadoutData* Data);
	void STATIC_RandomizeSlot(class UProfile_TA* Profile, class UProductSlot_TA* Slot, struct FLoadoutData* Data);
	void STATIC_Randomize(class UProfile_TA* Profile, struct FLoadoutData* Loadouts);
	void STATIC_RandomizeLoadout(class UProfile_TA* Profile, struct FLoadoutData* Loadout);
	void STATIC_RandomizerLog(const struct FString& LogStr);
};


// Class TAGame.GFxData_AuthenticatedName_TA
// 0x0010 (0x0064 - 0x0054)
class UGFxData_AuthenticatedName_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     PlayerName;                                       		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0060(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_AuthenticatedName_TA");
		return ptr;
	}


	void LoginSuccess();
	void LoginFailed();
	void HandleAuthenticatedNameChanged(class UOnlinePlayerAuthentication_X* Auth);
	void Login();
	void NameRequestFailed();
	void NameRequestSuccess();
	void HandleAuthenticatedNameAvailbleComplete(class URPC_AuthenticatedNameAvailable_TA* RPC);
	void IsPlayerNameAvailable();
	void SetPlayerName(const struct FString& NewName);
};


// Class TAGame.RPC_AuthenticatedNameAvailable_TA
// 0x0018 (0x00AC - 0x0094)
class URPC_AuthenticatedNameAvailable_TA : public URPC_TA
{
public:
	struct FString                                     Platform;                                         		// 0x0094(0x000C) (CPF_NeedCtorLink)
	struct FString                                     PlayerName;                                       		// 0x00A0(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_AuthenticatedNameAvailable_TA");
		return ptr;
	}


	class URPC_AuthenticatedNameAvailable_TA* SetRequestedName(const struct FString& RequestName);
	class URPC_AuthenticatedNameAvailable_TA* SetPlatform(const struct FString& InPlatform);
};


// Class TAGame.GFxData_ContainerDrops_TA
// 0x0018 (0x006C - 0x0054)
class UGFxData_ContainerDrops_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FContainerInfo>                      ContainerDropList;                                		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FRPCContainerDropTable>              RPCContainerDropList;                             		// 0x0060(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ContainerDrops_TA");
		return ptr;
	}


	struct FString GetPossibleContainerDrops(int ProductID);
	TArray<struct FString> GetMatchingProductSeries(int SeriesID);
	void OnContainersUpdated();
	void HandleGetContainerDropTableResponse(class URPC_MicroTransactions_GetContainerDropTable_TA* RPC);
	void GetContentDrops();
	void HandlePsyNetLoginChange(class UOnlinePlayerAuthentication_X* Auth);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.RPC_MicroTransactions_GetContainerDropTable_TA
// 0x0010 (0x00A4 - 0x0094)
class URPC_MicroTransactions_GetContainerDropTable_TA : public URPC_TA
{
public:
	int                                                GameVersion;                                      		// 0x0094(0x0004)
	TArray<struct FRPCContainerDropTable>              ContainerDrops;                                   		// 0x0098(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_MicroTransactions_GetContainerDropTable_TA");
		return ptr;
	}


	class URPC_MicroTransactions_GetContainerDropTable_TA* SetGameVersion(int InGameVersion);
};


// Class TAGame.GFxData_CustomTeams_TA
// 0x0044 (0x0098 - 0x0054)
class UGFxData_CustomTeams_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxCustomTeamSettings>              Settings;                                         		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TEnumAsByte<enum class ECustomMatchSettingsType>   SettingsType;                                     		// 0x0060(0x0001) (CPF_DataBinding)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0061(0x0003) MISSED OFFSET
	TArray<struct FGFxTeamColor>                       TeamColors;                                       		// 0x0064(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FGFxTeamColor>                       CustomColors;                                     		// 0x0070(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class ULocalPlayer_TA*                             TAPlayer;                                         		// 0x007C(0x0004) (CPF_Transient)
	int                                                PreviewTeam;                                      		// 0x0080(0x0004) (CPF_Transient)
	class UCarPreviewSet_TA*                           PreviewSet;                                       		// 0x0084(0x0004) (CPF_Transient)
	struct FClubColorSet                               PreviewColors[0x2];                               		// 0x0088(0x0008) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_CustomTeams_TA");
		return ptr;
	}


	bool InMainMenu();
	void UpdateCarColors(class ACarPreviewActor_TA* PreviewActor, bool bClubColors);
	void HandleSetProfile(class ACarPreviewActor_TA* Car);
	void RestoreStadiumColors();
	void InitStadiumColors();
	void ResetPreviewColors();
	void SetCustomColorID(int Team, int ColorID);
	void PreviewCustomColorID(int Team, int ColorID);
	void SetTeamColorID(int Team, int ColorID);
	void PreviewTeamColorID(int Team, int ColorID);
	void ClearTeamName(int Team);
	void SetTeamName(int Team, const struct FString& TeamName);
	void SetSettingsType(TEnumAsByte<enum class ECustomMatchSettingsType> Type);
	void SaveColors(int Team);
	void InitPreviewColors();
	void InitColorTables();
	struct FGFxCustomTeamSettings CreateTeamSettings(int TeamIdx);
	void InitTeamSettings();
	void OnShellSet();
};


// Class TAGame.GFxData_ESportEvents_TA
// 0x0004 (0x0058 - 0x0054)
class UGFxData_ESportEvents_TA : public UGFxDataSingleton_X
{
public:
	class UESportEvents_TA*                            ESportEvents;                                     		// 0x0054(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ESportEvents_TA");
		return ptr;
	}


	void OnShellSet();
};


// Class TAGame.GFxData_GarageComplex_TA
// 0x0004 (0x0058 - 0x0054)
class UGFxData_GarageComplex_TA : public UGFxDataSingleton_X
{
public:
	class AGarageComplex_TA*                           GarageComplex;                                    		// 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_GarageComplex_TA");
		return ptr;
	}


	class UProfile_TA* GetProfile();
	void SelectCar();
	void RotateRowRight();
	void RotateRowLeft();
	void ShiftCameraDown();
	void ShiftCameraUp();
	class UCameraState_GarageComplex_TA* GetCameraState();
	void SetCameraState(const struct FName& StateName);
	void InitCars(int InCarsPerRow, int InRows, float InCarDistanceFromCam, float InDistanceBetweenRows);
	void OnShellSet();
};


// Class TAGame.GFxData_IntroMenu_TA
// 0x0004 (0x0058 - 0x0054)
class UGFxData_IntroMenu_TA : public UGFxDataSingleton_X
{
public:
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0054(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_IntroMenu_TA");
		return ptr;
	}


	class UProfile_TA* GetProfile();
	void CarSelected();
	void CarsInPosition();
	void HandleRecieveSelectedCar(class URPC_SelectIntroCar_TA* RPC);
	void SelectCar();
	void ShiftFocusLeft();
	void ShiftFocusRight();
	class UCameraState_IntroMenu_TA* GetCameraState();
	void SetCameraState(const struct FName& StateName);
	void HandleIntroCarsInPosition(class AGameInfo_GFxMenu_TA* GameInfoMenu);
	void InitIntro();
	void OnShellSet();
};


// Class TAGame.RPC_SelectIntroCar_TA
// 0x0054 (0x00E8 - 0x0094)
class URPC_SelectIntroCar_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	TArray<int>                                        RequestedProducts;                                		// 0x00C4(0x000C) (CPF_NeedCtorLink)
	TArray<struct FOnlineProductData>                  ReceivedProducts;                                 		// 0x00D0(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   ProcessedProducts;                                		// 0x00DC(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_SelectIntroCar_TA");
		return ptr;
	}


	void OnComplete();
	class URPC_SelectIntroCar_TA* SetRequestedProducts(TArray<int> InRequestedProducts);
	class URPC_SelectIntroCar_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GFxData_LoadoutSets_TA
// 0x008C (0x00E0 - 0x0054)
class UGFxData_LoadoutSets_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxLoadoutSet>                      LoadoutSets;                                      		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UProfile_TA*                                 Profile;                                          		// 0x0060(0x0004) (CPF_Transient)
	struct FLoadoutData                                RandomLoadouts[0x2];                              		// 0x0064(0x0034) (CPF_Transient, CPF_NeedCtorLink)
	class UProductLoader_TA*                           RandomLoadoutLoader;                              		// 0x00CC(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UProductLoader_TA*                           PreviousLoadoutSetLoader;                         		// 0x00D0(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UProductLoader_TA*                           NextLoadoutSetLoader;                             		// 0x00D4(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	class ULoadoutSequencer_TA*                        LoadoutSequencer;                                 		// 0x00D8(0x0004) (CPF_Transient)
	int                                                PreviousBodyProductID;                            		// 0x00DC(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_LoadoutSets_TA");
		return ptr;
	}


	void FinishRandomization();
	void UpdatePreviewLoadout();
	int GetPreviewTeam();
	void SetPreviewTeam(int Team);
	void SetEditingLoadoutSet(int Index);
	void RandomizePreset(int Index);
	void SetupNextRandomLoadout(struct FLoadoutData* Loadouts);
	bool HasPresetNamed(const struct FString& NewName);
	void RenamePreset(int Index, const struct FString& NewName);
	void DeletePreset(int Index);
	void CreatePreset();
	bool CanCreatePreset();
	void EquipPreset(int Index);
	void HandleLoadoutSetsChanged(class UProfile_TA* InProfile);
	void ClearLoaderCache(class UProductLoader_TA* Loader);
	void HandleLoadoutLoaded(class UProductLoader_TA* Loader);
	void PreloadLoadout(const struct FLoadoutData& Loadout, class UProductLoader_TA* Loader);
	void PreloadNextPrevLoadoutSets(int Index);
	void InitLoadoutSets();
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.LoadoutSequencer_TA
// 0x008C (0x00C8 - 0x003C)
class ULoadoutSequencer_TA : public UObject
{
public:
	TArray<struct FSequenceData>                       SlotSequence;                                     		// 0x003C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	unsigned long                                      bDebug : 1;                                       		// 0x0048(0x0004) (CPF_Edit)
	class ACarPreviewActor_TA*                         PreviewActor;                                     		// 0x004C(0x0004)
	struct FLoadoutData                                FinalLoadout;                                     		// 0x0050(0x0034) (CPF_NeedCtorLink)
	struct FLoadoutData                                CurrentLoadout;                                   		// 0x0084(0x0034) (CPF_NeedCtorLink)
	struct FScriptDelegate                             __EventSequenceComplete__Delegate;                		// 0x00B8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x00B8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutSequencer_TA");
		return ptr;
	}


	void Finish();
	class AActor* GetTimerObject();
	void QueueNextSlot(float Delay);
	void EquipNextSlot();
	void OnSequenceComplete();
	void HandleProductLoaded(const struct FAssetLoadResult& Result);
	void QueueSlot(class UProductSlot_TA* Slot, float AnimDelay);
	void Start(class ACarPreviewActor_TA* InPreviewActor, const struct FScriptDelegate& Callback, struct FLoadoutData* InLoadout);
	void SequencerLog(const struct FString& LogStr);
	void EventSequenceComplete(class ULoadoutSequencer_TA* Sequencer);
};


// Class TAGame.GFxData_MapPrefs_TA
// 0x0034 (0x0088 - 0x0054)
class UGFxData_MapPrefs_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxPlaylistType>                    PlaylistTypes;                                    		// 0x0054(0x000C) (CPF_Edit, CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FGFxMapType>                         MapTypes;                                         		// 0x0060(0x000C) (CPF_Edit, CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FGFxMapPlaylist>                     Playlists;                                        		// 0x006C(0x000C) (CPF_Edit, CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FGFxMapPreference>                   Maps;                                             		// 0x0078(0x000C) (CPF_Edit, CPF_NeedCtorLink, CPF_DataBinding)
	class UMapPrefsConfig_X*                           MapPrefsConfig;                                   		// 0x0084(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MapPrefs_TA");
		return ptr;
	}


	class UProfile_TA* GetProfile();
	TArray<class UMapData_TA*> FilterAndSortMaps(TArray<class UMapData_TA*> UnsortedMaps);
	void SavePrefs(const struct FPlaylistMapPrefs& Prefs);
	void SetMapPreference(const struct FName& PlaylistId, const struct FName& MapID, TEnumAsByte<enum class EMapPrefType> Preference);
	void SetPlaylistOverrideGlobal(const struct FName& PlaylistId, bool bOverride);
	struct FName GetMapType(class UMapData_TA* Map);
	void AddPlaylistMapPrefs(const struct FName& PlaylistId, TArray<class UMapData_TA*> PlaylistMaps);
	void AddPlaylistData(const struct FName& PlaylistId, const struct FName& PlaylistTypeID, const struct FString& PlaylistLabel, TArray<class UMapData_TA*> PlaylistMaps);
	TArray<class UMapData_TA*> GetGlobalMaps();
	struct FString GetGlobalLabel();
	void InitMapPrefs();
	void InitMapTypes();
	void InitPlaylistTypes();
	void OnShellSet();
};


// Class TAGame.GFxData_MatchAdmin_TA
// 0x0008 (0x005C - 0x0054)
class UGFxData_MatchAdmin_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bMatchAdmin : 1;                                  		// 0x0054(0x0004) (CPF_Transient, CPF_DataBinding)
	class APRI_TA*                                     PlayerPRI;                                        		// 0x0058(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MatchAdmin_TA");
		return ptr;
	}


	void SetPaused(bool bNewPause);
	void SetScoreAndTime(int NewScoreTeam0, int NewScoreTeam1, int SecondsRemaining, bool bOverTime, bool bRestartRound);
	void HandleMatchAdmin(class APRI_TA* PRI);
	void HandlePRIReceived(class APlayerController_X* PC_X);
	class APlayerController_TA* GetPlayerController();
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_Mutators_TA
// 0x004C (0x00A0 - 0x0054)
class UGFxData_Mutators_TA : public UGFxDataSingleton_X
{
public:
	struct FName                                       SelectedMapName;                                  		// 0x0054(0x0008) (CPF_Edit, CPF_DataBinding)
	int                                                SelectedGameMode;                                 		// 0x005C(0x0004) (CPF_Edit, CPF_DataBinding)
	int                                                SelectedBotDifficulty;                            		// 0x0060(0x0004) (CPF_Edit, CPF_DataBinding)
	TArray<struct FGameModeData>                       GameModes;                                        		// 0x0064(0x000C) (CPF_Edit, CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FCustomGameSetting>                  CustomGameSettings;                               		// 0x0070(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	int                                                PresetCategoryIndex;                              		// 0x007C(0x0004)
	TArray<struct FModeMapPair>                        ModeMaps;                                         		// 0x0080(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TEnumAsByte<enum class ECustomMatchSettingsType>   SettingsType;                                     		// 0x008C(0x0001) (CPF_Transient)
	unsigned char                                      UnknownData00[0x3];                               		// 0x008D(0x0003) MISSED OFFSET
	class UProfile_TA*                                 Profile;                                          		// 0x0090(0x0004) (CPF_Transient)
	class UGameMode_TA*                                GameModeObj;                                      		// 0x0094(0x0004) (CPF_Transient)
	class UGameTags_TA*                                GameTags;                                         		// 0x0098(0x0004)
	class UOnlineGameTrial_X*                          Trial;                                            		// 0x009C(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Mutators_TA");
		return ptr;
	}


	void SetCustomGameSetting(int MutatorCategoryIndex, int MutatorSettingIndex);
	bool ResetInvalidSettings(int MutatorCategoryIndex);
	bool IsValidSetting(int MutatorCategoryIndex, int MutatorSettingIndex, bool bCoerceMap);
	struct FString GetCustomGameSettingDescription(int MutatorCategoryIndex, int MutatorSettingIndex);
	void ForceClearAllTags();
	void SetSelectedBotDifficulty(int BotDifficulty);
	struct FString GetGameTagValueFromIndex(const struct FString& GameTagCategory, int Index);
	int GetGameTagIndex(const struct FString& GameTagCategory, const struct FString& Value);
	void SetSelectedGameMode(int GameMode);
	void SetSelectedMapName(const struct FName& MapName);
	void InitMutatorCustomGameSettings();
	void InitCustomGameSettings();
	void RefreshCustomGameSettings(int MutatorCategoryIndex, int MutatorSettingIndex);
	void OnUpdatedSettings();
	void PopulateGameModes();
	void HandleTrialStatusChanged(class UOnlineGameTrial_X* InTrial);
	void SetCustomMatchSettings(struct FCustomMatchSettings* InSettings);
	struct FCustomMatchSettings GetCustomMatchSettings();
	void SetGameTag(const struct FString& Key, const struct FString& Value);
	struct FString GetGameTag(const struct FString& Key);
	void InitMutators(TEnumAsByte<enum class ECustomMatchSettingsType> InSettingsType);
	void OnShellSet();
	class UOnlineGame_TA* GetOnlineGame();
};


// Class TAGame.GFxData_PremiumGarage_TA
// 0x0000 (0x0054 - 0x0054)
class UGFxData_PremiumGarage_TA : public UGFxDataSingleton_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PremiumGarage_TA");
		return ptr;
	}


	class UProfile_TA* GetProfile();
};


// Class TAGame.GFxData_ProductFilter_TA
// 0x0178 (0x01CC - 0x0054)
class UGFxData_ProductFilter_TA : public UGFxDataSingleton_X
{
public:
	TArray<class UClass*>                              UIAttributes;                                     		// 0x0054(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	struct FString                                     Label;                                            		// 0x0060(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FFilterProductSlot>                  Slots;                                            		// 0x006C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FFilterProductQuality>               Qualities;                                        		// 0x0078(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FFilterProductAttribute>             Attributes;                                       		// 0x0084(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FFilterProductSeries>                SeriesIDs;                                        		// 0x0090(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<TEnumAsByte<enum class EProductFilterType>> FilterStack;                                      		// 0x009C(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FProductFilter                              Filters[0x2];                                     		// 0x00A8(0x0090) (CPF_Transient, CPF_NeedCtorLink)
	class UMtxConfig_TA*                               MtxConfig;                                        		// 0x01C8(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductFilter_TA");
		return ptr;
	}


	void PopFilterType(TEnumAsByte<enum class EProductFilterType> Type);
	void PushFilterType(TEnumAsByte<enum class EProductFilterType> Type);
	void UpdateFromType(TEnumAsByte<enum class EProductFilterType> Type);
	void ApplyKeyTradeRestrictionOption(TEnumAsByte<enum class EProductFilterType> Type, struct FProductFilter* OutFilter);
	void ApplyContainerNotificationOption(struct FProductFilter* OutFilter);
	void SetSeriesIDSelected(int Row, bool bSelected, TEnumAsByte<enum class EProductFilterType> FilterType);
	void SetAttributeSelected(int Row, bool bSelected, TEnumAsByte<enum class EProductFilterType> FilterType);
	void SetQualitySelected(int Row, bool bSelected, TEnumAsByte<enum class EProductFilterType> FilterType);
	void SetSlotSelected(int Row, bool bSelected, TEnumAsByte<enum class EProductFilterType> FilterType);
	void SetLabel(const struct FString& NewLabel, TEnumAsByte<enum class EProductFilterType> FilterType);
	void FilterProducts(TEnumAsByte<enum class EProductFilterType> FilterType);
	void UpdateProductSeriesIDs(struct FProductFilter* InFilter);
	void UpdateProductAttributes(struct FProductFilter* InFilter);
	void UpdateProductQualities(struct FProductFilter* InFilter);
	void UpdateProductSlots(struct FProductFilter* InFilter);
	int GetFilterQuantity(struct FProductFilter* InFilter);
	void InitProductSeriesIDs();
	void InitProductAttributes();
	void InitProductQualities();
	void InitProductSlots();
	void OnShellSet();
	class UProfile_TA* GetProfile();
};


// Class TAGame.GFxData_ProductLevelUpgrade_TA
// 0x001C (0x0070 - 0x0054)
class UGFxData_ProductLevelUpgrade_TA : public UGFxDataSingleton_X
{
public:
	int                                                ProductLevel;                                     		// 0x0054(0x0004) (CPF_DataBinding)
	unsigned char                                      UnknownData00[0x8];                               		// 0x0058(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_ProductLevelUpgrade_TA.ProductInstanceID
	TArray<struct FProductLevelData>                   Levels;                                           		// 0x0060(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x006C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductLevelUpgrade_TA");
		return ptr;
	}


	class UProfile_TA* GetProfile();
	void OnProductUpgradeFailed();
	void OnProductUpgradeComplete();
	void HandleLevelUpgradeComplete(class URPC_ProductUpgradeLevel_TA* RPC);
	void UpgradeToLevel(int DesiredLevel);
	void InitProductData();
};


// Class TAGame.RPC_ProductUpgradeLevel_TA
// 0x0054 (0x00E8 - 0x0094)
class URPC_ProductUpgradeLevel_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	unsigned char                                      UnknownData00[0x8];                               		// 0x00C4(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_ProductUpgradeLevel_TA.InstanceID
	int                                                DesiredLevel;                                     		// 0x00CC(0x0004)
	TArray<struct FOnlineProductData>                  ReceivedProducts;                                 		// 0x00D0(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   Products;                                         		// 0x00DC(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductUpgradeLevel_TA");
		return ptr;
	}


	void OnComplete();
	class URPC_ProductUpgradeLevel_TA* SetDesiredLevel(int Level);
	class URPC_ProductUpgradeLevel_TA* SetInstanceID();
	class URPC_ProductUpgradeLevel_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GFxData_QuickChatBindings_TA
// 0x0030 (0x0084 - 0x0054)
class UGFxData_QuickChatBindings_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FLocalizedQuickChat>                 AllQuickChats;                                    		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FLocalizedQuickChatBinding>          Bindings;                                         		// 0x0060(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FName>                               QuickChats;                                       		// 0x006C(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	TArray<struct FName>                               PostGameQuickChats;                               		// 0x0078(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_QuickChatBindings_TA");
		return ptr;
	}


	int SortQuickChat(const struct FName& Value1, const struct FName& Value2);
	void GenerateBindings();
	void OnBindingsReset();
	void ResetBindings();
	void ChangeBinding(int Index, const struct FName& Message);
	void OnShellSet();
};


// Class TAGame.GFxData_RedeemCodes_TA
// 0x001C (0x0070 - 0x0054)
class UGFxData_RedeemCodes_TA : public UGFxDataSingleton_X
{
public:
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0054(0x0004) (CPF_Transient)
	struct FString                                     RedeemingTitleString;                             		// 0x0058(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     RedeemingBodyString;                              		// 0x0064(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_RedeemCodes_TA");
		return ptr;
	}


	void HandleRedeemCode(class URPC_RedeemCode_TA* RPC);
	void Redeem(const struct FString& InCode);
};


// Class TAGame.RPC_RedeemCode_TA
// 0x0048 (0x00DC - 0x0094)
class URPC_RedeemCode_TA : public URPC_TA
{
public:
	struct FString                                     Code;                                             		// 0x0094(0x000C) (CPF_NeedCtorLink)
	struct FUniqueNetId                                PlayerID;                                         		// 0x00A0(0x0030)
	TArray<struct FOnlineProductData>                  Drops;                                            		// 0x00D0(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_RedeemCode_TA");
		return ptr;
	}


	class URPC_RedeemCode_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	class URPC_RedeemCode_TA* SetCode(const struct FString& InCode);
};


// Class TAGame.GFxData_SchematicTradeIn_TA
// 0x0024 (0x0078 - 0x0054)
class UGFxData_SchematicTradeIn_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FSchematicResourceData>              Schematics;                                       		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0060(0x0004) (CPF_Transient)
	struct FString                                     InvalidProductString;                             		// 0x0064(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	int                                                MinResources;                                     		// 0x0070(0x0004)
	int                                                MaxResources;                                     		// 0x0074(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_SchematicTradeIn_TA");
		return ptr;
	}


	class UProfile_TA* GetProfile();
	int GetRemainingResources();
	bool IsProcessingTrade();
	void OnSchematicTradeInFailed();
	void OnSchematicTradeInComplete();
	void HandleTradeInComplete(class URPC_SchematicsTradeIn_TA* RPC);
	void SetSchematicResource(int Amount);
	void IncrementSchematicResource(int Amount);
	void RemoveSchematic();
	bool AddSchematic();
	void TradeIn();
};


// Class TAGame.RPC_SchematicsTradeIn_TA
// 0x0074 (0x0108 - 0x0094)
class URPC_SchematicsTradeIn_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	unsigned char                                      UnknownData00[0x8];                               		// 0x00C4(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_SchematicsTradeIn_TA.CrateID
	TArray<struct FSchematicResourceData>              Schematics;                                       		// 0x00CC(0x000C) (CPF_NeedCtorLink)
	TArray<struct FOnlineProductData>                  Drops;                                            		// 0x00D8(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FOnlineProductData>                  CrateDrops;                                       		// 0x00E4(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0xC];                               		// 0x00F0(0x000C) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_SchematicsTradeIn_TA.ConsumedInstanceIDs
	TArray<class UOnlineProduct_TA*>                   Products;                                         		// 0x00FC(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_SchematicsTradeIn_TA");
		return ptr;
	}


	void OnComplete();
	class URPC_SchematicsTradeIn_TA* SetSchematics(TArray<struct FSchematicResourceData>* InSchematics);
	class URPC_SchematicsTradeIn_TA* SetCrateID();
	class URPC_SchematicsTradeIn_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GFxData_TrainingMode_TA
// 0x00E8 (0x013C - 0x0054)
class UGFxData_TrainingMode_TA : public UGFxDataRow_X
{
public:
	TEnumAsByte<enum class EBasicLoadResult>           Status;                                           		// 0x0054(0x0001) (CPF_Transient, CPF_DataBinding)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0055(0x0003) MISSED OFFSET
	struct FString                                     SanitizedTrainingModeName;                        		// 0x0058(0x000C) (CPF_Transient, CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     SanitizedCreatorName;                             		// 0x0064(0x000C) (CPF_Transient, CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     Tags;                                             		// 0x0070(0x000C) (CPF_Transient, CPF_NeedCtorLink, CPF_DataBinding)
	unsigned long                                      bOwned : 1;                                       		// 0x007C(0x0004) (CPF_Transient, CPF_DataBinding)
	unsigned long                                      bFavorited : 1;                                   		// 0x007C(0x0004) (CPF_Transient, CPF_DataBinding)
	unsigned long                                      bOutOfDate : 1;                                   		// 0x007C(0x0004) (CPF_Transient, CPF_DataBinding)
	struct FString                                     PublishedTime;                                    		// 0x0080(0x000C) (CPF_Transient, CPF_NeedCtorLink, CPF_DataBinding)
	struct FString                                     UpdatedAtTime;                                    		// 0x008C(0x000C) (CPF_Transient, CPF_NeedCtorLink, CPF_DataBinding)
	int                                                ShotsCompleted;                                   		// 0x0098(0x0004) (CPF_Transient, CPF_DataBinding)
	struct FString                                     CreatorPlatform;                                  		// 0x009C(0x000C) (CPF_Transient, CPF_NeedCtorLink, CPF_DataBinding)
	class UTexture*                                    CreatorAvatar;                                    		// 0x00A8(0x0004) (CPF_Transient, CPF_DataBinding)
	struct FString                                     SaveDataFilename;                                 		// 0x00AC(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     AutoplayName;                                     		// 0x00B8(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	class USaveData_GameEditor_Training_TA*            SaveData;                                         		// 0x00C4(0x0004) (CPF_Transient)
	struct FString                                     OpenTrainingMapBaseCmd;                           		// 0x00C8(0x000C) (CPF_Const, CPF_NeedCtorLink)
	struct FString                                     OutOfDateMessage;                                 		// 0x00D4(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     DownloadingTrainingModeTitleMessage;              		// 0x00E0(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	struct FString                                     DownloadingTrainingModeBodyMessage;               		// 0x00EC(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x00F8(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventTrainingModeDownloadPlay__Delegate;        		// 0x00FC(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x00FC(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTrainingModeFavorited__Delegate;           		// 0x010C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                               		// 0x010C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTrainingModeLoaded__Delegate;              		// 0x011C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                               		// 0x011C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventTrainingModeSaved__Delegate;               		// 0x012C(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData04[0x4];                               		// 0x012C(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TrainingMode_TA");
		return ptr;
	}


	void UpdateOutOfDate();
	void HandleUnpublish(class URPC_TrainingEditor_DeleteTrainingData_TA* RPC);
	void OnDelete(TEnumAsByte<enum class ETrainingSaveType> CurrentTab);
	void ForceDelete(const struct FString& FilePath);
	void AddToFavorites();
	void LoadFile(const struct FString& Filename, const struct FName& inMapName, bool bInPlaytest);
	void Play(const struct FName& inMapName, bool bInPlaytest);
	void HandleDownloadAndPlayResults(class URPC_TrainingEditor_GetTrainingData_TA* RPC);
	void HandleDownload(class URPC_TrainingEditor_GetTrainingData_TA* RPC);
	void HandleUpdateTrainingData(class URPC_TrainingEditor_UpdateTrainingData_TA* RPC);
	void HandleAddTrainingData(class URPC_TrainingEditor_AddTrainingData_TA* RPC);
	void Submit();
	void HandleCreatorNameSanitized(const struct FString& DesiredName, const struct FString& SanitizedName);
	void HandleTrainingModeNameSanitized(const struct FString& DesiredName, const struct FString& SanitizedName);
	void OnDataLoaded(const struct FLoadObjectResult& Result);
	void SetTrainingModeFromSave(const struct FString& Filename);
	void HandleGetAvatar(const struct FUniqueNetId& InPlayerId, class UTexture* InAvatar, const struct FString& OnlinePlayerName);
	void SetTrainingMode(class UTrainingEditorData_TA* InTrainingData);
	void UpdateUITimes();
	void SetTrainingModeFromRPC(class UTrainingEditorData_TA* ResultData);
	void HandleAutoplay(const struct FSaveObjectResult& Result);
	void HandleSaveResult(const struct FSaveObjectResult& Result);
	bool NotifySaveErrors(class UError_X* Error, TEnumAsByte<enum class ESaveGameResult> SaveResult);
	void SaveTrainingMode(const struct FString& Filename, class UTrainingEditorData_TA* NewTrainingData, bool bInOwned, bool bAutoPlay);
	void DisplayError(class UError_X* Error);
	class UTrainingEditorMetrics_TA* GetTrainingMetrics();
	void OnShellSet();
	void EventTrainingModeSaved(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bSuccess);
	void EventTrainingModeLoaded(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bSuccess);
	void EventTrainingModeFavorited(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bAdded);
	void EventTrainingModeDownloadPlay(class UGFxData_TrainingMode_TA* OutTrainingMode, const struct FString& Code, const struct FString& Filename);
};


// Class TAGame.RPC_TrainingEditor_DeleteTrainingData_TA
// 0x000C (0x00A0 - 0x0094)
class URPC_TrainingEditor_DeleteTrainingData_TA : public URPC_TA
{
public:
	struct FString                                     Code;                                             		// 0x0094(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TrainingEditor_DeleteTrainingData_TA");
		return ptr;
	}


	class URPC_TrainingEditor_DeleteTrainingData_TA* SetTrainingModeCode(const struct FString& InCode);
};


// Class TAGame.RPC_TrainingEditor_GetTrainingData_TA
// 0x0010 (0x00A4 - 0x0094)
class URPC_TrainingEditor_GetTrainingData_TA : public URPC_TA
{
public:
	struct FString                                     Code;                                             		// 0x0094(0x000C) (CPF_NeedCtorLink)
	class UTrainingEditorData_TA*                      TrainingData;                                     		// 0x00A0(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TrainingEditor_GetTrainingData_TA");
		return ptr;
	}


	class URPC_TrainingEditor_GetTrainingData_TA* SetTrainingModeID(const struct FString& InTrainingModeCode);
};


// Class TAGame.GFxData_TrainingModeConstants_TA
// 0x002C (0x0080 - 0x0054)
class UGFxData_TrainingModeConstants_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FTrainingModeDifficulty>             Difficulties;                                     		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FTrainingModeType>                   Types;                                            		// 0x0060(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FTrainingModeTag>                    Tags;                                             		// 0x006C(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	struct FName                                       DefaultMap;                                       		// 0x0078(0x0008) (CPF_DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TrainingModeConstants_TA");
		return ptr;
	}


	struct FName STATIC_GetValidatedMap(const struct FName& MapName);
	void InitTags();
	void OnShellSet();
};


// Class TAGame.GFxData_TrainingModeBrowser_TA
// 0x008C (0x00E0 - 0x0054)
class UGFxData_TrainingModeBrowser_TA : public UGFxDataSingleton_X
{
public:
	struct FSearchCacheData                            CachedOnlineSearchResults[0x2];                   		// 0x0054(0x0010) (CPF_NeedCtorLink)
	class URPC_TA*                                     PendingRPC;                                       		// 0x0074(0x0004) (CPF_Transient)
	float                                              CachedSearchDuration;                             		// 0x0078(0x0004) (CPF_Const)
	float                                              CachedFavoriteTimeoutTime;                        		// 0x007C(0x0004) (CPF_Transient)
	TArray<struct FFavoritedFileMetaData>              FavoritedFilesMetaData;                           		// 0x0080(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	unsigned long                                      bFavoritesLoaded : 1;                             		// 0x008C(0x0004) (CPF_Transient)
	float                                              CachedFavoriteDuration;                           		// 0x0090(0x0004) (CPF_Const)
	TArray<struct FCachedDownloadedFile>               CachedDownloadedFiles;                            		// 0x0094(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<struct FString>                             LoadingFiles;                                     		// 0x00A0(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	struct FString                                     DownloadedFilename;                               		// 0x00AC(0x000C) (CPF_Const, CPF_NeedCtorLink)
	int                                                MaxCachedDownloadedFiles;                         		// 0x00B8(0x0004) (CPF_Const)
	class USaveData_GameEditor_Training_TA*            TrainingSaveData;                                 		// 0x00BC(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventFavoritesLoaded__Delegate;                 		// 0x00C0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                               		// 0x00C0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY
	struct FScriptDelegate                             __EventAllTrainingFilesLoaded__Delegate;          		// 0x00D0(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x00D0(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TrainingModeBrowser_TA");
		return ptr;
	}


	class UGFxData_TrainingMode_TA* DebugGetTrainingModeByIdx(int Index);
	class UGFxData_TrainingMode_TA* DebugGetTrainingModeByName(const struct FString& TM_Name);
	struct FString GetDownloadedFilename();
	void DeleteTrainingMode(int RowIndex, TEnumAsByte<enum class ETrainingSaveType> CurrentTab);
	void DeleteTrainingModeData(class UGFxData_TrainingMode_TA* TrainingMode, TEnumAsByte<enum class ETrainingSaveType> CurrentTab);
	void OnTrainingModesReady();
	void SetTrainingFiles(TArray<struct FString> Files, bool bLoadingFavorites);
	void HandleHeaders(TArray<struct FString> Files, TEnumAsByte<enum class EBasicLoadResult> Result);
	void HandleFavoritesLoaded(class UGFxData_TrainingModeBrowser_TA* B);
	void GetLocalTrainingFiles(bool bLoadingFavorites);
	void HandleTrainingModeDownloadPlay(class UGFxData_TrainingMode_TA* OutTrainingMode, const struct FString& InCode, const struct FString& Filename);
	void HandleTrainingModeFavorited(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bAdded, struct FFavoritedFileMetaData* StructInitializer__s_EA374B4449BF4832C13B09B4A17CB0A6);
	bool IsFavorited(const struct FString& InGuid);
	void HandleBrowseResults(class URPC_TrainingEditor_BrowseTrainingData_TA* RPC);
	void HandleSearchByCode(class URPC_TrainingEditor_GetTrainingData_TA* RPC);
	void OnSearchCodeResults(bool bSuccess);
	void HandleOnlineHeaders(TArray<struct FString> LocalFiles, TEnumAsByte<enum class EBasicLoadResult> Result, bool bFeaturedOnly);
	void HandleLoadFeaturedHeaders(TArray<struct FString> LocalFiles, TEnumAsByte<enum class EBasicLoadResult> Result);
	void HandleLoadAllPublicHeaders(TArray<struct FString> LocalFiles, TEnumAsByte<enum class EBasicLoadResult> Result);
	bool LoadIfFavorited(class UGFxData_TrainingMode_TA* GFxTrainingData, const struct FGuid& InGuid);
	void RepopulateFromCache(bool bFeaturedOnly);
	void GetSearchResults(const struct FString& Code, bool bForceRefresh, bool bFeaturedOnly);
	void HandleAllFavoritesLoaded(class UGFxData_TrainingModeBrowser_TA* TrainingModeBrowser);
	void ResetTrainingList();
	void HandleDownloadResults(class URPC_TrainingEditor_GetTrainingData_TA* RPC);
	void HandleListPlayerTrainingData(class URPC_TrainingEditor_ListPlayerTrainingData_TA* RPC);
	void SyncTrainingModes();
	void HandleListPlayerTrainingDataTimestamp(class URPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA* RPC);
	void EvaluateUpdateAtTimes();
	void SetFavoriteUpdatedAtTime(const struct FString& InCode);
	void SyncFavoritedModes(struct FFavoritedFileMetaData* StructInitializer__s_3A9CE3A64EACECB656FE17BCFD36396C);
	void HandleLocalTrainingModeLoaded(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bSuccess);
	void HandleTrainingModeLoaded(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bSuccess);
	void HandleDownloadedTrainingModeSaved(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bSuccess);
	void HandleLocalTrainingModeSaved(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bSuccess);
	void CreateNew(const struct FString& NewName, TEnumAsByte<enum class ETrainingType> NewType, TEnumAsByte<enum class EDifficulty> NewDifficulty, const struct FName& MapName, TArray<int> Tags);
	void DisplayError(class UError_X* Error);
	class UTrainingEditorMetrics_TA* GetTrainingMetrics();
	class APlayerControllerBase_TA* GetPlayerController();
	void NotifyWhenFavoritesLoaded(const struct FScriptDelegate& Callback);
	void HandleFavorites(TArray<struct FString> Files, TEnumAsByte<enum class EBasicLoadResult> Result, struct FFavoritedFileMetaData* StructInitializer__s_A77E7F66489416A4903ED0B846182119);
	void HandlePsyNetLogin(class UOnlinePlayer_X* OnlinePlayer);
	void OnShellSet();
	void EventAllTrainingFilesLoaded(class UGFxData_TrainingModeBrowser_TA* Browser);
	void EventFavoritesLoaded(class UGFxData_TrainingModeBrowser_TA* Browser);
};


// Class TAGame.RPC_TrainingEditor_UpdateTrainingData_TA
// 0x0004 (0x0098 - 0x0094)
class URPC_TrainingEditor_UpdateTrainingData_TA : public URPC_TA
{
public:
	class UTrainingEditorData_TA*                      TrainingData;                                     		// 0x0094(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TrainingEditor_UpdateTrainingData_TA");
		return ptr;
	}


	class URPC_TrainingEditor_UpdateTrainingData_TA* SetTrainingData(class UTrainingEditorData_TA** InTrainingData);
};


// Class TAGame.RPC_TrainingEditor_AddTrainingData_TA
// 0x0010 (0x00A4 - 0x0094)
class URPC_TrainingEditor_AddTrainingData_TA : public URPC_TA
{
public:
	class UTrainingEditorData_TA*                      TrainingData;                                     		// 0x0094(0x0004)
	struct FString                                     Code;                                             		// 0x0098(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TrainingEditor_AddTrainingData_TA");
		return ptr;
	}


	class URPC_TrainingEditor_AddTrainingData_TA* SetTrainingData(class UTrainingEditorData_TA** InTrainingData);
};


// Class TAGame.RPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA
// 0x0018 (0x00AC - 0x0094)
class URPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA : public URPC_TA
{
public:
	TArray<struct FString>                             Codes;                                            		// 0x0094(0x000C) (CPF_NeedCtorLink)
	TArray<struct FCodeTimePair>                       TrainingData;                                     		// 0x00A0(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA");
		return ptr;
	}


	class URPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA* SetCodes(TArray<struct FString>* InCodes);
};


// Class TAGame.RPC_TrainingEditor_BrowseTrainingData_TA
// 0x0010 (0x00A4 - 0x0094)
class URPC_TrainingEditor_BrowseTrainingData_TA : public URPC_TA
{
public:
	unsigned long                                      bFeaturedOnly : 1;                                		// 0x0094(0x0004)
	TArray<class UTrainingEditorData_TA*>              TrainingData;                                     		// 0x0098(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TrainingEditor_BrowseTrainingData_TA");
		return ptr;
	}


	class URPC_TrainingEditor_BrowseTrainingData_TA* SetFeaturedOnly(bool bInFeaturedOnly);
};


// Class TAGame.RPC_TrainingEditor_ListPlayerTrainingData_TA
// 0x000C (0x00A0 - 0x0094)
class URPC_TrainingEditor_ListPlayerTrainingData_TA : public URPC_TA
{
public:
	TArray<struct FString>                             Codes;                                            		// 0x0094(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TrainingEditor_ListPlayerTrainingData_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_TrainingModeEditor_TA
// 0x0044 (0x0098 - 0x0054)
class UGFxData_TrainingModeEditor_TA : public UGFxDataSingleton_X
{
public:
	class AGameEvent_TrainingEditor_TA*                MyGameEvent;                                      		// 0x0054(0x0004) (CPF_Transient)
	struct FString                                     SanitizedTrainingModeName;                        		// 0x0058(0x000C) (CPF_Transient, CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FEditorRoundData>                    RoundData;                                        		// 0x0064(0x000C) (CPF_Transient, CPF_NeedCtorLink, CPF_DataBinding)
	int                                                CurrentRound;                                     		// 0x0070(0x0004) (CPF_Transient, CPF_DataBinding)
	TArray<struct FTrainingModeTag>                    Tags;                                             		// 0x0074(0x000C) (CPF_Transient, CPF_NeedCtorLink, CPF_DataBinding)
	TEnumAsByte<enum class EEditingType>               Editing;                                          		// 0x0080(0x0001) (CPF_Transient, CPF_DataBinding)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0081(0x0003) MISSED OFFSET
	float                                              BallStartSpeed;                                   		// 0x0084(0x0004) (CPF_Transient, CPF_DataBinding)
	float                                              BallScreenPosX;                                   		// 0x0088(0x0004) (CPF_Transient, CPF_DataBinding)
	float                                              BallScreenPosY;                                   		// 0x008C(0x0004) (CPF_Transient, CPF_DataBinding)
	unsigned long                                      bOwned : 1;                                       		// 0x0090(0x0004) (CPF_Transient, CPF_DataBinding)
	unsigned long                                      bNoEditor : 1;                                    		// 0x0090(0x0004) (CPF_Transient, CPF_DataBinding)
	unsigned long                                      bUnsavedChanges : 1;                              		// 0x0090(0x0004) (CPF_Transient, CPF_DataBinding)
	class UGFxModal_X*                                 ModalProcessing;                                  		// 0x0094(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TrainingModeEditor_TA");
		return ptr;
	}


	void OnToggleControls();
	void Save();
	void HandleSaveResult(bool bSuccess);
	void HandleUnsavedChanges(bool bInUnsavedChanges);
	void DuplicateRound(int Index);
	void ReorderRound(int FromIndex, int ToIndex);
	void StopEditingRound();
	void EditCurrentRound();
	void RestartSequence();
	void TestSequence();
	void TestCurrentRound();
	void CreateRound();
	void HandleRoundTimeChanged(class AGameEvent_TrainingEditor_TA* InGameEvent);
	void HandleRoundChanged(class AGameEvent_TrainingEditor_TA* InGameEvent);
	void SetGameEvent(class AGameEvent_TrainingEditor_TA* InGameEvent);
	void HandleNameSanitized(const struct FString& DesiredName, const struct FString& SanitizedName);
	void UpdateTrainingData();
	void SetRoundTimeLimit(int Time);
	void DeleteRound(int RoundToDelete);
	void SetActiveRound(int NewRound);
	void SetMetaData(const struct FString& NewName, TEnumAsByte<enum class ETrainingType> NewType, TEnumAsByte<enum class EDifficulty> NewDifficulty, TArray<int> NewTags);
	void HandlePRIReceived(class APlayerController_X* PC_X);
	class APlayerController_TA* GetPlayerController();
	void OnShellSet();
};


// Class TAGame.GFxData_Workshop_TA
// 0x0024 (0x0078 - 0x0054)
class UGFxData_Workshop_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FDownloadedWorkshopData>             Items;                                            		// 0x0054(0x000C) (CPF_NeedCtorLink, CPF_DataBinding)
	TArray<struct FUniqueNetId>                        RetrievedNetIds;                                  		// 0x0060(0x000C) (CPF_NeedCtorLink)
	struct FString                                     ItemRemoved;                                      		// 0x006C(0x000C) (CPF_Const, CPF_Localized, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Workshop_TA");
		return ptr;
	}


	void OnAvatarPersonaHandler(const struct FUniqueNetId& PlayerNetId, class UTexture* Avatar, const struct FString& OnlinePlayerName);
	void OnEventImageDownloaded(class UOnlineImageDownloaderWeb_X* Downloader, const struct FDownloadedImage& Image);
	void HandleWorkshopData(bool bSuccess, TArray<struct FDownloadedWorkshopData>* WorkshopItems);
	void LoadWorkshopMap(struct FString* FullPath);
	void LoadAllWorkshopMapData();
};


// Class TAGame.GFxData_WorldSelection_TA
// 0x0004 (0x0058 - 0x0054)
class UGFxData_WorldSelection_TA : public UGFxDataSingleton_X
{
public:
	class APlayerControllerBase_TA*                    Player;                                           		// 0x0054(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_WorldSelection_TA");
		return ptr;
	}


	void SetSelectionUpdate(bool bUpdate);
	void SetWorldSelection(bool bTurnOn);
	void OnShellSet();
};


// Class TAGame.GFxHUD_GameEditor_TA
// 0x0008 (0x0584 - 0x057C)
class AGFxHUD_GameEditor_TA : public AGFxHUD_TA
{
public:
	class UGFxData_TrainingModeEditor_TA*              EditorData;                                       		// 0x057C(0x0004) (CPF_Transient)
	class AGameEvent_TrainingEditor_TA*                TrainingGameEvent;                                		// 0x0580(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxHUD_GameEditor_TA");
		return ptr;
	}


	void ToggleControls();
	void UpdateCarData();
	void SetGameEvent(class AGameEvent_TA* InGameEvent);
	void InitGFx();
};


// Class TAGame.InMapScoreboard_TA
// 0x007C (0x0268 - 0x01EC)
class AInMapScoreboard_TA : public AActor
{
public:
	class AStaticMeshActor*                            StaticMesh;                                       		// 0x01EC(0x0004) (CPF_Edit)
	class UMaterialInstanceConstant*                   MaterialInstance;                                 		// 0x01F0(0x0004) (CPF_Edit)
	int                                                MaterialIndex;                                    		// 0x01F4(0x0004) (CPF_Edit)
	int                                                TeamIndex;                                        		// 0x01F8(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           GoalAnimation;                                    		// 0x01FC(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	float                                              GoDuration;                                       		// 0x020C(0x0004) (CPF_Edit)
	struct FName                                       GoSwitch;                                         		// 0x0210(0x0008) (CPF_Edit)
	struct FName                                       GoalXPos;                                         		// 0x0218(0x0008) (CPF_Edit)
	struct FName                                       CountdownSwitch;                                  		// 0x0220(0x0008) (CPF_Edit)
	struct FName                                       CountdownToggle;                                  		// 0x0228(0x0008) (CPF_Edit)
	struct FName                                       ScoreToggle;                                      		// 0x0230(0x0008) (CPF_Edit)
	struct FName                                       ScoreParam;                                       		// 0x0238(0x0008) (CPF_Edit)
	struct FName                                       CountdownValueParam;                              		// 0x0240(0x0008) (CPF_Edit)
	int                                                LastCountdownTime;                                		// 0x0248(0x0004) (CPF_Transient)
	float                                              ReplayCountdownTime;                              		// 0x024C(0x0004) (CPF_Transient)
	unsigned long                                      bHasReplayCountdownTime : 1;                      		// 0x0250(0x0004) (CPF_Transient)
	class AGameEvent_Soccar_TA*                        GameEvent;                                        		// 0x0254(0x0004) (CPF_Transient)
	struct FName                                       LastState;                                        		// 0x0258(0x0008) (CPF_Transient)
	class UMaterialInstanceConstant*                   MIC;                                              		// 0x0260(0x0004) (CPF_Transient)
	float                                              GoalTime;                                         		// 0x0264(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.InMapScoreboard_TA");
		return ptr;
	}


	void HandleReplayGoalScored(class AGameEvent_Soccar_TA* InEvent, unsigned char ScoredOnTeam);
	void HideGo();
	void ShowGo();
	void HideCountdown();
	void ShowCountdown();
	void HideScore();
	void ShowScore();
	void UpdateScore(bool bNoReplay);
	void DisableAllSwitches();
	void Tick(float DeltaTime);
	void HandleCountDownTimeUpdated(class AGameEvent_TA* InEvent, int Seconds);
	void HandleGameStateChanged(class AGameEvent_TA* InEvent);
	void SetUpEvents();
	void PostBeginPlay();
};


// Class TAGame.LoadoutCollection_TA
// 0x000C (0x0048 - 0x003C)
class ULoadoutCollection_TA : public UObject
{
public:
	TArray<class ULoadoutPair_TA*>                     Pairs;                                            		// 0x003C(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutCollection_TA");
		return ptr;
	}


	class ULoadoutPair_TA* FindPair(const struct FString& PairName);
	void AddPair(class ULoadoutPair_TA* Pair);
};


// Class TAGame.LoadoutCollection_TA__FindPair__60C53D834053E9F5CB7E50866C0370B3
// 0x000C (0x0048 - 0x003C)
class ULoadoutCollection_TA__FindPair__60C53D834053E9F5CB7E50866C0370B3 : public UObject
{
public:
	struct FString                                     PairName;                                         		// 0x003C(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutCollection_TA__FindPair__60C53D834053E9F5CB7E50866C0370B3");
		return ptr;
	}


	bool LambdaCallback(class ULoadoutPair_TA* ComPair);
	class ULoadoutCollection_TA__FindPair__60C53D834053E9F5CB7E50866C0370B3* STATIC_StaticConstruct(class ULoadoutCollection_TA* InOuter);
	class ULoadoutCollection_TA__FindPair__60C53D834053E9F5CB7E50866C0370B3* SetPairName(const struct FString& Value);
};


// Class TAGame.LoadoutPair_TA
// 0x0018 (0x0054 - 0x003C)
class ULoadoutPair_TA : public UObject
{
public:
	struct FString                                     PairName;                                         		// 0x003C(0x000C) (CPF_NeedCtorLink)
	TArray<class ULoadoutTeam_TA*>                     Loadouts;                                         		// 0x0048(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutPair_TA");
		return ptr;
	}


	class ULoadoutPair_TA* STATIC_CreatePair(const struct FString& InPairName, TArray<class ULoadoutTeam_TA*>* ArrayInitializer__s_9A5A553345C52835DEECB3865813CEC5);
};


// Class TAGame.LoadoutConverter_TA
// 0x0000 (0x003C - 0x003C)
class ULoadoutConverter_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutConverter_TA");
		return ptr;
	}


	class ULoadoutSave_TA* STATIC_SetsToSave(class ULoadoutSet_TA* Equipped, TArray<class ULoadoutSet_TA*>* LoadoutSets);
	class ULoadoutEquipper_TA* STATIC_EquippedToEquipper(class ULoadoutSet_TA* Equipped, class ULoadoutCollection_TA* Collection);
	class ULoadoutCollection_TA* STATIC_SetsToCollection(TArray<class ULoadoutSet_TA*>* LoadoutSets, TArray<class ULoadoutPair_TA*>* MapLocal_871C77054D5A89D1B29427B8A178B1F4);
	class ULoadoutPair_TA* STATIC_SetToPair(class ULoadoutSet_TA* Set);
	class ULoadoutTeam_TA* STATIC_Loadout1ToTeam(class ULoadout_TA** Loadout);
	struct FLoadoutTeam STATIC_LoadoutDataToTeam(const struct FLoadoutData& Loadout);
	struct FLoadoutTeamColor STATIC_PaintToColor(struct FLoadoutTeamPaint* Paint, struct FLoadoutTeamColor* StructInitializer__s_28FE21B149F6129C220ADF8372A9038A);
};


// Class TAGame.LoadoutSave_TA
// 0x0008 (0x0044 - 0x003C)
class ULoadoutSave_TA : public UObject
{
public:
	class ULoadoutCollection_TA*                       Collection;                                       		// 0x003C(0x0004)
	class ULoadoutEquipper_TA*                         Equipper;                                         		// 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutSave_TA");
		return ptr;
	}


	class ULoadoutSave_TA* SetEquipper(class ULoadoutEquipper_TA* InEquipper);
	class ULoadoutSave_TA* SetCollection(class ULoadoutCollection_TA* InCollection);
};


// Class TAGame.LoadoutEquipper_TA
// 0x0004 (0x0040 - 0x003C)
class ULoadoutEquipper_TA : public UObject
{
public:
	class ULoadoutPair_TA*                             Equipped;                                         		// 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutEquipper_TA");
		return ptr;
	}


	void Equip(class ULoadoutPair_TA* Pair);
};


// Class TAGame.LoadoutConverter_TA__SetsToCollection__36CE8C4945D0386A1096489E0B111661
// 0x0000 (0x003C - 0x003C)
class ULoadoutConverter_TA__SetsToCollection__36CE8C4945D0386A1096489E0B111661 : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutConverter_TA__SetsToCollection__36CE8C4945D0386A1096489E0B111661");
		return ptr;
	}


	class ULoadoutPair_TA* LambdaCallback(class ULoadoutSet_TA* Set);
	class ULoadoutConverter_TA__SetsToCollection__36CE8C4945D0386A1096489E0B111661* STATIC_StaticConstruct(class ULoadoutConverter_TA* InOuter);
};


// Class TAGame.LoadoutConverter_TA__SetsToCollection__66FE427B48DDE2C9BA2A738E24346E18
// 0x0004 (0x0040 - 0x003C)
class ULoadoutConverter_TA__SetsToCollection__66FE427B48DDE2C9BA2A738E24346E18 : public UObject
{
public:
	class ULoadoutCollection_TA*                       Collection;                                       		// 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutConverter_TA__SetsToCollection__66FE427B48DDE2C9BA2A738E24346E18");
		return ptr;
	}


	void LambdaCallback(class ULoadoutPair_TA* Pair);
	class ULoadoutConverter_TA__SetsToCollection__66FE427B48DDE2C9BA2A738E24346E18* STATIC_StaticConstruct(class ULoadoutConverter_TA* InOuter);
	class ULoadoutConverter_TA__SetsToCollection__66FE427B48DDE2C9BA2A738E24346E18* SetCollection(class ULoadoutCollection_TA* Value);
};


// Class TAGame.LoadoutTeam_TA
// 0x0014 (0x0050 - 0x003C)
class ULoadoutTeam_TA : public UObject
{
public:
	struct FLoadoutTeam                                Data;                                             		// 0x003C(0x0014) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutTeam_TA");
		return ptr;
	}


	void SetData(const struct FLoadoutTeam& InData);
};


// Class TAGame.Mutator_ItemsMode_TA
// 0x0004 (0x0058 - 0x0054)
class UMutator_ItemsMode_TA : public UMutator_TA
{
public:
	class UVehiclePickup_BoostModifier_TA*             BoostModifier;                                    		// 0x0054(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_ItemsMode_TA");
		return ptr;
	}


	void MutateObject(class UObject* O);
};


// Class TAGame.PickupTimer_TA
// 0x0004 (0x0228 - 0x0224)
class APickupTimer_TA : public ACarComponent_TA
{
public:
	struct FColor                                      TextColor;                                        		// 0x0224(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PickupTimer_TA");
		return ptr;
	}

};


// Class TAGame.PlayerInput_Edit_TA
// 0x0000 (0x0324 - 0x0324)
class UPlayerInput_Edit_TA : public UPlayerInput_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInput_Edit_TA");
		return ptr;
	}


	void InitFromProfile(class UProfile_TA* Profile);
};


// Class TAGame.PlayerInput_GameEditor_TA
// 0x0000 (0x0324 - 0x0324)
class UPlayerInput_GameEditor_TA : public UPlayerInput_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInput_GameEditor_TA");
		return ptr;
	}


	void HandleActiveBindingsChanged(class UProfile_TA* Profile);
};


// Class TAGame.ProductAsset_EngineAudio_TA
// 0x0000 (0x0070 - 0x0070)
class UProductAsset_EngineAudio_TA : public UProductAsset_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_EngineAudio_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_BonusCrate_TA
// 0x0000 (0x0054 - 0x0054)
class UProductAttribute_BonusCrate_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_BonusCrate_TA");
		return ptr;
	}

};


// Class TAGame.RPC_AchievementDataClear_TA
// 0x0030 (0x00C4 - 0x0094)
class URPC_AchievementDataClear_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_AchievementDataClear_TA");
		return ptr;
	}


	class URPC_AchievementDataClear_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_BanSelf_TA
// 0x000C (0x00A0 - 0x0094)
class URPC_BanSelf_TA : public URPC_TA
{
public:
	int                                                DurationSeconds;                                  		// 0x0094(0x0004)
	struct FName                                       ReasonID;                                         		// 0x0098(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_BanSelf_TA");
		return ptr;
	}

};


// Class TAGame.RPC_Challenge_GetAll_TA
// 0x0048 (0x00DC - 0x0094)
class URPC_Challenge_GetAll_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	TArray<int>                                        UnlockedChallenges;                               		// 0x00C4(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<int>                                        ActiveChallenges;                                 		// 0x00D0(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_Challenge_GetAll_TA");
		return ptr;
	}


	class URPC_Challenge_GetAll_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_CheatSetTrialTime_TA
// 0x0004 (0x0098 - 0x0094)
class URPC_CheatSetTrialTime_TA : public URPC_TA
{
public:
	int                                                TrialTime;                                        		// 0x0094(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_CheatSetTrialTime_TA");
		return ptr;
	}


	class URPC_CheatSetTrialTime_TA* SetTrialTime(int InTrialTime);
};


// Class TAGame.RPC_CheatTrialGiveExtraDay_TA
// 0x0000 (0x0094 - 0x0094)
class URPC_CheatTrialGiveExtraDay_TA : public URPC_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_CheatTrialGiveExtraDay_TA");
		return ptr;
	}

};


// Class TAGame.RPC_DecaySkill_TA
// 0x0000 (0x0094 - 0x0094)
class URPC_DecaySkill_TA : public URPC_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_DecaySkill_TA");
		return ptr;
	}

};


// Class TAGame.RPC_DeleteTrialData_TA
// 0x0000 (0x0094 - 0x0094)
class URPC_DeleteTrialData_TA : public URPC_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_DeleteTrialData_TA");
		return ptr;
	}

};


// Class TAGame.RPC_ProductsDebugAddPainted_TA
// 0x004C (0x00E0 - 0x0094)
class URPC_ProductsDebugAddPainted_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	TEnumAsByte<enum class EGameVersion>               GameVersion;                                      		// 0x00C4(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x00C5(0x0003) MISSED OFFSET
	TArray<struct FOnlineProductData>                  Drops;                                            		// 0x00C8(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   Products;                                         		// 0x00D4(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsDebugAddPainted_TA");
		return ptr;
	}


	void OnSuccess();
	class URPC_ProductsDebugAddPainted_TA* SetGameVersion(TEnumAsByte<enum class EGameVersion> InGameVersion);
	class URPC_ProductsDebugAddPainted_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_ProductsDebugAddProduct_TA
// 0x005C (0x00F0 - 0x0094)
class URPC_ProductsDebugAddProduct_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	int                                                ProductID;                                        		// 0x00C4(0x0004)
	int                                                SeriesID;                                         		// 0x00C8(0x0004)
	struct FOnlineProductData                          Product;                                          		// 0x00CC(0x0020) (CPF_Transient, CPF_NeedCtorLink)
	class UOnlineProduct_TA*                           OnlineProduct;                                    		// 0x00EC(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsDebugAddProduct_TA");
		return ptr;
	}


	void OnSuccess();
	class URPC_ProductsDebugAddProduct_TA* SetSeriesID(int InSeriesID);
	class URPC_ProductsDebugAddProduct_TA* SetProductID(int InProductID);
	class URPC_ProductsDebugAddProduct_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_ProductsDebugAddRandom_TA
// 0x0054 (0x00E8 - 0x0094)
class URPC_ProductsDebugAddRandom_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	int                                                Count;                                            		// 0x00C4(0x0004)
	int                                                SeriesID;                                         		// 0x00C8(0x0004)
	TEnumAsByte<enum class EGameVersion>               GameVersion;                                      		// 0x00CC(0x0001)
	unsigned char                                      UnknownData00[0x3];                               		// 0x00CD(0x0003) MISSED OFFSET
	TArray<struct FOnlineProductData>                  Drops;                                            		// 0x00D0(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   Products;                                         		// 0x00DC(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsDebugAddRandom_TA");
		return ptr;
	}


	void OnSuccess();
	class URPC_ProductsDebugAddRandom_TA* SetGameVersion(TEnumAsByte<enum class EGameVersion> InGameVersion);
	class URPC_ProductsDebugAddRandom_TA* SetSeriesID(int InSeriesID);
	class URPC_ProductsDebugAddRandom_TA* SetCount(int InCount);
	class URPC_ProductsDebugAddRandom_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_ProductsDebugSetCertified_TA
// 0x0074 (0x0108 - 0x0094)
class URPC_ProductsDebugSetCertified_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	unsigned char                                      UnknownData00[0x8];                               		// 0x00C4(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_ProductsDebugSetCertified_TA.InstanceID
	int                                                CertifiedStatID;                                  		// 0x00CC(0x0004)
	int                                                CertifiedValue;                                   		// 0x00D0(0x0004)
	struct FOnlineProductData                          Product;                                          		// 0x00D4(0x0020) (CPF_Transient, CPF_NeedCtorLink)
	class UOnlineProduct_TA*                           OnlineProduct;                                    		// 0x00F4(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventCertifiedComplete__Delegate;               		// 0x00F8(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x00F8(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsDebugSetCertified_TA");
		return ptr;
	}


	void OnComplete();
	class URPC_ProductsDebugSetCertified_TA* NotifyCertifiedComplete(const struct FScriptDelegate& Callback);
	class URPC_ProductsDebugSetCertified_TA* SetCertifiedValue(int InCertifiedValue);
	class URPC_ProductsDebugSetCertified_TA* SetCertifiedStatID(int InCertifiedStatID);
	class URPC_ProductsDebugSetCertified_TA* SetInstanceID(int InInstanceID);
	class URPC_ProductsDebugSetCertified_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	void EventCertifiedComplete(class UOnlineProduct_TA* NewProduct);
};


// Class TAGame.RPC_ProductsDebugSetPainted_TA
// 0x0070 (0x0104 - 0x0094)
class URPC_ProductsDebugSetPainted_TA : public URPC_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                         		// 0x0094(0x0030)
	unsigned char                                      UnknownData00[0x8];                               		// 0x00C4(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_ProductsDebugSetPainted_TA.InstanceID
	int                                                PaintID;                                          		// 0x00CC(0x0004)
	struct FOnlineProductData                          Product;                                          		// 0x00D0(0x0020) (CPF_Transient, CPF_NeedCtorLink)
	class UOnlineProduct_TA*                           OnlineProduct;                                    		// 0x00F0(0x0004) (CPF_Transient)
	struct FScriptDelegate                             __EventPaintedComplete__Delegate;                 		// 0x00F4(0x000C) (CPF_NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                               		// 0x00F4(0x0004) FIX WRONG TYPE SIZE OF PREVIUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsDebugSetPainted_TA");
		return ptr;
	}


	void OnComplete();
	class URPC_ProductsDebugSetPainted_TA* NotifyPaintedComplete(const struct FScriptDelegate& Callback);
	class URPC_ProductsDebugSetPainted_TA* SetPaintID(int InPaintID);
	class URPC_ProductsDebugSetPainted_TA* SetInstanceID(int InInstanceID);
	class URPC_ProductsDebugSetPainted_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	void EventPaintedComplete(class UOnlineProduct_TA* NewProduct);
};


// Class TAGame.SeqAct_GetPlayerCar_TA
// 0x0010 (0x010C - 0x00FC)
class USeqAct_GetPlayerCar_TA : public USequenceAction
{
public:
	struct FString                                     PlayerName;                                       		// 0x00FC(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class AActor*                                      FoundActor;                                       		// 0x0108(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetPlayerCar_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GetTeamScore_TA
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_GetTeamScore_TA : public USequenceAction
{
public:
	int                                                TeamIndex;                                        		// 0x00FC(0x0004)
	int                                                TeamScore;                                        		// 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetTeamScore_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_InstanceMaterial_TA
// 0x0014 (0x0110 - 0x00FC)
class USeqAct_InstanceMaterial_TA : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MaterialInstance;                                 		// 0x00FC(0x0004) (CPF_Edit)
	class ASkeletalMeshActor*                          SK;                                               		// 0x0100(0x0004)
	class AStaticMeshActor*                            SM;                                               		// 0x0104(0x0004)
	class UMaterialInstanceConstant*                   InstancedMaterial;                                		// 0x0108(0x0004)
	int                                                MatIndex;                                         		// 0x010C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_InstanceMaterial_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_MoveActor_TA
// 0x0010 (0x0120 - 0x0110)
class USeqAct_MoveActor_TA : public USeqAct_Latent
{
public:
	class AActor*                                      Actor;                                            		// 0x0110(0x0004)
	class AActor*                                      MoveTransform;                                    		// 0x0114(0x0004)
	float                                              InterpSpeed;                                      		// 0x0118(0x0004) (CPF_Edit)
	unsigned long                                      bConstantInterpSpeed : 1;                         		// 0x011C(0x0004) (CPF_Edit)
	unsigned long                                      bMove : 1;                                        		// 0x011C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_MoveActor_TA");
		return ptr;
	}


	bool Update(float DeltaTime);
	void Activated();
};


// Class TAGame.SeqAct_SetMatInstVectorParam_TA
// 0x0018 (0x0114 - 0x00FC)
class USeqAct_SetMatInstVectorParam_TA : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                          		// 0x00FC(0x0004) (CPF_Edit)
	struct FName                                       ParamName;                                        		// 0x0100(0x0008) (CPF_Edit)
	struct FVector                                     VectorValue;                                      		// 0x0108(0x000C) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetMatInstVectorParam_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetPostProcess_TA
// 0x0010 (0x010C - 0x00FC)
class USeqAct_SetPostProcess_TA : public USequenceAction
{
public:
	TArray<class UPostProcessChain*>                   Chains;                                           		// 0x00FC(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	unsigned long                                      bReplaceCurrentChain : 1;                         		// 0x0108(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetPostProcess_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqCond_CompareString_TA
// 0x001C (0x0100 - 0x00E4)
class USeqCond_CompareString_TA : public USequenceCondition
{
public:
	unsigned long                                      bIgnoreCase : 1;                                  		// 0x00E4(0x0004) (CPF_Edit)
	struct FString                                     StringA;                                          		// 0x00E8(0x000C) (CPF_NeedCtorLink)
	struct FString                                     StringB;                                          		// 0x00F4(0x000C) (CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqCond_CompareString_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqEvent_CarSpawned_TA
// 0x000C (0x0120 - 0x0114)
class USeqEvent_CarSpawned_TA : public USequenceEvent
{
public:
	struct FString                                     PlayerName;                                       		// 0x0114(0x000C) (CPF_Edit, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_CarSpawned_TA");
		return ptr;
	}


	void TriggerFor(class ACar_TA* Car);
	void HandleVehicleSetup(class ACar_TA* Car);
	void HandleCarSet(class APRI_TA* PRI);
	void RegisterEvent();
};


// Class TAGame.SpecialAttachment_TA
// 0x0028 (0x06B0 - 0x0688)
class ASpecialAttachment_TA : public ARBActor_TA
{
public:
	struct FVector                                     Offset;                                           		// 0x0688(0x000C) (CPF_Edit)
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x0694(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	float                                              BallHitMultiplier;                                		// 0x0698(0x0004) (CPF_Edit)
	float                                              CarHitMultiplier;                                 		// 0x069C(0x0004) (CPF_Edit)
	float                                              CarHitVerticalMultiplier;                         		// 0x06A0(0x0004) (CPF_Edit)
	float                                              CarHitTorque;                                     		// 0x06A4(0x0004) (CPF_Edit)
	unsigned long                                      bDemolishOnHit : 1;                               		// 0x06A8(0x0004) (CPF_Edit)
	unsigned long                                      bDemolishTeam : 1;                                		// 0x06A8(0x0004) (CPF_Edit)
	class ACar_TA*                                     AttachedCar;                                      		// 0x06AC(0x0004) (CPF_Net, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialAttachment_TA");
		return ptr;
	}


	void OnHitCar(class ACar_TA* Car, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnHitBall(class ABall_TA* Ball, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnRigidBodyCollision(const struct FAccumulatedRigidBodyCollision& Collision);
	void AttachToCar(class ACar_TA* InCar, TEnumAsByte<enum class EProductAttachmentSocket> InSocket);
	void Destroyed();
};


// Class TAGame.SpecialPickup_Attachment_TA
// 0x0008 (0x0274 - 0x026C)
class ASpecialPickup_Attachment_TA : public ASpecialPickup_TA
{
public:
	class ASpecialAttachment_TA*                       AttachmentArchetype;                              		// 0x026C(0x0004) (CPF_Edit)
	class ASpecialAttachment_TA*                       Attachment;                                       		// 0x0270(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Attachment_TA");
		return ptr;
	}


	void PickupEnd();
	void PickupStart();
};


// Class TAGame.SpecialPickup_Spring_TA
// 0x0148 (0x03D8 - 0x0290)
class ASpecialPickup_Spring_TA : public ASpecialPickup_Targeted_TA
{
public:
	float                                              Force;                                            		// 0x0290(0x0004) (CPF_Edit)
	float                                              VerticalForce;                                    		// 0x0294(0x0004) (CPF_Edit)
	struct FVector                                     Torque;                                           		// 0x0298(0x000C) (CPF_Edit)
	unsigned long                                      bApplyRelativeForce : 1;                          		// 0x02A4(0x0004) (CPF_Edit)
	unsigned long                                      bApplyConstantForce : 1;                          		// 0x02A4(0x0004) (CPF_Edit)
	unsigned long                                      bBreakConstantForceWithHit : 1;                   		// 0x02A4(0x0004) (CPF_Edit)
	unsigned long                                      bApplyRelativeConstantForce : 1;                  		// 0x02A4(0x0004) (CPF_Edit)
	unsigned long                                      bInstant : 1;                                     		// 0x02A4(0x0004) (CPF_Edit)
	unsigned long                                      bFollowAfterHit : 1;                              		// 0x02A4(0x0004) (CPF_Edit)
	unsigned long                                      bSpringed : 1;                                    		// 0x02A4(0x0004)
	struct FInterpCurveFloat                           RelativeForceCurve;                               		// 0x02A8(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	float                                              RelativeForceNormalDirection;                     		// 0x02B8(0x0004) (CPF_Edit)
	float                                              MaxSpringLength;                                  		// 0x02BC(0x0004) (CPF_Edit)
	float                                              ConstantForce;                                    		// 0x02C0(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           RelativeConstantForceCurve;                       		// 0x02C4(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	struct FInterpCurveFloat                           SpringLengthCurve;                                		// 0x02D4(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	struct FVector                                     FromOffset;                                       		// 0x02E4(0x000C) (CPF_Edit)
	class UStaticMesh*                                 SpringMesh;                                       		// 0x02F0(0x0004) (CPF_Edit)
	struct FVector                                     SpringMeshScale;                                  		// 0x02F4(0x000C) (CPF_Edit)
	float                                              SpringMeshInitialSize;                            		// 0x0300(0x0004) (CPF_Edit)
	struct FRotator                                    SpringRotationOffset;                             		// 0x0304(0x000C) (CPF_Edit)
	class UStaticMesh*                                 HittingMesh;                                      		// 0x0310(0x0004) (CPF_Edit)
	struct FVector                                     HittingMeshScale;                                 		// 0x0314(0x000C) (CPF_Edit)
	struct FVector                                     HittingMeshOffset;                                		// 0x0320(0x000C) (CPF_Edit)
	struct FRotator                                    HittingRotationOffset;                            		// 0x032C(0x000C) (CPF_Edit)
	float                                              HitDistanceOffset;                                		// 0x0338(0x0004) (CPF_Edit)
	float                                              AfterSpringDuration;                              		// 0x033C(0x0004) (CPF_Edit)
	TEnumAsByte<enum class EBallHitType>               BallHitType;                                      		// 0x0340(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x0341(0x0003) MISSED OFFSET
	struct FInterpCurveFloat                           AfterHitLengthCurve;                              		// 0x0344(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	class AFXActor_TA*                                 HitFXArchetype;                                   		// 0x0354(0x0004) (CPF_Edit)
	class AFXActor_TA*                                 ShootFXArchetype;                                 		// 0x0358(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 HitSFX;                                           		// 0x035C(0x0004) (CPF_Edit)
	struct FName                                       FadeOutParam;                                     		// 0x0360(0x0008) (CPF_Edit)
	struct FInterpCurveFloat                           FadeOutCurve;                                     		// 0x0368(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	float                                              MinSpringLength;                                  		// 0x0378(0x0004) (CPF_Edit)
	float                                              WeldedForceScalar;                                		// 0x037C(0x0004) (CPF_Edit)
	float                                              WeldedVerticalForce;                              		// 0x0380(0x0004) (CPF_Edit)
	float                                              CurrentSpringLength;                              		// 0x0384(0x0004)
	float                                              SpringedTime;                                     		// 0x0388(0x0004)
	class UStaticMeshComponent_TA*                     SMC;                                              		// 0x038C(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class UMaterialInstance*                           SMI;                                              		// 0x0390(0x0004) (CPF_Transient)
	class UStaticMeshComponent_TA*                     HMC;                                              		// 0x0394(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	TArray<class UMaterialInstance*>                   HMI;                                              		// 0x0398(0x000C) (CPF_Transient, CPF_NeedCtorLink)
	float                                              AfterSpringTime;                                  		// 0x03A4(0x0004) (CPF_Transient)
	float                                              SpringToTime;                                     		// 0x03A8(0x0004) (CPF_Transient)
	struct FVector                                     SpringOrigin;                                     		// 0x03AC(0x000C) (CPF_Transient)
	struct FVector                                     SpringedLocation;                                 		// 0x03B8(0x000C) (CPF_Transient)
	struct FVector                                     SpringedNormal;                                   		// 0x03C4(0x000C) (CPF_Transient)
	float                                              SpringedLength;                                   		// 0x03D0(0x0004) (CPF_Transient)
	class AFXActor_TA*                                 ShootFX;                                          		// 0x03D4(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Spring_TA");
		return ptr;
	}


	void PickupEnd();
	void HandleCarTouchedBall(class ABall_TA* Ball, class ACar_TA* OtherCar, TEnumAsByte<enum class EBallHitType> HitType);
	void ScaleSpringMeshToLocation(const struct FVector& NewLocation, const struct FVector& TargetLoction);
	void UpdateVisual(float DeltaTime);
	void PickupTick(float DeltaTime);
	void ApplyForces(float ActiveTime);
	struct FVector GetRelativeConstantForce(const struct FVector& Direction);
	struct FVector GetRelativeImpulse(const struct FVector& Direction);
	void SpawnHitFX();
	void DoSpring(bool bFirstHit);
	void RemovePickupFX();
	void InitPickupFX();
	void PickupStart();
};


// Class TAGame.SpecialPickup_BallCarSpring_TA
// 0x0008 (0x03E0 - 0x03D8)
class ASpecialPickup_BallCarSpring_TA : public ASpecialPickup_Spring_TA
{
public:
	struct FName                                       SpringMeshDistanceParam;                          		// 0x03D8(0x0008) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_BallCarSpring_TA");
		return ptr;
	}


	void ScaleSpringMeshToLocation(const struct FVector& NewLocation, const struct FVector& TargetLocation);
};


// Class TAGame.SpecialPickup_BallFreeze_TA
// 0x0068 (0x02F8 - 0x0290)
class ASpecialPickup_BallFreeze_TA : public ASpecialPickup_Targeted_TA
{
public:
	class AFXActor_X*                                  FreezeBreakFXArchetype;                           		// 0x0290(0x0004) (CPF_Edit)
	class AFXActor_X*                                  FreezeFXArchetype;                                		// 0x0294(0x0004) (CPF_Edit)
	class UMaterialInstanceConstant*                   FreezeMIC;                                        		// 0x0298(0x0004) (CPF_Edit)
	struct FName                                       FreezeMaterialParam;                              		// 0x029C(0x0008) (CPF_Edit)
	struct FInterpCurveFloat                           FreezeInterpTime;                                 		// 0x02A4(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	unsigned long                                      bMaintainMomentum : 1;                            		// 0x02B4(0x0004) (CPF_Edit)
	unsigned long                                      bTouched : 1;                                     		// 0x02B4(0x0004) (CPF_Transient)
	float                                              TimeToStop;                                       		// 0x02B8(0x0004) (CPF_Edit)
	float                                              StopMomentumPercentage;                           		// 0x02BC(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 FreezeSFX;                                        		// 0x02C0(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 BreakSFX;                                         		// 0x02C4(0x0004) (CPF_Edit)
	class UStaticMeshComponent*                        CopiedBallMesh;                                   		// 0x02C8(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class ABall_TA*                                    Ball;                                             		// 0x02CC(0x0004) (CPF_Transient)
	struct FVector                                     OrigLinearVelocity;                               		// 0x02D0(0x000C) (CPF_Transient)
	struct FVector                                     OrigAngularVelocity;                              		// 0x02DC(0x000C) (CPF_Transient)
	float                                              OrigSpeed;                                        		// 0x02E8(0x0004) (CPF_Transient)
	float                                              RepOrigSpeed;                                     		// 0x02EC(0x0004) (CPF_Net, CPF_Transient)
	class UMaterialInstanceConstant*                   FreezeMat;                                        		// 0x02F0(0x0004) (CPF_Transient)
	class AFXActor_X*                                  FreezeFX;                                         		// 0x02F4(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_BallFreeze_TA");
		return ptr;
	}


	void PickupEnd();
	void SpawnBreakFX();
	void HandleBallExploded(class ABall_TA* InBall);
	void HandleBallHit(class ABall_TA* InBall, class ACar_TA* InCar, TEnumAsByte<enum class EBallHitType> HitType);
	void RemovePickupFX();
	void TickPickupFX(float DeltaTime);
	void ApplyForces(float ActiveTime);
	void PickupTick(float DeltaTime);
	void InitPickupFX();
	void OnTargetChanged();
	void PickupStart();
};


// Class TAGame.SpecialPickup_BallGravity_TA
// 0x0064 (0x02D0 - 0x026C)
class ASpecialPickup_BallGravity_TA : public ASpecialPickup_TA
{
public:
	float                                              BallGravity;                                      		// 0x026C(0x0004) (CPF_Edit)
	float                                              Range;                                            		// 0x0270(0x0004) (CPF_Edit)
	struct FVector                                     Offset;                                           		// 0x0274(0x000C) (CPF_Edit)
	unsigned long                                      bDeactivateOnTouch : 1;                           		// 0x0280(0x0004) (CPF_Edit)
	class UParticleSystem*                             BeamPSArchetype;                                  		// 0x0284(0x0004) (CPF_Edit)
	struct FName                                       BeamPSParam;                                      		// 0x0288(0x0008) (CPF_Edit)
	float                                              RecordBallHitRate;                                		// 0x0290(0x0004) (CPF_Edit)
	class UMaterialInstanceConstant*                   BallMIC;                                          		// 0x0294(0x0004) (CPF_Edit)
	struct FName                                       BallMICParam;                                     		// 0x0298(0x0008) (CPF_Edit)
	class AFXActor_TA*                                 BallFXArchetype;                                  		// 0x02A0(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           BallMICCurve;                                     		// 0x02A4(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	class UAkSoundCue*                                 BallSFX;                                          		// 0x02B4(0x0004) (CPF_Edit)
	float                                              LastRecordedBallHitTime;                          		// 0x02B8(0x0004) (CPF_Transient)
	class UParticleSystemComponent*                    BeamPSC;                                          		// 0x02BC(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class AFXActor_TA*                                 BallFX;                                           		// 0x02C0(0x0004) (CPF_Transient)
	class UStaticMeshComponent*                        CopiedBallMesh;                                   		// 0x02C4(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class UMaterialInstanceConstant*                   BMIC;                                             		// 0x02C8(0x0004) (CPF_Transient)
	class ABall_TA*                                    PrevBall;                                         		// 0x02CC(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_BallGravity_TA");
		return ptr;
	}


	void HandleHitBall(class ACar_TA* InCar, class ABall_TA* Ball);
	void RemoveBallFX();
	void UpdateBallFX(class ABall_TA* Ball, const struct FVector& BallContactPos);
	void RemoveBeamFX();
	void UpdateBeamFX(class ABall_TA* Ball);
	void UpdateVisual();
	void PickupTick(float DeltaTime);
	void ApplyForces(float ActiveTime);
	void PickupEnd();
	void PickupStart();
};


// Class TAGame.SpecialPickup_BallLasso_TA
// 0x0008 (0x03E0 - 0x03D8)
class ASpecialPickup_BallLasso_TA : public ASpecialPickup_Spring_TA
{
public:
	struct FName                                       SpringMeshSlackParam;                             		// 0x03D8(0x0008) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_BallLasso_TA");
		return ptr;
	}


	void ScaleSpringMeshToLocation(const struct FVector& NewLocation, const struct FVector& TargetLocation);
	void DoSpring(bool bFirstHit);
};


// Class TAGame.SpecialPickup_BallVelcro_TA
// 0x0074 (0x02E0 - 0x026C)
class ASpecialPickup_BallVelcro_TA : public ASpecialPickup_TA
{
public:
	struct FVector                                     BallOffset;                                       		// 0x026C(0x000C) (CPF_Edit)
	unsigned long                                      bUseRealOffset : 1;                               		// 0x0278(0x0004) (CPF_Edit)
	unsigned long                                      bHit : 1;                                         		// 0x0278(0x0004) (CPF_Net, CPF_Transient)
	unsigned long                                      bBroken : 1;                                      		// 0x0278(0x0004) (CPF_Net, CPF_Transient)
	float                                              AfterHitDuration;                                 		// 0x027C(0x0004) (CPF_Edit)
	class UStaticMesh*                                 Mesh;                                             		// 0x0280(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           MeshScaleCurve;                                   		// 0x0284(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	struct FInterpCurveFloat                           HitMeshScaleCurve;                                		// 0x0294(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	struct FInterpCurveFloat                           BrokenScaleCurve;                                 		// 0x02A4(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	float                                              PostBreakDuration;                                		// 0x02B4(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 BallHitSFX;                                       		// 0x02B8(0x0004) (CPF_Edit)
	float                                              MinBreakForce;                                    		// 0x02BC(0x0004) (CPF_Edit)
	float                                              MinBreakTime;                                     		// 0x02C0(0x0004) (CPF_Edit)
	float                                              CheckLastTouchRate;                               		// 0x02C4(0x0004) (CPF_Edit)
	class UStaticMeshComponent*                        SMC;                                              		// 0x02C8(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class ABall_TA*                                    WeldedBall;                                       		// 0x02CC(0x0004) (CPF_Transient)
	float                                              OldBallMass;                                      		// 0x02D0(0x0004) (CPF_Transient)
	float                                              AttachTime;                                       		// 0x02D4(0x0004) (CPF_Net, CPF_Transient)
	float                                              LastTouchCheckTime;                               		// 0x02D8(0x0004) (CPF_Transient)
	float                                              BreakTime;                                        		// 0x02DC(0x0004) (CPF_Net, CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_BallVelcro_TA");
		return ptr;
	}


	void DoBreak();
	void HandleCollision(class ARBActor_TA* RBActor, const struct FAccumulatedRigidBodyCollision& Collision);
	void HandleCarTouch(class ABall_TA* InBall, class ACar_TA* InCar, TEnumAsByte<enum class EBallHitType> HitType);
	void PickupEnd();
	void OnBallHit();
	void HandleHitBall(class ACar_TA* InCar, class ABall_TA* InBall);
	void PickupTick(float DeltaTime);
	void TickPickupFX(float DeltaTime);
	void RemovePickupFX();
	void InitPickupFX();
	void PickupStart();
	void ReplicatedEvent(const struct FName& EventName);
};


// Class TAGame.SpecialPickup_Basketball_TA
// 0x0024 (0x0290 - 0x026C)
class ASpecialPickup_Basketball_TA : public ASpecialPickup_TA
{
public:
	struct FVector                                     BallOffset;                                       		// 0x026C(0x000C) (CPF_Edit)
	float                                              AttachedBallMass;                                 		// 0x0278(0x0004) (CPF_Edit)
	struct FVector                                     LaunchForce;                                      		// 0x027C(0x000C) (CPF_Edit)
	class ABall_TA*                                    WeldedBall;                                       		// 0x0288(0x0004) (CPF_Transient)
	float                                              OldBallMass;                                      		// 0x028C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Basketball_TA");
		return ptr;
	}


	void HandleCarTouch(class ABall_TA* InBall, class ACar_TA* InCar, TEnumAsByte<enum class EBallHitType> HitType);
	void PickupStart();
	void HandleHitBall(class ACar_TA* InCar, class ABall_TA* InBall);
	bool TryActivate(class ARBActor_TA* TargetOverride);
	void OnCreated();
};


// Class TAGame.SpecialPickup_Batarang_TA
// 0x0008 (0x03E8 - 0x03E0)
class ASpecialPickup_Batarang_TA : public ASpecialPickup_BallLasso_TA
{
public:
	float                                              SpinSpeed;                                        		// 0x03E0(0x0004) (CPF_Edit)
	float                                              CurRotation;                                      		// 0x03E4(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Batarang_TA");
		return ptr;
	}


	void UpdateVisual(float DeltaTime);
};


// Class TAGame.SpecialPickup_BoostMod_TA
// 0x000C (0x0278 - 0x026C)
class ASpecialPickup_BoostMod_TA : public ASpecialPickup_TA
{
public:
	unsigned long                                      bUnlimitedBoost : 1;                              		// 0x026C(0x0004) (CPF_Edit)
	float                                              BoostStrength;                                    		// 0x0270(0x0004) (CPF_Edit)
	float                                              OldBoostStrength;                                 		// 0x0274(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_BoostMod_TA");
		return ptr;
	}


	void PickupEnd();
	void PickupStart();
};


// Class TAGame.SpecialPickup_BoostOverride_TA
// 0x0018 (0x02A8 - 0x0290)
class ASpecialPickup_BoostOverride_TA : public ASpecialPickup_Targeted_TA
{
public:
	class AFXActor_TA*                                 OtherCarFXArchetype;                              		// 0x0290(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 BoostSFX;                                         		// 0x0294(0x0004) (CPF_Edit)
	class UParticleSystem*                             BeamPS;                                           		// 0x0298(0x0004) (CPF_Edit)
	class UParticleSystemComponent*                    BeamPSC;                                          		// 0x029C(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class AFXActor_TA*                                 OtherCarFX;                                       		// 0x02A0(0x0004) (CPF_Transient)
	class ACar_TA*                                     OtherCar;                                         		// 0x02A4(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_BoostOverride_TA");
		return ptr;
	}


	void PickupEnd();
	void RemovePickupFX();
	void InitPickupFX();
	void OnTargetChanged();
	void PickupStart();
};


// Class TAGame.SpecialPickup_CarGravity_TA
// 0x0014 (0x0280 - 0x026C)
class ASpecialPickup_CarGravity_TA : public ASpecialPickup_TA
{
public:
	float                                              GravityScale;                                     		// 0x026C(0x0004) (CPF_Edit)
	struct FVector                                     AddedForce;                                       		// 0x0270(0x000C) (CPF_Edit)
	float                                              OrigGravityScale;                                 		// 0x027C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_CarGravity_TA");
		return ptr;
	}


	void PickupTick(float DeltaTime);
	void PickupEnd();
	void PickupStart();
};


// Class TAGame.SpecialPickup_CarSpeed_TA
// 0x0030 (0x029C - 0x026C)
class ASpecialPickup_CarSpeed_TA : public ASpecialPickup_TA
{
public:
	float                                              SpeedMultiplier;                                  		// 0x026C(0x0004) (CPF_Edit)
	float                                              MaxLinearSpeedMultiplier;                         		// 0x0270(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           DriveTorqueCurve;                                 		// 0x0274(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	float                                              OriginalTorque;                                   		// 0x0284(0x0004) (CPF_Transient)
	float                                              OriginalMaxLinearSpeed;                           		// 0x0288(0x0004) (CPF_Transient)
	struct FInterpCurveFloat                           OriginalDriveTorqueCurve;                         		// 0x028C(0x0010) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_CarSpeed_TA");
		return ptr;
	}


	void PickupEnd();
	void PickupStart();
};


// Class TAGame.SpecialPickup_Demolish_TA
// 0x0004 (0x0270 - 0x026C)
class ASpecialPickup_Demolish_TA : public ASpecialPickup_TA
{
public:
	TEnumAsByte<enum class EDemolishTarget>            DemolishTarget;                                   		// 0x026C(0x0001) (CPF_Edit)
	TEnumAsByte<enum class EDemolishSpeed>             DemolishSpeed;                                    		// 0x026D(0x0001) (CPF_Edit)
	TEnumAsByte<enum class EDemolishTarget>            OldTarget;                                        		// 0x026E(0x0001) (CPF_Transient)
	TEnumAsByte<enum class EDemolishSpeed>             OldSpeed;                                         		// 0x026F(0x0001) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Demolish_TA");
		return ptr;
	}


	void PickupEnd();
	void PickupStart();
};


// Class TAGame.SpecialPickup_GrapplingHook_TA
// 0x00D8 (0x0368 - 0x0290)
class ASpecialPickup_GrapplingHook_TA : public ASpecialPickup_Targeted_TA
{
public:
	float                                              Impulse;                                          		// 0x0290(0x0004) (CPF_Edit)
	float                                              Force;                                            		// 0x0294(0x0004) (CPF_Edit)
	float                                              MaxRopeLength;                                    		// 0x0298(0x0004) (CPF_Edit)
	float                                              PredictionSpeed;                                  		// 0x029C(0x0004) (CPF_Edit)
	unsigned long                                      bDeactivateOnTouch : 1;                           		// 0x02A0(0x0004) (CPF_Edit)
	unsigned long                                      bInstant : 1;                                     		// 0x02A0(0x0004) (CPF_Edit)
	unsigned long                                      bBlocked : 1;                                     		// 0x02A0(0x0004) (CPF_Transient)
	unsigned long                                      bAttachedToBall : 1;                              		// 0x02A0(0x0004) (CPF_Transient)
	struct FInterpCurveFloat                           RopeLengthCurve;                                  		// 0x02A4(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	class UStaticMesh*                                 RopeMesh;                                         		// 0x02B4(0x0004) (CPF_Edit)
	struct FVector                                     RopeMeshScale;                                    		// 0x02B8(0x000C) (CPF_Edit)
	float                                              RopeMeshInitialSize;                              		// 0x02C4(0x0004) (CPF_Edit)
	struct FRotator                                    RopeRotationOffset;                               		// 0x02C8(0x000C) (CPF_Edit)
	struct FName                                       RopeMeshSlackParam;                               		// 0x02D4(0x0008) (CPF_Edit)
	struct FName                                       RopeMeshGravityParam;                             		// 0x02DC(0x0008) (CPF_Edit)
	class USkeletalMesh*                               HookMesh;                                         		// 0x02E4(0x0004) (CPF_Edit)
	struct FVector                                     HookMeshScale;                                    		// 0x02E8(0x000C) (CPF_Edit)
	struct FVector                                     HookMeshOffset;                                   		// 0x02F4(0x000C) (CPF_Edit)
	struct FRotator                                    HookRotationOffset;                               		// 0x0300(0x000C) (CPF_Edit)
	float                                              HitDistanceOffset;                                		// 0x030C(0x0004) (CPF_Edit)
	float                                              AfterAttachDuration;                              		// 0x0310(0x0004) (CPF_Edit)
	class UAnimSet*                                    HookAnimSet;                                      		// 0x0314(0x0004) (CPF_Edit)
	struct FName                                       HookClosedAnim;                                   		// 0x0318(0x0008) (CPF_Edit)
	struct FName                                       HookOpenAnim;                                     		// 0x0320(0x0008) (CPF_Edit)
	float                                              BlockedRequiredMoveDistance;                      		// 0x0328(0x0004) (CPF_Edit)
	float                                              BlockedRequiredMoveTime;                          		// 0x032C(0x0004) (CPF_Edit)
	float                                              BlockedStartTime;                                 		// 0x0330(0x0004) (CPF_Transient)
	struct FVector                                     BlockedStartPos;                                  		// 0x0334(0x000C) (CPF_Transient)
	class UStaticMeshComponent_TA*                     RMC;                                              		// 0x0340(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class UMaterialInstance*                           RMI;                                              		// 0x0344(0x0004) (CPF_Transient)
	class USkeletalMeshComponent_TA*                   HMC;                                              		// 0x0348(0x0004) (CPF_ExportObject, CPF_Transient, CPF_Component, CPF_EditInline)
	class ABall_TA*                                    Ball;                                             		// 0x034C(0x0004) (CPF_Transient)
	struct FVector                                     RopeOrigin;                                       		// 0x0350(0x000C) (CPF_Transient)
	float                                              RopeToTime;                                       		// 0x035C(0x0004) (CPF_Transient)
	float                                              CurrentRopeLength;                                		// 0x0360(0x0004) (CPF_Transient)
	float                                              AttachTime;                                       		// 0x0364(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_GrapplingHook_TA");
		return ptr;
	}


	void HandleBallExploded(class ABall_TA* InBall);
	void PickupEnd();
	void ScaleMeshToLocation(const struct FVector& NewLocation, const struct FVector& TargetLocation);
	struct FVector GetPredictedBallLocation(class ABall_TA* InBall);
	struct FVector GetTargetedLocation();
	void HandleCollision(class ARBActor_TA* RB, const struct FAccumulatedRigidBodyCollision& Collision);
	void UpdateVisual(float DeltaTime);
	void PickupTick(float DeltaTime);
	void ApplyForces(float ActiveTime);
	void DoAttach();
	void RemovePickupFX();
	void InitPickupFX();
	void PickupStart();
};


// Class TAGame.SpecialPickup_HandbrakeOverride_TA
// 0x0004 (0x0294 - 0x0290)
class ASpecialPickup_HandbrakeOverride_TA : public ASpecialPickup_Targeted_TA
{
public:
	class ACar_TA*                                     OtherCar;                                         		// 0x0290(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_HandbrakeOverride_TA");
		return ptr;
	}


	void PickupEnd();
	void PickupStart();
};


// Class TAGame.SpecialPickup_HitForce_TA
// 0x0028 (0x0294 - 0x026C)
class ASpecialPickup_HitForce_TA : public ASpecialPickup_TA
{
public:
	unsigned long                                      bBallForce : 1;                                   		// 0x026C(0x0004) (CPF_Edit)
	unsigned long                                      bCarForce : 1;                                    		// 0x026C(0x0004) (CPF_Edit)
	unsigned long                                      bDemolishCars : 1;                                		// 0x026C(0x0004) (CPF_Edit)
	float                                              BallHitForce;                                     		// 0x0270(0x0004) (CPF_Edit)
	float                                              CarHitForce;                                      		// 0x0274(0x0004) (CPF_Edit)
	class AFXActor_TA*                                 BallHitFXArchetype;                               		// 0x0278(0x0004) (CPF_Edit)
	class AFXActor_TA*                                 CarHitFXArchetype;                                		// 0x027C(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 HitSFX;                                           		// 0x0280(0x0004) (CPF_Edit)
	float                                              MinFXTime;                                        		// 0x0284(0x0004) (CPF_Edit)
	float                                              OrigBallHitForce;                                 		// 0x0288(0x0004) (CPF_Transient)
	float                                              OrigCarHitForce;                                  		// 0x028C(0x0004) (CPF_Transient)
	float                                              LastFXTime;                                       		// 0x0290(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_HitForce_TA");
		return ptr;
	}


	void PickupEnd();
	void HandleCollision(class ARBActor_TA* RB, const struct FAccumulatedRigidBodyCollision& Collision);
	void HandleCollisionFX(class ARBActor_TA* RB, const struct FAccumulatedRigidBodyCollision& Collision);
	void PickupStart();
};


// Class TAGame.SpecialPickup_Swapper_TA
// 0x000C (0x029C - 0x0290)
class ASpecialPickup_Swapper_TA : public ASpecialPickup_Targeted_TA
{
public:
	class AFXActor_TA*                                 OwnCarFX;                                         		// 0x0290(0x0004) (CPF_Edit)
	class AFXActor_TA*                                 OtherCarFX;                                       		// 0x0294(0x0004) (CPF_Edit)
	class ACar_TA*                                     OtherCar;                                         		// 0x0298(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Swapper_TA");
		return ptr;
	}


	void PickupEnd();
	void InitPickupFX();
	void OnTargetChanged();
	void PickupStart();
};


// Class TAGame.SpecialPickup_TimeBomb_TA
// 0x0020 (0x028C - 0x026C)
class ASpecialPickup_TimeBomb_TA : public ASpecialPickup_TA
{
public:
	float                                              Radius;                                           		// 0x026C(0x0004) (CPF_Edit)
	float                                              AlmostReadyDuration;                              		// 0x0270(0x0004) (CPF_Edit)
	float                                              StartMatSpeed;                                    		// 0x0274(0x0004) (CPF_Edit)
	float                                              AlmostReadyMatSpeed;                              		// 0x0278(0x0004) (CPF_Edit)
	float                                              ImpulseForce;                                     		// 0x027C(0x0004) (CPF_Edit)
	float                                              CarVerticalForce;                                 		// 0x0280(0x0004) (CPF_Edit)
	float                                              CarTorque;                                        		// 0x0284(0x0004) (CPF_Edit)
	unsigned long                                      bDemolish : 1;                                    		// 0x0288(0x0004) (CPF_Edit)
	unsigned long                                      bImpulse : 1;                                     		// 0x0288(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_TimeBomb_TA");
		return ptr;
	}


	void PickupEnd();
	void AlmostReady();
	void PickupStart();
};


// Class TAGame.SpecialPickup_Tornado_TA
// 0x00F4 (0x0360 - 0x026C)
class ASpecialPickup_Tornado_TA : public ASpecialPickup_TA
{
public:
	float                                              Height;                                           		// 0x026C(0x0004) (CPF_Edit)
	float                                              Radius;                                           		// 0x0270(0x0004) (CPF_Edit)
	struct FVector                                     Offset;                                           		// 0x0274(0x000C) (CPF_Edit)
	struct FInterpCurveFloat                           VerticalForceCurve;                               		// 0x0280(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	float                                              RotationalForce;                                  		// 0x0290(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           CentripetalForceCurve;                            		// 0x0294(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	struct FInterpCurveFloat                           CarDirectionForceCurve;                           		// 0x02A4(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	float                                              Torque;                                           		// 0x02B4(0x0004) (CPF_Edit)
	struct FVector                                     FXScale;                                          		// 0x02B8(0x000C) (CPF_Edit)
	struct FVector                                     FXOffset;                                         		// 0x02C4(0x000C) (CPF_Edit)
	class UStaticMesh*                                 TornadoMesh;                                      		// 0x02D0(0x0004) (CPF_Edit)
	struct FVector                                     MeshOffset;                                       		// 0x02D4(0x000C) (CPF_Edit)
	struct FVector                                     MeshScale;                                        		// 0x02E0(0x000C) (CPF_Edit)
	class UMaterialInstanceConstant*                   TornadoMIC0;                                      		// 0x02EC(0x0004) (CPF_Edit)
	class UMaterialInstanceConstant*                   TornadoMIC1;                                      		// 0x02F0(0x0004) (CPF_Edit)
	class UMaterialInstanceConstant*                   TornadoMIC2;                                      		// 0x02F4(0x0004) (CPF_Edit)
	class UMaterialInstanceConstant*                   TornadoMIC3;                                      		// 0x02F8(0x0004) (CPF_Edit)
	class UMaterialInstanceConstant*                   TornadoMIC4;                                      		// 0x02FC(0x0004) (CPF_Edit)
	class UMaterialInstanceConstant*                   TornadoMIC5;                                      		// 0x0300(0x0004) (CPF_Edit)
	struct FInterpCurveFloat                           OpacityCurve;                                     		// 0x0304(0x0010) (CPF_Edit, CPF_NeedCtorLink)
	float                                              MaxVelocityOffset;                                		// 0x0314(0x0004) (CPF_Edit)
	float                                              BallMultiplier;                                   		// 0x0318(0x0004) (CPF_Edit)
	unsigned long                                      bDebugVis : 1;                                    		// 0x031C(0x0004) (CPF_Edit)
	float                                              VelocityEase;                                     		// 0x0320(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 BallSFX;                                          		// 0x0324(0x0004) (CPF_Edit)
	class UAkSoundCue*                                 CarSFX;                                           		// 0x0328(0x0004) (CPF_Edit)
	class UStaticMeshComponent*                        SMC;                                              		// 0x032C(0x0004) (CPF_ExportObject, CPF_Component, CPF_EditInline)
	class UMaterialInstanceConstant*                   MIC0;                                             		// 0x0330(0x0004)
	class UMaterialInstanceConstant*                   MIC1;                                             		// 0x0334(0x0004)
	class UMaterialInstanceConstant*                   MIC2;                                             		// 0x0338(0x0004)
	class UMaterialInstanceConstant*                   MIC3;                                             		// 0x033C(0x0004)
	class UMaterialInstanceConstant*                   MIC4;                                             		// 0x0340(0x0004)
	class UMaterialInstanceConstant*                   MIC5;                                             		// 0x0344(0x0004)
	struct FVector                                     Vel;                                              		// 0x0348(0x000C) (CPF_Transient)
	TArray<class ARBActor_TA*>                         Affecting;                                        		// 0x0354(0x000C) (CPF_Transient, CPF_NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Tornado_TA");
		return ptr;
	}


	void ApplyForces(float ActiveTime);
	void RemovePickupFX();
	void PlayCarSFX(class ARBActor_TA* inActor);
	void PlayBallSFX(class ARBActor_TA* inActor);
	void TickPickupFX(float DeltaTime);
	void PickupTick(float DeltaTime);
	void InitPickupFX();
};


// Class TAGame.SplineCameraTrack_TA
// 0x0000 (0x023C - 0x023C)
class ASplineCameraTrack_TA : public ASplineActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SplineCameraTrack_TA");
		return ptr;
	}


	class ASplineActor* GetBestNode(const struct FVector& FromLocation);
	struct FVector GetLocationOnSpline(const struct FVector& FromLocation, float ExtraDistance);
};


// Class TAGame.SplineFocusTarget_TA
// 0x0008 (0x01F4 - 0x01EC)
class ASplineFocusTarget_TA : public ACustomFocusTarget_TA
{
public:
	class ASplineCameraTrack_TA*                       Spline;                                           		// 0x01EC(0x0004) (CPF_Edit)
	float                                              DistanceAhead;                                    		// 0x01F0(0x0004) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SplineFocusTarget_TA");
		return ptr;
	}


	struct FVector GetFocusLocation(class ACar_TA* ForCar);
};


// Class TAGame.StatFactory_Basketball_TA
// 0x0000 (0x0304 - 0x0304)
class AStatFactory_Basketball_TA : public AStatFactory_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatFactory_Basketball_TA");
		return ptr;
	}


	class UGoal_TA* CalculateShotGoal(class UGoal_TA* GoalToTest, class ABall_TA* Ball, float ArriveTime);
};


// Class TAGame.StatFactory_Breakout_TA
// 0x001C (0x0320 - 0x0304)
class AStatFactory_Breakout_TA : public AStatFactory_TA
{
public:
	int                                                BreakoutSaveDamageThreshold;                      		// 0x0304(0x0004) (CPF_Edit)
	int                                                BreakoutDamageLargeThreshold;                     		// 0x0308(0x0004) (CPF_Edit)
	float                                              ShotGoalTimestep;                                 		// 0x030C(0x0004) (CPF_Edit)
	class AGameEvent_Breakout_TA*                      BreakoutEvent;                                    		// 0x0310(0x0004) (CPF_Transient)
	struct FVector                                     FieldCenter;                                      		// 0x0314(0x000C) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatFactory_Breakout_TA");
		return ptr;
	}


	float GetHitDistanceToGoal(class ABall_TA* Ball, const struct FBallHitInfo& Hit, class UGoal_TA* Goal);
	class UGoal_TA* CalculateShotGoal(class UGoal_TA* GoalToTest, class ABall_TA* Ball, float ArriveTime);
	class UGoal_TA* FindShotGoal(class ABall_TA* Ball);
	void HandleBallAppliedDamage(class ABall_Breakout_TA* Ball, const struct FAppliedBreakoutDamage& Damage);
	void HandlePlatformDamaged(class ABreakOutActor_Platform_TA* Platform, class APRI_TA* PRI, class ABall_TA* Ball);
	void UnregisterBall(class APawn_X* Ball);
	void RegisterBall(class ABall_TA* Ball);
	void SetGameEvent(class AGameEvent_Soccar_TA* InGameEvent);
	bool IsInRedZone(class UGoal_TA* Goal, const struct FVector& BallLocation);
};


// Class TAGame.StaticMeshActor_TA
// 0x0004 (0x01F0 - 0x01EC)
class AStaticMeshActor_TA : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                              		// 0x01EC(0x0004) (CPF_Edit, CPF_Const, CPF_ExportObject, CPF_EditConst, CPF_Component, CPF_EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StaticMeshActor_TA");
		return ptr;
	}

};


// Class TAGame.StaticMeshRBActor_TA
// 0x0040 (0x06C8 - 0x0688)
class AStaticMeshRBActor_TA : public ARBActor_TA
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                       		// 0x0688(0x0004) (CPF_Edit, CPF_ExportObject, CPF_Component, CPF_EditInline)
	TEnumAsByte<enum class EApplyForceTo>              ApplyCollisionForceFrom;                          		// 0x068C(0x0001) (CPF_Edit)
	unsigned char                                      UnknownData00[0x3];                               		// 0x068D(0x0003) MISSED OFFSET
	float                                              TouchBounceForce;                                 		// 0x0690(0x0004) (CPF_Edit)
	float                                              SpeedBounchForceMultiplier;                       		// 0x0694(0x0004) (CPF_Edit)
	struct FVector                                     LinearConstraintsLower;                           		// 0x0698(0x000C) (CPF_Edit)
	struct FVector                                     LinearConstraintsUpper;                           		// 0x06A4(0x000C) (CPF_Edit)
	struct FVector                                     AngularConstraintsLower;                          		// 0x06B0(0x000C) (CPF_Edit)
	struct FVector                                     AngularConstraintsUpper;                          		// 0x06BC(0x000C) (CPF_Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StaticMeshRBActor_TA");
		return ptr;
	}


	void OnRigidBodyCollision(const struct FAccumulatedRigidBodyCollision& Collision);
	void Destroyed();
	void PostBeginPlay();
};


// Class TAGame.Tutorial_AirTilt_TA
// 0x0000 (0x0168 - 0x0168)
class UTutorial_AirTilt_TA : public UTutorial_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Tutorial_AirTilt_TA");
		return ptr;
	}


	void HandleCarHitWorld(class ACar_TA* Car, class AActor* HitActor);
	void HandleCarLanded(class ACar_TA* Car);
	void HandleVehicleSetup(class AGameEvent_Tutorial_TA* InGameEvent, class ACar_TA* Car);
};


// Class TAGame.UnreplicatedRBActor_TA
// 0x0000 (0x06C8 - 0x06C8)
class AUnreplicatedRBActor_TA : public AStaticMeshRBActor_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.UnreplicatedRBActor_TA");
		return ptr;
	}

};


// Class TAGame.VehiclePickup_BoostModifier_Randomizer_TA
// 0x0018 (0x0060 - 0x0048)
class UVehiclePickup_BoostModifier_Randomizer_TA : public UVehiclePickup_BoostModifier_TA
{
public:
	float                                              PickupChance;                                     		// 0x0048(0x0004) (CPF_Edit)
	class AFXActor_TA*                                 FX_PickupReady;                                   		// 0x004C(0x0004) (CPF_Edit)
	TArray<struct FRandomPickup>                       PossiblePickups;                                  		// 0x0050(0x000C) (CPF_Edit, CPF_NeedCtorLink)
	class ASpecialPickup_TA*                           CurrentPickup;                                    		// 0x005C(0x0004) (CPF_Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehiclePickup_BoostModifier_Randomizer_TA");
		return ptr;
	}


	void PickNew();
	void PickupEffect(class ACar_TA* Car);
	bool CanPickup(class ACar_TA* Car);
	void InitModifier();
};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
