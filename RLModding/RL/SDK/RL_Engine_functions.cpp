#pragma once

// Rocket League (1.31) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

#include "../SDK.hpp"

namespace SDK
{
//---------------------------------------------------------------------------
//Functions
//---------------------------------------------------------------------------

// Function Engine.Actor.GetActorSpriteComponent
// (FUNC_Native, FUNC_Public)
// Parameters:
// class USpriteComponent*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class USpriteComponent* AActor::GetActorSpriteComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorSpriteComponent");

	struct
	{
		class USpriteComponent*        ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetComponent
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UClass*                  ComponentClass                 (CPF_Parm)
// class UActorComponent*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_CoerceParm, CPF_EditInline)

class UActorComponent* AActor::GetComponent(class UClass* ComponentClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponent");

	struct
	{
		class UClass*                  ComponentClass;
		class UActorComponent*         ReturnValue;
	} params;
	params.ComponentClass = ComponentClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SpawnInstance
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  SpawnOwner                     (CPF_OptionalParm, CPF_Parm)
// struct FName                   SpawnTag                       (CPF_OptionalParm, CPF_Parm)
// struct FVector                 SpawnLocation                  (CPF_OptionalParm, CPF_Parm)
// struct FRotator                SpawnRotation                  (CPF_OptionalParm, CPF_Parm)
// bool                           bNoCollisionFail               (CPF_OptionalParm, CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_CoerceParm)

class AActor* AActor::SpawnInstance(class AActor* SpawnOwner, const struct FName& SpawnTag, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, bool bNoCollisionFail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SpawnInstance");

	struct
	{
		class AActor*                  SpawnOwner;
		struct FName                   SpawnTag;
		struct FVector                 SpawnLocation;
		struct FRotator                SpawnRotation;
		bool                           bNoCollisionFail;
		class AActor*                  ReturnValue;
	} params;
	params.SpawnOwner = SpawnOwner;
	params.SpawnTag = SpawnTag;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.bNoCollisionFail = bNoCollisionFail;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorMetrics
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class EActorMetricsType> MetricsType                    (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int AActor::GetActorMetrics(TEnumAsByte<enum class EActorMetricsType> MetricsType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorMetrics");

	struct
	{
		TEnumAsByte<enum class EActorMetricsType> MetricsType;
		int                            ReturnValue;
	} params;
	params.MetricsType = MetricsType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.OnMobileTouch
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APlayerController*       InPC                           (CPF_Parm)
// struct FVector2D               TouchLocation                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::OnMobileTouch(class APlayerController* InPC, const struct FVector2D& TouchLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnMobileTouch");

	struct
	{
		class APlayerController*       InPC;
		struct FVector2D               TouchLocation;
		bool                           ReturnValue;
	} params;
	params.InPC = InPC;
	params.TouchLocation = TouchLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsMobileTouchEnabled
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::IsMobileTouchEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsMobileTouchEnabled");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ShouldBeHiddenBySHOW_NavigationNodes
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::ShouldBeHiddenBySHOW_NavigationNodes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ShouldBeHiddenBySHOW_NavigationNodes");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PrintDebugInfo
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class UDebugDrawer*            Drawer                         (CPF_Parm)

void AActor::PrintDebugInfo(class UDebugDrawer* Drawer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PrintDebugInfo");

	struct
	{
		class UDebugDrawer*            Drawer;
	} params;
	params.Drawer = Drawer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ForceNetUpdate
// (FUNC_Final, FUNC_Defined, FUNC_Public)

void AActor::ForceNetUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceNetUpdate");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.WillOverlap
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 PosA                           (CPF_Parm)
// struct FVector                 VelA                           (CPF_Parm)
// struct FVector                 PosB                           (CPF_Parm)
// struct FVector                 VelB                           (CPF_Parm)
// float                          StepSize                       (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// float                          Time                           (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::WillOverlap(const struct FVector& PosA, const struct FVector& VelA, const struct FVector& PosB, const struct FVector& VelB, float StepSize, float Radius, float* Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.WillOverlap");

	struct
	{
		struct FVector                 PosA;
		struct FVector                 VelA;
		struct FVector                 PosB;
		struct FVector                 VelB;
		float                          StepSize;
		float                          Radius;
		float                          Time;
		bool                           ReturnValue;
	} params;
	params.PosA = PosA;
	params.VelA = VelA;
	params.PosB = PosB;
	params.VelB = VelB;
	params.StepSize = StepSize;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Time != nullptr)
		*Time = params.Time;

	return params.ReturnValue;
}


// Function Engine.Actor.GetAvoidanceVector
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<class AActor*>          Obstacles                      (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FVector                 GoalLocation                   (CPF_Parm)
// float                          CollisionRadius                (CPF_Parm)
// float                          MaxSpeed                       (CPF_Parm)
// int                            NumSamples                     (CPF_OptionalParm, CPF_Parm)
// float                          VelocityStepRate               (CPF_OptionalParm, CPF_Parm)
// float                          MaxTimeTilOverlap              (CPF_OptionalParm, CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AActor::GetAvoidanceVector(const struct FVector& GoalLocation, float CollisionRadius, float MaxSpeed, int NumSamples, float VelocityStepRate, float MaxTimeTilOverlap, TArray<class AActor*>* Obstacles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAvoidanceVector");

	struct
	{
		TArray<class AActor*>          Obstacles;
		struct FVector                 GoalLocation;
		float                          CollisionRadius;
		float                          MaxSpeed;
		int                            NumSamples;
		float                          VelocityStepRate;
		float                          MaxTimeTilOverlap;
		struct FVector                 ReturnValue;
	} params;
	params.GoalLocation = GoalLocation;
	params.CollisionRadius = CollisionRadius;
	params.MaxSpeed = MaxSpeed;
	params.NumSamples = NumSamples;
	params.VelocityStepRate = VelocityStepRate;
	params.MaxTimeTilOverlap = MaxTimeTilOverlap;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Obstacles != nullptr)
		*Obstacles = params.Obstacles;

	return params.ReturnValue;
}


// Function Engine.Actor.ReplicationEnded
// (FUNC_Simulated, FUNC_Event, FUNC_Public)

void AActor::ReplicationEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReplicationEnded");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostDemoRewind
// (FUNC_Simulated, FUNC_Event, FUNC_Public)

void AActor::PostDemoRewind()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostDemoRewind");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AnimTreeUpdated
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USkeletalMeshComponent*  SkelMesh                       (CPF_Parm, CPF_EditInline)

void AActor::AnimTreeUpdated(class USkeletalMeshComponent* SkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AnimTreeUpdated");

	struct
	{
		class USkeletalMeshComponent*  SkelMesh;
	} params;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SupportsKismetModification
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class USequenceOp*             AskingOp                       (CPF_Parm)
// struct FString                 Reason                         (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::SupportsKismetModification(class USequenceOp* AskingOp, struct FString* Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SupportsKismetModification");

	struct
	{
		class USequenceOp*             AskingOp;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.AskingOp = AskingOp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Reason != nullptr)
		*Reason = params.Reason;

	return params.ReturnValue;
}


// Function Engine.Actor.GetAnimTrailParticleSystem
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UAnimNotify_Trails*      AnimNotifyData                 (CPF_Const, CPF_Parm)
// class UParticleSystem*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UParticleSystem* AActor::GetAnimTrailParticleSystem(class UAnimNotify_Trails* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAnimTrailParticleSystem");

	struct
	{
		class UAnimNotify_Trails*      AnimNotifyData;
		class UParticleSystem*         ReturnValue;
	} params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.TrailsNotifyEnd
// (FUNC_Event, FUNC_Public)
// Parameters:
// class UAnimNotify_Trails*      AnimNotifyData                 (CPF_Const, CPF_Parm)

void AActor::TrailsNotifyEnd(class UAnimNotify_Trails* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TrailsNotifyEnd");

	struct
	{
		class UAnimNotify_Trails*      AnimNotifyData;
	} params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TrailsNotifyTick
// (FUNC_Event, FUNC_Public)
// Parameters:
// class UAnimNotify_Trails*      AnimNotifyData                 (CPF_Const, CPF_Parm)

void AActor::TrailsNotifyTick(class UAnimNotify_Trails* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TrailsNotifyTick");

	struct
	{
		class UAnimNotify_Trails*      AnimNotifyData;
	} params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TrailsNotify
// (FUNC_Event, FUNC_Public)
// Parameters:
// class UAnimNotify_Trails*      AnimNotifyData                 (CPF_Const, CPF_Parm)

void AActor::TrailsNotify(class UAnimNotify_Trails* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TrailsNotify");

	struct
	{
		class UAnimNotify_Trails*      AnimNotifyData;
	} params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.CreateForceField
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UAnimNotify_ForceField*  AnimNotifyData                 (CPF_Const, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::CreateForceField(class UAnimNotify_ForceField* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CreateForceField");

	struct
	{
		class UAnimNotify_ForceField*  AnimNotifyData;
		bool                           ReturnValue;
	} params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PlayParticleEffect
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 (CPF_Const, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::PlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayParticleEffect");

	struct
	{
		class UAnimNotify_PlayParticleEffect* AnimNotifyData;
		bool                           ReturnValue;
	} params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetAimAdhesionExtent
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          Width                          (CPF_Parm, CPF_OutParm)
// float                          Height                         (CPF_Parm, CPF_OutParm)
// struct FVector                 Center                         (CPF_Parm, CPF_OutParm)

void AActor::GetAimAdhesionExtent(float* Width, float* Height, struct FVector* Center)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAimAdhesionExtent");

	struct
	{
		float                          Width;
		float                          Height;
		struct FVector                 Center;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Width != nullptr)
		*Width = params.Width;
	if (Height != nullptr)
		*Height = params.Height;
	if (Center != nullptr)
		*Center = params.Center;
}


// Function Engine.Actor.GetAimFrictionExtent
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          Width                          (CPF_Parm, CPF_OutParm)
// float                          Height                         (CPF_Parm, CPF_OutParm)
// struct FVector                 Center                         (CPF_Parm, CPF_OutParm)

void AActor::GetAimFrictionExtent(float* Width, float* Height, struct FVector* Center)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAimFrictionExtent");

	struct
	{
		float                          Width;
		float                          Height;
		struct FVector                 Center;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Width != nullptr)
		*Width = params.Width;
	if (Height != nullptr)
		*Height = params.Height;
	if (Center != nullptr)
		*Center = params.Center;
}


// Function Engine.Actor.IsInPersistentLevel
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bIncludeLevelStreamingPersistent (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::IsInPersistentLevel(bool bIncludeLevelStreamingPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsInPersistentLevel");

	struct
	{
		bool                           bIncludeLevelStreamingPersistent;
		bool                           ReturnValue;
	} params;
	params.bIncludeLevelStreamingPersistent = bIncludeLevelStreamingPersistent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.OnRigidBodySpringOverextension
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class URB_BodyInstance*        BodyInstance                   (CPF_Parm)

void AActor::OnRigidBodySpringOverextension(class URB_BodyInstance* BodyInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRigidBodySpringOverextension");

	struct
	{
		class URB_BodyInstance*        BodyInstance;
	} params;
	params.BodyInstance = BodyInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetPackageGuid
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FName                   PackageName                    (CPF_Parm)
// struct FGuid                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FGuid AActor::STATIC_GetPackageGuid(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetPackageGuid");

	struct
	{
		struct FName                   PackageName;
		struct FGuid                   ReturnValue;
	} params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PostInitAnimTree
// (FUNC_Event, FUNC_Public)
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm, CPF_EditInline)

void AActor::PostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostInitAnimTree");

	struct
	{
		class USkeletalMeshComponent*  SkelComp;
	} params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RootMotionExtracted
// (FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm, CPF_EditInline)
// struct FBoneAtom               ExtractedRootMotionDelta       (CPF_Parm, CPF_OutParm)

void AActor::RootMotionExtracted(class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RootMotionExtracted");

	struct
	{
		class USkeletalMeshComponent*  SkelComp;
		struct FBoneAtom               ExtractedRootMotionDelta;
	} params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ExtractedRootMotionDelta != nullptr)
		*ExtractedRootMotionDelta = params.ExtractedRootMotionDelta;
}


// Function Engine.Actor.RootMotionProcessed
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm, CPF_EditInline)

void AActor::RootMotionProcessed(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RootMotionProcessed");

	struct
	{
		class USkeletalMeshComponent*  SkelComp;
	} params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RootMotionModeChanged
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm, CPF_EditInline)

void AActor::RootMotionModeChanged(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RootMotionModeChanged");

	struct
	{
		class USkeletalMeshComponent*  SkelComp;
	} params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostRenderFor
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)
// class UCanvas*                 Canvas                         (CPF_Parm)
// struct FVector                 CameraPosition                 (CPF_Parm)
// struct FVector                 CameraDir                      (CPF_Parm)

void AActor::PostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostRenderFor");

	struct
	{
		class APlayerController*       PC;
		class UCanvas*                 Canvas;
		struct FVector                 CameraPosition;
		struct FVector                 CameraDir;
	} params;
	params.PC = PC;
	params.Canvas = Canvas;
	params.CameraPosition = CameraPosition;
	params.CameraDir = CameraDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.NativePostRenderFor
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)
// class UCanvas*                 Canvas                         (CPF_Parm)
// struct FVector                 CameraPosition                 (CPF_Parm)
// struct FVector                 CameraDir                      (CPF_Parm)

void AActor::NativePostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.NativePostRenderFor");

	struct
	{
		class APlayerController*       PC;
		class UCanvas*                 Canvas;
		struct FVector                 CameraPosition;
		struct FVector                 CameraDir;
	} params;
	params.PC = PC;
	params.Canvas = Canvas;
	params.CameraPosition = CameraPosition;
	params.CameraDir = CameraDir;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetHUDLocation
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 NewHUDLocation                 (CPF_Parm)

void AActor::SetHUDLocation(const struct FVector& NewHUDLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetHUDLocation");

	struct
	{
		struct FVector                 NewHUDLocation;
	} params;
	params.NewHUDLocation = NewHUDLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnRanOver
// (FUNC_Event, FUNC_Public)
// Parameters:
// class ASVehicle*               Vehicle                        (CPF_Parm)
// class UPrimitiveComponent*     RunOverComponent               (CPF_Parm, CPF_EditInline)
// int                            WheelIndex                     (CPF_Parm)

void AActor::OnRanOver(class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnRanOver");

	struct
	{
		class ASVehicle*               Vehicle;
		class UPrimitiveComponent*     RunOverComponent;
		int                            WheelIndex;
	} params;
	params.Vehicle = Vehicle;
	params.RunOverComponent = RunOverComponent;
	params.WheelIndex = WheelIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RigidBodyCollision
// (FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (CPF_Parm, CPF_EditInline)
// class UPrimitiveComponent*     OtherComponent                 (CPF_Parm, CPF_EditInline)
// struct FCollisionImpactData    RigidCollisionData             (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            ContactIndex                   (CPF_Parm)

void AActor::RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RigidBodyCollision");

	struct
	{
		class UPrimitiveComponent*     HitComponent;
		class UPrimitiveComponent*     OtherComponent;
		struct FCollisionImpactData    RigidCollisionData;
		int                            ContactIndex;
	} params;
	params.HitComponent = HitComponent;
	params.OtherComponent = OtherComponent;
	params.ContactIndex = ContactIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RigidCollisionData != nullptr)
		*RigidCollisionData = params.RigidCollisionData;
}


// Function Engine.Actor.InterpolationChanged
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (CPF_Parm)

void AActor::InterpolationChanged(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.InterpolationChanged");

	struct
	{
		class USeqAct_Interp*          InterpAction;
	} params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.InterpolationFinished
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (CPF_Parm)

void AActor::InterpolationFinished(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.InterpolationFinished");

	struct
	{
		class USeqAct_Interp*          InterpAction;
	} params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.InterpolationStarted
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (CPF_Parm)
// class UInterpGroupInst*        GroupInst                      (CPF_Parm)

void AActor::InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.InterpolationStarted");

	struct
	{
		class USeqAct_Interp*          InterpAction;
		class UInterpGroupInst*        GroupInst;
	} params;
	params.InterpAction = InterpAction;
	params.GroupInst = GroupInst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SpawnedByKismet
// (FUNC_Event, FUNC_Public)

void AActor::SpawnedByKismet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SpawnedByKismet");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetTargetLocation
// (FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  RequestedBy                    (CPF_OptionalParm, CPF_Parm)
// bool                           bRequestAlternateLoc           (CPF_OptionalParm, CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AActor::GetTargetLocation(class AActor* RequestedBy, bool bRequestAlternateLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTargetLocation");

	struct
	{
		class AActor*                  RequestedBy;
		bool                           bRequestAlternateLoc;
		struct FVector                 ReturnValue;
	} params;
	params.RequestedBy = RequestedBy;
	params.bRequestAlternateLoc = bRequestAlternateLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FindGoodEndView
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)
// struct FRotator                GoodRotation                   (CPF_Parm, CPF_OutParm)

void AActor::FindGoodEndView(class APlayerController* PC, struct FRotator* GoodRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindGoodEndView");

	struct
	{
		class APlayerController*       PC;
		struct FRotator                GoodRotation;
	} params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (GoodRotation != nullptr)
		*GoodRotation = params.GoodRotation;
}


// Function Engine.Actor.ScriptGetTeamNum
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

unsigned char AActor::ScriptGetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ScriptGetTeamNum");

	struct
	{
		unsigned char                  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetTeamNum
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

unsigned char AActor::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTeamNum");

	struct
	{
		unsigned char                  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PawnBaseDied
// (FUNC_Public)

void AActor::PawnBaseDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PawnBaseDied");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.IsPlayerOwned
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::IsPlayerOwned()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsPlayerOwned");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorEyesViewPoint
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 out_Location                   (CPF_Parm, CPF_OutParm)
// struct FRotator                out_Rotation                   (CPF_Parm, CPF_OutParm)

void AActor::GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorEyesViewPoint");

	struct
	{
		struct FVector                 out_Location;
		struct FRotator                out_Rotation;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.Actor.IsStationary
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::IsStationary()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsStationary");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetActorFaceFXAsset
// (FUNC_Event, FUNC_Public)
// Parameters:
// class UFaceFXAsset*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UFaceFXAsset* AActor::GetActorFaceFXAsset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetActorFaceFXAsset");

	struct
	{
		class UFaceFXAsset*            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CanActorPlayFaceFXAnim
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::CanActorPlayFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CanActorPlayFaceFXAnim");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsActorPlayingFaceFXAnim
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::IsActorPlayingFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsActorPlayingFaceFXAnim");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.TickSkelControl
// (FUNC_Event, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm, CPF_EditInline)
// class USkelControlBase*        SkelCtrl                       (CPF_Parm)

void AActor::TickSkelControl(float DeltaTime, class USkeletalMeshComponent* SkelComp, class USkelControlBase* SkelCtrl)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TickSkelControl");

	struct
	{
		float                          DeltaTime;
		class USkeletalMeshComponent*  SkelComp;
		class USkelControlBase*        SkelCtrl;
	} params;
	params.DeltaTime = DeltaTime;
	params.SkelComp = SkelComp;
	params.SkelCtrl = SkelCtrl;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetSkelControlScale
// (FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   SkelControlName                (CPF_Parm)
// float                          Scale                          (CPF_Parm)

void AActor::SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetSkelControlScale");

	struct
	{
		struct FName                   SkelControlName;
		float                          Scale;
	} params;
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetMorphWeight
// (FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   MorphNodeName                  (CPF_Parm)
// float                          MorphWeight                    (CPF_Parm)

void AActor::SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetMorphWeight");

	struct
	{
		struct FName                   MorphNodeName;
		float                          MorphWeight;
	} params;
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.StopActorFaceFXAnim
// (FUNC_Event, FUNC_Public)

void AActor::StopActorFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopActorFaceFXAnim");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PlayActorFaceFXAnim
// (FUNC_Event, FUNC_Public)
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (CPF_Parm)
// struct FString                 GroupName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SeqName                        (CPF_Parm, CPF_NeedCtorLink)
// class USoundCue*               SoundCueToPlay                 (CPF_Parm)
// class UAkEvent*                AkEventToPlay                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayActorFaceFXAnim");

	struct
	{
		class UFaceFXAnimSet*          AnimSet;
		struct FString                 GroupName;
		struct FString                 SeqName;
		class USoundCue*               SoundCueToPlay;
		class UAkEvent*                AkEventToPlay;
		bool                           ReturnValue;
	} params;
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;
	params.SoundCueToPlay = SoundCueToPlay;
	params.AkEventToPlay = AkEventToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FinishAnimControl
// (FUNC_Event, FUNC_Public)
// Parameters:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void AActor::FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FinishAnimControl");

	struct
	{
		class UInterpGroup*            InInterpGroup;
	} params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetAnimPosition
// (FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   SlotName                       (CPF_Parm)
// int                            ChannelIndex                   (CPF_Parm)
// struct FName                   InAnimSeqName                  (CPF_Parm)
// float                          InPosition                     (CPF_Parm)
// bool                           bFireNotifies                  (CPF_Parm)
// bool                           bLooping                       (CPF_Parm)
// bool                           bEnableRootMotion              (CPF_Parm)

void AActor::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetAnimPosition");

	struct
	{
		struct FName                   SlotName;
		int                            ChannelIndex;
		struct FName                   InAnimSeqName;
		float                          InPosition;
		bool                           bFireNotifies;
		bool                           bLooping;
		bool                           bEnableRootMotion;
	} params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BeginAnimControl
// (FUNC_Event, FUNC_Public)
// Parameters:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void AActor::BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BeginAnimControl");

	struct
	{
		class UInterpGroup*            InInterpGroup;
	} params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnAnimPlay
// (FUNC_Event, FUNC_Public)
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)

void AActor::OnAnimPlay(class UAnimNodeSequence* SeqNode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnAnimPlay");

	struct
	{
		class UAnimNodeSequence*       SeqNode;
	} params;
	params.SeqNode = SeqNode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnAnimEnd
// (FUNC_Event, FUNC_Public)
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)
// float                          PlayedTime                     (CPF_Parm)
// float                          ExcessTime                     (CPF_Parm)

void AActor::OnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnAnimEnd");

	struct
	{
		class UAnimNodeSequence*       SeqNode;
		float                          PlayedTime;
		float                          ExcessTime;
	} params;
	params.SeqNode = SeqNode;
	params.PlayedTime = PlayedTime;
	params.ExcessTime = ExcessTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DoKismetAttachment
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AActor*                  Attachment                     (CPF_Parm)
// class USeqAct_AttachToActor*   Action                         (CPF_Parm)

void AActor::DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DoKismetAttachment");

	struct
	{
		class AActor*                  Attachment;
		class USeqAct_AttachToActor*   Action;
	} params;
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnAttachToActor
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_AttachToActor*   Action                         (CPF_Parm)

void AActor::OnAttachToActor(class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnAttachToActor");

	struct
	{
		class USeqAct_AttachToActor*   Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnToggleHidden
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_ToggleHidden*    Action                         (CPF_Parm)

void AActor::OnToggleHidden(class USeqAct_ToggleHidden* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnToggleHidden");

	struct
	{
		class USeqAct_ToggleHidden*    Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnChangeCollision
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_ChangeCollision* Action                         (CPF_Parm)

void AActor::OnChangeCollision(class USeqAct_ChangeCollision* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnChangeCollision");

	struct
	{
		class USeqAct_ChangeCollision* Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnSetPhysics
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_SetPhysics*      Action                         (CPF_Parm)

void AActor::OnSetPhysics(class USeqAct_SetPhysics* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnSetPhysics");

	struct
	{
		class USeqAct_SetPhysics*      Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnSetBlockRigidBody
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_SetBlockRigidBody* Action                         (CPF_Parm)

void AActor::OnSetBlockRigidBody(class USeqAct_SetBlockRigidBody* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnSetBlockRigidBody");

	struct
	{
		class USeqAct_SetBlockRigidBody* Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnSetVelocity
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class USeqAct_SetVelocity*     Action                         (CPF_Parm)

void AActor::OnSetVelocity(class USeqAct_SetVelocity* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnSetVelocity");

	struct
	{
		class USeqAct_SetVelocity*     Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnTeleport
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class USeqAct_Teleport*        Action                         (CPF_Parm)

void AActor::OnTeleport(class USeqAct_Teleport* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnTeleport");

	struct
	{
		class USeqAct_Teleport*        Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnModifyHealth
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_ModifyHealth*    Action                         (CPF_Parm)

void AActor::OnModifyHealth(class USeqAct_ModifyHealth* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnModifyHealth");

	struct
	{
		class USeqAct_ModifyHealth*    Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PrestreamTextures
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          Seconds                        (CPF_Parm)
// bool                           bEnableStreaming               (CPF_Parm)
// int                            CinematicTextureGroups         (CPF_OptionalParm, CPF_Parm)

void AActor::PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PrestreamTextures");

	struct
	{
		float                          Seconds;
		bool                           bEnableStreaming;
		int                            CinematicTextureGroups;
	} params;
	params.Seconds = Seconds;
	params.bEnableStreaming = bEnableStreaming;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ShutDown
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AActor::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ShutDown");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetNetUpdateTime
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          NewUpdateTime                  (CPF_Parm)

void AActor::SetNetUpdateTime(float NewUpdateTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetNetUpdateTime");

	struct
	{
		float                          NewUpdateTime;
	} params;
	params.NewUpdateTime = NewUpdateTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ForceNetRelevant
// (FUNC_Event, FUNC_Public)

void AActor::ForceNetRelevant()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceNetRelevant");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnDestroy
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Destroy*         Action                         (CPF_Parm)

void AActor::OnDestroy(class USeqAct_Destroy* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnDestroy");

	struct
	{
		class USeqAct_Destroy*         Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ClearLatentAction
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UClass*                  actionClass                    (CPF_Parm)
// bool                           bAborted                       (CPF_OptionalParm, CPF_Parm)
// class USeqAct_Latent*          exceptionAction                (CPF_OptionalParm, CPF_Parm)

void AActor::ClearLatentAction(class UClass* actionClass, bool bAborted, class USeqAct_Latent* exceptionAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClearLatentAction");

	struct
	{
		class UClass*                  actionClass;
		bool                           bAborted;
		class USeqAct_Latent*          exceptionAction;
	} params;
	params.actionClass = actionClass;
	params.bAborted = bAborted;
	params.exceptionAction = exceptionAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FindEventsOfClass
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  EventClass                     (CPF_Parm)
// TArray<class USequenceEvent*>  out_EventList                  (CPF_OptionalParm, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           bIncludeDisabled               (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::FindEventsOfClass(class UClass* EventClass, bool bIncludeDisabled, TArray<class USequenceEvent*>* out_EventList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindEventsOfClass");

	struct
	{
		class UClass*                  EventClass;
		TArray<class USequenceEvent*>  out_EventList;
		bool                           bIncludeDisabled;
		bool                           ReturnValue;
	} params;
	params.EventClass = EventClass;
	params.bIncludeDisabled = bIncludeDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_EventList != nullptr)
		*out_EventList = params.out_EventList;

	return params.ReturnValue;
}


// Function Engine.Actor.ActivateEventClass
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  InClass                        (CPF_Parm)
// class AActor*                  InInstigator                   (CPF_Parm)
// TArray<class USequenceEvent*>  EventList                      (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// TArray<int>                    ActivateIndices                (CPF_Const, CPF_OptionalParm, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           bTest                          (CPF_OptionalParm, CPF_Parm)
// TArray<class USequenceEvent*>  ActivatedEvents                (CPF_OptionalParm, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::ActivateEventClass(class UClass* InClass, class AActor* InInstigator, bool bTest, TArray<class USequenceEvent*>* EventList, TArray<int>* ActivateIndices, TArray<class USequenceEvent*>* ActivatedEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActivateEventClass");

	struct
	{
		class UClass*                  InClass;
		class AActor*                  InInstigator;
		TArray<class USequenceEvent*>  EventList;
		TArray<int>                    ActivateIndices;
		bool                           bTest;
		TArray<class USequenceEvent*>  ActivatedEvents;
		bool                           ReturnValue;
	} params;
	params.InClass = InClass;
	params.InInstigator = InInstigator;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (EventList != nullptr)
		*EventList = params.EventList;
	if (ActivateIndices != nullptr)
		*ActivateIndices = params.ActivateIndices;
	if (ActivatedEvents != nullptr)
		*ActivatedEvents = params.ActivatedEvents;

	return params.ReturnValue;
}


// Function Engine.Actor.TriggerGlobalEventClass
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UClass*                  InEventClass                   (CPF_Parm)
// class AActor*                  InInstigator                   (CPF_Parm)
// int                            ActivateIndex                  (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::TriggerGlobalEventClass(class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TriggerGlobalEventClass");

	struct
	{
		class UClass*                  InEventClass;
		class AActor*                  InInstigator;
		int                            ActivateIndex;
		bool                           ReturnValue;
	} params;
	params.InEventClass = InEventClass;
	params.InInstigator = InInstigator;
	params.ActivateIndex = ActivateIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ReceivedNewEvent
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USequenceEvent*          Evt                            (CPF_Parm)

void AActor::ReceivedNewEvent(class USequenceEvent* Evt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReceivedNewEvent");

	struct
	{
		class USequenceEvent*          Evt;
	} params;
	params.Evt = Evt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TriggerEventClass
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  InEventClass                   (CPF_Parm)
// class AActor*                  InInstigator                   (CPF_Parm)
// int                            ActivateIndex                  (CPF_OptionalParm, CPF_Parm)
// bool                           bTest                          (CPF_OptionalParm, CPF_Parm)
// TArray<class USequenceEvent*>  ActivatedEvents                (CPF_OptionalParm, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::TriggerEventClass(class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex, bool bTest, TArray<class USequenceEvent*>* ActivatedEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TriggerEventClass");

	struct
	{
		class UClass*                  InEventClass;
		class AActor*                  InInstigator;
		int                            ActivateIndex;
		bool                           bTest;
		TArray<class USequenceEvent*>  ActivatedEvents;
		bool                           ReturnValue;
	} params;
	params.InEventClass = InEventClass;
	params.InInstigator = InInstigator;
	params.ActivateIndex = ActivateIndex;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActivatedEvents != nullptr)
		*ActivatedEvents = params.ActivatedEvents;

	return params.ReturnValue;
}


// Function Engine.Actor.DebugMessagePlayer
// (FUNC_Final, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 msg                            (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)

void AActor::DebugMessagePlayer(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DebugMessagePlayer");

	struct
	{
		struct FString                 msg;
	} params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ImpactEffectIsRelevant
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class APawn*                   EffectInstigator               (CPF_Parm)
// struct FVector                 SpawnLocation                  (CPF_Parm)
// bool                           bForceDedicated                (CPF_Parm)
// float                          VisibleCullDistance            (CPF_OptionalParm, CPF_Parm)
// float                          HiddenCullDistance             (CPF_OptionalParm, CPF_Parm)
// bool                           bSkipLOSCheck                  (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::ImpactEffectIsRelevant(class APawn* EffectInstigator, const struct FVector& SpawnLocation, bool bForceDedicated, float VisibleCullDistance, float HiddenCullDistance, bool bSkipLOSCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ImpactEffectIsRelevant");

	struct
	{
		class APawn*                   EffectInstigator;
		struct FVector                 SpawnLocation;
		bool                           bForceDedicated;
		float                          VisibleCullDistance;
		float                          HiddenCullDistance;
		bool                           bSkipLOSCheck;
		bool                           ReturnValue;
	} params;
	params.EffectInstigator = EffectInstigator;
	params.SpawnLocation = SpawnLocation;
	params.bForceDedicated = bForceDedicated;
	params.VisibleCullDistance = VisibleCullDistance;
	params.HiddenCullDistance = HiddenCullDistance;
	params.bSkipLOSCheck = bSkipLOSCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ActorEffectIsRelevant
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class APawn*                   EffectInstigator               (CPF_Parm)
// bool                           bForceDedicated                (CPF_Parm)
// float                          VisibleCullDistance            (CPF_OptionalParm, CPF_Parm)
// float                          HiddenCullDistance             (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::ActorEffectIsRelevant(class APawn* EffectInstigator, bool bForceDedicated, float VisibleCullDistance, float HiddenCullDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActorEffectIsRelevant");

	struct
	{
		class APawn*                   EffectInstigator;
		bool                           bForceDedicated;
		float                          VisibleCullDistance;
		float                          HiddenCullDistance;
		bool                           ReturnValue;
	} params;
	params.EffectInstigator = EffectInstigator;
	params.bForceDedicated = bForceDedicated;
	params.VisibleCullDistance = VisibleCullDistance;
	params.HiddenCullDistance = HiddenCullDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.EffectIsRelevant
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 SpawnLocation                  (CPF_Parm)
// bool                           bForceDedicated                (CPF_Parm)
// float                          VisibleCullDistance            (CPF_OptionalParm, CPF_Parm)
// float                          HiddenCullDistance             (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::EffectIsRelevant(const struct FVector& SpawnLocation, bool bForceDedicated, float VisibleCullDistance, float HiddenCullDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EffectIsRelevant");

	struct
	{
		struct FVector                 SpawnLocation;
		bool                           bForceDedicated;
		float                          VisibleCullDistance;
		float                          HiddenCullDistance;
		bool                           ReturnValue;
	} params;
	params.SpawnLocation = SpawnLocation;
	params.bForceDedicated = bForceDedicated;
	params.VisibleCullDistance = VisibleCullDistance;
	params.HiddenCullDistance = HiddenCullDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ApplyFluidSurfaceImpact
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AFluidSurfaceActor*      Fluid                          (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)

void AActor::ApplyFluidSurfaceImpact(class AFluidSurfaceActor* Fluid, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ApplyFluidSurfaceImpact");

	struct
	{
		class AFluidSurfaceActor*      Fluid;
		struct FVector                 HitLocation;
	} params;
	params.Fluid = Fluid;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.CanSplash
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::CanSplash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CanSplash");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PlayTeleportEffect
// (FUNC_Public)
// Parameters:
// bool                           bOut                           (CPF_Parm)
// bool                           bSound                         (CPF_Parm)

void AActor::PlayTeleportEffect(bool bOut, bool bSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayTeleportEffect");

	struct
	{
		bool                           bOut;
		bool                           bSound;
	} params;
	params.bOut = bOut;
	params.bSound = bSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.IsInPain
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::IsInPain()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsInPain");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Reset
// (FUNC_Event, FUNC_Public)

void AActor::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetFaceFXAudioComponent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UAudioComponent*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UAudioComponent* AActor::GetFaceFXAudioComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetFaceFXAudioComponent");

	struct
	{
		class UAudioComponent*         ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ModifyHearSoundComponent
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UAudioComponent*         AC                             (CPF_Parm, CPF_EditInline)

void AActor::ModifyHearSoundComponent(class UAudioComponent* AC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ModifyHearSoundComponent");

	struct
	{
		class UAudioComponent*         AC;
	} params;
	params.AC = AC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetPhysicsName
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AActor::GetPhysicsName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetPhysicsName");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.DisplayDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm, CPF_OutParm)
// float                          out_YPos                       (CPF_Parm, CPF_OutParm)

void AActor::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DisplayDebug");

	struct
	{
		class AHUD*                    HUD;
		float                          out_YL;
		float                          out_YPos;
	} params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Actor.GetDebugName
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AActor::GetDebugName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDebugName");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.MatchStarting
// (FUNC_Public)

void AActor::MatchStarting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MatchStarting");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetLocalString
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Switch                         (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_OptionalParm, CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AActor::STATIC_GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetLocalString");

	struct
	{
		int                            Switch;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		struct FString                 ReturnValue;
	} params;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ReplaceText
// (FUNC_Defined, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 Text                           (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 Replace                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 With                           (CPF_Parm, CPF_NeedCtorLink)

void AActor::STATIC_ReplaceText(const struct FString& Replace, const struct FString& With, struct FString* Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReplaceText");

	struct
	{
		struct FString                 Text;
		struct FString                 Replace;
		struct FString                 With;
	} params;
	params.Replace = Replace;
	params.With = With;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Text != nullptr)
		*Text = params.Text;
}


// Function Engine.Actor.GetHumanReadableName
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AActor::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetHumanReadableName");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetItemName
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FString                 FullName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AActor::GetItemName(const struct FString& FullName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetItemName");

	struct
	{
		struct FString                 FullName;
		struct FString                 ReturnValue;
	} params;
	params.FullName = FullName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CalcCamera
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// float                          fDeltaTime                     (CPF_Parm)
// struct FVector                 out_CamLoc                     (CPF_Parm, CPF_OutParm)
// struct FRotator                out_CamRot                     (CPF_Parm, CPF_OutParm)
// float                          out_FOV                        (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CalcCamera");

	struct
	{
		float                          fDeltaTime;
		struct FVector                 out_CamLoc;
		struct FRotator                out_CamRot;
		float                          out_FOV;
		bool                           ReturnValue;
	} params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CamLoc != nullptr)
		*out_CamLoc = params.out_CamLoc;
	if (out_CamRot != nullptr)
		*out_CamRot = params.out_CamRot;
	if (out_FOV != nullptr)
		*out_FOV = params.out_FOV;

	return params.ReturnValue;
}


// Function Engine.Actor.EndViewTarget
// (FUNC_Event, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)

void AActor::EndViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EndViewTarget");

	struct
	{
		class APlayerController*       PC;
	} params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BecomeViewTarget
// (FUNC_Event, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)

void AActor::BecomeViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BecomeViewTarget");

	struct
	{
		class APlayerController*       PC;
	} params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.CheckForErrors
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::CheckForErrors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CheckForErrors");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.DebugFreezeGame
// (FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  ActorToLookAt                  (CPF_OptionalParm, CPF_Parm)

void AActor::DebugFreezeGame(class AActor* ActorToLookAt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DebugFreezeGame");

	struct
	{
		class AActor*                  ActorToLookAt;
	} params;
	params.ActorToLookAt = ActorToLookAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetGravityAcceleration
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AActor::GetGravityAcceleration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetGravityAcceleration");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetGravityDirection
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AActor::GetGravityDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetGravityDirection");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetGravityZ
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AActor::GetGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetGravityZ");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CheckHitInfo
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// struct FTraceHitInfo           HitInfo                        (CPF_Parm, CPF_OutParm)
// class UPrimitiveComponent*     FallBackComponent              (CPF_Parm, CPF_EditInline)
// struct FVector                 Dir                            (CPF_Parm)
// struct FVector                 out_HitLocation                (CPF_Parm, CPF_OutParm)

void AActor::CheckHitInfo(class UPrimitiveComponent* FallBackComponent, const struct FVector& Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CheckHitInfo");

	struct
	{
		struct FTraceHitInfo           HitInfo;
		class UPrimitiveComponent*     FallBackComponent;
		struct FVector                 Dir;
		struct FVector                 out_HitLocation;
	} params;
	params.FallBackComponent = FallBackComponent;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;
	if (out_HitLocation != nullptr)
		*out_HitLocation = params.out_HitLocation;
}


// Function Engine.Actor.TakeRadiusDamage
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AController*             InstigatedBy                   (CPF_Parm)
// float                          BaseDamage                     (CPF_Parm)
// float                          DamageRadius                   (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HurtOrigin                     (CPF_Parm)
// bool                           bFullDamage                    (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// float                          DamageFalloffExponent          (CPF_OptionalParm, CPF_Parm)

void AActor::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TakeRadiusDamage");

	struct
	{
		class AController*             InstigatedBy;
		float                          BaseDamage;
		float                          DamageRadius;
		class UClass*                  DamageType;
		float                          Momentum;
		struct FVector                 HurtOrigin;
		bool                           bFullDamage;
		class AActor*                  DamageCauser;
		float                          DamageFalloffExponent;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.HealDamage
// (FUNC_Event, FUNC_Public)
// Parameters:
// int                            Amount                         (CPF_Parm)
// class AController*             Healer                         (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::HealDamage(int Amount, class AController* Healer, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HealDamage");

	struct
	{
		int                            Amount;
		class AController*             Healer;
		class UClass*                  DamageType;
		bool                           ReturnValue;
	} params;
	params.Amount = Amount;
	params.Healer = Healer;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.TakeDamage
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            DamageAmount                   (CPF_Parm)
// class AController*             EventInstigator                (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm, CPF_Parm)

void AActor::TakeDamage(int DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TakeDamage");

	struct
	{
		int                            DamageAmount;
		class AController*             EventInstigator;
		struct FVector                 HitLocation;
		struct FVector                 Momentum;
		class UClass*                  DamageType;
		struct FTraceHitInfo           HitInfo;
		class AActor*                  DamageCauser;
	} params;
	params.DamageAmount = DamageAmount;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KilledBy
// (FUNC_Public)
// Parameters:
// class APawn*                   EventInstigator                (CPF_Parm)

void AActor::KilledBy(class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KilledBy");

	struct
	{
		class APawn*                   EventInstigator;
	} params;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.HurtRadius
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// float                          BaseDamage                     (CPF_Parm)
// float                          DamageRadius                   (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HurtOrigin                     (CPF_Parm)
// class AActor*                  IgnoredActor                   (CPF_OptionalParm, CPF_Parm)
// class AController*             InstigatedByController         (CPF_OptionalParm, CPF_Parm)
// bool                           bDoFullDamage                  (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::HurtRadius(float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, bool bDoFullDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HurtRadius");

	struct
	{
		float                          BaseDamage;
		float                          DamageRadius;
		class UClass*                  DamageType;
		float                          Momentum;
		struct FVector                 HurtOrigin;
		class AActor*                  IgnoredActor;
		class AController*             InstigatedByController;
		bool                           bDoFullDamage;
		bool                           ReturnValue;
	} params;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.IgnoredActor = IgnoredActor;
	params.InstigatedByController = InstigatedByController;
	params.bDoFullDamage = bDoFullDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.StopsProjectile
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AActor*                  P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::StopsProjectile(class AActor* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopsProjectile");

	struct
	{
		class AActor*                  P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.NotifySkelControlBeyondLimit
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USkelControlLookAt*      LookAt                         (CPF_Parm)

void AActor::NotifySkelControlBeyondLimit(class USkelControlLookAt* LookAt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.NotifySkelControlBeyondLimit");

	struct
	{
		class USkelControlLookAt*      LookAt;
	} params;
	params.LookAt = LookAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ConstraintBrokenNotify
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  ConOwner                       (CPF_Parm)
// class URB_ConstraintSetup*     ConSetup                       (CPF_Parm)
// class URB_ConstraintInstance*  ConInstance                    (CPF_Parm)

void AActor::ConstraintBrokenNotify(class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ConstraintBrokenNotify");

	struct
	{
		class AActor*                  ConOwner;
		class URB_ConstraintSetup*     ConSetup;
		class URB_ConstraintInstance*  ConInstance;
	} params;
	params.ConOwner = ConOwner;
	params.ConSetup = ConSetup;
	params.ConInstance = ConInstance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetInitialState
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AActor::SetInitialState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetInitialState");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostBeginPlay
// (FUNC_Event, FUNC_Public)

void AActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BroadcastLocalizedTeamMessage
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            TeamIndex                      (CPF_Parm)
// class UClass*                  InMessageClass                 (CPF_Parm)
// int                            Switch                         (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_OptionalParm, CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm, CPF_Parm)

void AActor::BroadcastLocalizedTeamMessage(int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BroadcastLocalizedTeamMessage");

	struct
	{
		int                            TeamIndex;
		class UClass*                  InMessageClass;
		int                            Switch;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		class UObject*                 OptionalObject;
	} params;
	params.TeamIndex = TeamIndex;
	params.InMessageClass = InMessageClass;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BroadcastLocalizedMessage
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UClass*                  InMessageClass                 (CPF_Parm)
// int                            Switch                         (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_OptionalParm, CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm, CPF_Parm)

void AActor::BroadcastLocalizedMessage(class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BroadcastLocalizedMessage");

	struct
	{
		class UClass*                  InMessageClass;
		int                            Switch;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		class UObject*                 OptionalObject;
	} params;
	params.InMessageClass = InMessageClass;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PreBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AActor::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PreBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetALocalPlayerController
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class APlayerController*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APlayerController* AActor::GetALocalPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetALocalPlayerController");

	struct
	{
		class APlayerController*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.LocalPlayerControllers
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class APlayerController*       PC                             (CPF_Parm, CPF_OutParm)

void AActor::LocalPlayerControllers(class UClass* BaseClass, class APlayerController** PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.LocalPlayerControllers");

	struct
	{
		class UClass*                  BaseClass;
		class APlayerController*       PC;
	} params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PC != nullptr)
		*PC = params.PC;
}


// Function Engine.Actor.AllOwnedComponents
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class UActorComponent*         OutComponent                   (CPF_Parm, CPF_OutParm, CPF_EditInline)

void AActor::AllOwnedComponents(class UClass* BaseClass, class UActorComponent** OutComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AllOwnedComponents");

	struct
	{
		class UClass*                  BaseClass;
		class UActorComponent*         OutComponent;
	} params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutComponent != nullptr)
		*OutComponent = params.OutComponent;
}


// Function Engine.Actor.ComponentList
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class UActorComponent*         out_Component                  (CPF_Parm, CPF_OutParm, CPF_EditInline)

void AActor::ComponentList(class UClass* BaseClass, class UActorComponent** out_Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ComponentList");

	struct
	{
		class UClass*                  BaseClass;
		class UActorComponent*         out_Component;
	} params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Component != nullptr)
		*out_Component = params.out_Component;
}


// Function Engine.Actor.OverlappingActors
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class AActor*                  out_Actor                      (CPF_Parm, CPF_OutParm)
// float                          Radius                         (CPF_Parm)
// struct FVector                 Loc                            (CPF_OptionalParm, CPF_Parm)
// bool                           bIgnoreHidden                  (CPF_OptionalParm, CPF_Parm)

void AActor::OverlappingActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, bool bIgnoreHidden, class AActor** out_Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OverlappingActors");

	struct
	{
		class UClass*                  BaseClass;
		class AActor*                  out_Actor;
		float                          Radius;
		struct FVector                 Loc;
		bool                           bIgnoreHidden;
	} params;
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;
	params.bIgnoreHidden = bIgnoreHidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Actor != nullptr)
		*out_Actor = params.out_Actor;
}


// Function Engine.Actor.CollidingActors
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm, CPF_OutParm)
// float                          Radius                         (CPF_Parm)
// struct FVector                 Loc                            (CPF_OptionalParm, CPF_Parm)
// bool                           bUseOverlapCheck               (CPF_OptionalParm, CPF_Parm)
// class UClass*                  InterfaceClass                 (CPF_OptionalParm, CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm, CPF_OutParm)

void AActor::CollidingActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, bool bUseOverlapCheck, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CollidingActors");

	struct
	{
		class UClass*                  BaseClass;
		class AActor*                  Actor;
		float                          Radius;
		struct FVector                 Loc;
		bool                           bUseOverlapCheck;
		class UClass*                  InterfaceClass;
		struct FTraceHitInfo           HitInfo;
	} params;
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;
	params.bUseOverlapCheck = bUseOverlapCheck;
	params.InterfaceClass = InterfaceClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;
}


// Function Engine.Actor.VisibleCollidingActors
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm, CPF_OutParm)
// float                          Radius                         (CPF_Parm)
// struct FVector                 Loc                            (CPF_OptionalParm, CPF_Parm)
// bool                           bIgnoreHidden                  (CPF_OptionalParm, CPF_Parm)
// struct FVector                 Extent                         (CPF_OptionalParm, CPF_Parm)
// bool                           bTraceActors                   (CPF_OptionalParm, CPF_Parm)
// class UClass*                  InterfaceClass                 (CPF_OptionalParm, CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm, CPF_OutParm)

void AActor::VisibleCollidingActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, bool bIgnoreHidden, const struct FVector& Extent, bool bTraceActors, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.VisibleCollidingActors");

	struct
	{
		class UClass*                  BaseClass;
		class AActor*                  Actor;
		float                          Radius;
		struct FVector                 Loc;
		bool                           bIgnoreHidden;
		struct FVector                 Extent;
		bool                           bTraceActors;
		class UClass*                  InterfaceClass;
		struct FTraceHitInfo           HitInfo;
	} params;
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;
	params.bIgnoreHidden = bIgnoreHidden;
	params.Extent = Extent;
	params.bTraceActors = bTraceActors;
	params.InterfaceClass = InterfaceClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;
}


// Function Engine.Actor.VisibleActors
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm, CPF_OutParm)
// float                          Radius                         (CPF_OptionalParm, CPF_Parm)
// struct FVector                 Loc                            (CPF_OptionalParm, CPF_Parm)

void AActor::VisibleActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.VisibleActors");

	struct
	{
		class UClass*                  BaseClass;
		class AActor*                  Actor;
		float                          Radius;
		struct FVector                 Loc;
	} params;
	params.BaseClass = BaseClass;
	params.Radius = Radius;
	params.Loc = Loc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.TraceActors
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm, CPF_OutParm)
// struct FVector                 HitLoc                         (CPF_Parm, CPF_OutParm)
// struct FVector                 HitNorm                        (CPF_Parm, CPF_OutParm)
// struct FVector                 End                            (CPF_Parm)
// struct FVector                 Start                          (CPF_OptionalParm, CPF_Parm)
// struct FVector                 Extent                         (CPF_OptionalParm, CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// int                            ExtraTraceFlags                (CPF_OptionalParm, CPF_Parm)

void AActor::TraceActors(class UClass* BaseClass, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TraceActors");

	struct
	{
		class UClass*                  BaseClass;
		class AActor*                  Actor;
		struct FVector                 HitLoc;
		struct FVector                 HitNorm;
		struct FVector                 End;
		struct FVector                 Start;
		struct FVector                 Extent;
		struct FTraceHitInfo           HitInfo;
		int                            ExtraTraceFlags;
	} params;
	params.BaseClass = BaseClass;
	params.End = End;
	params.Start = Start;
	params.Extent = Extent;
	params.ExtraTraceFlags = ExtraTraceFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
	if (HitLoc != nullptr)
		*HitLoc = params.HitLoc;
	if (HitNorm != nullptr)
		*HitNorm = params.HitNorm;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;
}


// Function Engine.Actor.TouchingActors
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm, CPF_OutParm)

void AActor::TouchingActors(class UClass* BaseClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TouchingActors");

	struct
	{
		class UClass*                  BaseClass;
		class AActor*                  Actor;
	} params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.BasedActors
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm, CPF_OutParm)

void AActor::BasedActors(class UClass* BaseClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BasedActors");

	struct
	{
		class UClass*                  BaseClass;
		class AActor*                  Actor;
	} params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.ChildActors
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm, CPF_OutParm)

void AActor::ChildActors(class UClass* BaseClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ChildActors");

	struct
	{
		class UClass*                  BaseClass;
		class AActor*                  Actor;
	} params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.DynamicActors
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm, CPF_OutParm)
// class UClass*                  InterfaceClass                 (CPF_OptionalParm, CPF_Parm)

void AActor::DynamicActors(class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DynamicActors");

	struct
	{
		class UClass*                  BaseClass;
		class AActor*                  Actor;
		class UClass*                  InterfaceClass;
	} params;
	params.BaseClass = BaseClass;
	params.InterfaceClass = InterfaceClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.AllActors
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class AActor*                  Actor                          (CPF_Parm, CPF_OutParm)
// class UClass*                  InterfaceClass                 (CPF_OptionalParm, CPF_Parm)

void AActor::AllActors(class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AllActors");

	struct
	{
		class UClass*                  BaseClass;
		class AActor*                  Actor;
		class UClass*                  InterfaceClass;
	} params;
	params.BaseClass = BaseClass;
	params.InterfaceClass = InterfaceClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.GetURLMap
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AActor::GetURLMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetURLMap");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PostTeleport
// (FUNC_Public)
// Parameters:
// class ATeleporter*             OutTeleporter                  (CPF_Parm)

void AActor::PostTeleport(class ATeleporter* OutTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostTeleport");

	struct
	{
		class ATeleporter*             OutTeleporter;
	} params;
	params.OutTeleporter = OutTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PreTeleport
// (FUNC_Public)
// Parameters:
// class ATeleporter*             InTeleporter                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::PreTeleport(class ATeleporter* InTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PreTeleport");

	struct
	{
		class ATeleporter*             InTeleporter;
		bool                           ReturnValue;
	} params;
	params.InTeleporter = InTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetDestination
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class AController*             C                              (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AActor::GetDestination(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDestination");

	struct
	{
		class AController*             C;
		struct FVector                 ReturnValue;
	} params;
	params.C = C;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CalculateMinSpeedTrajectory
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 out_Velocity                   (CPF_Parm, CPF_OutParm)
// struct FVector                 End                            (CPF_Parm)
// struct FVector                 Start                          (CPF_Parm)
// float                          MaxTossSpeed                   (CPF_Parm)
// float                          MinTossSpeed                   (CPF_Parm)
// struct FVector                 CollisionSize                  (CPF_OptionalParm, CPF_Parm)
// float                          TerminalVelocity               (CPF_OptionalParm, CPF_Parm)
// float                          GravityZ                       (CPF_OptionalParm, CPF_Parm)
// bool                           bOnlyTraceUp                   (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::CalculateMinSpeedTrajectory(const struct FVector& End, const struct FVector& Start, float MaxTossSpeed, float MinTossSpeed, const struct FVector& CollisionSize, float TerminalVelocity, float GravityZ, bool bOnlyTraceUp, struct FVector* out_Velocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CalculateMinSpeedTrajectory");

	struct
	{
		struct FVector                 out_Velocity;
		struct FVector                 End;
		struct FVector                 Start;
		float                          MaxTossSpeed;
		float                          MinTossSpeed;
		struct FVector                 CollisionSize;
		float                          TerminalVelocity;
		float                          GravityZ;
		bool                           bOnlyTraceUp;
		bool                           ReturnValue;
	} params;
	params.End = End;
	params.Start = Start;
	params.MaxTossSpeed = MaxTossSpeed;
	params.MinTossSpeed = MinTossSpeed;
	params.CollisionSize = CollisionSize;
	params.TerminalVelocity = TerminalVelocity;
	params.GravityZ = GravityZ;
	params.bOnlyTraceUp = bOnlyTraceUp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Velocity != nullptr)
		*out_Velocity = params.out_Velocity;

	return params.ReturnValue;
}


// Function Engine.Actor.SuggestTossVelocity
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 TossVelocity                   (CPF_Parm, CPF_OutParm)
// struct FVector                 Destination                    (CPF_Parm)
// struct FVector                 Start                          (CPF_Parm)
// float                          TossSpeed                      (CPF_Parm)
// float                          BaseTossZ                      (CPF_OptionalParm, CPF_Parm)
// float                          DesiredZPct                    (CPF_OptionalParm, CPF_Parm)
// struct FVector                 CollisionSize                  (CPF_OptionalParm, CPF_Parm)
// float                          TerminalVelocity               (CPF_OptionalParm, CPF_Parm)
// float                          OverrideGravityZ               (CPF_OptionalParm, CPF_Parm)
// bool                           bOnlyTraceUp                   (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::SuggestTossVelocity(const struct FVector& Destination, const struct FVector& Start, float TossSpeed, float BaseTossZ, float DesiredZPct, const struct FVector& CollisionSize, float TerminalVelocity, float OverrideGravityZ, bool bOnlyTraceUp, struct FVector* TossVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SuggestTossVelocity");

	struct
	{
		struct FVector                 TossVelocity;
		struct FVector                 Destination;
		struct FVector                 Start;
		float                          TossSpeed;
		float                          BaseTossZ;
		float                          DesiredZPct;
		struct FVector                 CollisionSize;
		float                          TerminalVelocity;
		float                          OverrideGravityZ;
		bool                           bOnlyTraceUp;
		bool                           ReturnValue;
	} params;
	params.Destination = Destination;
	params.Start = Start;
	params.TossSpeed = TossSpeed;
	params.BaseTossZ = BaseTossZ;
	params.DesiredZPct = DesiredZPct;
	params.CollisionSize = CollisionSize;
	params.TerminalVelocity = TerminalVelocity;
	params.OverrideGravityZ = OverrideGravityZ;
	params.bOnlyTraceUp = bOnlyTraceUp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TossVelocity != nullptr)
		*TossVelocity = params.TossVelocity;

	return params.ReturnValue;
}


// Function Engine.Actor.PlayerCanSeeMe
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bForceLOSCheck                 (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::PlayerCanSeeMe(bool bForceLOSCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayerCanSeeMe");

	struct
	{
		bool                           bForceLOSCheck;
		bool                           ReturnValue;
	} params;
	params.bForceLOSCheck = bForceLOSCheck;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.MakeNoise
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          Loudness                       (CPF_Parm)
// struct FName                   NoiseType                      (CPF_OptionalParm, CPF_Parm)

void AActor::MakeNoise(float Loudness, const struct FName& NoiseType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MakeNoise");

	struct
	{
		float                          Loudness;
		struct FName                   NoiseType;
	} params;
	params.Loudness = Loudness;
	params.NoiseType = NoiseType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ActivateOcclusion
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bInActivate                    (CPF_Parm)

void AActor::ActivateOcclusion(bool bInActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ActivateOcclusion");

	struct
	{
		bool                           bInActivate;
	} params;
	params.bInActivate = bInActivate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostTrigger
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InTrigger                      (CPF_Parm)

void AActor::PostTrigger(const struct FName& InTrigger)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostTrigger");

	struct
	{
		struct FName                   InTrigger;
	} params;
	params.InTrigger = InTrigger;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetSwitch
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InSwitchGroup                  (CPF_Parm)
// struct FName                   InSwitch                       (CPF_Parm)

void AActor::SetSwitch(const struct FName& InSwitchGroup, const struct FName& InSwitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetSwitch");

	struct
	{
		struct FName                   InSwitchGroup;
		struct FName                   InSwitch;
	} params;
	params.InSwitchGroup = InSwitchGroup;
	params.InSwitch = InSwitch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetState
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InStateGroup                   (CPF_Parm)
// struct FName                   InState                        (CPF_Parm)

void AActor::SetState(const struct FName& InStateGroup, const struct FName& InState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetState");

	struct
	{
		struct FName                   InStateGroup;
		struct FName                   InState;
	} params;
	params.InStateGroup = InStateGroup;
	params.InState = InState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetRTPCValue
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InRTPC                         (CPF_Parm)
// float                          TargetValue                    (CPF_Parm)

void AActor::SetRTPCValue(const struct FName& InRTPC, float TargetValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRTPCValue");

	struct
	{
		struct FName                   InRTPC;
		float                          TargetValue;
	} params;
	params.InRTPC = InRTPC;
	params.TargetValue = TargetValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostAkEventOnBone
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UAkEvent*                InAkEvent                      (CPF_Parm)
// struct FName                   BoneName                       (CPF_Parm)

void AActor::PostAkEventOnBone(class UAkEvent* InAkEvent, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostAkEventOnBone");

	struct
	{
		class UAkEvent*                InAkEvent;
		struct FName                   BoneName;
	} params;
	params.InAkEvent = InAkEvent;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostAkEvent
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UAkEvent*                InAkEvent                      (CPF_Parm)

void AActor::PostAkEvent(class UAkEvent* InAkEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostAkEvent");

	struct
	{
		class UAkEvent*                InAkEvent;
	} params;
	params.InAkEvent = InAkEvent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PlaySoundBase
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UAkBaseSoundObject*      InSoundCue                     (CPF_Parm)
// bool                           bNotReplicated                 (CPF_OptionalParm, CPF_Parm)
// bool                           bNoRepToOwner                  (CPF_OptionalParm, CPF_Parm)
// bool                           bStopWhenOwnerDestroyed        (CPF_OptionalParm, CPF_Parm)
// struct FVector                 SoundLocation                  (CPF_OptionalParm, CPF_Parm)
// bool                           bNoRepToRelevant               (CPF_OptionalParm, CPF_Parm)

void AActor::PlaySoundBase(class UAkBaseSoundObject* InSoundCue, bool bNotReplicated, bool bNoRepToOwner, bool bStopWhenOwnerDestroyed, const struct FVector& SoundLocation, bool bNoRepToRelevant)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlaySoundBase");

	struct
	{
		class UAkBaseSoundObject*      InSoundCue;
		bool                           bNotReplicated;
		bool                           bNoRepToOwner;
		bool                           bStopWhenOwnerDestroyed;
		struct FVector                 SoundLocation;
		bool                           bNoRepToRelevant;
	} params;
	params.InSoundCue = InSoundCue;
	params.bNotReplicated = bNotReplicated;
	params.bNoRepToOwner = bNoRepToOwner;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.SoundLocation = SoundLocation;
	params.bNoRepToRelevant = bNoRepToRelevant;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PlayAkEvent
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UAkEvent*                InSoundCue                     (CPF_Parm)
// bool                           bNotReplicated                 (CPF_OptionalParm, CPF_Parm)
// bool                           bNoRepToOwner                  (CPF_OptionalParm, CPF_Parm)
// bool                           bStopWhenOwnerDestroyed        (CPF_OptionalParm, CPF_Parm)
// struct FVector                 SoundLocation                  (CPF_OptionalParm, CPF_Parm)
// bool                           bNoRepToRelevant               (CPF_OptionalParm, CPF_Parm)

void AActor::PlayAkEvent(class UAkEvent* InSoundCue, bool bNotReplicated, bool bNoRepToOwner, bool bStopWhenOwnerDestroyed, const struct FVector& SoundLocation, bool bNoRepToRelevant)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayAkEvent");

	struct
	{
		class UAkEvent*                InSoundCue;
		bool                           bNotReplicated;
		bool                           bNoRepToOwner;
		bool                           bStopWhenOwnerDestroyed;
		struct FVector                 SoundLocation;
		bool                           bNoRepToRelevant;
	} params;
	params.InSoundCue = InSoundCue;
	params.bNotReplicated = bNotReplicated;
	params.bNoRepToOwner = bNoRepToOwner;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.SoundLocation = SoundLocation;
	params.bNoRepToRelevant = bNoRepToRelevant;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PlaySound
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class USoundCue*               InSoundCue                     (CPF_Parm)
// bool                           bReplicated                    (CPF_OptionalParm, CPF_Parm)
// bool                           bNoRepToOwner                  (CPF_OptionalParm, CPF_Parm)
// bool                           bStopWhenOwnerDestroyed        (CPF_OptionalParm, CPF_Parm)
// struct FVector                 SoundLocation                  (CPF_OptionalParm, CPF_Parm)
// bool                           bNoRepToRelevant               (CPF_OptionalParm, CPF_Parm)

void AActor::PlaySound(class USoundCue* InSoundCue, bool bReplicated, bool bNoRepToOwner, bool bStopWhenOwnerDestroyed, const struct FVector& SoundLocation, bool bNoRepToRelevant)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlaySound");

	struct
	{
		class USoundCue*               InSoundCue;
		bool                           bReplicated;
		bool                           bNoRepToOwner;
		bool                           bStopWhenOwnerDestroyed;
		struct FVector                 SoundLocation;
		bool                           bNoRepToRelevant;
	} params;
	params.InSoundCue = InSoundCue;
	params.bReplicated = bReplicated;
	params.bNoRepToOwner = bNoRepToOwner;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.SoundLocation = SoundLocation;
	params.bNoRepToRelevant = bNoRepToRelevant;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.CreateAudioComponent
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class USoundCue*               InSoundCue                     (CPF_Parm)
// bool                           bPlay                          (CPF_OptionalParm, CPF_Parm)
// bool                           bStopWhenOwnerDestroyed        (CPF_OptionalParm, CPF_Parm)
// bool                           bUseLocation                   (CPF_OptionalParm, CPF_Parm)
// struct FVector                 SourceLocation                 (CPF_OptionalParm, CPF_Parm)
// bool                           bAttachToSelf                  (CPF_OptionalParm, CPF_Parm)
// class UAudioComponent*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UAudioComponent* AActor::CreateAudioComponent(class USoundCue* InSoundCue, bool bPlay, bool bStopWhenOwnerDestroyed, bool bUseLocation, const struct FVector& SourceLocation, bool bAttachToSelf)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CreateAudioComponent");

	struct
	{
		class USoundCue*               InSoundCue;
		bool                           bPlay;
		bool                           bStopWhenOwnerDestroyed;
		bool                           bUseLocation;
		struct FVector                 SourceLocation;
		bool                           bAttachToSelf;
		class UAudioComponent*         ReturnValue;
	} params;
	params.InSoundCue = InSoundCue;
	params.bPlay = bPlay;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.bUseLocation = bUseLocation;
	params.SourceLocation = SourceLocation;
	params.bAttachToSelf = bAttachToSelf;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ResetTimerTimeDilation
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   TimerName                      (CPF_Const, CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm, CPF_Parm)

void AActor::ResetTimerTimeDilation(const struct FName& TimerName, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ResetTimerTimeDilation");

	struct
	{
		struct FName                   TimerName;
		class UObject*                 inObj;
	} params;
	params.TimerName = TimerName;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ModifyTimerTimeDilation
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   TimerName                      (CPF_Const, CPF_Parm)
// float                          InTimerTimeDilation            (CPF_Const, CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm, CPF_Parm)

void AActor::ModifyTimerTimeDilation(const struct FName& TimerName, float InTimerTimeDilation, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ModifyTimerTimeDilation");

	struct
	{
		struct FName                   TimerName;
		float                          InTimerTimeDilation;
		class UObject*                 inObj;
	} params;
	params.TimerName = TimerName;
	params.InTimerTimeDilation = InTimerTimeDilation;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetRemainingTimeForTimer
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   TimerFuncName                  (CPF_OptionalParm, CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm, CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AActor::GetRemainingTimeForTimer(const struct FName& TimerFuncName, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetRemainingTimeForTimer");

	struct
	{
		struct FName                   TimerFuncName;
		class UObject*                 inObj;
		float                          ReturnValue;
	} params;
	params.TimerFuncName = TimerFuncName;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetTimerRate
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   TimerFuncName                  (CPF_OptionalParm, CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm, CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AActor::GetTimerRate(const struct FName& TimerFuncName, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTimerRate");

	struct
	{
		struct FName                   TimerFuncName;
		class UObject*                 inObj;
		float                          ReturnValue;
	} params;
	params.TimerFuncName = TimerFuncName;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetTimerCount
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   inTimerFunc                    (CPF_OptionalParm, CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm, CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AActor::GetTimerCount(const struct FName& inTimerFunc, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTimerCount");

	struct
	{
		struct FName                   inTimerFunc;
		class UObject*                 inObj;
		float                          ReturnValue;
	} params;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsTimerActive
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   inTimerFunc                    (CPF_OptionalParm, CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::IsTimerActive(const struct FName& inTimerFunc, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsTimerActive");

	struct
	{
		struct FName                   inTimerFunc;
		class UObject*                 inObj;
		bool                           ReturnValue;
	} params;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PauseTimer
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bPause                         (CPF_Parm)
// struct FName                   inTimerFunc                    (CPF_OptionalParm, CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm, CPF_Parm)

void AActor::PauseTimer(bool bPause, const struct FName& inTimerFunc, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PauseTimer");

	struct
	{
		bool                           bPause;
		struct FName                   inTimerFunc;
		class UObject*                 inObj;
	} params;
	params.bPause = bPause;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ClearAllTimers
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UObject*                 inObj                          (CPF_OptionalParm, CPF_Parm)

void AActor::ClearAllTimers(class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClearAllTimers");

	struct
	{
		class UObject*                 inObj;
	} params;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ClearTimer
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   inTimerFunc                    (CPF_OptionalParm, CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm, CPF_Parm)

void AActor::ClearTimer(const struct FName& inTimerFunc, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClearTimer");

	struct
	{
		struct FName                   inTimerFunc;
		class UObject*                 inObj;
	} params;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetStateTimer
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          InRate                         (CPF_Parm)
// bool                           inbLoop                        (CPF_OptionalParm, CPF_Parm)
// struct FName                   inTimerFunc                    (CPF_OptionalParm, CPF_Parm)

void AActor::SetStateTimer(float InRate, bool inbLoop, const struct FName& inTimerFunc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetStateTimer");

	struct
	{
		float                          InRate;
		bool                           inbLoop;
		struct FName                   inTimerFunc;
	} params;
	params.InRate = InRate;
	params.inbLoop = inbLoop;
	params.inTimerFunc = inTimerFunc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetTimer
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          InRate                         (CPF_Parm)
// bool                           inbLoop                        (CPF_OptionalParm, CPF_Parm)
// struct FName                   inTimerFunc                    (CPF_OptionalParm, CPF_Parm)
// class UObject*                 inObj                          (CPF_OptionalParm, CPF_Parm)

void AActor::SetTimer(float InRate, bool inbLoop, const struct FName& inTimerFunc, class UObject* inObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTimer");

	struct
	{
		float                          InRate;
		bool                           inbLoop;
		struct FName                   inTimerFunc;
		class UObject*                 inObj;
	} params;
	params.InRate = InRate;
	params.inbLoop = inbLoop;
	params.inTimerFunc = inTimerFunc;
	params.inObj = inObj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TornOff
// (FUNC_Event, FUNC_Public)

void AActor::TornOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TornOff");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Destroy
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::Destroy()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Destroy");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Spawn
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UClass*                  SpawnClass                     (CPF_Parm)
// class AActor*                  SpawnOwner                     (CPF_OptionalParm, CPF_Parm)
// struct FName                   SpawnTag                       (CPF_OptionalParm, CPF_Parm)
// struct FVector                 SpawnLocation                  (CPF_OptionalParm, CPF_Parm)
// struct FRotator                SpawnRotation                  (CPF_OptionalParm, CPF_Parm)
// class AActor*                  ActorTemplate                  (CPF_OptionalParm, CPF_Parm)
// bool                           bNoCollisionFail               (CPF_OptionalParm, CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_CoerceParm)

class AActor* AActor::Spawn(class UClass* SpawnClass, class AActor* SpawnOwner, const struct FName& SpawnTag, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* ActorTemplate, bool bNoCollisionFail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Spawn");

	struct
	{
		class UClass*                  SpawnClass;
		class AActor*                  SpawnOwner;
		struct FName                   SpawnTag;
		struct FVector                 SpawnLocation;
		struct FRotator                SpawnRotation;
		class AActor*                  ActorTemplate;
		bool                           bNoCollisionFail;
		class AActor*                  ReturnValue;
	} params;
	params.SpawnClass = SpawnClass;
	params.SpawnOwner = SpawnOwner;
	params.SpawnTag = SpawnTag;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.ActorTemplate = ActorTemplate;
	params.bNoCollisionFail = bNoCollisionFail;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsBlockedBy
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Const, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::IsBlockedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsBlockedBy");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetBoundingCylinder
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          CollisionRadius                (CPF_Parm, CPF_OutParm)
// float                          CollisionHeight                (CPF_Parm, CPF_OutParm)

void AActor::GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetBoundingCylinder");

	struct
	{
		float                          CollisionRadius;
		float                          CollisionHeight;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CollisionRadius != nullptr)
		*CollisionRadius = params.CollisionRadius;
	if (CollisionHeight != nullptr)
		*CollisionHeight = params.CollisionHeight;
}


// Function Engine.Actor.GetComponentsBoundingBox
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FBox                    ActorBox                       (CPF_Parm, CPF_OutParm)

void AActor::GetComponentsBoundingBox(struct FBox* ActorBox)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetComponentsBoundingBox");

	struct
	{
		struct FBox                    ActorBox;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActorBox != nullptr)
		*ActorBox = params.ActorBox;
}


// Function Engine.Actor.IsOverlapping
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  A                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::IsOverlapping(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsOverlapping");

	struct
	{
		class AActor*                  A;
		bool                           ReturnValue;
	} params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ContainsPoint
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 Spot                           (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::ContainsPoint(const struct FVector& Spot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ContainsPoint");

	struct
	{
		struct FVector                 Spot;
		bool                           ReturnValue;
	} params;
	params.Spot = Spot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FindSpot
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 BoxExtent                      (CPF_Parm)
// struct FVector                 SpotLocation                   (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::FindSpot(const struct FVector& BoxExtent, struct FVector* SpotLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindSpot");

	struct
	{
		struct FVector                 BoxExtent;
		struct FVector                 SpotLocation;
		bool                           ReturnValue;
	} params;
	params.BoxExtent = BoxExtent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SpotLocation != nullptr)
		*SpotLocation = params.SpotLocation;

	return params.ReturnValue;
}


// Function Engine.Actor.TraceAllPhysicsAssetInteractions
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class USkeletalMeshComponent*  SkelMeshComp                   (CPF_Parm, CPF_EditInline)
// struct FVector                 EndTrace                       (CPF_Parm)
// struct FVector                 StartTrace                     (CPF_Parm)
// TArray<struct FImpactInfo>     out_Hits                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FVector                 Extent                         (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::TraceAllPhysicsAssetInteractions(class USkeletalMeshComponent* SkelMeshComp, const struct FVector& EndTrace, const struct FVector& StartTrace, const struct FVector& Extent, TArray<struct FImpactInfo>* out_Hits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TraceAllPhysicsAssetInteractions");

	struct
	{
		class USkeletalMeshComponent*  SkelMeshComp;
		struct FVector                 EndTrace;
		struct FVector                 StartTrace;
		TArray<struct FImpactInfo>     out_Hits;
		struct FVector                 Extent;
		bool                           ReturnValue;
	} params;
	params.SkelMeshComp = SkelMeshComp;
	params.EndTrace = EndTrace;
	params.StartTrace = StartTrace;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Hits != nullptr)
		*out_Hits = params.out_Hits;

	return params.ReturnValue;
}


// Function Engine.Actor.FastTrace
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 TraceEnd                       (CPF_Parm)
// struct FVector                 TraceStart                     (CPF_OptionalParm, CPF_Parm)
// struct FVector                 BoxExtent                      (CPF_OptionalParm, CPF_Parm)
// bool                           bTraceBullet                   (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::FastTrace(const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& BoxExtent, bool bTraceBullet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FastTrace");

	struct
	{
		struct FVector                 TraceEnd;
		struct FVector                 TraceStart;
		struct FVector                 BoxExtent;
		bool                           bTraceBullet;
		bool                           ReturnValue;
	} params;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.BoxExtent = BoxExtent;
	params.bTraceBullet = bTraceBullet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PointCheckComponent
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UPrimitiveComponent*     InComponent                    (CPF_Parm, CPF_EditInline)
// struct FVector                 PointLocation                  (CPF_Parm)
// struct FVector                 PointExtent                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::PointCheckComponent(class UPrimitiveComponent* InComponent, const struct FVector& PointLocation, const struct FVector& PointExtent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PointCheckComponent");

	struct
	{
		class UPrimitiveComponent*     InComponent;
		struct FVector                 PointLocation;
		struct FVector                 PointExtent;
		bool                           ReturnValue;
	} params;
	params.InComponent = InComponent;
	params.PointLocation = PointLocation;
	params.PointExtent = PointExtent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.TraceComponent
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 HitLocation                    (CPF_Parm, CPF_OutParm)
// struct FVector                 HitNormal                      (CPF_Parm, CPF_OutParm)
// class UPrimitiveComponent*     InComponent                    (CPF_Parm, CPF_EditInline)
// struct FVector                 TraceEnd                       (CPF_Parm)
// struct FVector                 TraceStart                     (CPF_OptionalParm, CPF_Parm)
// struct FVector                 Extent                         (CPF_OptionalParm, CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// bool                           bComplexCollision              (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::TraceComponent(class UPrimitiveComponent* InComponent, const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& Extent, bool bComplexCollision, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TraceComponent");

	struct
	{
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
		class UPrimitiveComponent*     InComponent;
		struct FVector                 TraceEnd;
		struct FVector                 TraceStart;
		struct FVector                 Extent;
		struct FTraceHitInfo           HitInfo;
		bool                           bComplexCollision;
		bool                           ReturnValue;
	} params;
	params.InComponent = InComponent;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.Extent = Extent;
	params.bComplexCollision = bComplexCollision;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;

	return params.ReturnValue;
}


// Function Engine.Actor.Trace
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 HitLocation                    (CPF_Parm, CPF_OutParm)
// struct FVector                 HitNormal                      (CPF_Parm, CPF_OutParm)
// struct FVector                 TraceEnd                       (CPF_Parm)
// struct FVector                 TraceStart                     (CPF_OptionalParm, CPF_Parm)
// bool                           bTraceActors                   (CPF_OptionalParm, CPF_Parm)
// struct FVector                 Extent                         (CPF_OptionalParm, CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// int                            ExtraTraceFlags                (CPF_OptionalParm, CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AActor* AActor::Trace(const struct FVector& TraceEnd, const struct FVector& TraceStart, bool bTraceActors, const struct FVector& Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Trace");

	struct
	{
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
		struct FVector                 TraceEnd;
		struct FVector                 TraceStart;
		bool                           bTraceActors;
		struct FVector                 Extent;
		struct FTraceHitInfo           HitInfo;
		int                            ExtraTraceFlags;
		class AActor*                  ReturnValue;
	} params;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.bTraceActors = bTraceActors;
	params.Extent = Extent;
	params.ExtraTraceFlags = ExtraTraceFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (HitInfo != nullptr)
		*HitInfo = params.HitInfo;

	return params.ReturnValue;
}


// Function Engine.Actor.VolumeBasedDestroy
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class APhysicsVolume*          PV                             (CPF_Parm)

void AActor::VolumeBasedDestroy(class APhysicsVolume* PV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.VolumeBasedDestroy");

	struct
	{
		class APhysicsVolume*          PV;
	} params;
	params.PV = PV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OutsideWorldBounds
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AActor::OutsideWorldBounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OutsideWorldBounds");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FellOutOfWorld
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UClass*                  dmgType                        (CPF_Parm)

void AActor::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FellOutOfWorld");

	struct
	{
		class UClass*                  dmgType;
	} params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UsedBy
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   User                           (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::UsedBy(class APawn* User)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UsedBy");

	struct
	{
		class APawn*                   User;
		bool                           ReturnValue;
	} params;
	params.User = User;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.OverRotated
// (FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FRotator                out_Desired                    (CPF_Parm, CPF_OutParm)
// struct FRotator                out_Actual                     (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::OverRotated(struct FRotator* out_Desired, struct FRotator* out_Actual)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OverRotated");

	struct
	{
		struct FRotator                out_Desired;
		struct FRotator                out_Actual;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Desired != nullptr)
		*out_Desired = params.out_Desired;
	if (out_Actual != nullptr)
		*out_Actual = params.out_Actual;

	return params.ReturnValue;
}


// Function Engine.Actor.ClampRotation
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FRotator                out_Rot                        (CPF_Parm, CPF_OutParm)
// struct FRotator                rBase                          (CPF_Parm)
// struct FRotator                rUpperLimits                   (CPF_Parm)
// struct FRotator                rLowerLimits                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::ClampRotation(const struct FRotator& rBase, const struct FRotator& rUpperLimits, const struct FRotator& rLowerLimits, struct FRotator* out_Rot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClampRotation");

	struct
	{
		struct FRotator                out_Rot;
		struct FRotator                rBase;
		struct FRotator                rUpperLimits;
		struct FRotator                rLowerLimits;
		bool                           ReturnValue;
	} params;
	params.rBase = rBase;
	params.rUpperLimits = rUpperLimits;
	params.rLowerLimits = rLowerLimits;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Rot != nullptr)
		*out_Rot = params.out_Rot;

	return params.ReturnValue;
}


// Function Engine.Actor.OnSleepRBPhysics
// (FUNC_Event, FUNC_Public)

void AActor::OnSleepRBPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnSleepRBPhysics");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnWakeRBPhysics
// (FUNC_Event, FUNC_Public)

void AActor::OnWakeRBPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnWakeRBPhysics");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RanInto
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AActor::RanInto(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RanInto");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.EncroachedBy
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AActor::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EncroachedBy");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.EncroachingOn
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EncroachingOn");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CollisionChanged
// (FUNC_Event, FUNC_Public)

void AActor::CollisionChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CollisionChanged");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SpecialHandling
// (FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AActor* AActor::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SpecialHandling");

	struct
	{
		class APawn*                   Other;
		class AActor*                  ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Detach
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AActor::Detach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Detach");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Attach
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AActor::Attach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Attach");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BaseChange
// (FUNC_Event, FUNC_Public)

void AActor::BaseChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BaseChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Bump
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm, CPF_EditInline)
// struct FVector                 HitNormal                      (CPF_Parm)

void AActor::Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Bump");

	struct
	{
		class AActor*                  Other;
		class UPrimitiveComponent*     OtherComp;
		struct FVector                 HitNormal;
	} params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UnTouch
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AActor::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UnTouch");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostTouch
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AActor::PostTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostTouch");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Touch
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm, CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AActor::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Touch");

	struct
	{
		class AActor*                  Other;
		class UPrimitiveComponent*     OtherComp;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
	} params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PhysicsVolumeChange
// (FUNC_Event, FUNC_Public)
// Parameters:
// class APhysicsVolume*          NewVolume                      (CPF_Parm)

void AActor::PhysicsVolumeChange(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PhysicsVolumeChange");

	struct
	{
		class APhysicsVolume*          NewVolume;
	} params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Landed
// (FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  FloorActor                     (CPF_Parm)

void AActor::Landed(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Landed");

	struct
	{
		struct FVector                 HitNormal;
		class AActor*                  FloorActor;
	} params;
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Falling
// (FUNC_Event, FUNC_Public)

void AActor::Falling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Falling");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.HitWall
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  Wall                           (CPF_Parm)
// class UPrimitiveComponent*     WallComp                       (CPF_Parm, CPF_EditInline)

void AActor::HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HitWall");

	struct
	{
		struct FVector                 HitNormal;
		class AActor*                  Wall;
		class UPrimitiveComponent*     WallComp;
	} params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;
	params.WallComp = WallComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Timer
// (FUNC_Event, FUNC_Public)

void AActor::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Timer");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnOwnerChanged
// (FUNC_Event, FUNC_Public)

void AActor::OnOwnerChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnOwnerChanged");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Tick
// (FUNC_Event, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void AActor::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Tick");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.LostChild
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AActor::LostChild(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.LostChild");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GainedChild
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AActor::GainedChild(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GainedChild");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Destroyed
// (FUNC_Event, FUNC_Public)

void AActor::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetTickIsDisabled
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bInDisabled                    (CPF_Parm)

void AActor::SetTickIsDisabled(bool bInDisabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTickIsDisabled");

	struct
	{
		bool                           bInDisabled;
	} params;
	params.bInDisabled = bInDisabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetTickGroup
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ETickingGroup> NewTickGroup                   (CPF_Parm)

void AActor::SetTickGroup(TEnumAsByte<enum class ETickingGroup> NewTickGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTickGroup");

	struct
	{
		TEnumAsByte<enum class ETickingGroup> NewTickGroup;
	} params;
	params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReattachComponent
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UActorComponent*         ComponentToReattach            (CPF_Parm, CPF_EditInline)

void AActor::ReattachComponent(class UActorComponent* ComponentToReattach)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReattachComponent");

	struct
	{
		class UActorComponent*         ComponentToReattach;
	} params;
	params.ComponentToReattach = ComponentToReattach;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DetachComponent
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UActorComponent*         ExComponent                    (CPF_Parm, CPF_EditInline)

void AActor::DetachComponent(class UActorComponent* ExComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DetachComponent");

	struct
	{
		class UActorComponent*         ExComponent;
	} params;
	params.ExComponent = ExComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AttachComponent
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UActorComponent*         NewComponent                   (CPF_Parm, CPF_EditInline)

void AActor::AttachComponent(class UActorComponent* NewComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AttachComponent");

	struct
	{
		class UActorComponent*         NewComponent;
	} params;
	params.NewComponent = NewComponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UnClock
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          Time                           (CPF_Parm, CPF_OutParm)

void AActor::UnClock(float* Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UnClock");

	struct
	{
		float                          Time;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Time != nullptr)
		*Time = params.Time;
}


// Function Engine.Actor.Clock
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          Time                           (CPF_Parm, CPF_OutParm)

void AActor::Clock(float* Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Clock");

	struct
	{
		float                          Time;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Time != nullptr)
		*Time = params.Time;
}


// Function Engine.Actor.SetPhysics
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class EPhysics> newPhysics                     (CPF_Parm)

void AActor::SetPhysics(TEnumAsByte<enum class EPhysics> newPhysics)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetPhysics");

	struct
	{
		TEnumAsByte<enum class EPhysics> newPhysics;
	} params;
	params.newPhysics = newPhysics;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetOnlyOwnerSee
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewOnlyOwnerSee               (CPF_Parm)

void AActor::SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetOnlyOwnerSee");

	struct
	{
		bool                           bNewOnlyOwnerSee;
	} params;
	params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetHidden
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewHidden                     (CPF_Parm)

void AActor::SetHidden(bool bNewHidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetHidden");

	struct
	{
		bool                           bNewHidden;
	} params;
	params.bNewHidden = bNewHidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ChartData
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 DataName                       (CPF_Parm, CPF_NeedCtorLink)
// float                          DataValue                      (CPF_Parm)

void AActor::ChartData(const struct FString& DataName, float DataValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ChartData");

	struct
	{
		struct FString                 DataName;
		float                          DataValue;
	} params;
	params.DataName = DataName;
	params.DataValue = DataValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FlushDebugStrings
// (FUNC_Final, FUNC_Exec, FUNC_Native, FUNC_Static, FUNC_Public)

void AActor::STATIC_FlushDebugStrings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FlushDebugStrings");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugFrustrum
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FMatrix                 FrustumToWorld                 (CPF_Const, CPF_Parm, CPF_OutParm)
// unsigned char                  R                              (CPF_Parm)
// unsigned char                  G                              (CPF_Parm)
// unsigned char                  B                              (CPF_Parm)
// bool                           bPersistentLines               (CPF_OptionalParm, CPF_Parm)

void AActor::STATIC_DrawDebugFrustrum(unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines, struct FMatrix* FrustumToWorld)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugFrustrum");

	struct
	{
		struct FMatrix                 FrustumToWorld;
		unsigned char                  R;
		unsigned char                  G;
		unsigned char                  B;
		bool                           bPersistentLines;
	} params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FrustumToWorld != nullptr)
		*FrustumToWorld = params.FrustumToWorld;
}


// Function Engine.Actor.DrawDebugString
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 TextLocation                   (CPF_Parm)
// struct FString                 Text                           (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// class AActor*                  TestBaseActor                  (CPF_OptionalParm, CPF_Parm)
// struct FColor                  TextColor                      (CPF_OptionalParm, CPF_Parm)
// float                          Duration                       (CPF_OptionalParm, CPF_Parm)

void AActor::STATIC_DrawDebugString(const struct FVector& TextLocation, const struct FString& Text, class AActor* TestBaseActor, const struct FColor& TextColor, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugString");

	struct
	{
		struct FVector                 TextLocation;
		struct FString                 Text;
		class AActor*                  TestBaseActor;
		struct FColor                  TextColor;
		float                          Duration;
	} params;
	params.TextLocation = TextLocation;
	params.Text = Text;
	params.TestBaseActor = TestBaseActor;
	params.TextColor = TextColor;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugCone
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Origin                         (CPF_Parm)
// struct FVector                 Direction                      (CPF_Parm)
// float                          Length                         (CPF_Parm)
// float                          AngleWidth                     (CPF_Parm)
// float                          AngleHeight                    (CPF_Parm)
// int                            NumSides                       (CPF_Parm)
// struct FColor                  DrawColor                      (CPF_Parm)
// bool                           bPersistentLines               (CPF_OptionalParm, CPF_Parm)

void AActor::STATIC_DrawDebugCone(const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FColor& DrawColor, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugCone");

	struct
	{
		struct FVector                 Origin;
		struct FVector                 Direction;
		float                          Length;
		float                          AngleWidth;
		float                          AngleHeight;
		int                            NumSides;
		struct FColor                  DrawColor;
		bool                           bPersistentLines;
	} params;
	params.Origin = Origin;
	params.Direction = Direction;
	params.Length = Length;
	params.AngleWidth = AngleWidth;
	params.AngleHeight = AngleHeight;
	params.NumSides = NumSides;
	params.DrawColor = DrawColor;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugCylinder
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Start                          (CPF_Parm)
// struct FVector                 End                            (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// int                            Segments                       (CPF_Parm)
// unsigned char                  R                              (CPF_Parm)
// unsigned char                  G                              (CPF_Parm)
// unsigned char                  B                              (CPF_Parm)
// bool                           bPersistentLines               (CPF_OptionalParm, CPF_Parm)

void AActor::STATIC_DrawDebugCylinder(const struct FVector& Start, const struct FVector& End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugCylinder");

	struct
	{
		struct FVector                 Start;
		struct FVector                 End;
		float                          Radius;
		int                            Segments;
		unsigned char                  R;
		unsigned char                  G;
		unsigned char                  B;
		bool                           bPersistentLines;
	} params;
	params.Start = Start;
	params.End = End;
	params.Radius = Radius;
	params.Segments = Segments;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugSphere
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Center                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// int                            Segments                       (CPF_Parm)
// unsigned char                  R                              (CPF_Parm)
// unsigned char                  G                              (CPF_Parm)
// unsigned char                  B                              (CPF_Parm)
// bool                           bPersistentLines               (CPF_OptionalParm, CPF_Parm)

void AActor::STATIC_DrawDebugSphere(const struct FVector& Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugSphere");

	struct
	{
		struct FVector                 Center;
		float                          Radius;
		int                            Segments;
		unsigned char                  R;
		unsigned char                  G;
		unsigned char                  B;
		bool                           bPersistentLines;
	} params;
	params.Center = Center;
	params.Radius = Radius;
	params.Segments = Segments;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugCoordinateSystem
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 AxisLoc                        (CPF_Parm)
// struct FRotator                AxisRot                        (CPF_Parm)
// float                          Scale                          (CPF_Parm)
// bool                           bPersistentLines               (CPF_OptionalParm, CPF_Parm)

void AActor::STATIC_DrawDebugCoordinateSystem(const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugCoordinateSystem");

	struct
	{
		struct FVector                 AxisLoc;
		struct FRotator                AxisRot;
		float                          Scale;
		bool                           bPersistentLines;
	} params;
	params.AxisLoc = AxisLoc;
	params.AxisRot = AxisRot;
	params.Scale = Scale;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugStar
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Position                       (CPF_Parm)
// float                          Size                           (CPF_Parm)
// unsigned char                  R                              (CPF_Parm)
// unsigned char                  G                              (CPF_Parm)
// unsigned char                  B                              (CPF_Parm)
// bool                           bPersistentLines               (CPF_OptionalParm, CPF_Parm)

void AActor::STATIC_DrawDebugStar(const struct FVector& Position, float Size, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugStar");

	struct
	{
		struct FVector                 Position;
		float                          Size;
		unsigned char                  R;
		unsigned char                  G;
		unsigned char                  B;
		bool                           bPersistentLines;
	} params;
	params.Position = Position;
	params.Size = Size;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugBox
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Center                         (CPF_Parm)
// struct FVector                 Extent                         (CPF_Parm)
// unsigned char                  R                              (CPF_Parm)
// unsigned char                  G                              (CPF_Parm)
// unsigned char                  B                              (CPF_Parm)
// bool                           bPersistentLines               (CPF_OptionalParm, CPF_Parm)

void AActor::STATIC_DrawDebugBox(const struct FVector& Center, const struct FVector& Extent, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugBox");

	struct
	{
		struct FVector                 Center;
		struct FVector                 Extent;
		unsigned char                  R;
		unsigned char                  G;
		unsigned char                  B;
		bool                           bPersistentLines;
	} params;
	params.Center = Center;
	params.Extent = Extent;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugPoint
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Position                       (CPF_Parm)
// float                          Size                           (CPF_Parm)
// struct FLinearColor            PointColor                     (CPF_Parm)
// bool                           bPersistentLines               (CPF_OptionalParm, CPF_Parm)

void AActor::STATIC_DrawDebugPoint(const struct FVector& Position, float Size, const struct FLinearColor& PointColor, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugPoint");

	struct
	{
		struct FVector                 Position;
		float                          Size;
		struct FLinearColor            PointColor;
		bool                           bPersistentLines;
	} params;
	params.Position = Position;
	params.Size = Size;
	params.PointColor = PointColor;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugLine
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 LineStart                      (CPF_Parm)
// struct FVector                 LineEnd                        (CPF_Parm)
// unsigned char                  R                              (CPF_Parm)
// unsigned char                  G                              (CPF_Parm)
// unsigned char                  B                              (CPF_Parm)
// bool                           bPersistentLines               (CPF_OptionalParm, CPF_Parm)

void AActor::STATIC_DrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugLine");

	struct
	{
		struct FVector                 LineStart;
		struct FVector                 LineEnd;
		unsigned char                  R;
		unsigned char                  G;
		unsigned char                  B;
		bool                           bPersistentLines;
	} params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.R = R;
	params.G = G;
	params.B = B;
	params.bPersistentLines = bPersistentLines;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FlushPersistentDebugLines
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)

void AActor::STATIC_FlushPersistentDebugLines()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FlushPersistentDebugLines");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetBasedPosition
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FBasedPosition          BP                             (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AActor::STATIC_GetBasedPosition(const struct FBasedPosition& BP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetBasedPosition");

	struct
	{
		struct FBasedPosition          BP;
		struct FVector                 ReturnValue;
	} params;
	params.BP = BP;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetBasedPosition
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FBasedPosition          BP                             (CPF_Parm, CPF_OutParm)
// struct FVector                 pos                            (CPF_Parm)
// class AActor*                  ForcedBase                     (CPF_OptionalParm, CPF_Parm)

void AActor::STATIC_SetBasedPosition(const struct FVector& pos, class AActor* ForcedBase, struct FBasedPosition* BP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetBasedPosition");

	struct
	{
		struct FBasedPosition          BP;
		struct FVector                 pos;
		class AActor*                  ForcedBase;
	} params;
	params.pos = pos;
	params.ForcedBase = ForcedBase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (BP != nullptr)
		*BP = params.BP;
}


// Function Engine.Actor.BP2Vect
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FBasedPosition          BP                             (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AActor::STATIC_BP2Vect(const struct FBasedPosition& BP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BP2Vect");

	struct
	{
		struct FBasedPosition          BP;
		struct FVector                 ReturnValue;
	} params;
	params.BP = BP;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Vect2BP
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FBasedPosition          BP                             (CPF_Parm, CPF_OutParm)
// struct FVector                 pos                            (CPF_Parm)
// class AActor*                  ForcedBase                     (CPF_OptionalParm, CPF_Parm)

void AActor::STATIC_Vect2BP(const struct FVector& pos, class AActor* ForcedBase, struct FBasedPosition* BP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Vect2BP");

	struct
	{
		struct FBasedPosition          BP;
		struct FVector                 pos;
		class AActor*                  ForcedBase;
	} params;
	params.pos = pos;
	params.ForcedBase = ForcedBase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (BP != nullptr)
		*BP = params.BP;
}


// Function Engine.Actor.SetForcedInitialReplicatedProperty
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UProperty*               PropToReplicate                (CPF_Parm)
// bool                           bAdd                           (CPF_Parm)

void AActor::SetForcedInitialReplicatedProperty(class UProperty* PropToReplicate, bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetForcedInitialReplicatedProperty");

	struct
	{
		class UProperty*               PropToReplicate;
		bool                           bAdd;
	} params;
	params.PropToReplicate = PropToReplicate;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ReplicatedEvent
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetAggregateBaseVelocity
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  TestBase                       (CPF_OptionalParm, CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AActor::GetAggregateBaseVelocity(class AActor* TestBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAggregateBaseVelocity");

	struct
	{
		class AActor*                  TestBase;
		struct FVector                 ReturnValue;
	} params;
	params.TestBase = TestBase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsOwnedBy
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  TestActor                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::IsOwnedBy(class AActor* TestActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsOwnedBy");

	struct
	{
		class AActor*                  TestActor;
		bool                           ReturnValue;
	} params;
	params.TestActor = TestActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetBaseMost
// (FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AActor* AActor::GetBaseMost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetBaseMost");

	struct
	{
		class AActor*                  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsBasedOn
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  TestActor                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::IsBasedOn(class AActor* TestActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsBasedOn");

	struct
	{
		class AActor*                  TestActor;
		bool                           ReturnValue;
	} params;
	params.TestActor = TestActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SearchForBaseBelow
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          HeightBelow                    (CPF_Parm)
// class AActor*                  NewBase                        (CPF_Parm, CPF_OutParm)
// struct FVector                 HitNormal                      (CPF_Parm, CPF_OutParm)

void AActor::SearchForBaseBelow(float HeightBelow, class AActor** NewBase, struct FVector* HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SearchForBaseBelow");

	struct
	{
		float                          HeightBelow;
		class AActor*                  NewBase;
		struct FVector                 HitNormal;
	} params;
	params.HeightBelow = HeightBelow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewBase != nullptr)
		*NewBase = params.NewBase;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
}


// Function Engine.Actor.FindBase
// (FUNC_Native, FUNC_Public)

void AActor::FindBase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FindBase");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetOwner
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  NewOwner                       (CPF_Parm)

void AActor::SetOwner(class AActor* NewOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetOwner");

	struct
	{
		class AActor*                  NewOwner;
	} params;
	params.NewOwner = NewOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetBase
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  NewBase                        (CPF_Parm)
// struct FVector                 NewFloor                       (CPF_OptionalParm, CPF_Parm)
// class USkeletalMeshComponent*  SkelComp                       (CPF_OptionalParm, CPF_Parm, CPF_EditInline)
// struct FName                   AttachName                     (CPF_OptionalParm, CPF_Parm)

void AActor::SetBase(class AActor* NewBase, const struct FVector& NewFloor, class USkeletalMeshComponent* SkelComp, const struct FName& AttachName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetBase");

	struct
	{
		class AActor*                  NewBase;
		struct FVector                 NewFloor;
		class USkeletalMeshComponent*  SkelComp;
		struct FName                   AttachName;
	} params;
	params.NewBase = NewBase;
	params.NewFloor = NewFloor;
	params.SkelComp = SkelComp;
	params.AttachName = AttachName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetTerminalVelocity
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AActor::GetTerminalVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetTerminalVelocity");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.AutonomousPhysics
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          DeltaSeconds                   (CPF_Parm)

void AActor::AutonomousPhysics(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AutonomousPhysics");

	struct
	{
		float                          DeltaSeconds;
	} params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MoveSmooth
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 Delta                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::MoveSmooth(const struct FVector& Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MoveSmooth");

	struct
	{
		struct FVector                 Delta;
		bool                           ReturnValue;
	} params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.fixedTurn
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            Current                        (CPF_Parm)
// int                            Desired                        (CPF_Parm)
// int                            DeltaRate                      (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int AActor::fixedTurn(int Current, int Desired, int DeltaRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.fixedTurn");

	struct
	{
		int                            Current;
		int                            Desired;
		int                            DeltaRate;
		int                            ReturnValue;
	} params;
	params.Current = Current;
	params.Desired = Desired;
	params.DeltaRate = DeltaRate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetShadowParentOnAllAttachedComponents
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// class UPrimitiveComponent*     MyPrimComp                     (CPF_Parm, CPF_EditInline)
// class ULightEnvironmentComponent* MyLightEnv                     (CPF_Parm, CPF_EditInline)

void AActor::SetShadowParentOnAllAttachedComponents(class UPrimitiveComponent* MyPrimComp, class ULightEnvironmentComponent* MyLightEnv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetShadowParentOnAllAttachedComponents");

	struct
	{
		class UPrimitiveComponent*     MyPrimComp;
		class ULightEnvironmentComponent* MyLightEnv;
	} params;
	params.MyPrimComp = MyPrimComp;
	params.MyLightEnv = MyLightEnv;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetHardAttach
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bNewHardAttach                 (CPF_OptionalParm, CPF_Parm)

void AActor::SetHardAttach(bool bNewHardAttach)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetHardAttach");

	struct
	{
		bool                           bNewHardAttach;
	} params;
	params.bNewHardAttach = bNewHardAttach;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetRelativeLocation
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 NewLocation                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::SetRelativeLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRelativeLocation");

	struct
	{
		struct FVector                 NewLocation;
		bool                           ReturnValue;
	} params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetRelativeRotation
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FRotator                NewRotation                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::SetRelativeRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRelativeRotation");

	struct
	{
		struct FRotator                NewRotation;
		bool                           ReturnValue;
	} params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetZone
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bForceRefresh                  (CPF_Parm)

void AActor::SetZone(bool bForceRefresh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetZone");

	struct
	{
		bool                           bForceRefresh;
	} params;
	params.bForceRefresh = bForceRefresh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MovingWhichWay
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          Amount                         (CPF_Parm, CPF_OutParm)
// TEnumAsByte<enum class EMoveDir> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EMoveDir> AActor::MovingWhichWay(float* Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MovingWhichWay");

	struct
	{
		float                          Amount;
		TEnumAsByte<enum class EMoveDir> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Amount != nullptr)
		*Amount = params.Amount;

	return params.ReturnValue;
}


// Function Engine.Actor.SetRotation
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FRotator                NewRotation                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::SetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRotation");

	struct
	{
		struct FRotator                NewRotation;
		bool                           ReturnValue;
	} params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetLocation
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 NewLocation                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::SetLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetLocation");

	struct
	{
		struct FVector                 NewLocation;
		bool                           ReturnValue;
	} params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Move
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 Delta                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AActor::Move(const struct FVector& Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Move");

	struct
	{
		struct FVector                 Delta;
		bool                           ReturnValue;
	} params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetDrawScale3D
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 NewScale3D                     (CPF_Parm)

void AActor::SetDrawScale3D(const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetDrawScale3D");

	struct
	{
		struct FVector                 NewScale3D;
	} params;
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetDrawScale
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          NewScale                       (CPF_Parm)

void AActor::SetDrawScale(float NewScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetDrawScale");

	struct
	{
		float                          NewScale;
	} params;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetCollisionType
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ECollisionType> NewCollisionType               (CPF_Parm)

void AActor::SetCollisionType(TEnumAsByte<enum class ECollisionType> NewCollisionType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetCollisionType");

	struct
	{
		TEnumAsByte<enum class ECollisionType> NewCollisionType;
	} params;
	params.NewCollisionType = NewCollisionType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetCollisionSize
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          NewRadius                      (CPF_Parm)
// float                          NewHeight                      (CPF_Parm)

void AActor::SetCollisionSize(float NewRadius, float NewHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetCollisionSize");

	struct
	{
		float                          NewRadius;
		float                          NewHeight;
	} params;
	params.NewRadius = NewRadius;
	params.NewHeight = NewHeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetCollision
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bNewColActors                  (CPF_OptionalParm, CPF_Parm)
// bool                           bNewBlockActors                (CPF_OptionalParm, CPF_Parm)
// bool                           bNewIgnoreEncroachers          (CPF_OptionalParm, CPF_Parm)

void AActor::SetCollision(bool bNewColActors, bool bNewBlockActors, bool bNewIgnoreEncroachers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetCollision");

	struct
	{
		bool                           bNewColActors;
		bool                           bNewBlockActors;
		bool                           bNewIgnoreEncroachers;
	} params;
	params.bNewColActors = bNewColActors;
	params.bNewBlockActors = bNewBlockActors;
	params.bNewIgnoreEncroachers = bNewIgnoreEncroachers;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FinishAnim
// (FUNC_Final, FUNC_Latent, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)
// bool                           bFinishOnBlendOut              (CPF_OptionalParm, CPF_Parm)

void AActor::FinishAnim(class UAnimNodeSequence* SeqNode, bool bFinishOnBlendOut)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FinishAnim");

	struct
	{
		class UAnimNodeSequence*       SeqNode;
		bool                           bFinishOnBlendOut;
	} params;
	params.SeqNode = SeqNode;
	params.bFinishOnBlendOut = bFinishOnBlendOut;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Sleep
// (FUNC_Final, FUNC_Latent, FUNC_Native, FUNC_Public)
// Parameters:
// float                          Seconds                        (CPF_Parm)

void AActor::Sleep(float Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Sleep");

	struct
	{
		float                          Seconds;
	} params;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ConsoleCommand
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 Command                        (CPF_Parm, CPF_NeedCtorLink)
// bool                           bWriteToLog                    (CPF_OptionalParm, CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AActor::ConsoleCommand(const struct FString& Command, bool bWriteToLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ConsoleCommand");

	struct
	{
		struct FString                 Command;
		bool                           bWriteToLog;
		struct FString                 ReturnValue;
	} params;
	params.Command = Command;
	params.bWriteToLog = bWriteToLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ForceUpdateComponents
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bCollisionUpdate               (CPF_OptionalParm, CPF_Parm)
// bool                           bTransformOnly                 (CPF_OptionalParm, CPF_Parm)

void AActor::ForceUpdateComponents(bool bCollisionUpdate, bool bTransformOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceUpdateComponents");

	struct
	{
		bool                           bCollisionUpdate;
		bool                           bTransformOnly;
	} params;
	params.bCollisionUpdate = bCollisionUpdate;
	params.bTransformOnly = bTransformOnly;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.PrintDebugInfo
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class UDebugDrawer*            Drawer                         (CPF_Parm)

void AWorldInfo::PrintDebugInfo(class UDebugDrawer* Drawer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.PrintDebugInfo");

	struct
	{
		class UDebugDrawer*            Drawer;
	} params;
	params.Drawer = Drawer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.NeedsLightingRebuild
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::NeedsLightingRebuild()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.NeedsLightingRebuild");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.EventTimeDilationChanged
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// class AWorldInfo*              WI                             (CPF_Parm)

void AWorldInfo::EventTimeDilationChanged(class AWorldInfo* WI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.EventTimeDilationChanged");

	struct
	{
		class AWorldInfo*              WI;
	} params;
	params.WI = WI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.SetTimeDilation
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          NewVal                         (CPF_Parm)

void AWorldInfo::SetTimeDilation(float NewVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetTimeDilation");

	struct
	{
		float                          NewVal;
	} params;
	params.NewVal = NewVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.ClearObjectPools
// (FUNC_Final, FUNC_Native, FUNC_Public)

void AWorldInfo::ClearObjectPools()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ClearObjectPools");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.ToggleHostMigration
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bEnabled                       (CPF_Parm)

void AWorldInfo::ToggleHostMigration(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ToggleHostMigration");

	struct
	{
		bool                           bEnabled;
	} params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.NotifyHostMigrationStateChanged
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class EHostMigrationProgress> NewState                       (CPF_Parm)
// TEnumAsByte<enum class EHostMigrationProgress> OldState                       (CPF_Parm)

void AWorldInfo::NotifyHostMigrationStateChanged(TEnumAsByte<enum class EHostMigrationProgress> NewState, TEnumAsByte<enum class EHostMigrationProgress> OldState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.NotifyHostMigrationStateChanged");

	struct
	{
		TEnumAsByte<enum class EHostMigrationProgress> NewState;
		TEnumAsByte<enum class EHostMigrationProgress> OldState;
	} params;
	params.NewState = NewState;
	params.OldState = OldState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.BeginHostMigration
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::BeginHostMigration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.BeginHostMigration");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.CanBeginHostMigration
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::CanBeginHostMigration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.CanBeginHostMigration");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.FindEnvironmentVolume
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 TestLocation                   (CPF_Parm)
// class AEnvironmentVolume*      ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AEnvironmentVolume* AWorldInfo::FindEnvironmentVolume(const struct FVector& TestLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.FindEnvironmentVolume");

	struct
	{
		struct FVector                 TestLocation;
		class AEnvironmentVolume*      ReturnValue;
	} params;
	params.TestLocation = TestLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetWorldInfo
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class AWorldInfo*              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AWorldInfo* AWorldInfo::STATIC_GetWorldInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetWorldInfo");

	struct
	{
		class AWorldInfo*              ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetWorldFractureSettings
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FWorldFractureSettings  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FWorldFractureSettings AWorldInfo::GetWorldFractureSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetWorldFractureSettings");

	struct
	{
		struct FWorldFractureSettings  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.DoMemoryTracking
// (FUNC_Final, FUNC_Native, FUNC_Public)

void AWorldInfo::DoMemoryTracking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.DoMemoryTracking");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.GetDemoRewindPoints
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<int>                    OutRewindPoints                (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::GetDemoRewindPoints(TArray<int>* OutRewindPoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetDemoRewindPoints");

	struct
	{
		TArray<int>                    OutRewindPoints;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutRewindPoints != nullptr)
		*OutRewindPoints = params.OutRewindPoints;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetDemoFrameInfo
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            CurrentFrame                   (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// int                            TotalFrames                    (CPF_OptionalParm, CPF_Parm, CPF_OutParm)

void AWorldInfo::GetDemoFrameInfo(int* CurrentFrame, int* TotalFrames)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetDemoFrameInfo");

	struct
	{
		int                            CurrentFrame;
		int                            TotalFrames;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurrentFrame != nullptr)
		*CurrentFrame = params.CurrentFrame;
	if (TotalFrames != nullptr)
		*TotalFrames = params.TotalFrames;
}


// Function Engine.WorldInfo.IsPlayingDemo
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::IsPlayingDemo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPlayingDemo");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsRecordingDemo
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::IsRecordingDemo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsRecordingDemo");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetDetailMode
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class EDetailMode> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EDetailMode> AWorldInfo::GetDetailMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetDetailMode");

	struct
	{
		TEnumAsByte<enum class EDetailMode> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetMapName
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bIncludePrefix                 (CPF_OptionalParm, CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AWorldInfo::GetMapName(bool bIncludePrefix)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetMapName");

	struct
	{
		bool                           bIncludePrefix;
		struct FString                 ReturnValue;
	} params;
	params.bIncludePrefix = bIncludePrefix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.SetMapInfo
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UMapInfo*                NewMapInfo                     (CPF_Parm)

void AWorldInfo::SetMapInfo(class UMapInfo* NewMapInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetMapInfo");

	struct
	{
		class UMapInfo*                NewMapInfo;
	} params;
	params.NewMapInfo = NewMapInfo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.GetMapInfo
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UMapInfo*                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMapInfo* AWorldInfo::GetMapInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetMapInfo");

	struct
	{
		class UMapInfo*                ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.SetSeamlessTravelMidpointPause
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNowPaused                     (CPF_Parm)

void AWorldInfo::SetSeamlessTravelMidpointPause(bool bNowPaused)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetSeamlessTravelMidpointPause");

	struct
	{
		bool                           bNowPaused;
	} params;
	params.bNowPaused = bNowPaused;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.IsInSeamlessTravel
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::IsInSeamlessTravel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsInSeamlessTravel");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.SeamlessTravel
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)
// bool                           bAbsolute                      (CPF_OptionalParm, CPF_Parm)
// struct FGuid                   MapPackageGuid                 (CPF_OptionalParm, CPF_Parm, CPF_AlwaysInit)

void AWorldInfo::SeamlessTravel(const struct FString& URL, bool bAbsolute, const struct FGuid& MapPackageGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SeamlessTravel");

	struct
	{
		struct FString                 URL;
		bool                           bAbsolute;
		struct FGuid                   MapPackageGuid;
	} params;
	params.URL = URL;
	params.bAbsolute = bAbsolute;
	params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.CommitMapChange
// (FUNC_Final, FUNC_Native, FUNC_Public)

void AWorldInfo::CommitMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.CommitMapChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.CancelPendingMapChange
// (FUNC_Final, FUNC_Native, FUNC_Public)

void AWorldInfo::CancelPendingMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.CancelPendingMapChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.IsMapChangeReady
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::IsMapChangeReady()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsMapChangeReady");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsPreparingMapChange
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::IsPreparingMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPreparingMapChange");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.PrepareMapChange
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FName>           LevelNames                     (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AWorldInfo::PrepareMapChange(TArray<struct FName>* LevelNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.PrepareMapChange");

	struct
	{
		TArray<struct FName>           LevelNames;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LevelNames != nullptr)
		*LevelNames = params.LevelNames;
}


// Function Engine.WorldInfo.NotifyMatchStarted
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bShouldActivateLevelStartupEvents (CPF_OptionalParm, CPF_Parm)
// bool                           bShouldActivateLevelBeginningEvents (CPF_OptionalParm, CPF_Parm)
// bool                           bShouldActivateLevelLoadedEvents (CPF_OptionalParm, CPF_Parm)

void AWorldInfo::NotifyMatchStarted(bool bShouldActivateLevelStartupEvents, bool bShouldActivateLevelBeginningEvents, bool bShouldActivateLevelLoadedEvents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.NotifyMatchStarted");

	struct
	{
		bool                           bShouldActivateLevelStartupEvents;
		bool                           bShouldActivateLevelBeginningEvents;
		bool                           bShouldActivateLevelLoadedEvents;
	} params;
	params.bShouldActivateLevelStartupEvents = bShouldActivateLevelStartupEvents;
	params.bShouldActivateLevelBeginningEvents = bShouldActivateLevelBeginningEvents;
	params.bShouldActivateLevelLoadedEvents = bShouldActivateLevelLoadedEvents;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.AllClientConnections
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UPlayer*                 ClientConnection               (CPF_Parm, CPF_OutParm)
// struct FIpAddr                 ClientIP                       (CPF_Parm, CPF_OutParm)
// int                            ClientPort                     (CPF_Parm, CPF_OutParm)

void AWorldInfo::AllClientConnections(class UPlayer** ClientConnection, struct FIpAddr* ClientIP, int* ClientPort)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AllClientConnections");

	struct
	{
		class UPlayer*                 ClientConnection;
		struct FIpAddr                 ClientIP;
		int                            ClientPort;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ClientConnection != nullptr)
		*ClientConnection = params.ClientConnection;
	if (ClientIP != nullptr)
		*ClientIP = params.ClientIP;
	if (ClientPort != nullptr)
		*ClientPort = params.ClientPort;
}


// Function Engine.WorldInfo.AllPawns
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class APawn*                   P                              (CPF_Parm, CPF_OutParm)
// struct FVector                 TestLocation                   (CPF_OptionalParm, CPF_Parm)
// float                          TestRadius                     (CPF_OptionalParm, CPF_Parm)

void AWorldInfo::AllPawns(class UClass* BaseClass, const struct FVector& TestLocation, float TestRadius, class APawn** P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AllPawns");

	struct
	{
		class UClass*                  BaseClass;
		class APawn*                   P;
		struct FVector                 TestLocation;
		float                          TestRadius;
	} params;
	params.BaseClass = BaseClass;
	params.TestLocation = TestLocation;
	params.TestRadius = TestRadius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (P != nullptr)
		*P = params.P;
}


// Function Engine.WorldInfo.AllControllers
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class AController*             C                              (CPF_Parm, CPF_OutParm)

void AWorldInfo::AllControllers(class UClass* BaseClass, class AController** C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AllControllers");

	struct
	{
		class UClass*                  BaseClass;
		class AController*             C;
	} params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (C != nullptr)
		*C = params.C;
}


// Function Engine.WorldInfo.NavigationPointCheck
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 Point                          (CPF_Parm)
// struct FVector                 Extent                         (CPF_Parm)
// TArray<class ANavigationPoint*> Navs                           (CPF_OptionalParm, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// TArray<class UReachSpec*>      Specs                          (CPF_OptionalParm, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AWorldInfo::NavigationPointCheck(const struct FVector& Point, const struct FVector& Extent, TArray<class ANavigationPoint*>* Navs, TArray<class UReachSpec*>* Specs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.NavigationPointCheck");

	struct
	{
		struct FVector                 Point;
		struct FVector                 Extent;
		TArray<class ANavigationPoint*> Navs;
		TArray<class UReachSpec*>      Specs;
	} params;
	params.Point = Point;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Navs != nullptr)
		*Navs = params.Navs;
	if (Specs != nullptr)
		*Specs = params.Specs;
}


// Function Engine.WorldInfo.RadiusNavigationPoints
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class ANavigationPoint*        N                              (CPF_Parm, CPF_OutParm)
// struct FVector                 Point                          (CPF_Parm)
// float                          Radius                         (CPF_Parm)

void AWorldInfo::RadiusNavigationPoints(class UClass* BaseClass, const struct FVector& Point, float Radius, class ANavigationPoint** N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.RadiusNavigationPoints");

	struct
	{
		class UClass*                  BaseClass;
		class ANavigationPoint*        N;
		struct FVector                 Point;
		float                          Radius;
	} params;
	params.BaseClass = BaseClass;
	params.Point = Point;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (N != nullptr)
		*N = params.N;
}


// Function Engine.WorldInfo.AllNavigationPoints
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class ANavigationPoint*        N                              (CPF_Parm, CPF_OutParm)

void AWorldInfo::AllNavigationPoints(class UClass* BaseClass, class ANavigationPoint** N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AllNavigationPoints");

	struct
	{
		class UClass*                  BaseClass;
		class ANavigationPoint*        N;
	} params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (N != nullptr)
		*N = params.N;
}


// Function Engine.WorldInfo.Reset
// (FUNC_Defined, FUNC_Public)

void AWorldInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AWorldInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.PreBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AWorldInfo::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.PreBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.ThisIsNeverExecuted
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class ADefaultPhysicsVolume*   P                              (CPF_Parm)

void AWorldInfo::ThisIsNeverExecuted(class ADefaultPhysicsVolume* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ThisIsNeverExecuted");

	struct
	{
		class ADefaultPhysicsVolume*   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.ServerTravel
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)
// bool                           bAbsolute                      (CPF_OptionalParm, CPF_Parm)
// bool                           bShouldSkipGameNotify          (CPF_OptionalParm, CPF_Parm)

void AWorldInfo::ServerTravel(const struct FString& URL, bool bAbsolute, bool bShouldSkipGameNotify)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ServerTravel");

	struct
	{
		struct FString                 URL;
		bool                           bAbsolute;
		bool                           bShouldSkipGameNotify;
	} params;
	params.URL = URL;
	params.bAbsolute = bAbsolute;
	params.bShouldSkipGameNotify = bShouldSkipGameNotify;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.GetGameClass
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class UClass*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UClass* AWorldInfo::GetGameClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetGameClass");

	struct
	{
		class UClass*                  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetAddressURL
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AWorldInfo::GetAddressURL()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetAddressURL");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.VerifyNavList
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)

void AWorldInfo::VerifyNavList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.VerifyNavList");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.ForceGarbageCollection
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bFullPurge                     (CPF_OptionalParm, CPF_Parm)

void AWorldInfo::ForceGarbageCollection(bool bFullPurge)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ForceGarbageCollection");

	struct
	{
		bool                           bFullPurge;
	} params;
	params.bFullPurge = bFullPurge;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.IsPlayInMobilePreview
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::STATIC_IsPlayInMobilePreview()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPlayInMobilePreview");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsPlayInPreview
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::STATIC_IsPlayInPreview()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPlayInPreview");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsPlayInEditor
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::STATIC_IsPlayInEditor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsPlayInEditor");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsWithGFx
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::STATIC_IsWithGFx()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsWithGFx");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsConsoleBuild
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class EConsoleType> ConsoleType                    (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::STATIC_IsConsoleBuild(TEnumAsByte<enum class EConsoleType> ConsoleType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsConsoleBuild");

	struct
	{
		TEnumAsByte<enum class EConsoleType> ConsoleType;
		bool                           ReturnValue;
	} params;
	params.ConsoleType = ConsoleType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.IsDemoBuild
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::STATIC_IsDemoBuild()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsDemoBuild");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetLocalURL
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AWorldInfo::GetLocalURL()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetLocalURL");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.SetLevelRBGravity
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 NewGrav                        (CPF_Parm)

void AWorldInfo::SetLevelRBGravity(const struct FVector& NewGrav)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetLevelRBGravity");

	struct
	{
		struct FVector                 NewGrav;
	} params;
	params.NewGrav = NewGrav;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.AllSequenceObjects
// (FUNC_Final, FUNC_Iterator, FUNC_Simulated, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  SeqClass                       (CPF_Parm)
// class USequenceObject*         OutObj                         (CPF_Parm, CPF_OutParm)

void AWorldInfo::AllSequenceObjects(class UClass* SeqClass, class USequenceObject** OutObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AllSequenceObjects");

	struct
	{
		class UClass*                  SeqClass;
		class USequenceObject*         OutObj;
	} params;
	params.SeqClass = SeqClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutObj != nullptr)
		*OutObj = params.OutObj;
}


// Function Engine.WorldInfo.GetAllRootSequences
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// TArray<class USequence*>       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

TArray<class USequence*> AWorldInfo::GetAllRootSequences()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetAllRootSequences");

	struct
	{
		TArray<class USequence*>       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetGameSequence
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// class USequence*               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class USequence* AWorldInfo::GetGameSequence()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetGameSequence");

	struct
	{
		class USequence*               ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetGravityDirection
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AWorldInfo::GetGravityDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetGravityDirection");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetGravityZ
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AWorldInfo::GetGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetGravityZ");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.UpdateMusicTrack
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FMusicTrackStruct       NewMusicTrack                  (CPF_Parm, CPF_NeedCtorLink)

void AWorldInfo::UpdateMusicTrack(const struct FMusicTrackStruct& NewMusicTrack)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.UpdateMusicTrack");

	struct
	{
		struct FMusicTrackStruct       NewMusicTrack;
	} params;
	params.NewMusicTrack = NewMusicTrack;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.SetMusicVolume
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          VolumeMultiplier               (CPF_Parm)

void AWorldInfo::SetMusicVolume(float VolumeMultiplier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetMusicVolume");

	struct
	{
		float                          VolumeMultiplier;
	} params;
	params.VolumeMultiplier = VolumeMultiplier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.IsMenuLevel
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 MapName                        (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWorldInfo::STATIC_IsMenuLevel(const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.IsMenuLevel");

	struct
	{
		struct FString                 MapName;
		bool                           ReturnValue;
	} params;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.AddOnScreenDebugMessage
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            Key                            (CPF_Parm)
// float                          TimeToDisplay                  (CPF_Parm)
// struct FColor                  DisplayColor                   (CPF_Parm)
// struct FString                 DebugMessage                   (CPF_Parm, CPF_NeedCtorLink)

void AWorldInfo::AddOnScreenDebugMessage(int Key, float TimeToDisplay, const struct FColor& DisplayColor, const struct FString& DebugMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.AddOnScreenDebugMessage");

	struct
	{
		int                            Key;
		float                          TimeToDisplay;
		struct FColor                  DisplayColor;
		struct FString                 DebugMessage;
	} params;
	params.Key = Key;
	params.TimeToDisplay = TimeToDisplay;
	params.DisplayColor = DisplayColor;
	params.DebugMessage = DebugMessage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AWorldInfo::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.GetNavMeshPathGoalEvaluatorFromCache
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UClass*                  GoalEvalClass                  (CPF_Parm)
// class UNavigationHandle*       Requestor                      (CPF_Parm)
// class UNavMeshPathGoalEvaluator* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UNavMeshPathGoalEvaluator* AWorldInfo::GetNavMeshPathGoalEvaluatorFromCache(class UClass* GoalEvalClass, class UNavigationHandle* Requestor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetNavMeshPathGoalEvaluatorFromCache");

	struct
	{
		class UClass*                  GoalEvalClass;
		class UNavigationHandle*       Requestor;
		class UNavMeshPathGoalEvaluator* ReturnValue;
	} params;
	params.GoalEvalClass = GoalEvalClass;
	params.Requestor = Requestor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.GetNavMeshPathConstraintFromCache
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UClass*                  ConstraintClass                (CPF_Parm)
// class UNavigationHandle*       Requestor                      (CPF_Parm)
// class UNavMeshPathConstraint*  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UNavMeshPathConstraint* AWorldInfo::GetNavMeshPathConstraintFromCache(class UClass* ConstraintClass, class UNavigationHandle* Requestor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.GetNavMeshPathConstraintFromCache");

	struct
	{
		class UClass*                  ConstraintClass;
		class UNavigationHandle*       Requestor;
		class UNavMeshPathConstraint*  ReturnValue;
	} params;
	params.ConstraintClass = ConstraintClass;
	params.Requestor = Requestor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WorldInfo.ReleaseCachedConstraintsAndEvaluators
// (FUNC_Native, FUNC_Public)

void AWorldInfo::ReleaseCachedConstraintsAndEvaluators()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.ReleaseCachedConstraintsAndEvaluators");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.SetPitchTekTargetsInitialState
// (FUNC_Native, FUNC_Public)

void AWorldInfo::SetPitchTekTargetsInitialState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetPitchTekTargetsInitialState");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.SetPauser
// (FUNC_Native, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  InPauser                       (CPF_Parm)

void AWorldInfo::SetPauser(class APlayerReplicationInfo* InPauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.SetPauser");

	struct
	{
		class APlayerReplicationInfo*  InPauser;
	} params;
	params.InPauser = InPauser;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldInfo.EventPauseChanged
// (FUNC_Public, FUNC_Delegate)

void AWorldInfo::EventPauseChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldInfo.EventPauseChanged");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentEnumerator.TriggerFindDLCDelegates
// (FUNC_Native, FUNC_Public)

void UDownloadableContentEnumerator::TriggerFindDLCDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.TriggerFindDLCDelegates");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentEnumerator.InstallDLC
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 DLCName                        (CPF_Parm, CPF_NeedCtorLink)

void UDownloadableContentEnumerator::InstallDLC(const struct FString& DLCName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.InstallDLC");

	struct
	{
		struct FString                 DLCName;
	} params;
	params.DLCName = DLCName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentEnumerator.InstallAllDLC
// (FUNC_Defined, FUNC_Public)

void UDownloadableContentEnumerator::InstallAllDLC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.InstallAllDLC");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentEnumerator.DeleteDLC
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 DLCName                        (CPF_Parm, CPF_NeedCtorLink)

void UDownloadableContentEnumerator::DeleteDLC(const struct FString& DLCName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.DeleteDLC");

	struct
	{
		struct FString                 DLCName;
	} params;
	params.DLCName = DLCName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentEnumerator.ClearFindDLCDelegate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UDownloadableContentEnumerator::ClearFindDLCDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.ClearFindDLCDelegate");

	struct
	{
		struct FScriptDelegate         InDelegate;
	} params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentEnumerator.AddFindDLCDelegate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UDownloadableContentEnumerator::AddFindDLCDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.AddFindDLCDelegate");

	struct
	{
		struct FScriptDelegate         InDelegate;
	} params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentEnumerator.OnFindDLCComplete
// (FUNC_Public, FUNC_Delegate)

void UDownloadableContentEnumerator::OnFindDLCComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.OnFindDLCComplete");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentEnumerator.FindDLC
// (FUNC_Native, FUNC_Public)

void UDownloadableContentEnumerator::FindDLC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentEnumerator.FindDLC");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.OnRefreshComplete
// (FUNC_Public, FUNC_Delegate)

void UDownloadableContentManager::OnRefreshComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.OnRefreshComplete");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.AddPackagesToFullyLoad
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UDownloadableContentManager::AddPackagesToFullyLoad(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.AddPackagesToFullyLoad");

	struct
	{
		struct FString                 Filename;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.RefreshDLCEnumComplete
// (FUNC_Defined, FUNC_Public)

void UDownloadableContentManager::RefreshDLCEnumComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.RefreshDLCEnumComplete");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.RefreshDLC
// (FUNC_Defined, FUNC_Public)

void UDownloadableContentManager::RefreshDLC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.RefreshDLC");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.OnContentChange
// (FUNC_Defined, FUNC_Public)

void UDownloadableContentManager::OnContentChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.OnContentChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.OnStorageDeviceChange
// (FUNC_Defined, FUNC_Public)

void UDownloadableContentManager::OnStorageDeviceChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.OnStorageDeviceChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.OnLoginChange
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UDownloadableContentManager::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.OnLoginChange");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.Init
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UDownloadableContentManager::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.InstallNonPackageFiles
// (FUNC_Native, FUNC_Protected, FUNC_HasOutParms)
// Parameters:
// struct FOnlineContent          DLCBundle                      (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UDownloadableContentManager::InstallNonPackageFiles(struct FOnlineContent* DLCBundle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.InstallNonPackageFiles");

	struct
	{
		struct FOnlineContent          DLCBundle;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DLCBundle != nullptr)
		*DLCBundle = params.DLCBundle;
}


// Function Engine.DownloadableContentManager.InstallPackages
// (FUNC_Native, FUNC_Protected, FUNC_HasOutParms)
// Parameters:
// struct FOnlineContent          DLCBundle                      (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UDownloadableContentManager::InstallPackages(struct FOnlineContent* DLCBundle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.InstallPackages");

	struct
	{
		struct FOnlineContent          DLCBundle;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DLCBundle != nullptr)
		*DLCBundle = params.DLCBundle;
}


// Function Engine.DownloadableContentManager.UpdateObjectLists
// (FUNC_Native, FUNC_Public)

void UDownloadableContentManager::UpdateObjectLists()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.UpdateObjectLists");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.MarkPerObjectConfigPendingKill
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 Section                        (CPF_Parm, CPF_NeedCtorLink)

void UDownloadableContentManager::MarkPerObjectConfigPendingKill(const struct FString& Section)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.MarkPerObjectConfigPendingKill");

	struct
	{
		struct FString                 Section;
	} params;
	params.Section = Section;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.AddSectionToObjectList
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 Section                        (CPF_Parm, CPF_NeedCtorLink)

void UDownloadableContentManager::AddSectionToObjectList(const struct FString& Section)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.AddSectionToObjectList");

	struct
	{
		struct FString                 Section;
	} params;
	params.Section = Section;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.GetDLCNonPackageFilePath
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   NonPackageFileName             (CPF_Parm)
// struct FString                 Path                           (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UDownloadableContentManager::GetDLCNonPackageFilePath(const struct FName& NonPackageFileName, struct FString* Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.GetDLCNonPackageFilePath");

	struct
	{
		struct FName                   NonPackageFileName;
		struct FString                 Path;
		bool                           ReturnValue;
	} params;
	params.NonPackageFileName = NonPackageFileName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Path != nullptr)
		*Path = params.Path;

	return params.ReturnValue;
}


// Function Engine.DownloadableContentManager.ClearDLC
// (FUNC_Native, FUNC_Public)

void UDownloadableContentManager::ClearDLC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.ClearDLC");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DownloadableContentManager.InstallDLCs
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FOnlineContent>  DLCBundles                     (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UDownloadableContentManager::InstallDLCs(TArray<struct FOnlineContent>* DLCBundles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.InstallDLCs");

	struct
	{
		TArray<struct FOnlineContent>  DLCBundles;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DLCBundles != nullptr)
		*DLCBundles = params.DLCBundles;
}


// Function Engine.DownloadableContentManager.InstallDLC
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FOnlineContent          DLCBundle                      (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UDownloadableContentManager::InstallDLC(struct FOnlineContent* DLCBundle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DownloadableContentManager.InstallDLC");

	struct
	{
		struct FOnlineContent          DLCBundle;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DLCBundle != nullptr)
		*DLCBundle = params.DLCBundle;

	return params.ReturnValue;
}


// Function Engine.Engine.PrintDebugInfo
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class UDebugDrawer*            Drawer                         (CPF_Parm)

void UEngine::PrintDebugInfo(class UDebugDrawer* Drawer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.PrintDebugInfo");

	struct
	{
		class UDebugDrawer*            Drawer;
	} params;
	params.Drawer = Drawer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.GetGameVersion
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class EGameVersion> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EGameVersion> UEngine::STATIC_GetGameVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetGameVersion");

	struct
	{
		TEnumAsByte<enum class EGameVersion> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetFeatureSystem
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UFeatureSystem*          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UFeatureSystem* UEngine::STATIC_GetFeatureSystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetFeatureSystem");

	struct
	{
		class UFeatureSystem*          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.SetNetworkSecurityKey
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FNetworkEncryptionKey   SecurityKey                    (CPF_Parm, CPF_NeedCtorLink)

void UEngine::SetNetworkSecurityKey(const struct FNetworkEncryptionKey& SecurityKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.SetNetworkSecurityKey");

	struct
	{
		struct FNetworkEncryptionKey   SecurityKey;
	} params;
	params.SecurityKey = SecurityKey;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.AddNetworkSecurityKey
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FNetworkEncryptionKey   SecurityKey                    (CPF_Parm, CPF_NeedCtorLink)

void UEngine::AddNetworkSecurityKey(const struct FNetworkEncryptionKey& SecurityKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.AddNetworkSecurityKey");

	struct
	{
		struct FNetworkEncryptionKey   SecurityKey;
	} params;
	params.SecurityKey = SecurityKey;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.GetSystemSettingFloat
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 SettingName                    (CPF_Parm, CPF_NeedCtorLink)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UEngine::GetSystemSettingFloat(const struct FString& SettingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetSystemSettingFloat");

	struct
	{
		struct FString                 SettingName;
		float                          ReturnValue;
	} params;
	params.SettingName = SettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetSystemSettingInt
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 SettingName                    (CPF_Parm, CPF_NeedCtorLink)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UEngine::GetSystemSettingInt(const struct FString& SettingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetSystemSettingInt");

	struct
	{
		struct FString                 SettingName;
		int                            ReturnValue;
	} params;
	params.SettingName = SettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetSystemSettingBool
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 SettingName                    (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UEngine::GetSystemSettingBool(const struct FString& SettingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetSystemSettingBool");

	struct
	{
		struct FString                 SettingName;
		bool                           ReturnValue;
	} params;
	params.SettingName = SettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.LaunchURL
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UEngine::STATIC_LaunchURL(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.LaunchURL");

	struct
	{
		struct FString                 URL;
		bool                           ReturnValue;
	} params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.BasicLoadObject
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UObject*                 Obj                            (CPF_Parm)
// struct FString                 PathName                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           bIsSaveGame                    (CPF_Parm)
// int                            Version                        (CPF_Parm)
// TEnumAsByte<enum class EBasicLoadResult> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EBasicLoadResult> UEngine::STATIC_BasicLoadObject(class UObject* Obj, const struct FString& PathName, bool bIsSaveGame, int Version)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.BasicLoadObject");

	struct
	{
		class UObject*                 Obj;
		struct FString                 PathName;
		bool                           bIsSaveGame;
		int                            Version;
		TEnumAsByte<enum class EBasicLoadResult> ReturnValue;
	} params;
	params.Obj = Obj;
	params.PathName = PathName;
	params.bIsSaveGame = bIsSaveGame;
	params.Version = Version;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
	return params.ReturnValue;
}


// Function Engine.Engine.BasicSaveObject
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UObject*                 Obj                            (CPF_Parm)
// struct FString                 PathName                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           bIsSaveGame                    (CPF_Parm)
// int                            Version                        (CPF_Parm)
// bool                           bEncrypt                       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UEngine::STATIC_BasicSaveObject(class UObject* Obj, const struct FString& PathName, bool bIsSaveGame, int Version, bool bEncrypt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.BasicSaveObject");

	struct
	{
		class UObject*                 Obj;
		struct FString                 PathName;
		bool                           bIsSaveGame;
		int                            Version;
		bool                           bEncrypt;
		bool                           ReturnValue;
	} params;
	params.Obj = Obj;
	params.PathName = PathName;
	params.bIsSaveGame = bIsSaveGame;
	params.Version = Version;
	params.bEncrypt = bEncrypt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.AddTextureStreamingSlaveLoc
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 InLoc                          (CPF_Parm)
// float                          BoostFactor                    (CPF_Parm)
// bool                           bOverrideLocation              (CPF_Parm)
// float                          OverrideDuration               (CPF_Parm)

void UEngine::AddTextureStreamingSlaveLoc(const struct FVector& InLoc, float BoostFactor, bool bOverrideLocation, float OverrideDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.AddTextureStreamingSlaveLoc");

	struct
	{
		struct FVector                 InLoc;
		float                          BoostFactor;
		bool                           bOverrideLocation;
		float                          OverrideDuration;
	} params;
	params.InLoc = InLoc;
	params.BoostFactor = BoostFactor;
	params.bOverrideLocation = bOverrideLocation;
	params.OverrideDuration = OverrideDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.GetWorldPostProcessChain
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UPostProcessChain*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UPostProcessChain* UEngine::STATIC_GetWorldPostProcessChain()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetWorldPostProcessChain");

	struct
	{
		class UPostProcessChain*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetDefaultPostProcessChain
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UPostProcessChain*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UPostProcessChain* UEngine::STATIC_GetDefaultPostProcessChain()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetDefaultPostProcessChain");

	struct
	{
		class UPostProcessChain*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetEngine
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UEngine*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UEngine* UEngine::STATIC_GetEngine()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetEngine");

	struct
	{
		class UEngine*                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.IsRealDStereoEnabled
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UEngine::STATIC_IsRealDStereoEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsRealDStereoEnabled");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.AddOverlayWrapped
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UFont*                   Font                           (CPF_Parm)
// struct FString                 Text                           (CPF_Parm, CPF_NeedCtorLink)
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)
// float                          ScaleX                         (CPF_Parm)
// float                          ScaleY                         (CPF_Parm)
// float                          WrapWidth                      (CPF_Parm)

void UEngine::STATIC_AddOverlayWrapped(class UFont* Font, const struct FString& Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.AddOverlayWrapped");

	struct
	{
		class UFont*                   Font;
		struct FString                 Text;
		float                          X;
		float                          Y;
		float                          ScaleX;
		float                          ScaleY;
		float                          WrapWidth;
	} params;
	params.Font = Font;
	params.Text = Text;
	params.X = X;
	params.Y = Y;
	params.ScaleX = ScaleX;
	params.ScaleY = ScaleY;
	params.WrapWidth = WrapWidth;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.AddOverlay
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UFont*                   Font                           (CPF_Parm)
// struct FString                 Text                           (CPF_Parm, CPF_NeedCtorLink)
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)
// float                          ScaleX                         (CPF_Parm)
// float                          ScaleY                         (CPF_Parm)
// bool                           bIsCentered                    (CPF_Parm)

void UEngine::STATIC_AddOverlay(class UFont* Font, const struct FString& Text, float X, float Y, float ScaleX, float ScaleY, bool bIsCentered)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.AddOverlay");

	struct
	{
		class UFont*                   Font;
		struct FString                 Text;
		float                          X;
		float                          Y;
		float                          ScaleX;
		float                          ScaleY;
		bool                           bIsCentered;
	} params;
	params.Font = Font;
	params.Text = Text;
	params.X = X;
	params.Y = Y;
	params.ScaleX = ScaleX;
	params.ScaleY = ScaleY;
	params.bIsCentered = bIsCentered;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.RemoveAllOverlays
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)

void UEngine::STATIC_RemoveAllOverlays()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.RemoveAllOverlays");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.StopMovie
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           bDelayStopUntilGameHasRendered (CPF_Parm)

void UEngine::STATIC_StopMovie(bool bDelayStopUntilGameHasRendered)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.StopMovie");

	struct
	{
		bool                           bDelayStopUntilGameHasRendered;
	} params;
	params.bDelayStopUntilGameHasRendered = bDelayStopUntilGameHasRendered;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Engine.PlayLoadMapMovie
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UEngine::STATIC_PlayLoadMapMovie()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.PlayLoadMapMovie");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetLastMovieName
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UEngine::STATIC_GetLastMovieName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetLastMovieName");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetAudioDevice
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UAudioDevice*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UAudioDevice* UEngine::STATIC_GetAudioDevice()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetAudioDevice");

	struct
	{
		class UAudioDevice*            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.IsUsingES2Renderer
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UEngine::STATIC_IsUsingES2Renderer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsUsingES2Renderer");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.IsStereoscopic3D
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UEngine::STATIC_IsStereoscopic3D()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsStereoscopic3D");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.IsSplitScreen
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UEngine::STATIC_IsSplitScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsSplitScreen");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetAdditionalFont
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// int                            AdditionalFontIndex            (CPF_Parm)
// class UFont*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UFont* UEngine::STATIC_GetAdditionalFont(int AdditionalFontIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetAdditionalFont");

	struct
	{
		int                            AdditionalFontIndex;
		class UFont*                   ReturnValue;
	} params;
	params.AdditionalFontIndex = AdditionalFontIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetSubtitleFont
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UFont*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UFont* UEngine::STATIC_GetSubtitleFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetSubtitleFont");

	struct
	{
		class UFont*                   ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetLargeFont
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UFont*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UFont* UEngine::STATIC_GetLargeFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetLargeFont");

	struct
	{
		class UFont*                   ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetMediumFont
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UFont*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UFont* UEngine::STATIC_GetMediumFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetMediumFont");

	struct
	{
		class UFont*                   ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetSmallFont
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UFont*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UFont* UEngine::STATIC_GetSmallFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetSmallFont");

	struct
	{
		class UFont*                   ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetTinyFont
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UFont*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UFont* UEngine::STATIC_GetTinyFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetTinyFont");

	struct
	{
		class UFont*                   ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.HasNetworkConnection
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UEngine::STATIC_HasNetworkConnection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.HasNetworkConnection");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.BuildBugSubmissionString
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 BugField                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BugFieldData                   (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UEngine::STATIC_BuildBugSubmissionString(const struct FString& BugField, const struct FString& BugFieldData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.BuildBugSubmissionString");

	struct
	{
		struct FString                 BugField;
		struct FString                 BugFieldData;
		struct FString                 ReturnValue;
	} params;
	params.BugField = BugField;
	params.BugFieldData = BugFieldData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetDevicePushNotificationToken
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UEngine::STATIC_GetDevicePushNotificationToken()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetDevicePushNotificationToken");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetOSVersion
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UEngine::STATIC_GetOSVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetOSVersion");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetDeviceUUID
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UEngine::STATIC_GetDeviceUUID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetDeviceUUID");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetBuildDate
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UEngine::STATIC_GetBuildDate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetBuildDate");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.GetCurrentWorldInfo
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class AWorldInfo*              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AWorldInfo* UEngine::STATIC_GetCurrentWorldInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.GetCurrentWorldInfo");

	struct
	{
		class AWorldInfo*              ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.IsGame
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UEngine::STATIC_IsGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsGame");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.IsEditor
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UEngine::STATIC_IsEditor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.IsEditor");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.UseSecurePackets
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UEngine::STATIC_UseSecurePackets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.UseSecurePackets");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Engine.EventTextArchetypesReloaded
// (FUNC_Public, FUNC_Delegate)

void UEngine::EventTextArchetypesReloaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Engine.EventTextArchetypesReloaded");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameEngine.HasSecondaryScreenActive
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameEngine::STATIC_HasSecondaryScreenActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.HasSecondaryScreenActive");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameEngine.GetDLCManager
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UDownloadableContentManager* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UDownloadableContentManager* UGameEngine::STATIC_GetDLCManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.GetDLCManager");

	struct
	{
		class UDownloadableContentManager* ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameEngine.GetDLCEnumerator
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UDownloadableContentEnumerator* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UDownloadableContentEnumerator* UGameEngine::STATIC_GetDLCEnumerator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.GetDLCEnumerator");

	struct
	{
		class UDownloadableContentEnumerator* ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameEngine.GetOnlineSubsystem
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UOnlineSubsystem*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UOnlineSubsystem* UGameEngine::STATIC_GetOnlineSubsystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.GetOnlineSubsystem");

	struct
	{
		class UOnlineSubsystem*        ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameEngine.DestroyNamedNetDriver
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   NetDriverName                  (CPF_Parm)

void UGameEngine::DestroyNamedNetDriver(const struct FName& NetDriverName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.DestroyNamedNetDriver");

	struct
	{
		struct FName                   NetDriverName;
	} params;
	params.NetDriverName = NetDriverName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameEngine.CreateNamedNetDriver
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   NetDriverName                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameEngine::CreateNamedNetDriver(const struct FName& NetDriverName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameEngine.CreateNamedNetDriver");

	struct
	{
		struct FName                   NetDriverName;
		bool                           ReturnValue;
	} params;
	params.NetDriverName = NetDriverName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ISetParameter.SetLinearColorParameter
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   Key                            (CPF_Parm)
// struct FLinearColor            Value                          (CPF_Parm)

void UISetParameter::SetLinearColorParameter(const struct FName& Key, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ISetParameter.SetLinearColorParameter");

	struct
	{
		struct FName                   Key;
		struct FLinearColor            Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ISetParameter.SetVectorParameter
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   Key                            (CPF_Parm)
// struct FVector                 Value                          (CPF_Parm)

void UISetParameter::SetVectorParameter(const struct FName& Key, const struct FVector& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ISetParameter.SetVectorParameter");

	struct
	{
		struct FName                   Key;
		struct FVector                 Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ISetParameter.SetFloatParameter
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   Key                            (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UISetParameter::SetFloatParameter(const struct FName& Key, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ISetParameter.SetFloatParameter");

	struct
	{
		struct FName                   Key;
		float                          Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ISetParameter.SetNameParameter
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   Key                            (CPF_Parm)
// struct FName                   Value                          (CPF_Parm)

void UISetParameter::SetNameParameter(const struct FName& Key, const struct FName& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ISetParameter.SetNameParameter");

	struct
	{
		struct FName                   Key;
		struct FName                   Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.ProcessActorSetVolume
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AVolume::ProcessActorSetVolume(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.ProcessActorSetVolume");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.CollisionChanged
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AVolume::CollisionChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.CollisionChanged");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.DisplayDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm, CPF_OutParm)
// float                          out_YPos                       (CPF_Parm, CPF_OutParm)

void AVolume::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.DisplayDebug");

	struct
	{
		class AHUD*                    HUD;
		float                          out_YL;
		float                          out_YPos;
	} params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Volume.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.EncompassesPoint
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 Loc                            (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVolume::EncompassesPoint(const struct FVector& Loc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.EncompassesPoint");

	struct
	{
		struct FVector                 Loc;
		bool                           ReturnValue;
	} params;
	params.Loc = Loc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Volume.Encompasses
// (FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVolume::Encompasses(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.Encompasses");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BlockingVolume.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ABlockingVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BlockingVolume.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicBlockingVolume.ApplyCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ADynamicBlockingVolume_FCheckpointRecord Record                         (CPF_Const, CPF_Parm, CPF_OutParm)

void ADynamicBlockingVolume::ApplyCheckpointRecord(struct ADynamicBlockingVolume_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicBlockingVolume.ApplyCheckpointRecord");

	struct
	{
		struct ADynamicBlockingVolume_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.DynamicBlockingVolume.CreateCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ADynamicBlockingVolume_FCheckpointRecord Record                         (CPF_Parm, CPF_OutParm)

void ADynamicBlockingVolume::CreateCheckpointRecord(struct ADynamicBlockingVolume_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicBlockingVolume.CreateCheckpointRecord");

	struct
	{
		struct ADynamicBlockingVolume_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.DynamicBlockingVolume.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ADynamicBlockingVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicBlockingVolume.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelStreamingVolume.ApplyCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ALevelStreamingVolume_FCheckpointRecord Record                         (CPF_Const, CPF_Parm, CPF_OutParm)

void ALevelStreamingVolume::ApplyCheckpointRecord(struct ALevelStreamingVolume_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreamingVolume.ApplyCheckpointRecord");

	struct
	{
		struct ALevelStreamingVolume_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.LevelStreamingVolume.CreateCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ALevelStreamingVolume_FCheckpointRecord Record                         (CPF_Parm, CPF_OutParm)

void ALevelStreamingVolume::CreateCheckpointRecord(struct ALevelStreamingVolume_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreamingVolume.CreateCheckpointRecord");

	struct
	{
		struct ALevelStreamingVolume_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.LevelStreamingVolume.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ALevelStreamingVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelStreamingVolume.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.ApplyCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct APhysicsVolume_FCheckpointRecord Record                         (CPF_Const, CPF_Parm, CPF_OutParm)

void APhysicsVolume::ApplyCheckpointRecord(struct APhysicsVolume_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ApplyCheckpointRecord");

	struct
	{
		struct APhysicsVolume_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.PhysicsVolume.CreateCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct APhysicsVolume_FCheckpointRecord Record                         (CPF_Parm, CPF_OutParm)

void APhysicsVolume::CreateCheckpointRecord(struct APhysicsVolume_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.CreateCheckpointRecord");

	struct
	{
		struct APhysicsVolume_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.PhysicsVolume.ShouldSaveForCheckpoint
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APhysicsVolume::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ShouldSaveForCheckpoint");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsVolume.OnSetDamageInstigator
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_SetDamageInstigator* Action                         (CPF_Parm)

void APhysicsVolume::OnSetDamageInstigator(class USeqAct_SetDamageInstigator* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.OnSetDamageInstigator");

	struct
	{
		class USeqAct_SetDamageInstigator* Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.NotifyPawnBecameViewTarget
// (FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// class APlayerController*       PC                             (CPF_Parm)

void APhysicsVolume::NotifyPawnBecameViewTarget(class APawn* P, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.NotifyPawnBecameViewTarget");

	struct
	{
		class APawn*                   P;
		class APlayerController*       PC;
	} params;
	params.P = P;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.ModifyPlayer
// (FUNC_Public)
// Parameters:
// class APawn*                   PlayerPawn                     (CPF_Parm)

void APhysicsVolume::ModifyPlayer(class APawn* PlayerPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ModifyPlayer");

	struct
	{
		class APawn*                   PlayerPawn;
	} params;
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.CausePainTo
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void APhysicsVolume::CausePainTo(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.CausePainTo");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.Touch
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm, CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void APhysicsVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.Touch");

	struct
	{
		class AActor*                  Other;
		class UPrimitiveComponent*     OtherComp;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
	} params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.TimerPop
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AVolumeTimer*            T                              (CPF_Parm)

void APhysicsVolume::TimerPop(class AVolumeTimer* T)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.TimerPop");

	struct
	{
		class AVolumeTimer*            T;
	} params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.CollisionChanged
// (FUNC_Simulated, FUNC_Event, FUNC_Public)

void APhysicsVolume::CollisionChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.CollisionChanged");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void APhysicsVolume::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.OnToggle");

	struct
	{
		class USeqAct_Toggle*          inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PawnLeavingVolume
// (FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)

void APhysicsVolume::PawnLeavingVolume(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PawnLeavingVolume");

	struct
	{
		class APawn*                   Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PawnEnteredVolume
// (FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)

void APhysicsVolume::PawnEnteredVolume(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PawnEnteredVolume");

	struct
	{
		class APawn*                   Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.ActorLeavingVolume
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void APhysicsVolume::ActorLeavingVolume(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ActorLeavingVolume");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.ActorEnteredVolume
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void APhysicsVolume::ActorEnteredVolume(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ActorEnteredVolume");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PhysicsChangedFor
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void APhysicsVolume::PhysicsChangedFor(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PhysicsChangedFor");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.Reset
// (FUNC_Defined, FUNC_Public)

void APhysicsVolume::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void APhysicsVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.GetZoneVelocityForActor
// (FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  TheActor                       (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector APhysicsVolume::GetZoneVelocityForActor(class AActor* TheActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.GetZoneVelocityForActor");

	struct
	{
		class AActor*                  TheActor;
		struct FVector                 ReturnValue;
	} params;
	params.TheActor = TheActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsVolume.GetGravityZ
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float APhysicsVolume::GetGravityZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.GetGravityZ");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DefaultPhysicsVolume.Destroyed
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void ADefaultPhysicsVolume::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPhysicsVolume.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.PhysicsChangedFor
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void ALadderVolume::PhysicsChangedFor(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PhysicsChangedFor");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.PawnLeavingVolume
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void ALadderVolume::PawnLeavingVolume(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PawnLeavingVolume");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.PawnEnteredVolume
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void ALadderVolume::PawnEnteredVolume(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PawnEnteredVolume");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.InUse
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   Ignored                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ALadderVolume::InUse(class APawn* Ignored)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.InUse");

	struct
	{
		class APawn*                   Ignored;
		bool                           ReturnValue;
	} params;
	params.Ignored = Ignored;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LadderVolume.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasDefaults)

void ALadderVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PostProcessVolume.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void APostProcessVolume::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PostProcessVolume.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TriggerVolume.StopsProjectile
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AActor*                  P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ATriggerVolume::StopsProjectile(class AActor* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TriggerVolume.StopsProjectile");

	struct
	{
		class AActor*                  P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TriggerVolume.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ATriggerVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TriggerVolume.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.RecheckValidTouch
// (FUNC_Public)

void ADroppedPickup::RecheckValidTouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.RecheckValidTouch");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.PickedUpBy
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void ADroppedPickup::PickedUpBy(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.PickedUpBy");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.GiveTo
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void ADroppedPickup::GiveTo(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.GiveTo");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.Landed
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  FloorActor                     (CPF_Parm)

void ADroppedPickup::Landed(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.Landed");

	struct
	{
		struct FVector                 HitNormal;
		class AActor*                  FloorActor;
	} params;
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.DetourWeight
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// float                          PathWeight                     (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float ADroppedPickup::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.DetourWeight");

	struct
	{
		class APawn*                   Other;
		float                          PathWeight;
		float                          ReturnValue;
	} params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DroppedPickup.EncroachedBy
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void ADroppedPickup::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.EncroachedBy");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.SetPickupParticles
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UParticleSystemComponent* PickupParticles                (CPF_Parm, CPF_EditInline)

void ADroppedPickup::SetPickupParticles(class UParticleSystemComponent* PickupParticles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.SetPickupParticles");

	struct
	{
		class UParticleSystemComponent* PickupParticles;
	} params;
	params.PickupParticles = PickupParticles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.SetPickupMesh
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UPrimitiveComponent*     PickupMesh                     (CPF_Parm, CPF_EditInline)

void ADroppedPickup::SetPickupMesh(class UPrimitiveComponent* PickupMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.SetPickupMesh");

	struct
	{
		class UPrimitiveComponent*     PickupMesh;
	} params;
	params.PickupMesh = PickupMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.Reset
// (FUNC_Defined, FUNC_Public)

void ADroppedPickup::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void ADroppedPickup::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.Destroyed
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void ADroppedPickup::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.RemoveFromNavigation
// (FUNC_Final, FUNC_Native, FUNC_Public)

void ADroppedPickup::RemoveFromNavigation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.RemoveFromNavigation");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DroppedPickup.AddToNavigation
// (FUNC_Final, FUNC_Native, FUNC_Public)

void ADroppedPickup::AddToNavigation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DroppedPickup.AddToNavigation");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.SetLightEnvironmentToNotBeDynamic
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)

void ADynamicSMActor::SetLightEnvironmentToNotBeDynamic()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.SetLightEnvironmentToNotBeDynamic");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.Detach
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void ADynamicSMActor::Detach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.Detach");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.Attach
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void ADynamicSMActor::Attach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.Attach");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.CanBasePawn
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ADynamicSMActor::CanBasePawn(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.CanBasePawn");

	struct
	{
		class APawn*                   P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DynamicSMActor.SetStaticMesh
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UStaticMesh*             NewMesh                        (CPF_Parm)
// struct FVector                 NewTranslation                 (CPF_OptionalParm, CPF_Parm)
// struct FRotator                NewRotation                    (CPF_OptionalParm, CPF_Parm)
// struct FVector                 NewScale3D                     (CPF_OptionalParm, CPF_Parm)

void ADynamicSMActor::SetStaticMesh(class UStaticMesh* NewMesh, const struct FVector& NewTranslation, const struct FRotator& NewRotation, const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.SetStaticMesh");

	struct
	{
		class UStaticMesh*             NewMesh;
		struct FVector                 NewTranslation;
		struct FRotator                NewRotation;
		struct FVector                 NewScale3D;
	} params;
	params.NewMesh = NewMesh;
	params.NewTranslation = NewTranslation;
	params.NewRotation = NewRotation;
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.OnSetMaterial
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_SetMaterial*     Action                         (CPF_Parm)

void ADynamicSMActor::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.OnSetMaterial");

	struct
	{
		class USeqAct_SetMaterial*     Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.OnSetMesh
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_SetMesh*         Action                         (CPF_Parm)

void ADynamicSMActor::OnSetMesh(class USeqAct_SetMesh* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.OnSetMesh");

	struct
	{
		class USeqAct_SetMesh*         Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void ADynamicSMActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicSMActor.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void ADynamicSMActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicSMActor.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.ApplyCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct AInterpActor_FCheckpointRecord Record                         (CPF_Const, CPF_Parm, CPF_OutParm)

void AInterpActor::ApplyCheckpointRecord(struct AInterpActor_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.ApplyCheckpointRecord");

	struct
	{
		struct AInterpActor_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.InterpActor.CreateCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct AInterpActor_FCheckpointRecord Record                         (CPF_Parm, CPF_OutParm)

void AInterpActor::CreateCheckpointRecord(struct AInterpActor_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.CreateCheckpointRecord");

	struct
	{
		struct AInterpActor_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.InterpActor.ShouldSaveForCheckpoint
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AInterpActor::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.ShouldSaveForCheckpoint");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InterpActor.ShutDown
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AInterpActor::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.ShutDown");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.InterpolationChanged
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (CPF_Parm)

void AInterpActor::InterpolationChanged(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.InterpolationChanged");

	struct
	{
		class USeqAct_Interp*          InterpAction;
	} params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.ForceNetRelevant
// (FUNC_Event, FUNC_Public)

void AInterpActor::ForceNetRelevant()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.ForceNetRelevant");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.InterpolationFinished
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (CPF_Parm)

void AInterpActor::InterpolationFinished(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.InterpolationFinished");

	struct
	{
		class USeqAct_Interp*          InterpAction;
	} params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.InterpolationStarted
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (CPF_Parm)
// class UInterpGroupInst*        GroupInst                      (CPF_Parm)

void AInterpActor::InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.InterpolationStarted");

	struct
	{
		class USeqAct_Interp*          InterpAction;
		class UInterpGroupInst*        GroupInst;
	} params;
	params.InterpAction = InterpAction;
	params.GroupInst = GroupInst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.PlayMovingSound
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           bClosing                       (CPF_Parm)

void AInterpActor::PlayMovingSound(bool bClosing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.PlayMovingSound");

	struct
	{
		bool                           bClosing;
	} params;
	params.bClosing = bClosing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.FinishedOpen
// (FUNC_Defined, FUNC_Public)

void AInterpActor::FinishedOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.FinishedOpen");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.Restart
// (FUNC_Defined, FUNC_Public)

void AInterpActor::Restart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.Restart");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.Detach
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AInterpActor::Detach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.Detach");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.Attach
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AInterpActor::Attach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.Attach");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.RanInto
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AInterpActor::RanInto(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.RanInto");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InterpActor.EncroachingOn
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AInterpActor::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.EncroachingOn");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InterpActor.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AInterpActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InterpActor.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.HideSelf
// (FUNC_Simulated, FUNC_Public)

void AEmitter::HideSelf()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.HideSelf");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.ApplyCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct AEmitter_FCheckpointRecord Record                         (CPF_Const, CPF_Parm, CPF_OutParm)

void AEmitter::ApplyCheckpointRecord(struct AEmitter_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ApplyCheckpointRecord");

	struct
	{
		struct AEmitter_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.Emitter.CreateCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct AEmitter_FCheckpointRecord Record                         (CPF_Parm, CPF_OutParm)

void AEmitter::CreateCheckpointRecord(struct AEmitter_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.CreateCheckpointRecord");

	struct
	{
		struct AEmitter_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.Emitter.ShouldSaveForCheckpoint
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AEmitter::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ShouldSaveForCheckpoint");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Emitter.OnSetParticleSysParam
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_SetParticleSysParam* Action                         (CPF_Parm)

void AEmitter::OnSetParticleSysParam(class USeqAct_SetParticleSysParam* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnSetParticleSysParam");

	struct
	{
		class USeqAct_SetParticleSysParam* Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetActorParameter
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class AActor*                  Param                          (CPF_Parm)

void AEmitter::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetActorParameter");

	struct
	{
		struct FName                   ParameterName;
		class AActor*                  Param;
	} params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetExtColorParameter
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// unsigned char                  Red                            (CPF_Parm)
// unsigned char                  Green                          (CPF_Parm)
// unsigned char                  Blue                           (CPF_Parm)
// unsigned char                  Alpha                          (CPF_Parm)

void AEmitter::SetExtColorParameter(const struct FName& ParameterName, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned char Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetExtColorParameter");

	struct
	{
		struct FName                   ParameterName;
		unsigned char                  Red;
		unsigned char                  Green;
		unsigned char                  Blue;
		unsigned char                  Alpha;
	} params;
	params.ParameterName = ParameterName;
	params.Red = Red;
	params.Green = Green;
	params.Blue = Blue;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetColorParameter
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FColor                  Param                          (CPF_Parm)

void AEmitter::SetColorParameter(const struct FName& ParameterName, const struct FColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetColorParameter");

	struct
	{
		struct FName                   ParameterName;
		struct FColor                  Param;
	} params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetVectorParameter
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FVector                 Param                          (CPF_Parm)

void AEmitter::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetVectorParameter");

	struct
	{
		struct FName                   ParameterName;
		struct FVector                 Param;
	} params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetFloatParameter
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// float                          Param                          (CPF_Parm)

void AEmitter::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetFloatParameter");

	struct
	{
		struct FName                   ParameterName;
		float                          Param;
	} params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.ShutDown
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AEmitter::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ShutDown");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.OnParticleEventGenerator
// (FUNC_Public)
// Parameters:
// class USeqAct_ParticleEventGenerator* Action                         (CPF_Parm)

void AEmitter::OnParticleEventGenerator(class USeqAct_ParticleEventGenerator* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnParticleEventGenerator");

	struct
	{
		class USeqAct_ParticleEventGenerator* Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.OnToggle
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AEmitter::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.OnParticleSystemFinished
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class UParticleSystemComponent* FinishedComponent              (CPF_Parm, CPF_EditInline)

void AEmitter::OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.OnParticleSystemFinished");

	struct
	{
		class UParticleSystemComponent* FinishedComponent;
	} params;
	params.FinishedComponent = FinishedComponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AEmitter::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AEmitter::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetTemplate
// (FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UParticleSystem*         NewTemplate                    (CPF_Parm)
// bool                           bDestroyOnFinish               (CPF_OptionalParm, CPF_Parm)

void AEmitter::SetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetTemplate");

	struct
	{
		class UParticleSystem*         NewTemplate;
		bool                           bDestroyOnFinish;
	} params;
	params.NewTemplate = NewTemplate;
	params.bDestroyOnFinish = bDestroyOnFinish;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterPool.SpawnEmitterCustomLifetime
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UParticleSystem*         EmitterTemplate                (CPF_Parm)
// bool                           bSkipAutoActivate              (CPF_OptionalParm, CPF_Parm)
// class UParticleSystemComponent* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UParticleSystemComponent* AEmitterPool::SpawnEmitterCustomLifetime(class UParticleSystem* EmitterTemplate, bool bSkipAutoActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.SpawnEmitterCustomLifetime");

	struct
	{
		class UParticleSystem*         EmitterTemplate;
		bool                           bSkipAutoActivate;
		class UParticleSystemComponent* ReturnValue;
	} params;
	params.EmitterTemplate = EmitterTemplate;
	params.bSkipAutoActivate = bSkipAutoActivate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.SpawnEmitterMeshAttachment
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UParticleSystem*         EmitterTemplate                (CPF_Parm)
// class USkeletalMeshComponent*  Mesh                           (CPF_Parm, CPF_EditInline)
// struct FName                   AttachPointName                (CPF_Parm)
// bool                           bAttachToSocket                (CPF_OptionalParm, CPF_Parm)
// struct FVector                 RelativeLoc                    (CPF_OptionalParm, CPF_Parm)
// struct FRotator                RelativeRot                    (CPF_OptionalParm, CPF_Parm)
// class UParticleSystemComponent* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UParticleSystemComponent* AEmitterPool::SpawnEmitterMeshAttachment(class UParticleSystem* EmitterTemplate, class USkeletalMeshComponent* Mesh, const struct FName& AttachPointName, bool bAttachToSocket, const struct FVector& RelativeLoc, const struct FRotator& RelativeRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.SpawnEmitterMeshAttachment");

	struct
	{
		class UParticleSystem*         EmitterTemplate;
		class USkeletalMeshComponent*  Mesh;
		struct FName                   AttachPointName;
		bool                           bAttachToSocket;
		struct FVector                 RelativeLoc;
		struct FRotator                RelativeRot;
		class UParticleSystemComponent* ReturnValue;
	} params;
	params.EmitterTemplate = EmitterTemplate;
	params.Mesh = Mesh;
	params.AttachPointName = AttachPointName;
	params.bAttachToSocket = bAttachToSocket;
	params.RelativeLoc = RelativeLoc;
	params.RelativeRot = RelativeRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.SpawnEmitter
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UParticleSystem*         EmitterTemplate                (CPF_Parm)
// struct FVector                 SpawnLocation                  (CPF_Parm)
// struct FRotator                SpawnRotation                  (CPF_OptionalParm, CPF_Parm)
// class AActor*                  AttachToActor                  (CPF_OptionalParm, CPF_Parm)
// class AActor*                  InInstigator                   (CPF_OptionalParm, CPF_Parm)
// int                            MaxDLEPooledReuses             (CPF_OptionalParm, CPF_Parm)
// bool                           bInheritScaleFromBase          (CPF_OptionalParm, CPF_Parm)
// class UParticleSystemComponent* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UParticleSystemComponent* AEmitterPool::SpawnEmitter(class UParticleSystem* EmitterTemplate, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* AttachToActor, class AActor* InInstigator, int MaxDLEPooledReuses, bool bInheritScaleFromBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.SpawnEmitter");

	struct
	{
		class UParticleSystem*         EmitterTemplate;
		struct FVector                 SpawnLocation;
		struct FRotator                SpawnRotation;
		class AActor*                  AttachToActor;
		class AActor*                  InInstigator;
		int                            MaxDLEPooledReuses;
		bool                           bInheritScaleFromBase;
		class UParticleSystemComponent* ReturnValue;
	} params;
	params.EmitterTemplate = EmitterTemplate;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.AttachToActor = AttachToActor;
	params.InInstigator = InInstigator;
	params.MaxDLEPooledReuses = MaxDLEPooledReuses;
	params.bInheritScaleFromBase = bInheritScaleFromBase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.GetPooledComponent
// (FUNC_Final, FUNC_Native, FUNC_Protected)
// Parameters:
// class UParticleSystem*         EmitterTemplate                (CPF_Parm)
// bool                           bAutoActivate                  (CPF_Parm)
// class UParticleSystemComponent* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UParticleSystemComponent* AEmitterPool::GetPooledComponent(class UParticleSystem* EmitterTemplate, bool bAutoActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.GetPooledComponent");

	struct
	{
		class UParticleSystem*         EmitterTemplate;
		bool                           bAutoActivate;
		class UParticleSystemComponent* ReturnValue;
	} params;
	params.EmitterTemplate = EmitterTemplate;
	params.bAutoActivate = bAutoActivate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.GetFreeMatInstConsts
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Protected)
// Parameters:
// bool                           bCreateNewObject               (CPF_OptionalParm, CPF_Parm)
// class UMaterialInstanceConstant* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMaterialInstanceConstant* AEmitterPool::GetFreeMatInstConsts(bool bCreateNewObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.GetFreeMatInstConsts");

	struct
	{
		bool                           bCreateNewObject;
		class UMaterialInstanceConstant* ReturnValue;
	} params;
	params.bCreateNewObject = bCreateNewObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.FreeMaterialInstanceConstants
// (FUNC_Final, FUNC_Native, FUNC_Protected)
// Parameters:
// class UStaticMeshComponent*    SMC                            (CPF_Parm, CPF_EditInline)

void AEmitterPool::FreeMaterialInstanceConstants(class UStaticMeshComponent* SMC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.FreeMaterialInstanceConstants");

	struct
	{
		class UStaticMeshComponent*    SMC;
	} params;
	params.SMC = SMC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterPool.GetFreeStaticMeshComponent
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Protected)
// Parameters:
// bool                           bCreateNewObject               (CPF_OptionalParm, CPF_Parm)
// class UStaticMeshComponent*    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UStaticMeshComponent* AEmitterPool::GetFreeStaticMeshComponent(bool bCreateNewObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.GetFreeStaticMeshComponent");

	struct
	{
		bool                           bCreateNewObject;
		class UStaticMeshComponent*    ReturnValue;
	} params;
	params.bCreateNewObject = bCreateNewObject;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EmitterPool.FreeStaticMeshComponents
// (FUNC_Final, FUNC_Native, FUNC_Protected)
// Parameters:
// class UParticleSystemComponent* PSC                            (CPF_Parm, CPF_EditInline)

void AEmitterPool::FreeStaticMeshComponents(class UParticleSystemComponent* PSC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.FreeStaticMeshComponents");

	struct
	{
		class UParticleSystemComponent* PSC;
	} params;
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterPool.ReturnToPool
// (FUNC_Final, FUNC_Native, FUNC_Protected)
// Parameters:
// class UParticleSystemComponent* PSC                            (CPF_Parm, CPF_EditInline)

void AEmitterPool::ReturnToPool(class UParticleSystemComponent* PSC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.ReturnToPool");

	struct
	{
		class UParticleSystemComponent* PSC;
	} params;
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterPool.ClearPoolComponents
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bClearActive                   (CPF_OptionalParm, CPF_Parm)

void AEmitterPool::ClearPoolComponents(bool bClearActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.ClearPoolComponents");

	struct
	{
		bool                           bClearActive;
	} params;
	params.bClearActive = bClearActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterPool.OnParticleSystemFinished
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UParticleSystemComponent* PSC                            (CPF_Parm, CPF_EditInline)

void AEmitterPool::OnParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterPool.OnParticleSystemFinished");

	struct
	{
		class UParticleSystemComponent* PSC;
	} params;
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInstance.InstanceSpawnArchetype
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  SpawnArchetype                 (CPF_Parm)
// class AActor*                  SpawnOwner                     (CPF_OptionalParm, CPF_Parm)
// struct FName                   SpawnTag                       (CPF_OptionalParm, CPF_Parm)
// struct FVector                 SpawnLocation                  (CPF_OptionalParm, CPF_Parm)
// struct FRotator                SpawnRotation                  (CPF_OptionalParm, CPF_Parm)
// bool                           bNoCollisionFail               (CPF_OptionalParm, CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_CoerceParm)

class AActor* AGameInstance::InstanceSpawnArchetype(class AActor* SpawnArchetype, class AActor* SpawnOwner, const struct FName& SpawnTag, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, bool bNoCollisionFail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.InstanceSpawnArchetype");

	struct
	{
		class AActor*                  SpawnArchetype;
		class AActor*                  SpawnOwner;
		struct FName                   SpawnTag;
		struct FVector                 SpawnLocation;
		struct FRotator                SpawnRotation;
		bool                           bNoCollisionFail;
		class AActor*                  ReturnValue;
	} params;
	params.SpawnArchetype = SpawnArchetype;
	params.SpawnOwner = SpawnOwner;
	params.SpawnTag = SpawnTag;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.bNoCollisionFail = bNoCollisionFail;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInstance.InstanceSpawn
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UClass*                  SpawnClass                     (CPF_Parm)
// class AActor*                  SpawnOwner                     (CPF_OptionalParm, CPF_Parm)
// struct FName                   SpawnTag                       (CPF_OptionalParm, CPF_Parm)
// struct FVector                 SpawnLocation                  (CPF_OptionalParm, CPF_Parm)
// struct FRotator                SpawnRotation                  (CPF_OptionalParm, CPF_Parm)
// class AActor*                  ActorTemplate                  (CPF_OptionalParm, CPF_Parm)
// bool                           bNoCollisionFail               (CPF_OptionalParm, CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_CoerceParm)

class AActor* AGameInstance::InstanceSpawn(class UClass* SpawnClass, class AActor* SpawnOwner, const struct FName& SpawnTag, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* ActorTemplate, bool bNoCollisionFail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.InstanceSpawn");

	struct
	{
		class UClass*                  SpawnClass;
		class AActor*                  SpawnOwner;
		struct FName                   SpawnTag;
		struct FVector                 SpawnLocation;
		struct FRotator                SpawnRotation;
		class AActor*                  ActorTemplate;
		bool                           bNoCollisionFail;
		class AActor*                  ReturnValue;
	} params;
	params.SpawnClass = SpawnClass;
	params.SpawnOwner = SpawnOwner;
	params.SpawnTag = SpawnTag;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.ActorTemplate = ActorTemplate;
	params.bNoCollisionFail = bNoCollisionFail;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInstance.InstanceRemove
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  A                              (CPF_Parm)

void AGameInstance::InstanceRemove(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.InstanceRemove");

	struct
	{
		class AActor*                  A;
	} params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInstance.InstanceAdd
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  A                              (CPF_Parm)

void AGameInstance::InstanceAdd(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInstance.InstanceAdd");

	struct
	{
		class AActor*                  A;
	} params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.NotifyBadConnection
// (FUNC_Event, FUNC_Public)
// Parameters:
// float                          Ping                           (CPF_Parm)
// int                            InPacketLoss                   (CPF_Parm)
// int                            OutPacketLoss                  (CPF_Parm)
// float                          ReceiveTime                    (CPF_Parm)
// float                          AckTime                        (CPF_Parm)
// float                          NetSpeed                       (CPF_Parm)

void AHUD::NotifyBadConnection(float Ping, int InPacketLoss, int OutPacketLoss, float ReceiveTime, float AckTime, float NetSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.NotifyBadConnection");

	struct
	{
		float                          Ping;
		int                            InPacketLoss;
		int                            OutPacketLoss;
		float                          ReceiveTime;
		float                          AckTime;
		float                          NetSpeed;
	} params;
	params.Ping = Ping;
	params.InPacketLoss = InPacketLoss;
	params.OutPacketLoss = OutPacketLoss;
	params.ReceiveTime = ReceiveTime;
	params.AckTime = AckTime;
	params.NetSpeed = NetSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.OnLostFocusPause
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           bEnable                        (CPF_Parm)

void AHUD::OnLostFocusPause(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.OnLostFocusPause");

	struct
	{
		bool                           bEnable;
	} params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.NotifyBindPostProcessEffects
// (FUNC_Public)

void AHUD::NotifyBindPostProcessEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.NotifyBindPostProcessEffects");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PlayerOwnerDied
// (FUNC_Public)

void AHUD::PlayerOwnerDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PlayerOwnerDied");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.GetFontSizeIndex
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// int                            FontSize                       (CPF_Parm)
// class UFont*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UFont* AHUD::STATIC_GetFontSizeIndex(int FontSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetFontSizeIndex");

	struct
	{
		int                            FontSize;
		class UFont*                   ReturnValue;
	} params;
	params.FontSize = FontSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.DrawText
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 Text                           (CPF_Parm, CPF_NeedCtorLink)
// struct FVector2D               Position                       (CPF_Parm)
// class UFont*                   TextFont                       (CPF_Parm)
// struct FVector2D               FontScale                      (CPF_Parm)
// struct FColor                  TextColor                      (CPF_Parm)
// struct FFontRenderInfo         RenderInfo                     (CPF_Const, CPF_OptionalParm, CPF_Parm, CPF_OutParm)

void AHUD::DrawText(const struct FString& Text, const struct FVector2D& Position, class UFont* TextFont, const struct FVector2D& FontScale, const struct FColor& TextColor, struct FFontRenderInfo* RenderInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawText");

	struct
	{
		struct FString                 Text;
		struct FVector2D               Position;
		class UFont*                   TextFont;
		struct FVector2D               FontScale;
		struct FColor                  TextColor;
		struct FFontRenderInfo         RenderInfo;
	} params;
	params.Text = Text;
	params.Position = Position;
	params.TextFont = TextFont;
	params.FontScale = FontScale;
	params.TextColor = TextColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RenderInfo != nullptr)
		*RenderInfo = params.RenderInfo;
}


// Function Engine.HUD.DisplayKismetMessages
// (FUNC_Defined, FUNC_Public)

void AHUD::DisplayKismetMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayKismetMessages");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DisplayLocalMessages
// (FUNC_Defined, FUNC_Public)

void AHUD::DisplayLocalMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayLocalMessages");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawMessageText
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FHudLocalizedMessage    LocalMessage                   (CPF_Parm, CPF_NeedCtorLink)
// float                          ScreenX                        (CPF_Parm)
// float                          ScreenY                        (CPF_Parm)

void AHUD::DrawMessageText(const struct FHudLocalizedMessage& LocalMessage, float ScreenX, float ScreenY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMessageText");

	struct
	{
		struct FHudLocalizedMessage    LocalMessage;
		float                          ScreenX;
		float                          ScreenY;
	} params;
	params.LocalMessage = LocalMessage;
	params.ScreenX = ScreenX;
	params.ScreenY = ScreenY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawMessage
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            I                              (CPF_Parm)
// float                          PosY                           (CPF_Parm)
// float                          DX                             (CPF_Parm, CPF_OutParm)
// float                          DY                             (CPF_Parm, CPF_OutParm)

void AHUD::DrawMessage(int I, float PosY, float* DX, float* DY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawMessage");

	struct
	{
		int                            I;
		float                          PosY;
		float                          DX;
		float                          DY;
	} params;
	params.I = I;
	params.PosY = PosY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DX != nullptr)
		*DX = params.DX;
	if (DY != nullptr)
		*DY = params.DY;
}


// Function Engine.HUD.GetScreenCoords
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          PosY                           (CPF_Parm)
// float                          ScreenX                        (CPF_Parm, CPF_OutParm)
// float                          ScreenY                        (CPF_Parm, CPF_OutParm)
// struct FHudLocalizedMessage    InMessage                      (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AHUD::GetScreenCoords(float PosY, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* InMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetScreenCoords");

	struct
	{
		float                          PosY;
		float                          ScreenX;
		float                          ScreenY;
		struct FHudLocalizedMessage    InMessage;
	} params;
	params.PosY = PosY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ScreenX != nullptr)
		*ScreenX = params.ScreenX;
	if (ScreenY != nullptr)
		*ScreenY = params.ScreenY;
	if (InMessage != nullptr)
		*InMessage = params.InMessage;
}


// Function Engine.HUD.AddLocalizedMessage
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Index                          (CPF_Parm)
// class UClass*                  InMessageClass                 (CPF_Parm)
// struct FString                 CriticalString                 (CPF_Parm, CPF_NeedCtorLink)
// int                            Switch                         (CPF_Parm)
// float                          Position                       (CPF_Parm)
// float                          Lifetime                       (CPF_Parm)
// int                            FontSize                       (CPF_Parm)
// struct FColor                  DrawColor                      (CPF_Parm)
// int                            MessageCount                   (CPF_OptionalParm, CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm, CPF_Parm)

void AHUD::AddLocalizedMessage(int Index, class UClass* InMessageClass, const struct FString& CriticalString, int Switch, float Position, float Lifetime, int FontSize, const struct FColor& DrawColor, int MessageCount, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddLocalizedMessage");

	struct
	{
		int                            Index;
		class UClass*                  InMessageClass;
		struct FString                 CriticalString;
		int                            Switch;
		float                          Position;
		float                          Lifetime;
		int                            FontSize;
		struct FColor                  DrawColor;
		int                            MessageCount;
		class UObject*                 OptionalObject;
	} params;
	params.Index = Index;
	params.InMessageClass = InMessageClass;
	params.CriticalString = CriticalString;
	params.Switch = Switch;
	params.Position = Position;
	params.Lifetime = Lifetime;
	params.FontSize = FontSize;
	params.DrawColor = DrawColor;
	params.MessageCount = MessageCount;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.LocalizedMessage
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UClass*                  InMessageClass                 (CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_Parm)
// struct FString                 CriticalString                 (CPF_Parm, CPF_NeedCtorLink)
// int                            Switch                         (CPF_Parm)
// float                          Position                       (CPF_Parm)
// float                          Lifetime                       (CPF_Parm)
// int                            FontSize                       (CPF_Parm)
// struct FColor                  DrawColor                      (CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm, CPF_Parm)

void AHUD::LocalizedMessage(class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, const struct FString& CriticalString, int Switch, float Position, float Lifetime, int FontSize, const struct FColor& DrawColor, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.LocalizedMessage");

	struct
	{
		class UClass*                  InMessageClass;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		struct FString                 CriticalString;
		int                            Switch;
		float                          Position;
		float                          Lifetime;
		int                            FontSize;
		struct FColor                  DrawColor;
		class UObject*                 OptionalObject;
	} params;
	params.InMessageClass = InMessageClass;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.CriticalString = CriticalString;
	params.Switch = Switch;
	params.Position = Position;
	params.Lifetime = Lifetime;
	params.FontSize = FontSize;
	params.DrawColor = DrawColor;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.AddConsoleMessage
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 M                              (CPF_Parm, CPF_NeedCtorLink)
// class UClass*                  InMessageClass                 (CPF_Parm)
// class APlayerReplicationInfo*  PRI                            (CPF_Parm)
// float                          Lifetime                       (CPF_OptionalParm, CPF_Parm)

void AHUD::AddConsoleMessage(const struct FString& M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddConsoleMessage");

	struct
	{
		struct FString                 M;
		class UClass*                  InMessageClass;
		class APlayerReplicationInfo*  PRI;
		float                          Lifetime;
	} params;
	params.M = M;
	params.InMessageClass = InMessageClass;
	params.PRI = PRI;
	params.Lifetime = Lifetime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShouldShowConsoleMessage
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FConsoleMessage         InConsoleMessage               (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AHUD::ShouldShowConsoleMessage(const struct FConsoleMessage& InConsoleMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShouldShowConsoleMessage");

	struct
	{
		struct FConsoleMessage         InConsoleMessage;
		bool                           ReturnValue;
	} params;
	params.InConsoleMessage = InConsoleMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.DisplayConsoleMessages
// (FUNC_Defined, FUNC_Public)

void AHUD::DisplayConsoleMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayConsoleMessages");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Message
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (CPF_Parm)
// struct FString                 msg                            (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// struct FName                   MsgType                        (CPF_Parm)
// float                          Lifetime                       (CPF_OptionalParm, CPF_Parm)

void AHUD::Message(class APlayerReplicationInfo* PRI, const struct FString& msg, const struct FName& MsgType, float Lifetime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Message");

	struct
	{
		class APlayerReplicationInfo*  PRI;
		struct FString                 msg;
		struct FName                   MsgType;
		float                          Lifetime;
	} params;
	params.PRI = PRI;
	params.msg = msg;
	params.MsgType = MsgType;
	params.Lifetime = Lifetime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ClearMessage
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FHudLocalizedMessage    M                              (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AHUD::ClearMessage(struct FHudLocalizedMessage* M)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ClearMessage");

	struct
	{
		struct FHudLocalizedMessage    M;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (M != nullptr)
		*M = params.M;
}


// Function Engine.HUD.DisplayBadConnectionAlert
// (FUNC_Public)

void AHUD::DisplayBadConnectionAlert()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayBadConnectionAlert");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawHUD
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)

void AHUD::DrawHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawHUD");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PostRender
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AHUD::PostRender()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PostRender");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PreCalcValues
// (FUNC_Defined, FUNC_Public)

void AHUD::PreCalcValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PreCalcValues");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawRoute
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class APawn*                   Target                         (CPF_Parm)

void AHUD::DrawRoute(class APawn* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawRoute");

	struct
	{
		class APawn*                   Target;
	} params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowDebugInfo
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          out_YL                         (CPF_Parm, CPF_OutParm)
// float                          out_YPos                       (CPF_Parm, CPF_OutParm)

void AHUD::ShowDebugInfo(float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebugInfo");

	struct
	{
		float                          out_YL;
		float                          out_YPos;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.HUD.ToggleDirectorInfoDebug
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void AHUD::ToggleDirectorInfoDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ToggleDirectorInfoDebug");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ToggleDirectorInfoHUD
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void AHUD::ToggleDirectorInfoHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ToggleDirectorInfoHUD");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShouldDisplayDebug
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   DebugType                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AHUD::ShouldDisplayDebug(const struct FName& DebugType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShouldDisplayDebug");

	struct
	{
		struct FName                   DebugType;
		bool                           ReturnValue;
	} params;
	params.DebugType = DebugType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.ShowDebug
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   DebugType                      (CPF_OptionalParm, CPF_Parm)

void AHUD::ShowDebug(const struct FName& DebugType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebug");

	struct
	{
		struct FName                   DebugType;
	} params;
	params.DebugType = DebugType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.SetShowScores
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// bool                           bNewValue                      (CPF_Parm)

void AHUD::SetShowScores(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.SetShowScores");

	struct
	{
		bool                           bNewValue;
	} params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowScores
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void AHUD::ShowScores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowScores");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowHUD
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void AHUD::ShowHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowHUD");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ToggleHUD
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void AHUD::ToggleHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ToggleHUD");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.AddPostRenderedActor
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  A                              (CPF_Parm)

void AHUD::AddPostRenderedActor(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddPostRenderedActor");

	struct
	{
		class AActor*                  A;
	} params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.RemovePostRenderedActor
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  A                              (CPF_Parm)

void AHUD::RemovePostRenderedActor(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.RemovePostRenderedActor");

	struct
	{
		class AActor*                  A;
	} params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawActorOverlays
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ViewPoint                      (CPF_Parm)
// struct FRotator                ViewRotation                   (CPF_Parm)

void AHUD::DrawActorOverlays(const struct FVector& ViewPoint, const struct FRotator& ViewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawActorOverlays");

	struct
	{
		struct FVector                 ViewPoint;
		struct FRotator                ViewRotation;
	} params;
	params.ViewPoint = ViewPoint;
	params.ViewRotation = ViewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AHUD::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Draw2DLine
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            X1                             (CPF_Parm)
// int                            Y1                             (CPF_Parm)
// int                            X2                             (CPF_Parm)
// int                            Y2                             (CPF_Parm)
// struct FColor                  LineColor                      (CPF_Parm)

void AHUD::Draw2DLine(int X1, int Y1, int X2, int Y2, const struct FColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Draw2DLine");

	struct
	{
		int                            X1;
		int                            Y1;
		int                            X2;
		int                            Y2;
		struct FColor                  LineColor;
	} params;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Draw3DLine
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 Start                          (CPF_Parm)
// struct FVector                 End                            (CPF_Parm)
// struct FColor                  LineColor                      (CPF_Parm)

void AHUD::Draw3DLine(const struct FVector& Start, const struct FVector& End, const struct FColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Draw3DLine");

	struct
	{
		struct FVector                 Start;
		struct FVector                 End;
		struct FColor                  LineColor;
	} params;
	params.Start = Start;
	params.End = End;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.CheckForSentinelRun
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AAutoTestManager::CheckForSentinelRun()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.CheckForSentinelRun");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AutoTestManager.StartMatch
// (FUNC_Defined, FUNC_Public)

void AAutoTestManager::StartMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.StartMatch");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.GetNextAutomatedTestingMap
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AAutoTestManager::GetNextAutomatedTestingMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.GetNextAutomatedTestingMap");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AutoTestManager.IncrementNumberOfMatchesPlayed
// (FUNC_Defined, FUNC_Public)

void AAutoTestManager::IncrementNumberOfMatchesPlayed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.IncrementNumberOfMatchesPlayed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.IncrementAutomatedTestingMapIndex
// (FUNC_Defined, FUNC_Public)

void AAutoTestManager::IncrementAutomatedTestingMapIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.IncrementAutomatedTestingMapIndex");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.CloseAutomatedMapTestTimer
// (FUNC_Defined, FUNC_Public)

void AAutoTestManager::CloseAutomatedMapTestTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.CloseAutomatedMapTestTimer");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.StartAutomatedMapTestTimerWorker
// (FUNC_Defined, FUNC_Public)

void AAutoTestManager::StartAutomatedMapTestTimerWorker()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.StartAutomatedMapTestTimerWorker");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.StartAutomatedMapTestTimer
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AAutoTestManager::StartAutomatedMapTestTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.StartAutomatedMapTestTimer");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.DoMemoryTracking
// (FUNC_Native, FUNC_Public)

void AAutoTestManager::DoMemoryTracking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoMemoryTracking");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.DoTimeBasedSentinelStatGathering
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)

void AAutoTestManager::DoTimeBasedSentinelStatGathering()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoTimeBasedSentinelStatGathering");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.DoSentinel_ViewDependentMemoryAtSpecificLocation
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 InLocation                     (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FRotator                InRotation                     (CPF_Const, CPF_Parm, CPF_OutParm)

void AAutoTestManager::DoSentinel_ViewDependentMemoryAtSpecificLocation(struct FVector* InLocation, struct FRotator* InRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoSentinel_ViewDependentMemoryAtSpecificLocation");

	struct
	{
		struct FVector                 InLocation;
		struct FRotator                InRotation;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InLocation != nullptr)
		*InLocation = params.InLocation;
	if (InRotation != nullptr)
		*InRotation = params.InRotation;
}


// Function Engine.AutoTestManager.DoSentinel_PerfAtSpecificLocation
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 InLocation                     (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FRotator                InRotation                     (CPF_Const, CPF_Parm, CPF_OutParm)

void AAutoTestManager::DoSentinel_PerfAtSpecificLocation(struct FVector* InLocation, struct FRotator* InRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoSentinel_PerfAtSpecificLocation");

	struct
	{
		struct FVector                 InLocation;
		struct FRotator                InRotation;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InLocation != nullptr)
		*InLocation = params.InLocation;
	if (InRotation != nullptr)
		*InRotation = params.InRotation;
}


// Function Engine.AutoTestManager.DoSentinel_MemoryAtSpecificLocation
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 InLocation                     (CPF_Const, CPF_Parm)
// struct FRotator                InRotation                     (CPF_Const, CPF_Parm)

void AAutoTestManager::DoSentinel_MemoryAtSpecificLocation(const struct FVector& InLocation, const struct FRotator& InRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoSentinel_MemoryAtSpecificLocation");

	struct
	{
		struct FVector                 InLocation;
		struct FRotator                InRotation;
	} params;
	params.InLocation = InLocation;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.GetTravelLocations
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   LevelName                      (CPF_Parm)
// class APlayerController*       PC                             (CPF_Parm)
// TArray<struct FVector>         TravelPoints                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AAutoTestManager::GetTravelLocations(const struct FName& LevelName, class APlayerController* PC, TArray<struct FVector>* TravelPoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.GetTravelLocations");

	struct
	{
		struct FName                   LevelName;
		class APlayerController*       PC;
		TArray<struct FVector>         TravelPoints;
	} params;
	params.LevelName = LevelName;
	params.PC = PC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TravelPoints != nullptr)
		*TravelPoints = params.TravelPoints;
}


// Function Engine.AutoTestManager.HandlePerLoadedMapAudioStats
// (FUNC_Native, FUNC_Public)

void AAutoTestManager::HandlePerLoadedMapAudioStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.HandlePerLoadedMapAudioStats");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.DoSentinelActionPerLoadedMap
// (FUNC_Native, FUNC_Public)

void AAutoTestManager::DoSentinelActionPerLoadedMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoSentinelActionPerLoadedMap");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.DoTravelTheWorld
// (FUNC_Defined, FUNC_Public)

void AAutoTestManager::DoTravelTheWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.DoTravelTheWorld");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.EndSentinelRun
// (FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class EAutomatedRunResult> RunResult                      (CPF_Parm)

void AAutoTestManager::EndSentinelRun(TEnumAsByte<enum class EAutomatedRunResult> RunResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.EndSentinelRun");

	struct
	{
		TEnumAsByte<enum class EAutomatedRunResult> RunResult;
	} params;
	params.RunResult = RunResult;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.AddSentinelPerTimePeriodStats
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 InLocation                     (CPF_Const, CPF_Parm)
// struct FRotator                InRotation                     (CPF_Const, CPF_Parm)

void AAutoTestManager::AddSentinelPerTimePeriodStats(const struct FVector& InLocation, const struct FRotator& InRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.AddSentinelPerTimePeriodStats");

	struct
	{
		struct FVector                 InLocation;
		struct FRotator                InRotation;
	} params;
	params.InLocation = InLocation;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.BeginSentinelRun
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 TaskDescription                (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// struct FString                 TaskParameter                  (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// struct FString                 TagDesc                        (CPF_Const, CPF_Parm, CPF_NeedCtorLink)

void AAutoTestManager::BeginSentinelRun(const struct FString& TaskDescription, const struct FString& TaskParameter, const struct FString& TagDesc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.BeginSentinelRun");

	struct
	{
		struct FString                 TaskDescription;
		struct FString                 TaskParameter;
		struct FString                 TagDesc;
	} params;
	params.TaskDescription = TaskDescription;
	params.TaskParameter = TaskParameter;
	params.TagDesc = TagDesc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.InitializeOptions
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 Options                        (CPF_Parm, CPF_NeedCtorLink)

void AAutoTestManager::InitializeOptions(const struct FString& Options)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.InitializeOptions");

	struct
	{
		struct FString                 Options;
	} params;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.Timer
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AAutoTestManager::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.Timer");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AutoTestManager.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AAutoTestManager::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AutoTestManager.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverGroup.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ACoverGroup::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverGroup.ToggleGroup
// (FUNC_Native, FUNC_Public)

void ACoverGroup::ToggleGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.ToggleGroup");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverGroup.DisableGroup
// (FUNC_Native, FUNC_Public)

void ACoverGroup::DisableGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.DisableGroup");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverGroup.EnableGroup
// (FUNC_Native, FUNC_Public)

void ACoverGroup::EnableGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverGroup.EnableGroup");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileWriter.Destroyed
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AFileWriter::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileWriter.Logf
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 logString                      (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)

void AFileWriter::Logf(const struct FString& logString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.Logf");

	struct
	{
		struct FString                 logString;
	} params;
	params.logString = logString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileWriter.CloseFile
// (FUNC_Final, FUNC_Native, FUNC_Public)

void AFileWriter::CloseFile()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.CloseFile");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileWriter.OpenFile
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 InFilename                     (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// TEnumAsByte<enum class FWFileType> InFileType                     (CPF_OptionalParm, CPF_Parm)
// struct FString                 InExtension                    (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           bUnique                        (CPF_OptionalParm, CPF_Parm)
// bool                           bIncludeTimeStamp              (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AFileWriter::OpenFile(const struct FString& InFilename, TEnumAsByte<enum class FWFileType> InFileType, const struct FString& InExtension, bool bUnique, bool bIncludeTimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileWriter.OpenFile");

	struct
	{
		struct FString                 InFilename;
		TEnumAsByte<enum class FWFileType> InFileType;
		struct FString                 InExtension;
		bool                           bUnique;
		bool                           bIncludeTimeStamp;
		bool                           ReturnValue;
	} params;
	params.InFilename = InFilename;
	params.InFileType = InFileType;
	params.InExtension = InExtension;
	params.bUnique = bUnique;
	params.bIncludeTimeStamp = bIncludeTimeStamp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FileLog.CloseLog
// (FUNC_Defined, FUNC_Public)

void AFileLog::CloseLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileLog.CloseLog");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileLog.OpenLog
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 LogFilename                    (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// struct FString                 extension                      (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           bUnique                        (CPF_OptionalParm, CPF_Parm)

void AFileLog::OpenLog(const struct FString& LogFilename, const struct FString& extension, bool bUnique)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileLog.OpenLog");

	struct
	{
		struct FString                 LogFilename;
		struct FString                 extension;
		bool                           bUnique;
	} params;
	params.LogFilename = LogFilename;
	params.extension = extension;
	params.bUnique = bUnique;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ClientMapLoadFail
// (FUNC_Event, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// struct FString                 MapName                        (CPF_Parm, CPF_NeedCtorLink)

void AGameInfo::ClientMapLoadFail(const struct FUniqueNetId& PlayerID, const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ClientMapLoadFail");

	struct
	{
		struct FUniqueNetId            PlayerID;
		struct FString                 MapName;
	} params;
	params.PlayerID = PlayerID;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ClearOnlineDelegates
// (FUNC_Public)

void AGameInfo::ClearOnlineDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ClearOnlineDelegates");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.InitCrowdPopulationManager
// (FUNC_Defined, FUNC_Public)

void AGameInfo::InitCrowdPopulationManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitCrowdPopulationManager");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnEngineHasLoaded
// (FUNC_Event, FUNC_Public)

void AGameInfo::OnEngineHasLoaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnEngineHasLoaded");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnDestroyOnlineGameComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void AGameInfo::OnDestroyOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnDestroyOnlineGameComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StandbyCheatDetected
// (FUNC_Event, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class EStandbyType> StandbyType                    (CPF_Parm)

void AGameInfo::StandbyCheatDetected(TEnumAsByte<enum class EStandbyType> StandbyType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StandbyCheatDetected");

	struct
	{
		TEnumAsByte<enum class EStandbyType> StandbyType;
	} params;
	params.StandbyType = StandbyType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.EnableStandbyCheatDetection
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bIsEnabled                     (CPF_Parm)

void AGameInfo::EnableStandbyCheatDetection(bool bIsEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EnableStandbyCheatDetection");

	struct
	{
		bool                           bIsEnabled;
	} params;
	params.bIsEnabled = bIsEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.BeginBVT
// (FUNC_Defined, FUNC_Simulated, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 TagDesc                        (CPF_OptionalParm, CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)

void AGameInfo::BeginBVT(const struct FString& TagDesc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BeginBVT");

	struct
	{
		struct FString                 TagDesc;
	} params;
	params.TagDesc = TagDesc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CheckForSentinelRun
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::CheckForSentinelRun()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckForSentinelRun");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ShouldAutoContinueToNextRound
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::ShouldAutoContinueToNextRound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldAutoContinueToNextRound");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsDoingASentinelRun
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::IsDoingASentinelRun()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsDoingASentinelRun");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsCheckingForMemLeaks
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::IsCheckingForMemLeaks()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsCheckingForMemLeaks");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsCheckingForFragmentation
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::IsCheckingForFragmentation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsCheckingForFragmentation");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsAutomatedPerfTesting
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::IsAutomatedPerfTesting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsAutomatedPerfTesting");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SetBandwidthLimit
// (FUNC_Exec, FUNC_Native, FUNC_Public)
// Parameters:
// float                          AsyncIOBandwidthLimit          (CPF_Parm)

void AGameInfo::SetBandwidthLimit(float AsyncIOBandwidthLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetBandwidthLimit");

	struct
	{
		float                          AsyncIOBandwidthLimit;
	} params;
	params.AsyncIOBandwidthLimit = AsyncIOBandwidthLimit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DoTravelTheWorld
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void AGameInfo::DoTravelTheWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DoTravelTheWorld");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.TellClientsToTravelToSession
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// class UClass*                  SearchClass                    (CPF_Parm)
// unsigned char                  PlatformSpecificInfo           (CPF_Parm)

void AGameInfo::TellClientsToTravelToSession(const struct FName& SessionName, class UClass* SearchClass, unsigned char PlatformSpecificInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TellClientsToTravelToSession");

	struct
	{
		struct FName                   SessionName;
		class UClass*                  SearchClass;
		unsigned char                  PlatformSpecificInfo;
	} params;
	params.SessionName = SessionName;
	params.SearchClass = SearchClass;
	params.PlatformSpecificInfo = PlatformSpecificInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.TellClientsPartyHostIsLeaving
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PartyHostPlayerId              (CPF_Parm)

void AGameInfo::TellClientsPartyHostIsLeaving(const struct FUniqueNetId& PartyHostPlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TellClientsPartyHostIsLeaving");

	struct
	{
		struct FUniqueNetId            PartyHostPlayerId;
	} params;
	params.PartyHostPlayerId = PartyHostPlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.TellClientsToReturnToPartyHost
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)

void AGameInfo::TellClientsToReturnToPartyHost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TellClientsToReturnToPartyHost");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnServerCreateComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void AGameInfo::OnServerCreateComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnServerCreateComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RegisterServer
// (FUNC_Defined, FUNC_Public)

void AGameInfo::RegisterServer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RegisterServer");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnLoginChange
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void AGameInfo::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnLoginChange");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnLoginFailed
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EOnlineServerConnectionStatus> ErrorCode                      (CPF_Parm)

void AGameInfo::OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<enum class EOnlineServerConnectionStatus> ErrorCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnLoginFailed");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EOnlineServerConnectionStatus> ErrorCode;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ErrorCode = ErrorCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ClearAutoLoginDelegates
// (FUNC_Defined, FUNC_Public)

void AGameInfo::ClearAutoLoginDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ClearAutoLoginDelegates");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ProcessServerLogin
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::ProcessServerLogin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessServerLogin");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.MatineeCancelled
// (FUNC_Event, FUNC_Public)

void AGameInfo::MatineeCancelled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.MatineeCancelled");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RecalculateSkillRating
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)

void AGameInfo::RecalculateSkillRating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RecalculateSkillRating");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.UpdateGameplayMuteList
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)

void AGameInfo::UpdateGameplayMuteList(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateGameplayMuteList");

	struct
	{
		class APlayerController*       PC;
	} params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NotifyArbitratedMatchEnd
// (FUNC_Defined, FUNC_Public)

void AGameInfo::NotifyArbitratedMatchEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyArbitratedMatchEnd");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.MatchIsInProgress
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::MatchIsInProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.MatchIsInProgress");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ArbitrationRegistrationComplete
// (FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void AGameInfo::ArbitrationRegistrationComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ArbitrationRegistrationComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RegisterServerForArbitration
// (FUNC_Public)

void AGameInfo::RegisterServerForArbitration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RegisterServerForArbitration");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartArbitratedMatch
// (FUNC_Public)

void AGameInfo::StartArbitratedMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartArbitratedMatch");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartArbitrationRegistration
// (FUNC_Public)

void AGameInfo::StartArbitrationRegistration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartArbitrationRegistration");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ProcessClientRegistrationCompletion
// (FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void AGameInfo::ProcessClientRegistrationCompletion(class APlayerController* PC, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessClientRegistrationCompletion");

	struct
	{
		class APlayerController*       PC;
		bool                           bWasSuccessful;
	} params;
	params.PC = PC;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.UpdateGameSettingsCounts
// (FUNC_Defined, FUNC_Public)

void AGameInfo::UpdateGameSettingsCounts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateGameSettingsCounts");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetSeamlessTravelViewTarget
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)

void AGameInfo::SetSeamlessTravelViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetSeamlessTravelViewTarget");

	struct
	{
		class APlayerController*       PC;
	} params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.HandleSeamlessTravelPlayer
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// class AController*             C                              (CPF_Parm, CPF_OutParm)

void AGameInfo::HandleSeamlessTravelPlayer(class AController** C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.HandleSeamlessTravelPlayer");

	struct
	{
		class AController*             C;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (C != nullptr)
		*C = params.C;
}


// Function Engine.GameInfo.UpdateGameSettings
// (FUNC_Public)

void AGameInfo::UpdateGameSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateGameSettings");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PostSeamlessTravel
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AGameInfo::PostSeamlessTravel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostSeamlessTravel");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SwapPlayerControllers
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class APlayerController*       OldPC                          (CPF_Parm)
// class APlayerController*       NewPC                          (CPF_Parm)

void AGameInfo::SwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SwapPlayerControllers");

	struct
	{
		class APlayerController*       OldPC;
		class APlayerController*       NewPC;
	} params;
	params.OldPC = OldPC;
	params.NewPC = NewPC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetSeamlessTravelActorList
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// bool                           bToEntry                       (CPF_Parm)
// TArray<class AActor*>          ActorList                      (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AGameInfo::GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetSeamlessTravelActorList");

	struct
	{
		bool                           bToEntry;
		TArray<class AActor*>          ActorList;
	} params;
	params.bToEntry = bToEntry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActorList != nullptr)
		*ActorList = params.ActorList;
}


// Function Engine.GameInfo.OverridePRI
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)
// class APlayerReplicationInfo*  OldPRI                         (CPF_Parm)

void AGameInfo::OverridePRI(class APlayerController* PC, class APlayerReplicationInfo* OldPRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OverridePRI");

	struct
	{
		class APlayerController*       PC;
		class APlayerReplicationInfo*  OldPRI;
	} params;
	params.PC = PC;
	params.OldPRI = OldPRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.FindInactivePRI
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::FindInactivePRI(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FindInactivePRI");

	struct
	{
		class APlayerController*       PC;
		bool                           ReturnValue;
	} params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AddInactivePRI
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (CPF_Parm)
// class APlayerController*       PC                             (CPF_Parm)

void AGameInfo::AddInactivePRI(class APlayerReplicationInfo* PRI, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddInactivePRI");

	struct
	{
		class APlayerReplicationInfo*  PRI;
		class APlayerController*       PC;
	} params;
	params.PRI = PRI;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PostCommitMapChange
// (FUNC_Event, FUNC_Public)

void AGameInfo::PostCommitMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostCommitMapChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PreCommitMapChange
// (FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 PreviousMapName                (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 NextMapName                    (CPF_Parm, CPF_NeedCtorLink)

void AGameInfo::PreCommitMapChange(const struct FString& PreviousMapName, const struct FString& NextMapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreCommitMapChange");

	struct
	{
		struct FString                 PreviousMapName;
		struct FString                 NextMapName;
	} params;
	params.PreviousMapName = PreviousMapName;
	params.NextMapName = NextMapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AllowPausing
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::AllowPausing(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllowPausing");

	struct
	{
		class APlayerController*       PC;
		bool                           ReturnValue;
	} params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AllowCheats
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::AllowCheats(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllowCheats");

	struct
	{
		class APlayerController*       P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AllowMutator
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 MutatorClassName               (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::STATIC_AllowMutator(const struct FString& MutatorClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllowMutator");

	struct
	{
		struct FString                 MutatorClassName;
		bool                           ReturnValue;
	} params;
	params.MutatorClassName = MutatorClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PlayerCanRestart
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       aPlayer                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::PlayerCanRestart(class APlayerController* aPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PlayerCanRestart");

	struct
	{
		class APlayerController*       aPlayer;
		bool                           ReturnValue;
	} params;
	params.aPlayer = aPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PlayerCanRestartGame
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       aPlayer                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::PlayerCanRestartGame(class APlayerController* aPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PlayerCanRestartGame");

	struct
	{
		class APlayerController*       aPlayer;
		bool                           ReturnValue;
	} params;
	params.aPlayer = aPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.DriverLeftVehicle
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AVehicle*                V                              (CPF_Parm)
// class APawn*                   P                              (CPF_Parm)

void AGameInfo::DriverLeftVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DriverLeftVehicle");

	struct
	{
		class AVehicle*                V;
		class APawn*                   P;
	} params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CanLeaveVehicle
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AVehicle*                V                              (CPF_Parm)
// class APawn*                   P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::CanLeaveVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanLeaveVehicle");

	struct
	{
		class AVehicle*                V;
		class APawn*                   P;
		bool                           ReturnValue;
	} params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.DriverEnteredVehicle
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AVehicle*                V                              (CPF_Parm)
// class APawn*                   P                              (CPF_Parm)

void AGameInfo::DriverEnteredVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DriverEnteredVehicle");

	struct
	{
		class AVehicle*                V;
		class APawn*                   P;
	} params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ModifyScoreKill
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Killer                         (CPF_Parm)
// class AController*             Other                          (CPF_Parm)

void AGameInfo::ModifyScoreKill(class AController* Killer, class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ModifyScoreKill");

	struct
	{
		class AController*             Killer;
		class AController*             Other;
	} params;
	params.Killer = Killer;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ScoreKill
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Killer                         (CPF_Parm)
// class AController*             Other                          (CPF_Parm)

void AGameInfo::ScoreKill(class AController* Killer, class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ScoreKill");

	struct
	{
		class AController*             Killer;
		class AController*             Other;
	} params;
	params.Killer = Killer;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CheckScore
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::CheckScore(class APlayerReplicationInfo* Scorer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckScore");

	struct
	{
		class APlayerReplicationInfo*  Scorer;
		bool                           ReturnValue;
	} params;
	params.Scorer = Scorer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ScoreObjective
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (CPF_Parm)
// int                            Score                          (CPF_Parm)

void AGameInfo::ScoreObjective(class APlayerReplicationInfo* Scorer, int Score)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ScoreObjective");

	struct
	{
		class APlayerReplicationInfo*  Scorer;
		int                            Score;
	} params;
	params.Scorer = Scorer;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AddObjectiveScore
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (CPF_Parm)
// int                            Score                          (CPF_Parm)

void AGameInfo::AddObjectiveScore(class APlayerReplicationInfo* Scorer, int Score)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddObjectiveScore");

	struct
	{
		class APlayerReplicationInfo*  Scorer;
		int                            Score;
	} params;
	params.Scorer = Scorer;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RatePlayerStart
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerStart*            P                              (CPF_Parm)
// unsigned char                  Team                           (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AGameInfo::RatePlayerStart(class APlayerStart* P, unsigned char Team, class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RatePlayerStart");

	struct
	{
		class APlayerStart*            P;
		unsigned char                  Team;
		class AController*             Player;
		float                          ReturnValue;
	} params;
	params.P = P;
	params.Team = Team;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ChoosePlayerStart
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AController*             Player                         (CPF_Parm)
// unsigned char                  InTeam                         (CPF_OptionalParm, CPF_Parm)
// class APlayerStart*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APlayerStart* AGameInfo::ChoosePlayerStart(class AController* Player, unsigned char InTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChoosePlayerStart");

	struct
	{
		class AController*             Player;
		unsigned char                  InTeam;
		class APlayerStart*            ReturnValue;
	} params;
	params.Player = Player;
	params.InTeam = InTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.FindPlayerStart
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AController*             Player                         (CPF_Parm)
// unsigned char                  InTeam                         (CPF_OptionalParm, CPF_Parm)
// struct FString                 IncomingName                   (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// class ANavigationPoint*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ANavigationPoint* AGameInfo::FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FindPlayerStart");

	struct
	{
		class AController*             Player;
		unsigned char                  InTeam;
		struct FString                 IncomingName;
		class ANavigationPoint*        ReturnValue;
	} params;
	params.Player = Player;
	params.InTeam = InTeam;
	params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ShouldSpawnAtStartSpot
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Player                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::ShouldSpawnAtStartSpot(class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldSpawnAtStartSpot");

	struct
	{
		class AController*             Player;
		bool                           ReturnValue;
	} params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.EndLogging
// (FUNC_Public)
// Parameters:
// struct FString                 Reason                         (CPF_Parm, CPF_NeedCtorLink)

void AGameInfo::EndLogging(const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EndLogging");

	struct
	{
		struct FString                 Reason;
	} params;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GameEventsPoll
// (FUNC_Public)

void AGameInfo::GameEventsPoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GameEventsPoll");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.EndOnlineGame
// (FUNC_Defined, FUNC_Public)

void AGameInfo::EndOnlineGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EndOnlineGame");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PerformEndGameHandling
// (FUNC_Defined, FUNC_Public)

void AGameInfo::PerformEndGameHandling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PerformEndGameHandling");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.EndGame
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  Winner                         (CPF_Parm)
// struct FString                 Reason                         (CPF_Parm, CPF_NeedCtorLink)

void AGameInfo::EndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EndGame");

	struct
	{
		class APlayerReplicationInfo*  Winner;
		struct FString                 Reason;
	} params;
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.WriteOnlinePlayerScores
// (FUNC_Defined, FUNC_Public)

void AGameInfo::WriteOnlinePlayerScores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.WriteOnlinePlayerScores");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.WriteOnlineStats
// (FUNC_Defined, FUNC_Public)

void AGameInfo::WriteOnlineStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.WriteOnlineStats");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CheckEndGame
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  Winner                         (CPF_Parm)
// struct FString                 Reason                         (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckEndGame");

	struct
	{
		class APlayerReplicationInfo*  Winner;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CheckModifiedEndGame
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  Winner                         (CPF_Parm)
// struct FString                 Reason                         (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::CheckModifiedEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckModifiedEndGame");

	struct
	{
		class APlayerReplicationInfo*  Winner;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.BroadcastLocalizedTeam
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            TeamIndex                      (CPF_Parm)
// class AActor*                  Sender                         (CPF_Parm)
// class UClass*                  Message                        (CPF_Parm)
// int                            Switch                         (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_OptionalParm, CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm, CPF_Parm)

void AGameInfo::BroadcastLocalizedTeam(int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastLocalizedTeam");

	struct
	{
		int                            TeamIndex;
		class AActor*                  Sender;
		class UClass*                  Message;
		int                            Switch;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		class UObject*                 OptionalObject;
	} params;
	params.TeamIndex = TeamIndex;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.BroadcastLocalized
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  Sender                         (CPF_Parm)
// class UClass*                  Message                        (CPF_Parm)
// int                            Switch                         (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_OptionalParm, CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm, CPF_Parm)

void AGameInfo::BroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastLocalized");

	struct
	{
		class AActor*                  Sender;
		class UClass*                  Message;
		int                            Switch;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		class UObject*                 OptionalObject;
	} params;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.BroadcastTeam
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AController*             Sender                         (CPF_Parm)
// struct FString                 msg                            (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// struct FName                   Type                           (CPF_OptionalParm, CPF_Parm)

void AGameInfo::BroadcastTeam(class AController* Sender, const struct FString& msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastTeam");

	struct
	{
		class AController*             Sender;
		struct FString                 msg;
		struct FName                   Type;
	} params;
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Broadcast
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  Sender                         (CPF_Parm)
// struct FString                 msg                            (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// struct FName                   Type                           (CPF_OptionalParm, CPF_Parm)

void AGameInfo::Broadcast(class AActor* Sender, const struct FString& msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Broadcast");

	struct
	{
		class AActor*                  Sender;
		struct FString                 msg;
		struct FName                   Type;
	} params;
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RestartGame
// (FUNC_Defined, FUNC_Public)

void AGameInfo::RestartGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RestartGame");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetTravelType
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::GetTravelType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetTravelType");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetNextMap
// (FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AGameInfo::GetNextMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNextMap");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SendPlayer
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       aPlayer                        (CPF_Parm)
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)

void AGameInfo::SendPlayer(class APlayerController* aPlayer, const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendPlayer");

	struct
	{
		class APlayerController*       aPlayer;
		struct FString                 URL;
	} params;
	params.aPlayer = aPlayer;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PickTeam
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  Current                        (CPF_Parm)
// class AController*             C                              (CPF_Parm)
// unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

unsigned char AGameInfo::PickTeam(unsigned char Current, class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PickTeam");

	struct
	{
		unsigned char                  Current;
		class AController*             C;
		unsigned char                  ReturnValue;
	} params;
	params.Current = Current;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ChangeTeam
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Other                          (CPF_Parm)
// int                            N                              (CPF_Parm)
// bool                           bNewTeam                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::ChangeTeam(class AController* Other, int N, bool bNewTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChangeTeam");

	struct
	{
		class AController*             Other;
		int                            N;
		bool                           bNewTeam;
		bool                           ReturnValue;
	} params;
	params.Other = Other;
	params.N = N;
	params.bNewTeam = bNewTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ChangeName
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Other                          (CPF_Parm)
// struct FString                 S                              (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// bool                           bNameChange                    (CPF_Parm)

void AGameInfo::ChangeName(class AController* Other, const struct FString& S, bool bNameChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChangeName");

	struct
	{
		class AController*             Other;
		struct FString                 S;
		bool                           bNameChange;
	} params;
	params.Other = Other;
	params.S = S;
	params.bNameChange = bNameChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DiscardInventory
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// class AController*             Killer                         (CPF_OptionalParm, CPF_Parm)

void AGameInfo::DiscardInventory(class APawn* Other, class AController* Killer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DiscardInventory");

	struct
	{
		class APawn*                   Other;
		class AController*             Killer;
	} params;
	params.Other = Other;
	params.Killer = Killer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PickupQuery
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// class UClass*                  ItemClass                      (CPF_Parm)
// class AActor*                  Pickup                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::PickupQuery(class APawn* Other, class UClass* ItemClass, class AActor* Pickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PickupQuery");

	struct
	{
		class APawn*                   Other;
		class UClass*                  ItemClass;
		class AActor*                  Pickup;
		bool                           ReturnValue;
	} params;
	params.Other = Other;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ShouldRespawn
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APickupFactory*          Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::ShouldRespawn(class APickupFactory* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldRespawn");

	struct
	{
		class APickupFactory*          Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CheckRelevance
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::CheckRelevance(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckRelevance");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ReduceDamage
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            Damage                         (CPF_Parm, CPF_OutParm)
// class APawn*                   injured                        (CPF_Parm)
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm, CPF_OutParm)
// class UClass*                  DamageType                     (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)

void AGameInfo::ReduceDamage(class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ReduceDamage");

	struct
	{
		int                            Damage;
		class APawn*                   injured;
		class AController*             InstigatedBy;
		struct FVector                 HitLocation;
		struct FVector                 Momentum;
		class UClass*                  DamageType;
		class AActor*                  DamageCauser;
	} params;
	params.injured = injured;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
}


// Function Engine.GameInfo.CanSpectate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       Viewer                         (CPF_Parm)
// class APlayerReplicationInfo*  ViewTarget                     (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::CanSpectate(class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanSpectate");

	struct
	{
		class APlayerController*       Viewer;
		class APlayerReplicationInfo*  ViewTarget;
		bool                           ReturnValue;
	} params;
	params.Viewer = Viewer;
	params.ViewTarget = ViewTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.KickBan
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 S                              (CPF_Parm, CPF_NeedCtorLink)

void AGameInfo::KickBan(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KickBan");

	struct
	{
		struct FString                 S;
	} params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Kick
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 S                              (CPF_Parm, CPF_NeedCtorLink)

void AGameInfo::Kick(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Kick");

	struct
	{
		struct FString                 S;
	} params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.BroadcastDeathMessage
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Killer                         (CPF_Parm)
// class AController*             Other                          (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)

void AGameInfo::BroadcastDeathMessage(class AController* Killer, class AController* Other, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastDeathMessage");

	struct
	{
		class AController*             Killer;
		class AController*             Other;
		class UClass*                  DamageType;
	} params;
	params.Killer = Killer;
	params.Other = Other;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PreventDeath
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   KilledPawn                     (CPF_Parm)
// class AController*             Killer                         (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::PreventDeath(class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreventDeath");

	struct
	{
		class APawn*                   KilledPawn;
		class AController*             Killer;
		class UClass*                  DamageType;
		struct FVector                 HitLocation;
		bool                           ReturnValue;
	} params;
	params.KilledPawn = KilledPawn;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.Killed
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Killer                         (CPF_Parm)
// class AController*             KilledPlayer                   (CPF_Parm)
// class APawn*                   KilledPawn                     (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)

void AGameInfo::Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Killed");

	struct
	{
		class AController*             Killer;
		class AController*             KilledPlayer;
		class APawn*                   KilledPawn;
		class UClass*                  DamageType;
	} params;
	params.Killer = Killer;
	params.KilledPlayer = KilledPlayer;
	params.KilledPawn = KilledPawn;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NotifyKilled
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Killer                         (CPF_Parm)
// class AController*             Killed                         (CPF_Parm)
// class APawn*                   KilledPawn                     (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)

void AGameInfo::NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyKilled");

	struct
	{
		class AController*             Killer;
		class AController*             Killed;
		class APawn*                   KilledPawn;
		class UClass*                  DamageType;
	} params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.KilledPawn = KilledPawn;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetPlayerDefaults
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   PlayerPawn                     (CPF_Parm)

void AGameInfo::SetPlayerDefaults(class APawn* PlayerPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetPlayerDefaults");

	struct
	{
		class APawn*                   PlayerPawn;
	} params;
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Mutate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 MutateString                   (CPF_Parm, CPF_NeedCtorLink)
// class APlayerController*       Sender                         (CPF_Parm)

void AGameInfo::Mutate(const struct FString& MutateString, class APlayerController* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Mutate");

	struct
	{
		struct FString                 MutateString;
		class APlayerController*       Sender;
	} params;
	params.MutateString = MutateString;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AddDefaultInventory
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void AGameInfo::AddDefaultInventory(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddDefaultInventory");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AcceptInventory
// (FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   PlayerPawn                     (CPF_Parm)

void AGameInfo::AcceptInventory(class APawn* PlayerPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AcceptInventory");

	struct
	{
		class APawn*                   PlayerPawn;
	} params;
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.UnregisterPlayer
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)

void AGameInfo::UnregisterPlayer(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UnregisterPlayer");

	struct
	{
		class APlayerController*       PC;
	} params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Logout
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Exiting                        (CPF_Parm)

void AGameInfo::Logout(class AController* Exiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Logout");

	struct
	{
		class AController*             Exiting;
	} params;
	params.Exiting = Exiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PreExit
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AGameInfo::PreExit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreExit");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CalculatedNetSpeed
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int AGameInfo::CalculatedNetSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CalculatedNetSpeed");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.UpdateNetSpeeds
// (FUNC_Defined, FUNC_Public)

void AGameInfo::UpdateNetSpeeds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateNetSpeeds");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PostLogin
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APlayerController*       NewPlayer                      (CPF_Parm)

void AGameInfo::PostLogin(class APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostLogin");

	struct
	{
		class APlayerController*       NewPlayer;
	} params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.UpdateBestNextHosts
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)

void AGameInfo::UpdateBestNextHosts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdateBestNextHosts");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.BestNextHostSort
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       A                              (CPF_Parm)
// class APlayerController*       B                              (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int AGameInfo::BestNextHostSort(class APlayerController* A, class APlayerController* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BestNextHostSort");

	struct
	{
		class APlayerController*       A;
		class APlayerController*       B;
		int                            ReturnValue;
	} params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GenericPlayerInitialization
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             C                              (CPF_Parm)

void AGameInfo::GenericPlayerInitialization(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GenericPlayerInitialization");

	struct
	{
		class AController*             C;
	} params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ReplicateStreamingStatus
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)

void AGameInfo::ReplicateStreamingStatus(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ReplicateStreamingStatus");

	struct
	{
		class APlayerController*       PC;
	} params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetDefaultPlayerClass
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             C                              (CPF_Parm)
// class UClass*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UClass* AGameInfo::GetDefaultPlayerClass(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetDefaultPlayerClass");

	struct
	{
		class AController*             C;
		class UClass*                  ReturnValue;
	} params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SpawnDefaultPawnFor
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AController*             NewPlayer                      (CPF_Parm)
// class ANavigationPoint*        StartSpot                      (CPF_Parm)
// class APawn*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APawn* AGameInfo::SpawnDefaultPawnFor(class AController* NewPlayer, class ANavigationPoint* StartSpot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SpawnDefaultPawnFor");

	struct
	{
		class AController*             NewPlayer;
		class ANavigationPoint*        StartSpot;
		class APawn*                   ReturnValue;
	} params;
	params.NewPlayer = NewPlayer;
	params.StartSpot = StartSpot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.RestartPlayer
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             NewPlayer                      (CPF_Parm)

void AGameInfo::RestartPlayer(class AController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RestartPlayer");

	struct
	{
		class AController*             NewPlayer;
	} params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartBots
// (FUNC_Defined, FUNC_Public)

void AGameInfo::StartBots()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartBots");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartHumans
// (FUNC_Defined, FUNC_Public)

void AGameInfo::StartHumans()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartHumans");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnStartOnlineGameComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void AGameInfo::OnStartOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnStartOnlineGameComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartOnlineGame
// (FUNC_Defined, FUNC_Public)

void AGameInfo::StartOnlineGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartOnlineGame");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartMatch
// (FUNC_Defined, FUNC_Public)

void AGameInfo::StartMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartMatch");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Login
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// struct FString                 Portal                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Options                        (CPF_Parm, CPF_NeedCtorLink)
// struct FUniqueNetId            UniqueId                       (CPF_Const, CPF_Parm)
// struct FString                 ErrorMessage                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// class APlayerController*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APlayerController* AGameInfo::Login(const struct FString& Portal, const struct FString& Options, const struct FUniqueNetId& UniqueId, struct FString* ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Login");

	struct
	{
		struct FString                 Portal;
		struct FString                 Options;
		struct FUniqueNetId            UniqueId;
		struct FString                 ErrorMessage;
		class APlayerController*       ReturnValue;
	} params;
	params.Portal = Portal;
	params.Options = Options;
	params.UniqueId = UniqueId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SpawnPlayerController
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FVector                 SpawnLocation                  (CPF_Parm)
// struct FRotator                SpawnRotation                  (CPF_Parm)
// class APlayerController*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APlayerController* AGameInfo::SpawnPlayerController(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SpawnPlayerController");

	struct
	{
		struct FVector                 SpawnLocation;
		struct FRotator                SpawnRotation;
		class APlayerController*       ReturnValue;
	} params;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetNextPlayerID
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int AGameInfo::GetNextPlayerID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNextPlayerID");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AtCapacity
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bSpectator                     (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::AtCapacity(bool bSpectator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AtCapacity");

	struct
	{
		bool                           bSpectator;
		bool                           ReturnValue;
	} params;
	params.bSpectator = bSpectator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.RejectLogin
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UPlayer*                 InPlayer                       (CPF_Parm)
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void AGameInfo::STATIC_RejectLogin(class UPlayer* InPlayer, const struct FString& Error)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RejectLogin");

	struct
	{
		class UPlayer*                 InPlayer;
		struct FString                 Error;
	} params;
	params.InPlayer = InPlayer;
	params.Error = Error;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OnRejectLogin
// (FUNC_Event, FUNC_Public)
// Parameters:
// class UPlayer*                 InPlayer                       (CPF_Parm)
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void AGameInfo::OnRejectLogin(class UPlayer* InPlayer, const struct FString& Error)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OnRejectLogin");

	struct
	{
		class UPlayer*                 InPlayer;
		struct FString                 Error;
	} params;
	params.InPlayer = InPlayer;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ResumeLogin
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UPlayer*                 InPlayer                       (CPF_Parm)

void AGameInfo::STATIC_ResumeLogin(class UPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ResumeLogin");

	struct
	{
		class UPlayer*                 InPlayer;
	} params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PauseLogin
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UPlayer*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UPlayer* AGameInfo::STATIC_PauseLogin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PauseLogin");

	struct
	{
		class UPlayer*                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PreLogin
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 Options                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Address                        (CPF_Parm, CPF_NeedCtorLink)
// struct FUniqueNetId            UniqueId                       (CPF_Const, CPF_Parm)
// bool                           bSupportsAuth                  (CPF_Parm)
// struct FString                 ErrorMessage                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AGameInfo::PreLogin(const struct FString& Options, const struct FString& Address, const struct FUniqueNetId& UniqueId, bool bSupportsAuth, struct FString* ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreLogin");

	struct
	{
		struct FString                 Options;
		struct FString                 Address;
		struct FUniqueNetId            UniqueId;
		bool                           bSupportsAuth;
		struct FString                 ErrorMessage;
	} params;
	params.Options = Options;
	params.Address = Address;
	params.UniqueId = UniqueId;
	params.bSupportsAuth = bSupportsAuth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;
}


// Function Engine.GameInfo.RequiresPassword
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::RequiresPassword()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RequiresPassword");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ProcessClientTravel
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FGuid                   NextMapGuid                    (CPF_Parm)
// bool                           bSeamless                      (CPF_Parm)
// bool                           bAbsolute                      (CPF_Parm)
// class APlayerController*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APlayerController* AGameInfo::ProcessClientTravel(const struct FGuid& NextMapGuid, bool bSeamless, bool bAbsolute, struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessClientTravel");

	struct
	{
		struct FString                 URL;
		struct FGuid                   NextMapGuid;
		bool                           bSeamless;
		bool                           bAbsolute;
		class APlayerController*       ReturnValue;
	} params;
	params.NextMapGuid = NextMapGuid;
	params.bSeamless = bSeamless;
	params.bAbsolute = bAbsolute;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ProcessServerTravel
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)
// bool                           bAbsolute                      (CPF_OptionalParm, CPF_Parm)

void AGameInfo::ProcessServerTravel(const struct FString& URL, bool bAbsolute)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessServerTravel");

	struct
	{
		struct FString                 URL;
		bool                           bAbsolute;
	} params;
	params.URL = URL;
	params.bAbsolute = bAbsolute;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RemoveMutator
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AMutator*                MutatorToRemove                (CPF_Parm)

void AGameInfo::RemoveMutator(class AMutator* MutatorToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RemoveMutator");

	struct
	{
		class AMutator*                MutatorToRemove;
	} params;
	params.MutatorToRemove = MutatorToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AddMutator
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 mutname                        (CPF_Parm, CPF_NeedCtorLink)
// bool                           bUserAdded                     (CPF_OptionalParm, CPF_Parm)

void AGameInfo::AddMutator(const struct FString& mutname, bool bUserAdded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddMutator");

	struct
	{
		struct FString                 mutname;
		bool                           bUserAdded;
	} params;
	params.mutname = mutname;
	params.bUserAdded = bUserAdded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NotifyPendingConnectionLost
// (FUNC_Event, FUNC_Public)

void AGameInfo::NotifyPendingConnectionLost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyPendingConnectionLost");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.InitGame
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 Options                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ErrorMessage                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AGameInfo::InitGame(const struct FString& Options, struct FString* ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitGame");

	struct
	{
		struct FString                 Options;
		struct FString                 ErrorMessage;
	} params;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;
}


// Function Engine.GameInfo.SetGameType
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 MapName                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Options                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Portal                         (CPF_Parm, CPF_NeedCtorLink)
// class UClass*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UClass* AGameInfo::STATIC_SetGameType(const struct FString& MapName, const struct FString& Options, const struct FString& Portal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetGameType");

	struct
	{
		struct FString                 MapName;
		struct FString                 Options;
		struct FString                 Portal;
		class UClass*                  ReturnValue;
	} params;
	params.MapName = MapName;
	params.Options = Options;
	params.Portal = Portal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetDefaultGameClassPath
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 MapName                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Options                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Portal                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AGameInfo::STATIC_GetDefaultGameClassPath(const struct FString& MapName, const struct FString& Options, const struct FString& Portal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetDefaultGameClassPath");

	struct
	{
		struct FString                 MapName;
		struct FString                 Options;
		struct FString                 Portal;
		struct FString                 ReturnValue;
	} params;
	params.MapName = MapName;
	params.Options = Options;
	params.Portal = Portal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetFloatOption
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 Options                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ParseString                    (CPF_Parm, CPF_NeedCtorLink)
// float                          CurrentValue                   (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AGameInfo::STATIC_GetFloatOption(const struct FString& Options, const struct FString& ParseString, float CurrentValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetFloatOption");

	struct
	{
		struct FString                 Options;
		struct FString                 ParseString;
		float                          CurrentValue;
		float                          ReturnValue;
	} params;
	params.Options = Options;
	params.ParseString = ParseString;
	params.CurrentValue = CurrentValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetIntOption
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 Options                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ParseString                    (CPF_Parm, CPF_NeedCtorLink)
// int                            CurrentValue                   (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int AGameInfo::STATIC_GetIntOption(const struct FString& Options, const struct FString& ParseString, int CurrentValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetIntOption");

	struct
	{
		struct FString                 Options;
		struct FString                 ParseString;
		int                            CurrentValue;
		int                            ReturnValue;
	} params;
	params.Options = Options;
	params.ParseString = ParseString;
	params.CurrentValue = CurrentValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SanitizePlayerName
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 PlayerName                     (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AGameInfo::STATIC_SanitizePlayerName(const struct FString& PlayerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SanitizePlayerName");

	struct
	{
		struct FString                 PlayerName;
		struct FString                 ReturnValue;
	} params;
	params.PlayerName = PlayerName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.DecodeURL
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 Encoded                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AGameInfo::STATIC_DecodeURL(const struct FString& Encoded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DecodeURL");

	struct
	{
		struct FString                 Encoded;
		struct FString                 ReturnValue;
	} params;
	params.Encoded = Encoded;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.EncodeURL
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 Decoded                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AGameInfo::STATIC_EncodeURL(const struct FString& Decoded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EncodeURL");

	struct
	{
		struct FString                 Decoded;
		struct FString                 ReturnValue;
	} params;
	params.Decoded = Decoded;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.HasOption
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 Options                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 InKey                          (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::STATIC_HasOption(const struct FString& Options, const struct FString& InKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.HasOption");

	struct
	{
		struct FString                 Options;
		struct FString                 InKey;
		bool                           ReturnValue;
	} params;
	params.Options = Options;
	params.InKey = InKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ParseOption
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 Options                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 InKey                          (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AGameInfo::STATIC_ParseOption(const struct FString& Options, const struct FString& InKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ParseOption");

	struct
	{
		struct FString                 Options;
		struct FString                 InKey;
		struct FString                 ReturnValue;
	} params;
	params.Options = Options;
	params.InKey = InKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetKeyValue
// (FUNC_Defined, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 Pair                           (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Key                            (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 Value                          (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AGameInfo::STATIC_GetKeyValue(const struct FString& Pair, struct FString* Key, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetKeyValue");

	struct
	{
		struct FString                 Pair;
		struct FString                 Key;
		struct FString                 Value;
	} params;
	params.Pair = Pair;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Key != nullptr)
		*Key = params.Key;
	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.GameInfo.GrabOption
// (FUNC_Defined, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 Options                        (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 Result                         (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::STATIC_GrabOption(struct FString* Options, struct FString* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GrabOption");

	struct
	{
		struct FString                 Options;
		struct FString                 Result;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Options != nullptr)
		*Options = params.Options;
	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SetGameSpeed
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          T                              (CPF_Parm)

void AGameInfo::SetGameSpeed(float T)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetGameSpeed");

	struct
	{
		float                          T;
	} params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DebugPause
// (FUNC_Defined, FUNC_Public)

void AGameInfo::DebugPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DebugPause");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ForceClearUnpauseDelegates
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  PauseActor                     (CPF_Parm)

void AGameInfo::ForceClearUnpauseDelegates(class AActor* PauseActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ForceClearUnpauseDelegates");

	struct
	{
		class AActor*                  PauseActor;
	} params;
	params.PauseActor = PauseActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ClearPause
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AGameInfo::ClearPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ClearPause");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetPause
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)
// struct FScriptDelegate         CanUnpauseDelegate             (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::SetPause(class APlayerController* PC, const struct FScriptDelegate& CanUnpauseDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetPause");

	struct
	{
		class APlayerController*       PC;
		struct FScriptDelegate         CanUnpauseDelegate;
		bool                           ReturnValue;
	} params;
	params.PC = PC;
	params.CanUnpauseDelegate = CanUnpauseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CanUnpause
// (FUNC_Defined, FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::CanUnpause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanUnpause");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetNumPlayers
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int AGameInfo::GetNumPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNumPlayers");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetNetworkNumber
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AGameInfo::GetNetworkNumber()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNetworkNumber");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.InitGameReplicationInfo
// (FUNC_Defined, FUNC_Public)

void AGameInfo::InitGameReplicationInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitGameReplicationInfo");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ForceKickPlayer
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)
// struct FString                 KickReason                     (CPF_Parm, CPF_NeedCtorLink)

void AGameInfo::ForceKickPlayer(class APlayerController* PC, const struct FString& KickReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ForceKickPlayer");

	struct
	{
		class APlayerController*       PC;
		struct FString                 KickReason;
	} params;
	params.PC = PC;
	params.KickReason = KickReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.KickIdler
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)

void AGameInfo::KickIdler(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KickIdler");

	struct
	{
		class APlayerController*       PC;
	} params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GameEnding
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AGameInfo::GameEnding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GameEnding");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NotifyNavigationChanged
// (FUNC_Public)
// Parameters:
// class ANavigationPoint*        N                              (CPF_Parm)

void AGameInfo::NotifyNavigationChanged(class ANavigationPoint* N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyNavigationChanged");

	struct
	{
		class ANavigationPoint*        N;
	} params;
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DoNavFearCostFallOff
// (FUNC_Final, FUNC_Native, FUNC_Public)

void AGameInfo::DoNavFearCostFallOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DoNavFearCostFallOff");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ShouldStartInCinematicMode
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            OutHidePlayer                  (CPF_Parm, CPF_OutParm)
// int                            OutHideHud                     (CPF_Parm, CPF_OutParm)
// int                            OutDisableMovement             (CPF_Parm, CPF_OutParm)
// int                            OutDisableTurning              (CPF_Parm, CPF_OutParm)
// int                            OutDisableInput                (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::ShouldStartInCinematicMode(int* OutHidePlayer, int* OutHideHud, int* OutDisableMovement, int* OutDisableTurning, int* OutDisableInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldStartInCinematicMode");

	struct
	{
		int                            OutHidePlayer;
		int                            OutHideHud;
		int                            OutDisableMovement;
		int                            OutDisableTurning;
		int                            OutDisableInput;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutHidePlayer != nullptr)
		*OutHidePlayer = params.OutHidePlayer;
	if (OutHideHud != nullptr)
		*OutHideHud = params.OutHideHud;
	if (OutDisableMovement != nullptr)
		*OutDisableMovement = params.OutDisableMovement;
	if (OutDisableTurning != nullptr)
		*OutDisableTurning = params.OutDisableTurning;
	if (OutDisableInput != nullptr)
		*OutDisableInput = params.OutDisableInput;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ResetLevel
// (FUNC_Defined, FUNC_Public)

void AGameInfo::ResetLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ResetLevel");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ShouldReset
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  ActorToReset                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::ShouldReset(class AActor* ActorToReset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldReset");

	struct
	{
		class AActor*                  ActorToReset;
		bool                           ReturnValue;
	} params;
	params.ActorToReset = ActorToReset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.Reset
// (FUNC_Defined, FUNC_Public)

void AGameInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DisplayDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm, CPF_OutParm)
// float                          out_YPos                       (CPF_Parm, CPF_OutParm)

void AGameInfo::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DisplayDebug");

	struct
	{
		class AHUD*                    HUD;
		float                          out_YL;
		float                          out_YPos;
	} params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.GameInfo.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AGameInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetCoverReplicator
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class ACoverReplicator*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ACoverReplicator* AGameInfo::GetCoverReplicator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetCoverReplicator");

	struct
	{
		class ACoverReplicator*        ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PreBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AGameInfo::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetMapCommonPackageName
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 InFilename                     (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 OutCommonPackageName           (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::GetMapCommonPackageName(struct FString* InFilename, struct FString* OutCommonPackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetMapCommonPackageName");

	struct
	{
		struct FString                 InFilename;
		struct FString                 OutCommonPackageName;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InFilename != nullptr)
		*InFilename = params.InFilename;
	if (OutCommonPackageName != nullptr)
		*OutCommonPackageName = params.OutCommonPackageName;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetSupportedGameTypes
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 InFilename                     (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FGameTypePrefix         OutGameType                    (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           bCheckExt                      (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameInfo::GetSupportedGameTypes(bool bCheckExt, struct FString* InFilename, struct FGameTypePrefix* OutGameType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetSupportedGameTypes");

	struct
	{
		struct FString                 InFilename;
		struct FGameTypePrefix         OutGameType;
		bool                           bCheckExt;
		bool                           ReturnValue;
	} params;
	params.bCheckExt = bCheckExt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InFilename != nullptr)
		*InFilename = params.InFilename;
	if (OutGameType != nullptr)
		*OutGameType = params.OutGameType;

	return params.ReturnValue;
}


// Function Engine.Mutator.NetDamage
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            OriginalDamage                 (CPF_Parm)
// int                            Damage                         (CPF_Parm, CPF_OutParm)
// class APawn*                   injured                        (CPF_Parm)
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm, CPF_OutParm)
// class UClass*                  DamageType                     (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)

void AMutator::NetDamage(int OriginalDamage, class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.NetDamage");

	struct
	{
		int                            OriginalDamage;
		int                            Damage;
		class APawn*                   injured;
		class AController*             InstigatedBy;
		struct FVector                 HitLocation;
		struct FVector                 Momentum;
		class UClass*                  DamageType;
		class AActor*                  DamageCauser;
	} params;
	params.OriginalDamage = OriginalDamage;
	params.injured = injured;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
}


// Function Engine.Mutator.ScoreKill
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Killer                         (CPF_Parm)
// class AController*             Killed                         (CPF_Parm)

void AMutator::ScoreKill(class AController* Killer, class AController* Killed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ScoreKill");

	struct
	{
		class AController*             Killer;
		class AController*             Killed;
	} params;
	params.Killer = Killer;
	params.Killed = Killed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.ScoreObjective
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (CPF_Parm)
// int                            Score                          (CPF_Parm)

void AMutator::ScoreObjective(class APlayerReplicationInfo* Scorer, int Score)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ScoreObjective");

	struct
	{
		class APlayerReplicationInfo*  Scorer;
		int                            Score;
	} params;
	params.Scorer = Scorer;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.PreventDeath
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   Killed                         (CPF_Parm)
// class AController*             Killer                         (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AMutator::PreventDeath(class APawn* Killed, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.PreventDeath");

	struct
	{
		class APawn*                   Killed;
		class AController*             Killer;
		class UClass*                  DamageType;
		struct FVector                 HitLocation;
		bool                           ReturnValue;
	} params;
	params.Killed = Killed;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.OverridePickupQuery
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// class UClass*                  ItemClass                      (CPF_Parm)
// class AActor*                  Pickup                         (CPF_Parm)
// unsigned char                  bAllowPickup                   (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AMutator::OverridePickupQuery(class APawn* Other, class UClass* ItemClass, class AActor* Pickup, unsigned char* bAllowPickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.OverridePickupQuery");

	struct
	{
		class APawn*                   Other;
		class UClass*                  ItemClass;
		class AActor*                  Pickup;
		unsigned char                  bAllowPickup;
		bool                           ReturnValue;
	} params;
	params.Other = Other;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bAllowPickup != nullptr)
		*bAllowPickup = params.bAllowPickup;

	return params.ReturnValue;
}


// Function Engine.Mutator.CheckEndGame
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  Winner                         (CPF_Parm)
// struct FString                 Reason                         (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AMutator::CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CheckEndGame");

	struct
	{
		class APlayerReplicationInfo*  Winner;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.HandleRestartGame
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AMutator::HandleRestartGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.HandleRestartGame");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.FindPlayerStart
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AController*             Player                         (CPF_Parm)
// unsigned char                  InTeam                         (CPF_OptionalParm, CPF_Parm)
// struct FString                 IncomingName                   (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// class ANavigationPoint*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ANavigationPoint* AMutator::FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.FindPlayerStart");

	struct
	{
		class AController*             Player;
		unsigned char                  InTeam;
		struct FString                 IncomingName;
		class ANavigationPoint*        ReturnValue;
	} params;
	params.Player = Player;
	params.InTeam = InTeam;
	params.IncomingName = IncomingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.GetSeamlessTravelActorList
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// bool                           bToEntry                       (CPF_Parm)
// TArray<class AActor*>          ActorList                      (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AMutator::GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.GetSeamlessTravelActorList");

	struct
	{
		bool                           bToEntry;
		TArray<class AActor*>          ActorList;
	} params;
	params.bToEntry = bToEntry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActorList != nullptr)
		*ActorList = params.ActorList;
}


// Function Engine.Mutator.InitMutator
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 Options                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ErrorMessage                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AMutator::InitMutator(const struct FString& Options, struct FString* ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.InitMutator");

	struct
	{
		struct FString                 Options;
		struct FString                 ErrorMessage;
	} params;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ErrorMessage != nullptr)
		*ErrorMessage = params.ErrorMessage;
}


// Function Engine.Mutator.DriverLeftVehicle
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AVehicle*                V                              (CPF_Parm)
// class APawn*                   P                              (CPF_Parm)

void AMutator::DriverLeftVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.DriverLeftVehicle");

	struct
	{
		class AVehicle*                V;
		class APawn*                   P;
	} params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.CanLeaveVehicle
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AVehicle*                V                              (CPF_Parm)
// class APawn*                   P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AMutator::CanLeaveVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CanLeaveVehicle");

	struct
	{
		class AVehicle*                V;
		class APawn*                   P;
		bool                           ReturnValue;
	} params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.DriverEnteredVehicle
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AVehicle*                V                              (CPF_Parm)
// class APawn*                   P                              (CPF_Parm)

void AMutator::DriverEnteredVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.DriverEnteredVehicle");

	struct
	{
		class AVehicle*                V;
		class APawn*                   P;
	} params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.NotifyLogin
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             NewPlayer                      (CPF_Parm)

void AMutator::NotifyLogin(class AController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.NotifyLogin");

	struct
	{
		class AController*             NewPlayer;
	} params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.NotifyLogout
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Exiting                        (CPF_Parm)

void AMutator::NotifyLogout(class AController* Exiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.NotifyLogout");

	struct
	{
		class AController*             Exiting;
	} params;
	params.Exiting = Exiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.CheckReplacement
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AMutator::CheckReplacement(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CheckReplacement");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.CheckRelevance
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AMutator::CheckRelevance(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CheckRelevance");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.IsRelevant
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AMutator::IsRelevant(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.IsRelevant");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.AlwaysKeep
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AMutator::AlwaysKeep(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.AlwaysKeep");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.AddMutator
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AMutator*                M                              (CPF_Parm)

void AMutator::AddMutator(class AMutator* M)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.AddMutator");

	struct
	{
		class AMutator*                M;
	} params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.ModifyPlayer
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)

void AMutator::ModifyPlayer(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ModifyPlayer");

	struct
	{
		class APawn*                   Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.ModifyLogin
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 Portal                         (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 Options                        (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AMutator::ModifyLogin(struct FString* Portal, struct FString* Options)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ModifyLogin");

	struct
	{
		struct FString                 Portal;
		struct FString                 Options;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Portal != nullptr)
		*Portal = params.Portal;
	if (Options != nullptr)
		*Options = params.Options;
}


// Function Engine.Mutator.Mutate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 MutateString                   (CPF_Parm, CPF_NeedCtorLink)
// class APlayerController*       Sender                         (CPF_Parm)

void AMutator::Mutate(const struct FString& MutateString, class APlayerController* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.Mutate");

	struct
	{
		struct FString                 MutateString;
		class APlayerController*       Sender;
	} params;
	params.MutateString = MutateString;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.Destroyed
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AMutator::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.MutatorIsAllowed
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AMutator::MutatorIsAllowed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.MutatorIsAllowed");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.PreBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AMutator::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.PreBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PotentialClimbWatcher.Tick
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void APotentialClimbWatcher::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PotentialClimbWatcher.Tick");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Route.MoveOntoRoutePath
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// TEnumAsByte<enum class ERouteDirection> RouteDirection                 (CPF_OptionalParm, CPF_Parm)
// float                          DistFudgeFactor                (CPF_OptionalParm, CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int ARoute::MoveOntoRoutePath(class APawn* P, TEnumAsByte<enum class ERouteDirection> RouteDirection, float DistFudgeFactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Route.MoveOntoRoutePath");

	struct
	{
		class APawn*                   P;
		TEnumAsByte<enum class ERouteDirection> RouteDirection;
		float                          DistFudgeFactor;
		int                            ReturnValue;
	} params;
	params.P = P;
	params.RouteDirection = RouteDirection;
	params.DistFudgeFactor = DistFudgeFactor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Route.ResolveRouteIndex
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            Idx                            (CPF_Parm)
// TEnumAsByte<enum class ERouteDirection> RouteDirection                 (CPF_Parm)
// unsigned char                  out_bComplete                  (CPF_Parm, CPF_OutParm)
// unsigned char                  out_bReverse                   (CPF_Parm, CPF_OutParm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int ARoute::ResolveRouteIndex(int Idx, TEnumAsByte<enum class ERouteDirection> RouteDirection, unsigned char* out_bComplete, unsigned char* out_bReverse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Route.ResolveRouteIndex");

	struct
	{
		int                            Idx;
		TEnumAsByte<enum class ERouteDirection> RouteDirection;
		unsigned char                  out_bComplete;
		unsigned char                  out_bReverse;
		int                            ReturnValue;
	} params;
	params.Idx = Idx;
	params.RouteDirection = RouteDirection;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_bComplete != nullptr)
		*out_bComplete = params.out_bComplete;
	if (out_bReverse != nullptr)
		*out_bReverse = params.out_bReverse;

	return params.ReturnValue;
}


// Function Engine.Inventory.GetLocalString
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Switch                         (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_OptionalParm, CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AInventory::STATIC_GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GetLocalString");

	struct
	{
		int                            Switch;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		struct FString                 ReturnValue;
	} params;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.DropFrom
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FVector                 StartLocation                  (CPF_Parm)
// struct FVector                 StartVelocity                  (CPF_Parm)

void AInventory::DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.DropFrom");

	struct
	{
		struct FVector                 StartLocation;
		struct FVector                 StartVelocity;
	} params;
	params.StartLocation = StartLocation;
	params.StartVelocity = StartVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.DenyPickupQuery
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UClass*                  ItemClass                      (CPF_Parm)
// class AActor*                  Pickup                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AInventory::DenyPickupQuery(class UClass* ItemClass, class AActor* Pickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.DenyPickupQuery");

	struct
	{
		class UClass*                  ItemClass;
		class AActor*                  Pickup;
		bool                           ReturnValue;
	} params;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.ItemRemovedFromInvManager
// (FUNC_Public)

void AInventory::ItemRemovedFromInvManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.ItemRemovedFromInvManager");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.ClientGivenTo
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// class APawn*                   NewOwner                       (CPF_Parm)
// bool                           bDoNotActivate                 (CPF_Parm)

void AInventory::ClientGivenTo(class APawn* NewOwner, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.ClientGivenTo");

	struct
	{
		class APawn*                   NewOwner;
		bool                           bDoNotActivate;
	} params;
	params.NewOwner = NewOwner;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.GivenTo
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APawn*                   thisPawn                       (CPF_Parm)
// bool                           bDoNotActivate                 (CPF_OptionalParm, CPF_Parm)

void AInventory::GivenTo(class APawn* thisPawn, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GivenTo");

	struct
	{
		class APawn*                   thisPawn;
		bool                           bDoNotActivate;
	} params;
	params.thisPawn = thisPawn;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.AnnouncePickup
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)

void AInventory::AnnouncePickup(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.AnnouncePickup");

	struct
	{
		class APawn*                   Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.GiveTo
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)

void AInventory::GiveTo(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GiveTo");

	struct
	{
		class APawn*                   Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.DetourWeight
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// float                          PathWeight                     (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AInventory::STATIC_DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.DetourWeight");

	struct
	{
		class APawn*                   Other;
		float                          PathWeight;
		float                          ReturnValue;
	} params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.BotDesireability
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class AActor*                  PickupHolder                   (CPF_Parm)
// class APawn*                   P                              (CPF_Parm)
// class AController*             C                              (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AInventory::STATIC_BotDesireability(class AActor* PickupHolder, class APawn* P, class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.BotDesireability");

	struct
	{
		class AActor*                  PickupHolder;
		class APawn*                   P;
		class AController*             C;
		float                          ReturnValue;
	} params;
	params.PickupHolder = PickupHolder;
	params.P = P;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.Destroyed
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AInventory::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.GetHumanReadableName
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AInventory::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GetHumanReadableName");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetTargetDistance
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AWeapon::GetTargetDistance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetTargetDistance");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.CacheAIController
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AWeapon::CacheAIController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CacheAIController");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.WeaponIsDown
// (FUNC_Simulated, FUNC_Public)

void AWeapon::WeaponIsDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.WeaponIsDown");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.StillFiring
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// unsigned char                  FireMode                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWeapon::StillFiring(unsigned char FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StillFiring");

	struct
	{
		unsigned char                  FireMode;
		bool                           ReturnValue;
	} params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ShouldRefire
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWeapon::ShouldRefire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ShouldRefire");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.NotifyWeaponFinishedFiring
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  FireMode                       (CPF_Parm)

void AWeapon::NotifyWeaponFinishedFiring(unsigned char FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.NotifyWeaponFinishedFiring");

	struct
	{
		unsigned char                  FireMode;
	} params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.NotifyWeaponFired
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  FireMode                       (CPF_Parm)

void AWeapon::NotifyWeaponFired(unsigned char FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.NotifyWeaponFired");

	struct
	{
		unsigned char                  FireMode;
	} params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.HandleFinishedFiring
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AWeapon::HandleFinishedFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HandleFinishedFiring");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.TryPutDown
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWeapon::TryPutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TryPutDown");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetPhysicalFireStartLoc
// (FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 AimDir                         (CPF_OptionalParm, CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AWeapon::GetPhysicalFireStartLoc(const struct FVector& AimDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetPhysicalFireStartLoc");

	struct
	{
		struct FVector                 AimDir;
		struct FVector                 ReturnValue;
	} params;
	params.AimDir = AimDir;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetMuzzleLoc
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AWeapon::GetMuzzleLoc()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetMuzzleLoc");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.CustomFire
// (FUNC_Simulated, FUNC_Public)

void AWeapon::CustomFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CustomFire");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ProjectileFire
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AProjectile*             ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AProjectile* AWeapon::ProjectileFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ProjectileFire");

	struct
	{
		class AProjectile*             ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ProcessInstantHit
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  FiringMode                     (CPF_Parm)
// struct FImpactInfo             Impact                         (CPF_Parm)
// int                            NumHits                        (CPF_OptionalParm, CPF_Parm)

void AWeapon::ProcessInstantHit(unsigned char FiringMode, const struct FImpactInfo& Impact, int NumHits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ProcessInstantHit");

	struct
	{
		unsigned char                  FiringMode;
		struct FImpactInfo             Impact;
		int                            NumHits;
	} params;
	params.FiringMode = FiringMode;
	params.Impact = Impact;
	params.NumHits = NumHits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.InstantFire
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)

void AWeapon::InstantFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.InstantFire");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.PassThroughDamage
// (FUNC_Defined, FUNC_Simulated, FUNC_Static, FUNC_Public)
// Parameters:
// class AActor*                  HitActor                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWeapon::STATIC_PassThroughDamage(class AActor* HitActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PassThroughDamage");

	struct
	{
		class AActor*                  HitActor;
		bool                           ReturnValue;
	} params;
	params.HitActor = HitActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.CalcWeaponFire
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// struct FVector                 StartTrace                     (CPF_Parm)
// struct FVector                 EndTrace                       (CPF_Parm)
// TArray<struct FImpactInfo>     ImpactList                     (CPF_OptionalParm, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FVector                 Extent                         (CPF_OptionalParm, CPF_Parm)
// struct FImpactInfo             ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FImpactInfo AWeapon::CalcWeaponFire(const struct FVector& StartTrace, const struct FVector& EndTrace, const struct FVector& Extent, TArray<struct FImpactInfo>* ImpactList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CalcWeaponFire");

	struct
	{
		struct FVector                 StartTrace;
		struct FVector                 EndTrace;
		TArray<struct FImpactInfo>     ImpactList;
		struct FVector                 Extent;
		struct FImpactInfo             ReturnValue;
	} params;
	params.StartTrace = StartTrace;
	params.EndTrace = EndTrace;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ImpactList != nullptr)
		*ImpactList = params.ImpactList;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetTraceOwner
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AActor* AWeapon::GetTraceOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetTraceOwner");

	struct
	{
		class AActor*                  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetTraceRange
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AWeapon::GetTraceRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetTraceRange");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetAdjustedAim
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FVector                 StartFireLoc                   (CPF_Parm)
// struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FRotator AWeapon::GetAdjustedAim(const struct FVector& StartFireLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetAdjustedAim");

	struct
	{
		struct FVector                 StartFireLoc;
		struct FRotator                ReturnValue;
	} params;
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.FireAmmunition
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AWeapon::FireAmmunition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.FireAmmunition");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.FireModeUpdated
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// unsigned char                  FiringMode                     (CPF_Parm)
// bool                           bViaReplication                (CPF_Parm)

void AWeapon::FireModeUpdated(unsigned char FiringMode, bool bViaReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.FireModeUpdated");

	struct
	{
		unsigned char                  FiringMode;
		bool                           bViaReplication;
	} params;
	params.FiringMode = FiringMode;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.SetCurrentFireMode
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// unsigned char                  FiringModeNum                  (CPF_Parm)

void AWeapon::SetCurrentFireMode(unsigned char FiringModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SetCurrentFireMode");

	struct
	{
		unsigned char                  FiringModeNum;
	} params;
	params.FiringModeNum = FiringModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.SendToFiringState
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_Parm)

void AWeapon::SendToFiringState(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SendToFiringState");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ForceEndFire
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AWeapon::ForceEndFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ForceEndFire");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.EndFire
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_Parm)

void AWeapon::EndFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.EndFire");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ServerStopFire
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_Parm)

void AWeapon::ServerStopFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ServerStopFire");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.StopFire
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_Parm)

void AWeapon::StopFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StopFire");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.BeginFire
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_Parm)

void AWeapon::BeginFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.BeginFire");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ServerStartFire
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_Parm)

void AWeapon::ServerStartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ServerStartFire");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.StartFire
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_Parm)

void AWeapon::StartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StartFire");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ClientWeaponSet
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// bool                           bOptionalSet                   (CPF_Parm)
// bool                           bDoNotActivate                 (CPF_OptionalParm, CPF_Parm)

void AWeapon::ClientWeaponSet(bool bOptionalSet, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClientWeaponSet");

	struct
	{
		bool                           bOptionalSet;
		bool                           bDoNotActivate;
	} params;
	params.bOptionalSet = bOptionalSet;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ClientGivenTo
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// class APawn*                   NewOwner                       (CPF_Parm)
// bool                           bDoNotActivate                 (CPF_Parm)

void AWeapon::ClientGivenTo(class APawn* NewOwner, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClientGivenTo");

	struct
	{
		class APawn*                   NewOwner;
		bool                           bDoNotActivate;
	} params;
	params.NewOwner = NewOwner;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.DetachWeapon
// (FUNC_Simulated, FUNC_Public)

void AWeapon::DetachWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DetachWeapon");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.AttachWeaponTo
// (FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class USkeletalMeshComponent*  MeshCpnt                       (CPF_Parm, CPF_EditInline)
// struct FName                   SocketName                     (CPF_OptionalParm, CPF_Parm)

void AWeapon::AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt, const struct FName& SocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.AttachWeaponTo");

	struct
	{
		class USkeletalMeshComponent*  MeshCpnt;
		struct FName                   SocketName;
	} params;
	params.MeshCpnt = MeshCpnt;
	params.SocketName = SocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ClearFlashLocation
// (FUNC_Defined, FUNC_Public)

void AWeapon::ClearFlashLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClearFlashLocation");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.SetFlashLocation
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FVector                 HitLocation                    (CPF_Parm)

void AWeapon::SetFlashLocation(const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SetFlashLocation");

	struct
	{
		struct FVector                 HitLocation;
	} params;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ClearFlashCount
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AWeapon::ClearFlashCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClearFlashCount");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.IncrementFlashCount
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AWeapon::IncrementFlashCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.IncrementFlashCount");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.WeaponEmpty
// (FUNC_Simulated, FUNC_Public)

void AWeapon::WeaponEmpty()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.WeaponEmpty");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.DenyPickupQuery
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UClass*                  ItemClass                      (CPF_Parm)
// class AActor*                  Pickup                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWeapon::DenyPickupQuery(class UClass* ItemClass, class AActor* Pickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DenyPickupQuery");

	struct
	{
		class UClass*                  ItemClass;
		class AActor*                  Pickup;
		bool                           ReturnValue;
	} params;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.PutDownWeapon
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AWeapon::PutDownWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PutDownWeapon");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.Activate
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AWeapon::Activate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.Activate");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.TimeWeaponEquipping
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AWeapon::TimeWeaponEquipping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TimeWeaponEquipping");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.TimeWeaponPutDown
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AWeapon::TimeWeaponPutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TimeWeaponPutDown");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.RefireCheckTimer
// (FUNC_Simulated, FUNC_Public)

void AWeapon::RefireCheckTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.RefireCheckTimer");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.TimeWeaponFiring
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_Parm)

void AWeapon::TimeWeaponFiring(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.TimeWeaponFiring");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.GetFireInterval
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AWeapon::GetFireInterval(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetFireInterval");

	struct
	{
		unsigned char                  FireModeNum;
		float                          ReturnValue;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.StopFireEffects
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_Parm)

void AWeapon::StopFireEffects(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StopFireEffects");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.PlayFireEffects
// (FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_OptionalParm, CPF_Parm)

void AWeapon::PlayFireEffects(unsigned char FireModeNum, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PlayFireEffects");

	struct
	{
		unsigned char                  FireModeNum;
		struct FVector                 HitLocation;
	} params;
	params.FireModeNum = FireModeNum;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.StopWeaponAnimation
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AWeapon::StopWeaponAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.StopWeaponAnimation");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.PlayWeaponAnimation
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   Sequence                       (CPF_Parm)
// float                          fDesiredDuration               (CPF_Parm)
// bool                           bLoop                          (CPF_OptionalParm, CPF_Parm)
// class USkeletalMeshComponent*  SkelMesh                       (CPF_OptionalParm, CPF_Parm, CPF_EditInline)

void AWeapon::PlayWeaponAnimation(const struct FName& Sequence, float fDesiredDuration, bool bLoop, class USkeletalMeshComponent* SkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PlayWeaponAnimation");

	struct
	{
		struct FName                   Sequence;
		float                          fDesiredDuration;
		bool                           bLoop;
		class USkeletalMeshComponent*  SkelMesh;
	} params;
	params.Sequence = Sequence;
	params.fDesiredDuration = fDesiredDuration;
	params.bLoop = bLoop;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.GetWeaponAnimNodeSeq
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class UAnimNodeSequence*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UAnimNodeSequence* AWeapon::GetWeaponAnimNodeSeq()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetWeaponAnimNodeSeq");

	struct
	{
		class UAnimNodeSequence*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.FireOnRelease
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWeapon::FireOnRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.FireOnRelease");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.CanAttack
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWeapon::CanAttack(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CanAttack");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetWeaponRating
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AWeapon::GetWeaponRating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetWeaponRating");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetAIRating
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AWeapon::GetAIRating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetAIRating");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.MaxRange
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AWeapon::MaxRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.MaxRange");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.AddSpread
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FRotator                BaseAim                        (CPF_Parm)
// struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FRotator AWeapon::AddSpread(const struct FRotator& BaseAim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.AddSpread");

	struct
	{
		struct FRotator                BaseAim;
		struct FRotator                ReturnValue;
	} params;
	params.BaseAim = BaseAim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetProjectileClass
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UClass*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UClass* AWeapon::GetProjectileClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetProjectileClass");

	struct
	{
		class UClass*                  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ClearPendingFire
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// int                            FireMode                       (CPF_Parm)

void AWeapon::ClearPendingFire(int FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClearPendingFire");

	struct
	{
		int                            FireMode;
	} params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.SetPendingFire
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// int                            FireMode                       (CPF_Parm)

void AWeapon::SetPendingFire(int FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.SetPendingFire");

	struct
	{
		int                            FireMode;
	} params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.PendingFire
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// int                            FireMode                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWeapon::PendingFire(int FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.PendingFire");

	struct
	{
		int                            FireMode;
		bool                           ReturnValue;
	} params;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.GetPendingFireLength
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int AWeapon::GetPendingFireLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetPendingFireLength");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.HasAnyAmmo
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWeapon::HasAnyAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HasAnyAmmo");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.HasAmmo
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_Parm)
// int                            Amount                         (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWeapon::HasAmmo(unsigned char FireModeNum, int Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HasAmmo");

	struct
	{
		unsigned char                  FireModeNum;
		int                            Amount;
		bool                           ReturnValue;
	} params;
	params.FireModeNum = FireModeNum;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.AddAmmo
// (FUNC_Public)
// Parameters:
// int                            Amount                         (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int AWeapon::AddAmmo(int Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.AddAmmo");

	struct
	{
		int                            Amount;
		int                            ReturnValue;
	} params;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ConsumeAmmo
// (FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_Parm)

void AWeapon::ConsumeAmmo(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ConsumeAmmo");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.GetWeaponDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FString>         DebugInfo                      (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AWeapon::GetWeaponDebug(TArray<struct FString>* DebugInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.GetWeaponDebug");

	struct
	{
		TArray<struct FString>         DebugInfo;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DebugInfo != nullptr)
		*DebugInfo = params.DebugInfo;
}


// Function Engine.Weapon.DisplayDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm, CPF_OutParm)
// float                          out_YPos                       (CPF_Parm, CPF_OutParm)

void AWeapon::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DisplayDebug");

	struct
	{
		class AHUD*                    HUD;
		float                          out_YL;
		float                          out_YPos;
	} params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Weapon.DenyClientWeaponSet
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWeapon::DenyClientWeaponSet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DenyClientWeaponSet");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.IsFiring
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWeapon::IsFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.IsFiring");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.ClientWeaponThrown
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)

void AWeapon::ClientWeaponThrown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ClientWeaponThrown");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.CanThrow
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWeapon::CanThrow()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.CanThrow");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.DropFrom
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FVector                 StartLocation                  (CPF_Parm)
// struct FVector                 StartVelocity                  (CPF_Parm)

void AWeapon::DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DropFrom");

	struct
	{
		struct FVector                 StartLocation;
		struct FVector                 StartVelocity;
	} params;
	params.StartLocation = StartLocation;
	params.StartVelocity = StartVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.DoOverridePrevWeapon
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWeapon::DoOverridePrevWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DoOverridePrevWeapon");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.DoOverrideNextWeapon
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AWeapon::DoOverrideNextWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.DoOverrideNextWeapon");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Weapon.HolderDied
// (FUNC_Defined, FUNC_Public)

void AWeapon::HolderDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.HolderDied");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.ItemRemovedFromInvManager
// (FUNC_Defined, FUNC_Public)

void AWeapon::ItemRemovedFromInvManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.ItemRemovedFromInvManager");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Weapon.Destroyed
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AWeapon::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Weapon.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.UpdateController
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AInventoryManager::UpdateController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.UpdateController");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.ClientWeaponSet
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AWeapon*                 NewWeapon                      (CPF_Parm)
// bool                           bOptionalSet                   (CPF_Parm)
// bool                           bDoNotActivate                 (CPF_OptionalParm, CPF_Parm)

void AInventoryManager::ClientWeaponSet(class AWeapon* NewWeapon, bool bOptionalSet, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ClientWeaponSet");

	struct
	{
		class AWeapon*                 NewWeapon;
		bool                           bOptionalSet;
		bool                           bDoNotActivate;
	} params;
	params.NewWeapon = NewWeapon;
	params.bOptionalSet = bOptionalSet;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.ChangedWeapon
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AInventoryManager::ChangedWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ChangedWeapon");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.ClearPendingWeapon
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AInventoryManager::ClearPendingWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ClearPendingWeapon");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.CancelWeaponChange
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AInventoryManager::CancelWeaponChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.CancelWeaponChange");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.SetPendingWeapon
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 DesiredWeapon                  (CPF_Parm)

void AInventoryManager::SetPendingWeapon(class AWeapon* DesiredWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SetPendingWeapon");

	struct
	{
		class AWeapon*                 DesiredWeapon;
	} params;
	params.DesiredWeapon = DesiredWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.InternalSetCurrentWeapon
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Private)
// Parameters:
// class AWeapon*                 DesiredWeapon                  (CPF_Parm)

void AInventoryManager::InternalSetCurrentWeapon(class AWeapon* DesiredWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.InternalSetCurrentWeapon");

	struct
	{
		class AWeapon*                 DesiredWeapon;
	} params;
	params.DesiredWeapon = DesiredWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.ServerSetCurrentWeapon
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)
// Parameters:
// class AWeapon*                 DesiredWeapon                  (CPF_Parm)

void AInventoryManager::ServerSetCurrentWeapon(class AWeapon* DesiredWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ServerSetCurrentWeapon");

	struct
	{
		class AWeapon*                 DesiredWeapon;
	} params;
	params.DesiredWeapon = DesiredWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.SetCurrentWeapon
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// class AWeapon*                 DesiredWeapon                  (CPF_Parm)

void AInventoryManager::SetCurrentWeapon(class AWeapon* DesiredWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SetCurrentWeapon");

	struct
	{
		class AWeapon*                 DesiredWeapon;
	} params;
	params.DesiredWeapon = DesiredWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.NextWeapon
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AInventoryManager::NextWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.NextWeapon");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.PrevWeapon
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AInventoryManager::PrevWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.PrevWeapon");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.SwitchToBestWeapon
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bForceADifferentWeapon         (CPF_OptionalParm, CPF_Parm)

void AInventoryManager::SwitchToBestWeapon(bool bForceADifferentWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SwitchToBestWeapon");

	struct
	{
		bool                           bForceADifferentWeapon;
	} params;
	params.bForceADifferentWeapon = bForceADifferentWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.GetBestWeapon
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bForceADifferentWeapon         (CPF_OptionalParm, CPF_Parm)
// class AWeapon*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AWeapon* AInventoryManager::GetBestWeapon(bool bForceADifferentWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.GetBestWeapon");

	struct
	{
		bool                           bForceADifferentWeapon;
		class AWeapon*                 ReturnValue;
	} params;
	params.bForceADifferentWeapon = bForceADifferentWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.GetWeaponRatingFor
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 W                              (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AInventoryManager::GetWeaponRatingFor(class AWeapon* W)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.GetWeaponRatingFor");

	struct
	{
		class AWeapon*                 W;
		float                          ReturnValue;
	} params;
	params.W = W;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.DrawHUD
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// class AHUD*                    H                              (CPF_Parm)

void AInventoryManager::DrawHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.DrawHUD");

	struct
	{
		class AHUD*                    H;
	} params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.OwnerDied
// (FUNC_Defined, FUNC_Public)

void AInventoryManager::OwnerDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.OwnerDied");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.DiscardInventory
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasDefaults)

void AInventoryManager::DiscardInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.DiscardInventory");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.RemoveFromInventory
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AInventory*              ItemToRemove                   (CPF_Parm)

void AInventoryManager::RemoveFromInventory(class AInventory* ItemToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.RemoveFromInventory");

	struct
	{
		class AInventory*              ItemToRemove;
	} params;
	params.ItemToRemove = ItemToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.AddInventory
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AInventory*              NewItem                        (CPF_Parm)
// bool                           bDoNotActivate                 (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AInventoryManager::AddInventory(class AInventory* NewItem, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.AddInventory");

	struct
	{
		class AInventory*              NewItem;
		bool                           bDoNotActivate;
		bool                           ReturnValue;
	} params;
	params.NewItem = NewItem;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.CreateInventory
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UClass*                  NewInventoryItemClass          (CPF_Parm)
// bool                           bDoNotActivate                 (CPF_OptionalParm, CPF_Parm)
// class AInventory*              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AInventory* AInventoryManager::CreateInventory(class UClass* NewInventoryItemClass, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.CreateInventory");

	struct
	{
		class UClass*                  NewInventoryItemClass;
		bool                           bDoNotActivate;
		class AInventory*              ReturnValue;
	} params;
	params.NewInventoryItemClass = NewInventoryItemClass;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.FindInventoryType
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UClass*                  DesiredClass                   (CPF_Parm)
// bool                           bAllowSubclass                 (CPF_OptionalParm, CPF_Parm)
// class AInventory*              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AInventory* AInventoryManager::FindInventoryType(class UClass* DesiredClass, bool bAllowSubclass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.FindInventoryType");

	struct
	{
		class UClass*                  DesiredClass;
		bool                           bAllowSubclass;
		class AInventory*              ReturnValue;
	} params;
	params.DesiredClass = DesiredClass;
	params.bAllowSubclass = bAllowSubclass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.HandlePickupQuery
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UClass*                  ItemClass                      (CPF_Parm)
// class AActor*                  Pickup                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AInventoryManager::HandlePickupQuery(class UClass* ItemClass, class AActor* Pickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.HandlePickupQuery");

	struct
	{
		class UClass*                  ItemClass;
		class AActor*                  Pickup;
		bool                           ReturnValue;
	} params;
	params.ItemClass = ItemClass;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.Destroyed
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AInventoryManager::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.SetupFor
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void AInventoryManager::SetupFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SetupFor");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.InventoryActors
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class AInventory*              Inv                            (CPF_Parm, CPF_OutParm)

void AInventoryManager::InventoryActors(class UClass* BaseClass, class AInventory** Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.InventoryActors");

	struct
	{
		class UClass*                  BaseClass;
		class AInventory*              Inv;
	} params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Inv != nullptr)
		*Inv = params.Inv;
}


// Function Engine.InventoryManager.ClearAllPendingFire
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)

void AInventoryManager::ClearAllPendingFire(class AWeapon* InWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ClearAllPendingFire");

	struct
	{
		class AWeapon*                 InWeapon;
	} params;
	params.InWeapon = InWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.IsPendingFire
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)
// int                            InFiringMode                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AInventoryManager::IsPendingFire(class AWeapon* InWeapon, int InFiringMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.IsPendingFire");

	struct
	{
		class AWeapon*                 InWeapon;
		int                            InFiringMode;
		bool                           ReturnValue;
	} params;
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.ClearPendingFire
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)
// int                            InFiringMode                   (CPF_Parm)

void AInventoryManager::ClearPendingFire(class AWeapon* InWeapon, int InFiringMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.ClearPendingFire");

	struct
	{
		class AWeapon*                 InWeapon;
		int                            InFiringMode;
	} params;
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.SetPendingFire
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)
// int                            InFiringMode                   (CPF_Parm)

void AInventoryManager::SetPendingFire(class AWeapon* InWeapon, int InFiringMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.SetPendingFire");

	struct
	{
		class AWeapon*                 InWeapon;
		int                            InFiringMode;
	} params;
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryManager.GetPendingFireLength
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int AInventoryManager::GetPendingFireLength(class AWeapon* InWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.GetPendingFireLength");

	struct
	{
		class AWeapon*                 InWeapon;
		int                            ReturnValue;
	} params;
	params.InWeapon = InWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventoryManager.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AInventoryManager::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryManager.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.CheckPriorityRefresh
// (FUNC_Defined, FUNC_Public)

void AMatineeActor::CheckPriorityRefresh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.CheckPriorityRefresh");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.Update
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AMatineeActor::Update()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.Update");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MatineeActor.AddAIGroupActor
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UInterpGroupInstAI*      AIGroupInst                    (CPF_Parm)

void AMatineeActor::AddAIGroupActor(class UInterpGroupInstAI* AIGroupInst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MatineeActor.AddAIGroupActor");

	struct
	{
		class UInterpGroupInstAI*      AIGroupInst;
	} params;
	params.AIGroupInst = AIGroupInst;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPoint.GetDebugAbbrev
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString ANavigationPoint::GetDebugAbbrev()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetDebugAbbrev");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.ApplyCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ANavigationPoint_FCheckpointRecord Record                         (CPF_Const, CPF_Parm, CPF_OutParm)

void ANavigationPoint::ApplyCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.ApplyCheckpointRecord");

	struct
	{
		struct ANavigationPoint_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.NavigationPoint.CreateCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ANavigationPoint_FCheckpointRecord Record                         (CPF_Parm, CPF_OutParm)

void ANavigationPoint::CreateCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.CreateCheckpointRecord");

	struct
	{
		struct ANavigationPoint_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.NavigationPoint.ShouldSaveForCheckpoint
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ANavigationPoint::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.ShouldSaveForCheckpoint");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.ShutDown
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ANavigationPoint::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.ShutDown");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPoint.OnToggle
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ANavigationPoint::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.OnToggle");

	struct
	{
		class USeqAct_Toggle*          inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPoint.IsOnDifferentNetwork
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class ANavigationPoint*        Nav                            (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ANavigationPoint::IsOnDifferentNetwork(class ANavigationPoint* Nav)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.IsOnDifferentNetwork");

	struct
	{
		class ANavigationPoint*        Nav;
		bool                           ReturnValue;
	} params;
	params.Nav = Nav;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.GetAllNavInRadius
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AActor*                  ChkActor                       (CPF_Parm)
// struct FVector                 ChkPoint                       (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// TArray<class ANavigationPoint*> out_NavList                    (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           bSkipBlocked                   (CPF_OptionalParm, CPF_Parm)
// int                            inNetworkID                    (CPF_OptionalParm, CPF_Parm)
// struct FCylinder               MinSize                        (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ANavigationPoint::STATIC_GetAllNavInRadius(class AActor* ChkActor, const struct FVector& ChkPoint, float Radius, bool bSkipBlocked, int inNetworkID, const struct FCylinder& MinSize, TArray<class ANavigationPoint*>* out_NavList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetAllNavInRadius");

	struct
	{
		class AActor*                  ChkActor;
		struct FVector                 ChkPoint;
		float                          Radius;
		TArray<class ANavigationPoint*> out_NavList;
		bool                           bSkipBlocked;
		int                            inNetworkID;
		struct FCylinder               MinSize;
		bool                           ReturnValue;
	} params;
	params.ChkActor = ChkActor;
	params.ChkPoint = ChkPoint;
	params.Radius = Radius;
	params.bSkipBlocked = bSkipBlocked;
	params.inNetworkID = inNetworkID;
	params.MinSize = MinSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_NavList != nullptr)
		*out_NavList = params.out_NavList;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.GetNearestNavToPoint
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  ChkActor                       (CPF_Parm)
// struct FVector                 ChkPoint                       (CPF_Parm)
// class UClass*                  RequiredClass                  (CPF_OptionalParm, CPF_Parm)
// TArray<class ANavigationPoint*> ExcludeList                    (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// class ANavigationPoint*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ANavigationPoint* ANavigationPoint::STATIC_GetNearestNavToPoint(class AActor* ChkActor, const struct FVector& ChkPoint, class UClass* RequiredClass, TArray<class ANavigationPoint*> ExcludeList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetNearestNavToPoint");

	struct
	{
		class AActor*                  ChkActor;
		struct FVector                 ChkPoint;
		class UClass*                  RequiredClass;
		TArray<class ANavigationPoint*> ExcludeList;
		class ANavigationPoint*        ReturnValue;
	} params;
	params.ChkActor = ChkActor;
	params.ChkPoint = ChkPoint;
	params.RequiredClass = RequiredClass;
	params.ExcludeList = ExcludeList;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.GetNearestNavToActor
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  ChkActor                       (CPF_Parm)
// class UClass*                  RequiredClass                  (CPF_OptionalParm, CPF_Parm)
// TArray<class ANavigationPoint*> ExcludeList                    (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// float                          MinDist                        (CPF_OptionalParm, CPF_Parm)
// class ANavigationPoint*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ANavigationPoint* ANavigationPoint::STATIC_GetNearestNavToActor(class AActor* ChkActor, class UClass* RequiredClass, TArray<class ANavigationPoint*> ExcludeList, float MinDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetNearestNavToActor");

	struct
	{
		class AActor*                  ChkActor;
		class UClass*                  RequiredClass;
		TArray<class ANavigationPoint*> ExcludeList;
		float                          MinDist;
		class ANavigationPoint*        ReturnValue;
	} params;
	params.ChkActor = ChkActor;
	params.RequiredClass = RequiredClass;
	params.ExcludeList = ExcludeList;
	params.MinDist = MinDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.ProceedWithMove
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ANavigationPoint::ProceedWithMove(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.ProceedWithMove");

	struct
	{
		class APawn*                   Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.SuggestMovePreparation
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ANavigationPoint::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.SuggestMovePreparation");

	struct
	{
		class APawn*                   Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.DetourWeight
// (FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// float                          PathWeight                     (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float ANavigationPoint::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.DetourWeight");

	struct
	{
		class APawn*                   Other;
		float                          PathWeight;
		float                          ReturnValue;
	} params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.Accept
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Incoming                       (CPF_Parm)
// class AActor*                  Source                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ANavigationPoint::Accept(class AActor* Incoming, class AActor* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.Accept");

	struct
	{
		class AActor*                  Incoming;
		class AActor*                  Source;
		bool                           ReturnValue;
	} params;
	params.Incoming = Incoming;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.SpecialCost
// (FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Seeker                         (CPF_Parm)
// class UReachSpec*              Path                           (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int ANavigationPoint::SpecialCost(class APawn* Seeker, class UReachSpec* Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.SpecialCost");

	struct
	{
		class APawn*                   Seeker;
		class UReachSpec*              Path;
		int                            ReturnValue;
	} params;
	params.Seeker = Seeker;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.CanTeleport
// (FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  A                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ANavigationPoint::CanTeleport(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.CanTeleport");

	struct
	{
		class AActor*                  A;
		bool                           ReturnValue;
	} params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.IsUsableAnchorFor
// (FUNC_Native, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ANavigationPoint::IsUsableAnchorFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.IsUsableAnchorFor");

	struct
	{
		class APawn*                   P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.GetReachSpecTo
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class ANavigationPoint*        Nav                            (CPF_Parm)
// class UClass*                  SpecClass                      (CPF_OptionalParm, CPF_Parm)
// class UReachSpec*              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UReachSpec* ANavigationPoint::GetReachSpecTo(class ANavigationPoint* Nav, class UClass* SpecClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetReachSpecTo");

	struct
	{
		class ANavigationPoint*        Nav;
		class UClass*                  SpecClass;
		class UReachSpec*              ReturnValue;
	} params;
	params.Nav = Nav;
	params.SpecClass = SpecClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.GetBoundingCylinder
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          CollisionRadius                (CPF_Parm, CPF_OutParm)
// float                          CollisionHeight                (CPF_Parm, CPF_OutParm)

void ANavigationPoint::GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.GetBoundingCylinder");

	struct
	{
		float                          CollisionRadius;
		float                          CollisionHeight;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CollisionRadius != nullptr)
		*CollisionRadius = params.CollisionRadius;
	if (CollisionHeight != nullptr)
		*CollisionHeight = params.CollisionHeight;
}


// Function Engine.CoverLink.GetDebugAbbrev
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString ACoverLink::GetDebugAbbrev()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetDebugAbbrev");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetLocationDescription
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// TEnumAsByte<enum class ECoverLocationDescription> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class ECoverLocationDescription> ACoverLink::GetLocationDescription(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetLocationDescription");

	struct
	{
		int                            SlotIdx;
		TEnumAsByte<enum class ECoverLocationDescription> ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetDebugString
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString ACoverLink::GetDebugString(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetDebugString");

	struct
	{
		int                            SlotIdx;
		struct FString                 ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.AddCoverSlot
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 SlotLocation                   (CPF_Parm)
// struct FRotator                SlotRotation                   (CPF_Parm)
// int                            SlotIdx                        (CPF_OptionalParm, CPF_Parm)
// bool                           bForceSlotUpdate               (CPF_OptionalParm, CPF_Parm)
// class AScout*                  Scout                          (CPF_OptionalParm, CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int ACoverLink::AddCoverSlot(const struct FVector& SlotLocation, const struct FRotator& SlotRotation, int SlotIdx, bool bForceSlotUpdate, class AScout* Scout)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AddCoverSlot");

	struct
	{
		struct FVector                 SlotLocation;
		struct FRotator                SlotRotation;
		int                            SlotIdx;
		bool                           bForceSlotUpdate;
		class AScout*                  Scout;
		int                            ReturnValue;
	} params;
	params.SlotLocation = SlotLocation;
	params.SlotRotation = SlotRotation;
	params.SlotIdx = SlotIdx;
	params.bForceSlotUpdate = bForceSlotUpdate;
	params.Scout = Scout;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.BreakFracturedMeshes
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FVector                 Origin                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// float                          RBStrength                     (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)

void ACoverLink::BreakFracturedMeshes(const struct FVector& Origin, float Radius, float RBStrength, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.BreakFracturedMeshes");

	struct
	{
		struct FVector                 Origin;
		float                          Radius;
		float                          RBStrength;
		class UClass*                  DamageType;
	} params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.RBStrength = RBStrength;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.GetSwatTurnTarget
// (FUNC_Simulated, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// int                            Direction                      (CPF_Parm)
// struct FCoverInfo              out_Info                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::GetSwatTurnTarget(int SlotIdx, int Direction, struct FCoverInfo* out_Info)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSwatTurnTarget");

	struct
	{
		int                            SlotIdx;
		int                            Direction;
		struct FCoverInfo              out_Info;
		bool                           ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Info != nullptr)
		*out_Info = params.out_Info;

	return params.ReturnValue;
}


// Function Engine.CoverLink.ShutDown
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ACoverLink::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.ShutDown");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.ApplyCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ANavigationPoint_FCheckpointRecord Record                         (CPF_Const, CPF_Parm, CPF_OutParm)

void ACoverLink::ApplyCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.ApplyCheckpointRecord");

	struct
	{
		struct ANavigationPoint_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.CoverLink.CreateCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ANavigationPoint_FCheckpointRecord Record                         (CPF_Parm, CPF_OutParm)

void ACoverLink::CreateCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.CreateCheckpointRecord");

	struct
	{
		struct ANavigationPoint_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.CoverLink.OnToggle
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ACoverLink::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.OnToggle");

	struct
	{
		class USeqAct_Toggle*          inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.IsEnabled
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsEnabled");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.AutoAdjustSlot
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// bool                           bOnlyCheckLeans                (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::AutoAdjustSlot(int SlotIdx, bool bOnlyCheckLeans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AutoAdjustSlot");

	struct
	{
		int                            SlotIdx;
		bool                           bOnlyCheckLeans;
		bool                           ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;
	params.bOnlyCheckLeans = bOnlyCheckLeans;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.OnModifyCover
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_ModifyCover*     Action                         (CPF_Parm)

void ACoverLink::OnModifyCover(class USeqAct_ModifyCover* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.OnModifyCover");

	struct
	{
		class USeqAct_ModifyCover*     Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.SetSlotPlayerOnly
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// bool                           bInPlayerOnly                  (CPF_Parm)

void ACoverLink::SetSlotPlayerOnly(int SlotIdx, bool bInPlayerOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.SetSlotPlayerOnly");

	struct
	{
		int                            SlotIdx;
		bool                           bInPlayerOnly;
	} params;
	params.SlotIdx = SlotIdx;
	params.bInPlayerOnly = bInPlayerOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.NotifySlotOwnerCoverDisabled
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// bool                           bAIOnly                        (CPF_OptionalParm, CPF_Parm)

void ACoverLink::NotifySlotOwnerCoverDisabled(int SlotIdx, bool bAIOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.NotifySlotOwnerCoverDisabled");

	struct
	{
		int                            SlotIdx;
		bool                           bAIOnly;
	} params;
	params.SlotIdx = SlotIdx;
	params.bAIOnly = bAIOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.SetSlotEnabled
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// bool                           bEnable                        (CPF_Parm)

void ACoverLink::SetSlotEnabled(int SlotIdx, bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.SetSlotEnabled");

	struct
	{
		int                            SlotIdx;
		bool                           bEnable;
	} params;
	params.SlotIdx = SlotIdx;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.SetDisabled
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           bNewDisabled                   (CPF_Parm)

void ACoverLink::SetDisabled(bool bNewDisabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.SetDisabled");

	struct
	{
		bool                           bNewDisabled;
	} params;
	params.bNewDisabled = bNewDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.GetSlotActions
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// TArray<TEnumAsByte<enum class ECoverAction>> Actions                        (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void ACoverLink::GetSlotActions(int SlotIdx, TArray<TEnumAsByte<enum class ECoverAction>>* Actions)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotActions");

	struct
	{
		int                            SlotIdx;
		TArray<TEnumAsByte<enum class ECoverAction>> Actions;
	} params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actions != nullptr)
		*Actions = params.Actions;
}


// Function Engine.CoverLink.HasFireLinkTo
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// struct FCoverInfo              ChkCover                       (CPF_Parm)
// bool                           bAllowFallbackLinks            (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::HasFireLinkTo(int SlotIdx, const struct FCoverInfo& ChkCover, bool bAllowFallbackLinks)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.HasFireLinkTo");

	struct
	{
		int                            SlotIdx;
		struct FCoverInfo              ChkCover;
		bool                           bAllowFallbackLinks;
		bool                           ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;
	params.ChkCover = ChkCover;
	params.bAllowFallbackLinks = bAllowFallbackLinks;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetFireLinkTo
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// struct FCoverInfo              ChkCover                       (CPF_Parm)
// TEnumAsByte<enum class ECoverAction> ChkAction                      (CPF_Parm)
// TEnumAsByte<enum class ECoverType> ChkType                        (CPF_Parm)
// int                            out_FireLinkIdx                (CPF_Parm, CPF_OutParm)
// TArray<int>                    out_Items                      (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::GetFireLinkTo(int SlotIdx, const struct FCoverInfo& ChkCover, TEnumAsByte<enum class ECoverAction> ChkAction, TEnumAsByte<enum class ECoverType> ChkType, int* out_FireLinkIdx, TArray<int>* out_Items)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetFireLinkTo");

	struct
	{
		int                            SlotIdx;
		struct FCoverInfo              ChkCover;
		TEnumAsByte<enum class ECoverAction> ChkAction;
		TEnumAsByte<enum class ECoverType> ChkType;
		int                            out_FireLinkIdx;
		TArray<int>                    out_Items;
		bool                           ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;
	params.ChkCover = ChkCover;
	params.ChkAction = ChkAction;
	params.ChkType = ChkType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_FireLinkIdx != nullptr)
		*out_FireLinkIdx = params.out_FireLinkIdx;
	if (out_Items != nullptr)
		*out_Items = params.out_Items;

	return params.ReturnValue;
}


// Function Engine.CoverLink.AllowLeftTransition
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::AllowLeftTransition(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AllowLeftTransition");

	struct
	{
		int                            SlotIdx;
		bool                           ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.AllowRightTransition
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::AllowRightTransition(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.AllowRightTransition");

	struct
	{
		int                            SlotIdx;
		bool                           ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSlotIdxToRight
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// int                            Cnt                            (CPF_OptionalParm, CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int ACoverLink::GetSlotIdxToRight(int SlotIdx, int Cnt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotIdxToRight");

	struct
	{
		int                            SlotIdx;
		int                            Cnt;
		int                            ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;
	params.Cnt = Cnt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSlotIdxToLeft
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// int                            Cnt                            (CPF_OptionalParm, CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int ACoverLink::GetSlotIdxToLeft(int SlotIdx, int Cnt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotIdxToLeft");

	struct
	{
		int                            SlotIdx;
		int                            Cnt;
		int                            ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;
	params.Cnt = Cnt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsRightEdgeSlot
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// bool                           bIgnoreLeans                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::IsRightEdgeSlot(int SlotIdx, bool bIgnoreLeans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsRightEdgeSlot");

	struct
	{
		int                            SlotIdx;
		bool                           bIgnoreLeans;
		bool                           ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;
	params.bIgnoreLeans = bIgnoreLeans;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsLeftEdgeSlot
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// bool                           bIgnoreLeans                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::IsLeftEdgeSlot(int SlotIdx, bool bIgnoreLeans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsLeftEdgeSlot");

	struct
	{
		int                            SlotIdx;
		bool                           bIgnoreLeans;
		bool                           ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;
	params.bIgnoreLeans = bIgnoreLeans;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsEdgeSlot
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// bool                           bIgnoreLeans                   (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::IsEdgeSlot(int SlotIdx, bool bIgnoreLeans)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsEdgeSlot");

	struct
	{
		int                            SlotIdx;
		bool                           bIgnoreLeans;
		bool                           ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;
	params.bIgnoreLeans = bIgnoreLeans;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.FindSlots
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 CheckLocation                  (CPF_Parm)
// float                          MaxDistance                    (CPF_Parm)
// int                            LeftSlotIdx                    (CPF_Parm, CPF_OutParm)
// int                            RightSlotIdx                   (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::FindSlots(const struct FVector& CheckLocation, float MaxDistance, int* LeftSlotIdx, int* RightSlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.FindSlots");

	struct
	{
		struct FVector                 CheckLocation;
		float                          MaxDistance;
		int                            LeftSlotIdx;
		int                            RightSlotIdx;
		bool                           ReturnValue;
	} params;
	params.CheckLocation = CheckLocation;
	params.MaxDistance = MaxDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LeftSlotIdx != nullptr)
		*LeftSlotIdx = params.LeftSlotIdx;
	if (RightSlotIdx != nullptr)
		*RightSlotIdx = params.RightSlotIdx;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsStationarySlot
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::IsStationarySlot(int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsStationarySlot");

	struct
	{
		int                            SlotIdx;
		bool                           ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsValidClaimBetween
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APawn*                   ChkClaim                       (CPF_Parm)
// int                            StartSlotIdx                   (CPF_Parm)
// int                            EndSlotIdx                     (CPF_Parm)
// bool                           bSkipTeamCheck                 (CPF_OptionalParm, CPF_Parm)
// bool                           bSkipOverlapCheck              (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::IsValidClaimBetween(class APawn* ChkClaim, int StartSlotIdx, int EndSlotIdx, bool bSkipTeamCheck, bool bSkipOverlapCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsValidClaimBetween");

	struct
	{
		class APawn*                   ChkClaim;
		int                            StartSlotIdx;
		int                            EndSlotIdx;
		bool                           bSkipTeamCheck;
		bool                           bSkipOverlapCheck;
		bool                           ReturnValue;
	} params;
	params.ChkClaim = ChkClaim;
	params.StartSlotIdx = StartSlotIdx;
	params.EndSlotIdx = EndSlotIdx;
	params.bSkipTeamCheck = bSkipTeamCheck;
	params.bSkipOverlapCheck = bSkipOverlapCheck;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.IsValidClaim
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APawn*                   ChkClaim                       (CPF_Parm)
// int                            SlotIdx                        (CPF_Parm)
// bool                           bSkipTeamCheck                 (CPF_OptionalParm, CPF_Parm)
// bool                           bSkipOverlapCheck              (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::IsValidClaim(class APawn* ChkClaim, int SlotIdx, bool bSkipTeamCheck, bool bSkipOverlapCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsValidClaim");

	struct
	{
		class APawn*                   ChkClaim;
		int                            SlotIdx;
		bool                           bSkipTeamCheck;
		bool                           bSkipOverlapCheck;
		bool                           ReturnValue;
	} params;
	params.ChkClaim = ChkClaim;
	params.SlotIdx = SlotIdx;
	params.bSkipTeamCheck = bSkipTeamCheck;
	params.bSkipOverlapCheck = bSkipOverlapCheck;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.UnClaim
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   OldClaim                       (CPF_Parm)
// int                            SlotIdx                        (CPF_Parm)
// bool                           bUnclaimAll                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::UnClaim(class APawn* OldClaim, int SlotIdx, bool bUnclaimAll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.UnClaim");

	struct
	{
		class APawn*                   OldClaim;
		int                            SlotIdx;
		bool                           bUnclaimAll;
		bool                           ReturnValue;
	} params;
	params.OldClaim = OldClaim;
	params.SlotIdx = SlotIdx;
	params.bUnclaimAll = bUnclaimAll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.Claim
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   NewClaim                       (CPF_Parm)
// int                            SlotIdx                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::Claim(class APawn* NewClaim, int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.Claim");

	struct
	{
		class APawn*                   NewClaim;
		int                            SlotIdx;
		bool                           ReturnValue;
	} params;
	params.NewClaim = NewClaim;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.SetInvalidUntil
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// float                          TimeToBecomeValid              (CPF_Parm)

void ACoverLink::SetInvalidUntil(int SlotIdx, float TimeToBecomeValid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.SetInvalidUntil");

	struct
	{
		int                            SlotIdx;
		float                          TimeToBecomeValid;
	} params;
	params.SlotIdx = SlotIdx;
	params.TimeToBecomeValid = TimeToBecomeValid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverLink.IsExposedTo
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// struct FCoverInfo              ChkSlot                        (CPF_Parm)
// float                          out_ExposedScale               (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::IsExposedTo(int SlotIdx, const struct FCoverInfo& ChkSlot, float* out_ExposedScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.IsExposedTo");

	struct
	{
		int                            SlotIdx;
		struct FCoverInfo              ChkSlot;
		float                          out_ExposedScale;
		bool                           ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;
	params.ChkSlot = ChkSlot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ExposedScale != nullptr)
		*out_ExposedScale = params.out_ExposedScale;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSlotViewPoint
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// TEnumAsByte<enum class ECoverType> Type                           (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class ECoverAction> Action                         (CPF_OptionalParm, CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector ACoverLink::GetSlotViewPoint(int SlotIdx, TEnumAsByte<enum class ECoverType> Type, TEnumAsByte<enum class ECoverAction> Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotViewPoint");

	struct
	{
		int                            SlotIdx;
		TEnumAsByte<enum class ECoverType> Type;
		TEnumAsByte<enum class ECoverAction> Action;
		struct FVector                 ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;
	params.Type = Type;
	params.Action = Action;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSlotRotation
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// bool                           bForceUseOffset                (CPF_OptionalParm, CPF_Parm)
// struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FRotator ACoverLink::GetSlotRotation(int SlotIdx, bool bForceUseOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotRotation");

	struct
	{
		int                            SlotIdx;
		bool                           bForceUseOffset;
		struct FRotator                ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;
	params.bForceUseOffset = bForceUseOffset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetSlotLocation
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// bool                           bForceUseOffset                (CPF_OptionalParm, CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector ACoverLink::GetSlotLocation(int SlotIdx, bool bForceUseOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetSlotLocation");

	struct
	{
		int                            SlotIdx;
		bool                           bForceUseOffset;
		struct FVector                 ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;
	params.bForceUseOffset = bForceUseOffset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.UnPackFireLinkInteractionInfo
// (FUNC_Simulated, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  PackedByte                     (CPF_Const, CPF_Parm)
// TEnumAsByte<enum class ECoverType> SrcType                        (CPF_Parm, CPF_OutParm)
// TEnumAsByte<enum class ECoverAction> SrcAction                      (CPF_Parm, CPF_OutParm)
// TEnumAsByte<enum class ECoverType> DestType                       (CPF_Parm, CPF_OutParm)
// TEnumAsByte<enum class ECoverAction> DestAction                     (CPF_Parm, CPF_OutParm)

void ACoverLink::STATIC_UnPackFireLinkInteractionInfo(unsigned char PackedByte, TEnumAsByte<enum class ECoverType>* SrcType, TEnumAsByte<enum class ECoverAction>* SrcAction, TEnumAsByte<enum class ECoverType>* DestType, TEnumAsByte<enum class ECoverAction>* DestAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.UnPackFireLinkInteractionInfo");

	struct
	{
		unsigned char                  PackedByte;
		TEnumAsByte<enum class ECoverType> SrcType;
		TEnumAsByte<enum class ECoverAction> SrcAction;
		TEnumAsByte<enum class ECoverType> DestType;
		TEnumAsByte<enum class ECoverAction> DestAction;
	} params;
	params.PackedByte = PackedByte;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SrcType != nullptr)
		*SrcType = params.SrcType;
	if (SrcAction != nullptr)
		*SrcAction = params.SrcAction;
	if (DestType != nullptr)
		*DestType = params.DestType;
	if (DestAction != nullptr)
		*DestAction = params.DestAction;
}


// Function Engine.CoverLink.PackFireLinkInteractionInfo
// (FUNC_Simulated, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ECoverType> SrcType                        (CPF_Parm)
// TEnumAsByte<enum class ECoverAction> SrcAction                      (CPF_Parm)
// TEnumAsByte<enum class ECoverType> DestType                       (CPF_Parm)
// TEnumAsByte<enum class ECoverAction> DestAction                     (CPF_Parm)
// unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

unsigned char ACoverLink::STATIC_PackFireLinkInteractionInfo(TEnumAsByte<enum class ECoverType> SrcType, TEnumAsByte<enum class ECoverAction> SrcAction, TEnumAsByte<enum class ECoverType> DestType, TEnumAsByte<enum class ECoverAction> DestAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.PackFireLinkInteractionInfo");

	struct
	{
		TEnumAsByte<enum class ECoverType> SrcType;
		TEnumAsByte<enum class ECoverAction> SrcAction;
		TEnumAsByte<enum class ECoverType> DestType;
		TEnumAsByte<enum class ECoverAction> DestAction;
		unsigned char                  ReturnValue;
	} params;
	params.SrcType = SrcType;
	params.SrcAction = SrcAction;
	params.DestType = DestType;
	params.DestAction = DestAction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CoverLink.GetFireLinkTargetCoverInfo
// (FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            SlotIdx                        (CPF_Parm)
// int                            FireLinkIdx                    (CPF_Parm)
// struct FCoverInfo              out_Info                       (CPF_Parm, CPF_OutParm)
// TEnumAsByte<enum class EFireLinkID> ArrayID                        (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ACoverLink::GetFireLinkTargetCoverInfo(int SlotIdx, int FireLinkIdx, TEnumAsByte<enum class EFireLinkID> ArrayID, struct FCoverInfo* out_Info)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverLink.GetFireLinkTargetCoverInfo");

	struct
	{
		int                            SlotIdx;
		int                            FireLinkIdx;
		struct FCoverInfo              out_Info;
		TEnumAsByte<enum class EFireLinkID> ArrayID;
		bool                           ReturnValue;
	} params;
	params.SlotIdx = SlotIdx;
	params.FireLinkIdx = FireLinkIdx;
	params.ArrayID = ArrayID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Info != nullptr)
		*out_Info = params.out_Info;

	return params.ReturnValue;
}


// Function Engine.DoorMarker.SuggestMovePreparation
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ADoorMarker::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.SuggestMovePreparation");

	struct
	{
		class APawn*                   Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DoorMarker.ProceedWithMove
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ADoorMarker::ProceedWithMove(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.ProceedWithMove");

	struct
	{
		class APawn*                   Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DoorMarker.SpecialHandling
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AActor* ADoorMarker::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.SpecialHandling");

	struct
	{
		class APawn*                   Other;
		class AActor*                  ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DoorMarker.MoverClosed
// (FUNC_Defined, FUNC_Public)

void ADoorMarker::MoverClosed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.MoverClosed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DoorMarker.MoverOpened
// (FUNC_Defined, FUNC_Public)

void ADoorMarker::MoverOpened()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.MoverOpened");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DoorMarker.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void ADoorMarker::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DoorMarker.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Ladder.SuggestMovePreparation
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ALadder::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Ladder.SuggestMovePreparation");

	struct
	{
		class APawn*                   Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftCenter.ProceedWithMove
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ALiftCenter::ProceedWithMove(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.ProceedWithMove");

	struct
	{
		class APawn*                   Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftCenter.SuggestMovePreparation
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ALiftCenter::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.SuggestMovePreparation");

	struct
	{
		class APawn*                   Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftCenter.SpecialHandling
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AActor* ALiftCenter::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.SpecialHandling");

	struct
	{
		class APawn*                   Other;
		class AActor*                  ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftCenter.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void ALiftCenter::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LiftExit.SuggestMovePreparation
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ALiftExit::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftExit.SuggestMovePreparation");

	struct
	{
		class APawn*                   Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftExit.WaitForLift
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)

void ALiftExit::WaitForLift(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftExit.WaitForLift");

	struct
	{
		class APawn*                   Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LiftExit.CanBeReachedFromLiftBy
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ALiftExit::CanBeReachedFromLiftBy(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftExit.CanBeReachedFromLiftBy");

	struct
	{
		class APawn*                   Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PathNode.GetDebugAbbrev
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString APathNode::GetDebugAbbrev()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PathNode.GetDebugAbbrev");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.DelayRespawn
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APickupFactory::DelayRespawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.DelayRespawn");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.Destroyed
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APickupFactory::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.SetPickupVisible
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void APickupFactory::SetPickupVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetPickupVisible");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.SetPickupHidden
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void APickupFactory::SetPickupHidden()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetPickupHidden");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.RespawnEffect
// (FUNC_Public)

void APickupFactory::RespawnEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.RespawnEffect");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.GetRespawnTime
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float APickupFactory::GetRespawnTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.GetRespawnTime");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.RecheckValidTouch
// (FUNC_Public)

void APickupFactory::RecheckValidTouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.RecheckValidTouch");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.PickedUpBy
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void APickupFactory::PickedUpBy(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.PickedUpBy");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.GiveTo
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void APickupFactory::GiveTo(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.GiveTo");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.ReadyToPickup
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          MaxWait                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APickupFactory::ReadyToPickup(float MaxWait)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.ReadyToPickup");

	struct
	{
		float                          MaxWait;
		bool                           ReturnValue;
	} params;
	params.MaxWait = MaxWait;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.SpawnCopyFor
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   Recipient                      (CPF_Parm)

void APickupFactory::SpawnCopyFor(class APawn* Recipient)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SpawnCopyFor");

	struct
	{
		class APawn*                   Recipient;
	} params;
	params.Recipient = Recipient;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.DetourWeight
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// float                          PathWeight                     (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float APickupFactory::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.DetourWeight");

	struct
	{
		class APawn*                   Other;
		float                          PathWeight;
		float                          ReturnValue;
	} params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.StartSleeping
// (FUNC_Defined, FUNC_Public)

void APickupFactory::StartSleeping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.StartSleeping");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.SetRespawn
// (FUNC_Defined, FUNC_Public)

void APickupFactory::SetRespawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetRespawn");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.CheckForErrors
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APickupFactory::CheckForErrors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.CheckForErrors");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PickupFactory.Reset
// (FUNC_Defined, FUNC_Public)

void APickupFactory::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.SetPickupMesh
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void APickupFactory::SetPickupMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetPickupMesh");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.ShutDown
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void APickupFactory::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.ShutDown");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.SetInitialState
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void APickupFactory::SetInitialState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.SetInitialState");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.InitializePickup
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void APickupFactory::InitializePickup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.InitializePickup");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.PreBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void APickupFactory::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.PreBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PickupFactory.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void APickupFactory::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PickupFactory.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerStart.PostRenderFor
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)
// class UCanvas*                 Canvas                         (CPF_Parm)
// struct FVector                 CameraPosition                 (CPF_Parm)
// struct FVector                 CameraDir                      (CPF_Parm)

void APlayerStart::PostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerStart.PostRenderFor");

	struct
	{
		class APlayerController*       PC;
		class UCanvas*                 Canvas;
		struct FVector                 CameraPosition;
		struct FVector                 CameraDir;
	} params;
	params.PC = PC;
	params.Canvas = Canvas;
	params.CameraPosition = CameraPosition;
	params.CameraDir = CameraDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerStart.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void APlayerStart::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerStart.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PortalMarker.CanTeleport
// (FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  A                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APortalMarker::CanTeleport(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalMarker.CanTeleport");

	struct
	{
		class AActor*                  A;
		bool                           ReturnValue;
	} params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pylon.CanReachPylon
// (FUNC_Native, FUNC_Public)
// Parameters:
// class APylon*                  DestPylon                      (CPF_Parm)
// class AController*             C                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APylon::CanReachPylon(class APylon* DestPylon, class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.CanReachPylon");

	struct
	{
		class APylon*                  DestPylon;
		class AController*             C;
		bool                           ReturnValue;
	} params;
	params.DestPylon = DestPylon;
	params.C = C;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pylon.OnToggle
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void APylon::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pylon.IsEnabled
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APylon::IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.IsEnabled");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pylon.SetEnabled
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           bEnabled                       (CPF_Parm)

void APylon::SetEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.SetEnabled");

	struct
	{
		bool                           bEnabled;
	} params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pylon.PostBeginPlay
// (FUNC_Defined, FUNC_Public)

void APylon::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pylon.NotifyPathChanged
// (FUNC_Event, FUNC_Public)

void APylon::NotifyPathChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.NotifyPathChanged");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pylon.VerifyTopLevelConnections
// (FUNC_Defined, FUNC_Public)

void APylon::VerifyTopLevelConnections()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.VerifyTopLevelConnections");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pylon.GetTestPathExtent
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector APylon::GetTestPathExtent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.GetTestPathExtent");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pylon.FlushDynamicEdges
// (FUNC_Native, FUNC_Public)

void APylon::FlushDynamicEdges()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.FlushDynamicEdges");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pylon.UpdateMeshForPreExistingNavMeshObstacles
// (FUNC_Native, FUNC_Public)

void APylon::UpdateMeshForPreExistingNavMeshObstacles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.UpdateMeshForPreExistingNavMeshObstacles");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pylon.OnPylonStatusChange
// (FUNC_Native, FUNC_Public)

void APylon::OnPylonStatusChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pylon.OnPylonStatusChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AISwitchablePylon.IsEnabled
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AAISwitchablePylon::IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AISwitchablePylon.IsEnabled");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AISwitchablePylon.SetEnabled
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           bEnabled                       (CPF_Parm)

void AAISwitchablePylon::SetEnabled(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AISwitchablePylon.SetEnabled");

	struct
	{
		bool                           bEnabled;
	} params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AISwitchablePylon.PostBeginPlay
// (FUNC_Defined, FUNC_Public)

void AAISwitchablePylon::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AISwitchablePylon.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicPylon.StoppedMoving
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void ADynamicPylon::StoppedMoving()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicPylon.StoppedMoving");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicPylon.StartedMoving
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void ADynamicPylon::StartedMoving()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicPylon.StartedMoving");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicPylon.FlushDynamicEdges
// (FUNC_Native, FUNC_Public)

void ADynamicPylon::FlushDynamicEdges()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicPylon.FlushDynamicEdges");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicPylon.RebuildDynamicEdges
// (FUNC_Native, FUNC_Public)

void ADynamicPylon::RebuildDynamicEdges()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicPylon.RebuildDynamicEdges");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicPylon.PostBeginPlay
// (FUNC_Defined, FUNC_Public)

void ADynamicPylon::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicPylon.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.SpecialHandling
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AActor* ATeleporter::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.SpecialHandling");

	struct
	{
		class APawn*                   Other;
		class AActor*                  ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Teleporter.PostTouch
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void ATeleporter::PostTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.PostTouch");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.Touch
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm, CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void ATeleporter::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.Touch");

	struct
	{
		class AActor*                  Other;
		class UPrimitiveComponent*     OtherComp;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
	} params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.Accept
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AActor*                  Incoming                       (CPF_Parm)
// class AActor*                  Source                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ATeleporter::Accept(class AActor* Incoming, class AActor* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.Accept");

	struct
	{
		class AActor*                  Incoming;
		class AActor*                  Source;
		bool                           ReturnValue;
	} params;
	params.Incoming = Incoming;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Teleporter.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void ATeleporter::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.CanTeleport
// (FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  A                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ATeleporter::CanTeleport(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.CanTeleport");

	struct
	{
		class AActor*                  A;
		bool                           ReturnValue;
	} params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.ApplyFluidSurfaceImpact
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AFluidSurfaceActor*      Fluid                          (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)

void AProjectile::ApplyFluidSurfaceImpact(class AFluidSurfaceActor* Fluid, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.ApplyFluidSurfaceImpact");

	struct
	{
		class AFluidSurfaceActor*      Fluid;
		struct FVector                 HitLocation;
	} params;
	params.Fluid = Fluid;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.GetRange
// (FUNC_Defined, FUNC_Simulated, FUNC_Static, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AProjectile::STATIC_GetRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.GetRange");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.StaticGetTimeToLocation
// (FUNC_Defined, FUNC_Simulated, FUNC_Static, FUNC_Public)
// Parameters:
// struct FVector                 TargetLoc                      (CPF_Parm)
// struct FVector                 StartLoc                       (CPF_Parm)
// class AController*             RequestedBy                    (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AProjectile::STATIC_StaticGetTimeToLocation(const struct FVector& TargetLoc, const struct FVector& StartLoc, class AController* RequestedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.StaticGetTimeToLocation");

	struct
	{
		struct FVector                 TargetLoc;
		struct FVector                 StartLoc;
		class AController*             RequestedBy;
		float                          ReturnValue;
	} params;
	params.TargetLoc = TargetLoc;
	params.StartLoc = StartLoc;
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.GetTimeToLocation
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FVector                 TargetLoc                      (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AProjectile::GetTimeToLocation(const struct FVector& TargetLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.GetTimeToLocation");

	struct
	{
		struct FVector                 TargetLoc;
		float                          ReturnValue;
	} params;
	params.TargetLoc = TargetLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.FellOutOfWorld
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UClass*                  dmgType                        (CPF_Parm)

void AProjectile::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.FellOutOfWorld");

	struct
	{
		class UClass*                  dmgType;
	} params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.IsStationary
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AProjectile::IsStationary()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.IsStationary");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.RandSpin
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// float                          spinRate                       (CPF_Parm)

void AProjectile::RandSpin(float spinRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.RandSpin");

	struct
	{
		float                          spinRate;
	} params;
	params.spinRate = spinRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.Explode
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AProjectile::Explode(const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Explode");

	struct
	{
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
	} params;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.EncroachedBy
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AProjectile::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.EncroachedBy");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.HitWall
// (FUNC_Defined, FUNC_Singular, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  Wall                           (CPF_Parm)
// class UPrimitiveComponent*     WallComp                       (CPF_Parm, CPF_EditInline)

void AProjectile::HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.HitWall");

	struct
	{
		struct FVector                 HitNormal;
		class AActor*                  Wall;
		class UPrimitiveComponent*     WallComp;
	} params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;
	params.WallComp = WallComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.ProcessTouch
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AProjectile::ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.ProcessTouch");

	struct
	{
		class AActor*                  Other;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
	} params;
	params.Other = Other;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.Touch
// (FUNC_Defined, FUNC_Singular, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm, CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AProjectile::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Touch");

	struct
	{
		class AActor*                  Other;
		class UPrimitiveComponent*     OtherComp;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
	} params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.HurtRadius
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          DamageAmount                   (CPF_Parm)
// float                          InDamageRadius                 (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HurtOrigin                     (CPF_Parm)
// class AActor*                  IgnoredActor                   (CPF_OptionalParm, CPF_Parm)
// class AController*             InstigatedByController         (CPF_OptionalParm, CPF_Parm)
// bool                           bDoFullDamage                  (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AProjectile::HurtRadius(float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, bool bDoFullDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.HurtRadius");

	struct
	{
		float                          DamageAmount;
		float                          InDamageRadius;
		class UClass*                  DamageType;
		float                          Momentum;
		struct FVector                 HurtOrigin;
		class AActor*                  IgnoredActor;
		class AController*             InstigatedByController;
		bool                           bDoFullDamage;
		bool                           ReturnValue;
	} params;
	params.DamageAmount = DamageAmount;
	params.InDamageRadius = InDamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.IgnoredActor = IgnoredActor;
	params.InstigatedByController = InstigatedByController;
	params.bDoFullDamage = bDoFullDamage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.ProjectileHurtRadius
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FVector                 HurtOrigin                     (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AProjectile::ProjectileHurtRadius(const struct FVector& HurtOrigin, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.ProjectileHurtRadius");

	struct
	{
		struct FVector                 HurtOrigin;
		struct FVector                 HitNormal;
		bool                           ReturnValue;
	} params;
	params.HurtOrigin = HurtOrigin;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.Reset
// (FUNC_Defined, FUNC_Public)

void AProjectile::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.CanSplash
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AProjectile::CanSplash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.CanSplash");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.GetTeamNum
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

unsigned char AProjectile::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.GetTeamNum");

	struct
	{
		unsigned char                  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.Init
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 Direction                      (CPF_Parm)

void AProjectile::Init(const struct FVector& Direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Init");

	struct
	{
		struct FVector                 Direction;
	} params;
	params.Direction = Direction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AProjectile::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.PreBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AProjectile::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.PreBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.EncroachingOn
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AProjectile::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.EncroachingOn");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneCaptureActor.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ASceneCaptureActor::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureActor.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PortalTeleporter.StopsProjectile
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AActor*                  P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APortalTeleporter::StopsProjectile(class AActor* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.StopsProjectile");

	struct
	{
		class AActor*                  P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PortalTeleporter.CreatePortalTexture
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UTextureRenderTarget2D*  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UTextureRenderTarget2D* APortalTeleporter::CreatePortalTexture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.CreatePortalTexture");

	struct
	{
		class UTextureRenderTarget2D*  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PortalTeleporter.TransformHitLocation
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector APortalTeleporter::TransformHitLocation(const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.TransformHitLocation");

	struct
	{
		struct FVector                 HitLocation;
		struct FVector                 ReturnValue;
	} params;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PortalTeleporter.TransformVectorDir
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 V                              (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector APortalTeleporter::TransformVectorDir(const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.TransformVectorDir");

	struct
	{
		struct FVector                 V;
		struct FVector                 ReturnValue;
	} params;
	params.V = V;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PortalTeleporter.TransformActor
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  A                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APortalTeleporter::TransformActor(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PortalTeleporter.TransformActor");

	struct
	{
		class AActor*                  A;
		bool                           ReturnValue;
	} params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StaticMeshActor.PreBeginPlay
// (FUNC_Event, FUNC_Public)

void AStaticMeshActor::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActor.PreBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AStaticMeshActorBasedOnExtremeContent::SetMaterialBasedOnExtremeContent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshActorBasedOnExtremeContent.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AStaticMeshActorBasedOnExtremeContent::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActorBasedOnExtremeContent.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.ApplyCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ATrigger_FCheckpointRecord Record                         (CPF_Const, CPF_Parm, CPF_OutParm)

void ATrigger::ApplyCheckpointRecord(struct ATrigger_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.ApplyCheckpointRecord");

	struct
	{
		struct ATrigger_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.Trigger.CreateCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ATrigger_FCheckpointRecord Record                         (CPF_Parm, CPF_OutParm)

void ATrigger::CreateCheckpointRecord(struct ATrigger_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.CreateCheckpointRecord");

	struct
	{
		struct ATrigger_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.Trigger.ShouldSaveForCheckpoint
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ATrigger::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.ShouldSaveForCheckpoint");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Trigger.StopsProjectile
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AActor*                  P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ATrigger::StopsProjectile(class AActor* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.StopsProjectile");

	struct
	{
		class AActor*                  P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Trigger.UnTrigger
// (FUNC_Defined, FUNC_Public)

void ATrigger::UnTrigger()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.UnTrigger");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.NotifyTriggered
// (FUNC_Defined, FUNC_Public)

void ATrigger::NotifyTriggered()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.NotifyTriggered");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.Touch
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm, CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void ATrigger::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.Touch");

	struct
	{
		class AActor*                  Other;
		class UPrimitiveComponent*     OtherComp;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
	} params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ATrigger::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.GetFirstLocalViewer
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class APlayerController*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APlayerController* UActorComponent::GetFirstLocalViewer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.GetFirstLocalViewer");

	struct
	{
		class APlayerController*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ActorComponent.SetLocalViewer
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class APlayerController*       NewLocalViewer                 (CPF_Parm)

void UActorComponent::SetLocalViewer(class APlayerController* NewLocalViewer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetLocalViewer");

	struct
	{
		class APlayerController*       NewLocalViewer;
	} params;
	params.NewLocalViewer = NewLocalViewer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.ClearLocalViewers
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UActorComponent::ClearLocalViewers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ClearLocalViewers");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.RemoveLocalViewer
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class APlayerController*       NewLocalViewer                 (CPF_Parm)

void UActorComponent::RemoveLocalViewer(class APlayerController* NewLocalViewer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.RemoveLocalViewer");

	struct
	{
		class APlayerController*       NewLocalViewer;
	} params;
	params.NewLocalViewer = NewLocalViewer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.AddLocalViewer
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class APlayerController*       NewLocalViewer                 (CPF_Parm)

void UActorComponent::AddLocalViewer(class APlayerController* NewLocalViewer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.AddLocalViewer");

	struct
	{
		class APlayerController*       NewLocalViewer;
	} params;
	params.NewLocalViewer = NewLocalViewer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.DetachFromAny
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UActorComponent::DetachFromAny()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.DetachFromAny");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.ForceUpdate
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bTransformOnly                 (CPF_Parm)

void UActorComponent::ForceUpdate(bool bTransformOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.ForceUpdate");

	struct
	{
		bool                           bTransformOnly;
	} params;
	params.bTransformOnly = bTransformOnly;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.SetComponentRBFixed
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bFixed                         (CPF_Parm)

void UActorComponent::SetComponentRBFixed(bool bFixed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetComponentRBFixed");

	struct
	{
		bool                           bFixed;
	} params;
	params.bFixed = bFixed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorComponent.SetTickGroup
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ETickingGroup> NewTickGroup                   (CPF_Parm)

void UActorComponent::SetTickGroup(TEnumAsByte<enum class ETickingGroup> NewTickGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorComponent.SetTickGroup");

	struct
	{
		TEnumAsByte<enum class ETickingGroup> NewTickGroup;
	} params;
	params.NewTickGroup = NewTickGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.OcclusionChanged
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           bNowOccluded                   (CPF_Parm)

void UAudioComponent::OcclusionChanged(bool bNowOccluded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.OcclusionChanged");

	struct
	{
		bool                           bNowOccluded;
	} params;
	params.bNowOccluded = bNowOccluded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.OnQueueSubtitles
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// TArray<struct FSubtitleCue>    Subtitles                      (CPF_Parm, CPF_NeedCtorLink)
// float                          CueDuration                    (CPF_Parm)

void UAudioComponent::OnQueueSubtitles(TArray<struct FSubtitleCue> Subtitles, float CueDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.OnQueueSubtitles");

	struct
	{
		TArray<struct FSubtitleCue>    Subtitles;
		float                          CueDuration;
	} params;
	params.Subtitles = Subtitles;
	params.CueDuration = CueDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.OnAudioFinished
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// class UAudioComponent*         AC                             (CPF_Parm, CPF_EditInline)

void UAudioComponent::OnAudioFinished(class UAudioComponent* AC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.OnAudioFinished");

	struct
	{
		class UAudioComponent*         AC;
	} params;
	params.AC = AC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.ResetToDefaults
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UAudioComponent::ResetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.ResetToDefaults");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.SetWaveParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InName                         (CPF_Parm)
// class USoundNodeWave*          InWave                         (CPF_Parm)

void UAudioComponent::SetWaveParameter(const struct FName& InName, class USoundNodeWave* InWave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetWaveParameter");

	struct
	{
		struct FName                   InName;
		class USoundNodeWave*          InWave;
	} params;
	params.InName = InName;
	params.InWave = InWave;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.SetFloatParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InName                         (CPF_Parm)
// float                          InFloat                        (CPF_Parm)

void UAudioComponent::SetFloatParameter(const struct FName& InName, float InFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.SetFloatParameter");

	struct
	{
		struct FName                   InName;
		float                          InFloat;
	} params;
	params.InName = InName;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.AdjustVolume
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          AdjustVolumeDuration           (CPF_Parm)
// float                          AdjustVolumeLevel              (CPF_Parm)

void UAudioComponent::AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.AdjustVolume");

	struct
	{
		float                          AdjustVolumeDuration;
		float                          AdjustVolumeLevel;
	} params;
	params.AdjustVolumeDuration = AdjustVolumeDuration;
	params.AdjustVolumeLevel = AdjustVolumeLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.FadeOut
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          FadeOutDuration                (CPF_Parm)
// float                          FadeVolumeLevel                (CPF_Parm)

void UAudioComponent::FadeOut(float FadeOutDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeOut");

	struct
	{
		float                          FadeOutDuration;
		float                          FadeVolumeLevel;
	} params;
	params.FadeOutDuration = FadeOutDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.FadeIn
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          FadeInDuration                 (CPF_Parm)
// float                          FadeVolumeLevel                (CPF_Parm)

void UAudioComponent::FadeIn(float FadeInDuration, float FadeVolumeLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.FadeIn");

	struct
	{
		float                          FadeInDuration;
		float                          FadeVolumeLevel;
	} params;
	params.FadeInDuration = FadeInDuration;
	params.FadeVolumeLevel = FadeVolumeLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.IsFadingOut
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UAudioComponent::IsFadingOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.IsFadingOut");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AudioComponent.IsFadingIn
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UAudioComponent::IsFadingIn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.IsFadingIn");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AudioComponent.IsPlaying
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UAudioComponent::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.IsPlaying");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AudioComponent.Stop
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UAudioComponent::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Stop");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioComponent.Play
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UAudioComponent::Play()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioComponent.Play");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HeightFogComponent.SetEnabled
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bSetEnabled                    (CPF_Parm)

void UHeightFogComponent::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeightFogComponent.SetEnabled");

	struct
	{
		bool                           bSetEnabled;
	} params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetCastShadow
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bNewCastShadow                 (CPF_Parm)
// bool                           bNewCastDynamicShadow          (CPF_Parm)

void UPrimitiveComponent::SetCastShadow(bool bNewCastShadow, bool bNewCastDynamicShadow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCastShadow");

	struct
	{
		bool                           bNewCastShadow;
		bool                           bNewCastDynamicShadow;
	} params;
	params.bNewCastShadow = bNewCastShadow;
	params.bNewCastDynamicShadow = bNewCastDynamicShadow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.ClosestPointOnComponentToComponent
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UPrimitiveComponent*     OtherComponent                 (CPF_Parm, CPF_OutParm, CPF_EditInline)
// struct FVector                 PointOnComponentA              (CPF_Parm, CPF_OutParm)
// struct FVector                 PointOnComponentB              (CPF_Parm, CPF_OutParm)
// TEnumAsByte<enum class GJKResult> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class GJKResult> UPrimitiveComponent::ClosestPointOnComponentToComponent(class UPrimitiveComponent** OtherComponent, struct FVector* PointOnComponentA, struct FVector* PointOnComponentB)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ClosestPointOnComponentToComponent");

	struct
	{
		class UPrimitiveComponent*     OtherComponent;
		struct FVector                 PointOnComponentA;
		struct FVector                 PointOnComponentB;
		TEnumAsByte<enum class GJKResult> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OtherComponent != nullptr)
		*OtherComponent = params.OtherComponent;
	if (PointOnComponentA != nullptr)
		*PointOnComponentA = params.PointOnComponentA;
	if (PointOnComponentB != nullptr)
		*PointOnComponentB = params.PointOnComponentB;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.ClosestPointOnComponentToPoint
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 POI                            (CPF_Parm, CPF_OutParm)
// struct FVector                 Extent                         (CPF_Parm, CPF_OutParm)
// struct FVector                 OutPointA                      (CPF_Parm, CPF_OutParm)
// struct FVector                 OutPointB                      (CPF_Parm, CPF_OutParm)
// TEnumAsByte<enum class GJKResult> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class GJKResult> UPrimitiveComponent::ClosestPointOnComponentToPoint(struct FVector* POI, struct FVector* Extent, struct FVector* OutPointA, struct FVector* OutPointB)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ClosestPointOnComponentToPoint");

	struct
	{
		struct FVector                 POI;
		struct FVector                 Extent;
		struct FVector                 OutPointA;
		struct FVector                 OutPointB;
		TEnumAsByte<enum class GJKResult> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (POI != nullptr)
		*POI = params.POI;
	if (Extent != nullptr)
		*Extent = params.Extent;
	if (OutPointA != nullptr)
		*OutPointA = params.OutPointA;
	if (OutPointB != nullptr)
		*OutPointB = params.OutPointB;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetRotation
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FRotator UPrimitiveComponent::GetRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetRotation");

	struct
	{
		struct FRotator                ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.GetPosition
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector UPrimitiveComponent::GetPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetPosition");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.SetAbsolute
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           NewAbsoluteTranslation         (CPF_OptionalParm, CPF_Parm)
// bool                           NewAbsoluteRotation            (CPF_OptionalParm, CPF_Parm)
// bool                           NewAbsoluteScale               (CPF_OptionalParm, CPF_Parm)

void UPrimitiveComponent::SetAbsolute(bool NewAbsoluteTranslation, bool NewAbsoluteRotation, bool NewAbsoluteScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetAbsolute");

	struct
	{
		bool                           NewAbsoluteTranslation;
		bool                           NewAbsoluteRotation;
		bool                           NewAbsoluteScale;
	} params;
	params.NewAbsoluteTranslation = NewAbsoluteTranslation;
	params.NewAbsoluteRotation = NewAbsoluteRotation;
	params.NewAbsoluteScale = NewAbsoluteScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetScale3D
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 NewScale3D                     (CPF_Parm)

void UPrimitiveComponent::SetScale3D(const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetScale3D");

	struct
	{
		struct FVector                 NewScale3D;
	} params;
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetScale
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          NewScale                       (CPF_Parm)

void UPrimitiveComponent::SetScale(float NewScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetScale");

	struct
	{
		float                          NewScale;
	} params;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRotation
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FRotator                NewRotation                    (CPF_Parm)

void UPrimitiveComponent::SetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRotation");

	struct
	{
		struct FRotator                NewRotation;
	} params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetTranslation
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 NewTranslation                 (CPF_Parm)

void UPrimitiveComponent::SetTranslation(const struct FVector& NewTranslation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetTranslation");

	struct
	{
		struct FVector                 NewTranslation;
	} params;
	params.NewTranslation = NewTranslation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetActorCollision
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           NewCollideActors               (CPF_Parm)
// bool                           NewBlockActors                 (CPF_Parm)
// bool                           NewAlwaysCheckCollision        (CPF_OptionalParm, CPF_Parm)

void UPrimitiveComponent::SetActorCollision(bool NewCollideActors, bool NewBlockActors, bool NewAlwaysCheckCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetActorCollision");

	struct
	{
		bool                           NewCollideActors;
		bool                           NewBlockActors;
		bool                           NewAlwaysCheckCollision;
	} params;
	params.NewCollideActors = NewCollideActors;
	params.NewBlockActors = NewBlockActors;
	params.NewAlwaysCheckCollision = NewAlwaysCheckCollision;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetTraceBlocking
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           NewBlockZeroExtent             (CPF_Parm)
// bool                           NewBlockNonZeroExtent          (CPF_Parm)

void UPrimitiveComponent::SetTraceBlocking(bool NewBlockZeroExtent, bool NewBlockNonZeroExtent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetTraceBlocking");

	struct
	{
		bool                           NewBlockZeroExtent;
		bool                           NewBlockNonZeroExtent;
	} params;
	params.NewBlockZeroExtent = NewBlockZeroExtent;
	params.NewBlockNonZeroExtent = NewBlockNonZeroExtent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewUseViewOwnerDepthPriorityGroup (CPF_Parm)
// TEnumAsByte<enum class ESceneDepthPriorityGroup> NewViewOwnerDepthPriorityGroup (CPF_Parm)

void UPrimitiveComponent::SetViewOwnerDepthPriorityGroup(bool bNewUseViewOwnerDepthPriorityGroup, TEnumAsByte<enum class ESceneDepthPriorityGroup> NewViewOwnerDepthPriorityGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetViewOwnerDepthPriorityGroup");

	struct
	{
		bool                           bNewUseViewOwnerDepthPriorityGroup;
		TEnumAsByte<enum class ESceneDepthPriorityGroup> NewViewOwnerDepthPriorityGroup;
	} params;
	params.bNewUseViewOwnerDepthPriorityGroup = bNewUseViewOwnerDepthPriorityGroup;
	params.NewViewOwnerDepthPriorityGroup = NewViewOwnerDepthPriorityGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetDepthPriorityGroup
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ESceneDepthPriorityGroup> NewDepthPriorityGroup          (CPF_Parm)

void UPrimitiveComponent::SetDepthPriorityGroup(TEnumAsByte<enum class ESceneDepthPriorityGroup> NewDepthPriorityGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetDepthPriorityGroup");

	struct
	{
		TEnumAsByte<enum class ESceneDepthPriorityGroup> NewDepthPriorityGroup;
	} params;
	params.NewDepthPriorityGroup = NewDepthPriorityGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetLightingChannels
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FLightingChannelContainer NewLightingChannels            (CPF_Parm)

void UPrimitiveComponent::SetLightingChannels(const struct FLightingChannelContainer& NewLightingChannels)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLightingChannels");

	struct
	{
		struct FLightingChannelContainer NewLightingChannels;
	} params;
	params.NewLightingChannels = NewLightingChannels;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetCullDistance
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          NewCullDistance                (CPF_Parm)

void UPrimitiveComponent::SetCullDistance(float NewCullDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetCullDistance");

	struct
	{
		float                          NewCullDistance;
	} params;
	params.NewCullDistance = NewCullDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetLightEnvironment
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class ULightEnvironmentComponent* NewLightEnvironment            (CPF_Parm, CPF_EditInline)

void UPrimitiveComponent::SetLightEnvironment(class ULightEnvironmentComponent* NewLightEnvironment)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetLightEnvironment");

	struct
	{
		class ULightEnvironmentComponent* NewLightEnvironment;
	} params;
	params.NewLightEnvironment = NewLightEnvironment;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetShadowParent
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UPrimitiveComponent*     NewShadowParent                (CPF_Parm, CPF_EditInline)

void UPrimitiveComponent::SetShadowParent(class UPrimitiveComponent* NewShadowParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetShadowParent");

	struct
	{
		class UPrimitiveComponent*     NewShadowParent;
	} params;
	params.NewShadowParent = NewShadowParent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetIgnoreOwnerHidden
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewIgnoreOwnerHidden          (CPF_Parm)

void UPrimitiveComponent::SetIgnoreOwnerHidden(bool bNewIgnoreOwnerHidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetIgnoreOwnerHidden");

	struct
	{
		bool                           bNewIgnoreOwnerHidden;
	} params;
	params.bNewIgnoreOwnerHidden = bNewIgnoreOwnerHidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetOnlyOwnerSee
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewOnlyOwnerSee               (CPF_Parm)

void UPrimitiveComponent::SetOnlyOwnerSee(bool bNewOnlyOwnerSee)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOnlyOwnerSee");

	struct
	{
		bool                           bNewOnlyOwnerSee;
	} params;
	params.bNewOnlyOwnerSee = bNewOnlyOwnerSee;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetOwnerNoSee
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewOwnerNoSee                 (CPF_Parm)

void UPrimitiveComponent::SetOwnerNoSee(bool bNewOwnerNoSee)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetOwnerNoSee");

	struct
	{
		bool                           bNewOwnerNoSee;
	} params;
	params.bNewOwnerNoSee = bNewOwnerNoSee;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetHidden
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           NewHidden                      (CPF_Parm)

void UPrimitiveComponent::SetHidden(bool NewHidden)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetHidden");

	struct
	{
		bool                           NewHidden;
	} params;
	params.NewHidden = NewHidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.ShouldComponentAddToScene
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UPrimitiveComponent::ShouldComponentAddToScene()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.ShouldComponentAddToScene");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.SetRBDominanceGroup
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// unsigned char                  InDomGroup                     (CPF_Parm)

void UPrimitiveComponent::SetRBDominanceGroup(unsigned char InDomGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBDominanceGroup");

	struct
	{
		unsigned char                  InDomGroup;
	} params;
	params.InDomGroup = InDomGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.GetRootBodyInstance
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class URB_BodyInstance*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class URB_BodyInstance* UPrimitiveComponent::GetRootBodyInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetRootBodyInstance");

	struct
	{
		class URB_BodyInstance*        ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.SetPhysMaterialOverride
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UPhysicalMaterial*       NewPhysMaterial                (CPF_Parm)

void UPrimitiveComponent::SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetPhysMaterialOverride");

	struct
	{
		class UPhysicalMaterial*       NewPhysMaterial;
	} params;
	params.NewPhysMaterial = NewPhysMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.TermRBPhys
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UPrimitiveComponent::TermRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.TermRBPhys");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.InitRBPhys
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UPrimitiveComponent::InitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.InitRBPhys");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewNotifyRigidBodyCollision   (CPF_Parm)

void UPrimitiveComponent::SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetNotifyRigidBodyCollision");

	struct
	{
		bool                           bNewNotifyRigidBodyCollision;
	} params;
	params.bNewNotifyRigidBodyCollision = bNewNotifyRigidBodyCollision;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBChannel
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ERBCollisionChannel> Channel                        (CPF_Parm)

void UPrimitiveComponent::SetRBChannel(TEnumAsByte<enum class ERBCollisionChannel> Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBChannel");

	struct
	{
		TEnumAsByte<enum class ERBCollisionChannel> Channel;
	} params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBCollisionChannels
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FRBCollisionChannelContainer Channels                       (CPF_Parm)

void UPrimitiveComponent::SetRBCollisionChannels(const struct FRBCollisionChannelContainer& Channels)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBCollisionChannels");

	struct
	{
		struct FRBCollisionChannelContainer Channels;
	} params;
	params.Channels = Channels;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBCollidesWithChannel
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ERBCollisionChannel> Channel                        (CPF_Parm)
// bool                           bNewCollides                   (CPF_Parm)

void UPrimitiveComponent::SetRBCollidesWithChannel(TEnumAsByte<enum class ERBCollisionChannel> Channel, bool bNewCollides)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBCollidesWithChannel");

	struct
	{
		TEnumAsByte<enum class ERBCollisionChannel> Channel;
		bool                           bNewCollides;
	} params;
	params.Channel = Channel;
	params.bNewCollides = bNewCollides;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetBlockRigidBody
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewBlockRigidBody             (CPF_Parm)

void UPrimitiveComponent::SetBlockRigidBody(bool bNewBlockRigidBody)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetBlockRigidBody");

	struct
	{
		bool                           bNewBlockRigidBody;
	} params;
	params.bNewBlockRigidBody = bNewBlockRigidBody;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.RigidBodyIsAwake
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UPrimitiveComponent::RigidBodyIsAwake(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.RigidBodyIsAwake");

	struct
	{
		struct FName                   BoneName;
		bool                           ReturnValue;
	} params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.PutRigidBodyToSleep
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_OptionalParm, CPF_Parm)

void UPrimitiveComponent::PutRigidBodyToSleep(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.PutRigidBodyToSleep");

	struct
	{
		struct FName                   BoneName;
	} params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.WakeRigidBody
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_OptionalParm, CPF_Parm)

void UPrimitiveComponent::WakeRigidBody(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.WakeRigidBody");

	struct
	{
		struct FName                   BoneName;
	} params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBRotation
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FRotator                NewRot                         (CPF_Parm)
// struct FName                   BoneName                       (CPF_OptionalParm, CPF_Parm)

void UPrimitiveComponent::SetRBRotation(const struct FRotator& NewRot, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBRotation");

	struct
	{
		struct FRotator                NewRot;
		struct FName                   BoneName;
	} params;
	params.NewRot = NewRot;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBPosition
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 NewPos                         (CPF_Parm)
// struct FName                   BoneName                       (CPF_OptionalParm, CPF_Parm)

void UPrimitiveComponent::SetRBPosition(const struct FVector& NewPos, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBPosition");

	struct
	{
		struct FVector                 NewPos;
		struct FName                   BoneName;
	} params;
	params.NewPos = NewPos;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.RetardRBLinearVelocity
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 RetardDir                      (CPF_Parm)
// float                          VelScale                       (CPF_Parm)

void UPrimitiveComponent::RetardRBLinearVelocity(const struct FVector& RetardDir, float VelScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.RetardRBLinearVelocity");

	struct
	{
		struct FVector                 RetardDir;
		float                          VelScale;
	} params;
	params.RetardDir = RetardDir;
	params.VelScale = VelScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBAngularVelocity
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 NewAngVel                      (CPF_Parm)
// bool                           bAddToCurrent                  (CPF_OptionalParm, CPF_Parm)

void UPrimitiveComponent::SetRBAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBAngularVelocity");

	struct
	{
		struct FVector                 NewAngVel;
		bool                           bAddToCurrent;
	} params;
	params.NewAngVel = NewAngVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.SetRBLinearVelocity
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 NewVel                         (CPF_Parm)
// bool                           bAddToCurrent                  (CPF_OptionalParm, CPF_Parm)

void UPrimitiveComponent::SetRBLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.SetRBLinearVelocity");

	struct
	{
		struct FVector                 NewVel;
		bool                           bAddToCurrent;
	} params;
	params.NewVel = NewVel;
	params.bAddToCurrent = bAddToCurrent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddTorque
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Torque                         (CPF_Parm)
// struct FName                   BoneName                       (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class EForceMode> ForceMode                      (CPF_OptionalParm, CPF_Parm)

void UPrimitiveComponent::AddTorque(const struct FVector& Torque, const struct FName& BoneName, TEnumAsByte<enum class EForceMode> ForceMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddTorque");

	struct
	{
		struct FVector                 Torque;
		struct FName                   BoneName;
		TEnumAsByte<enum class EForceMode> ForceMode;
	} params;
	params.Torque = Torque;
	params.BoneName = BoneName;
	params.ForceMode = ForceMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddRadialForce
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 Origin                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// float                          Strength                       (CPF_Parm)
// TEnumAsByte<enum class ERadialImpulseFalloff> Falloff                        (CPF_Parm)

void UPrimitiveComponent::AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<enum class ERadialImpulseFalloff> Falloff)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialForce");

	struct
	{
		struct FVector                 Origin;
		float                          Radius;
		float                          Strength;
		TEnumAsByte<enum class ERadialImpulseFalloff> Falloff;
	} params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.GetMass
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_OptionalParm, CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UPrimitiveComponent::GetMass(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.GetMass");

	struct
	{
		struct FName                   BoneName;
		float                          ReturnValue;
	} params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrimitiveComponent.AddForce
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Force                          (CPF_Parm)
// struct FVector                 Position                       (CPF_OptionalParm, CPF_Parm)
// struct FName                   BoneName                       (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class EForceMode> ForceMode                      (CPF_OptionalParm, CPF_Parm)

void UPrimitiveComponent::AddForce(const struct FVector& Force, const struct FVector& Position, const struct FName& BoneName, TEnumAsByte<enum class EForceMode> ForceMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddForce");

	struct
	{
		struct FVector                 Force;
		struct FVector                 Position;
		struct FName                   BoneName;
		TEnumAsByte<enum class EForceMode> ForceMode;
	} params;
	params.Force = Force;
	params.Position = Position;
	params.BoneName = BoneName;
	params.ForceMode = ForceMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddRadialImpulse
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Origin                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// float                          Strength                       (CPF_Parm)
// TEnumAsByte<enum class ERadialImpulseFalloff> Falloff                        (CPF_Parm)
// bool                           bVelChange                     (CPF_OptionalParm, CPF_Parm)

void UPrimitiveComponent::AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<enum class ERadialImpulseFalloff> Falloff, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddRadialImpulse");

	struct
	{
		struct FVector                 Origin;
		float                          Radius;
		float                          Strength;
		TEnumAsByte<enum class ERadialImpulseFalloff> Falloff;
		bool                           bVelChange;
	} params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.Strength = Strength;
	params.Falloff = Falloff;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrimitiveComponent.AddImpulse
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Impulse                        (CPF_Parm)
// struct FVector                 Position                       (CPF_OptionalParm, CPF_Parm)
// struct FName                   BoneName                       (CPF_OptionalParm, CPF_Parm)
// bool                           bVelChange                     (CPF_OptionalParm, CPF_Parm)

void UPrimitiveComponent::AddImpulse(const struct FVector& Impulse, const struct FVector& Position, const struct FName& BoneName, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrimitiveComponent.AddImpulse");

	struct
	{
		struct FVector                 Impulse;
		struct FVector                 Position;
		struct FName                   BoneName;
		bool                           bVelChange;
	} params;
	params.Impulse = Impulse;
	params.Position = Position;
	params.BoneName = BoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CylinderComponent.GetExtent
// (FUNC_Final, FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector UCylinderComponent::GetExtent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CylinderComponent.GetExtent");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CylinderComponent.SetCylinderSize
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          NewRadius                      (CPF_Parm)
// float                          NewHeight                      (CPF_Parm)

void UCylinderComponent::SetCylinderSize(float NewRadius, float NewHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CylinderComponent.SetCylinderSize");

	struct
	{
		float                          NewRadius;
		float                          NewHeight;
	} params;
	params.NewRadius = NewRadius;
	params.NewHeight = NewHeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SilhouetteComponent.RemoveSilhouetteParent
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UMeshComponent*          RemParent                      (CPF_Parm, CPF_EditInline)

void USilhouetteComponent::RemoveSilhouetteParent(class UMeshComponent* RemParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SilhouetteComponent.RemoveSilhouetteParent");

	struct
	{
		class UMeshComponent*          RemParent;
	} params;
	params.RemParent = RemParent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SilhouetteComponent.AddSilhouetteParent
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UMeshComponent*          NewParent                      (CPF_Parm, CPF_EditInline)

void USilhouetteComponent::AddSilhouetteParent(class UMeshComponent* NewParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SilhouetteComponent.AddSilhouetteParent");

	struct
	{
		class UMeshComponent*          NewParent;
	} params;
	params.NewParent = NewParent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SilhouetteComponent.SetColor
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FLinearColor            NewColor                       (CPF_Parm)

void USilhouetteComponent::SetColor(const struct FLinearColor& NewColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SilhouetteComponent.SetColor");

	struct
	{
		struct FLinearColor            NewColor;
	} params;
	params.NewColor = NewColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpriteComponent.SetSpriteAndUV
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// class UTexture2D*              NewSprite                      (CPF_Parm)
// int                            NewU                           (CPF_Parm)
// int                            NewUL                          (CPF_Parm)
// int                            NewV                           (CPF_Parm)
// int                            NewVL                          (CPF_Parm)

void USpriteComponent::SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpriteComponent.SetSpriteAndUV");

	struct
	{
		class UTexture2D*              NewSprite;
		int                            NewU;
		int                            NewUL;
		int                            NewV;
		int                            NewVL;
	} params;
	params.NewSprite = NewSprite;
	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpriteComponent.SetUV
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// int                            NewU                           (CPF_Parm)
// int                            NewUL                          (CPF_Parm)
// int                            NewV                           (CPF_Parm)
// int                            NewVL                          (CPF_Parm)

void USpriteComponent::SetUV(int NewU, int NewUL, int NewV, int NewVL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpriteComponent.SetUV");

	struct
	{
		int                            NewU;
		int                            NewUL;
		int                            NewV;
		int                            NewVL;
	} params;
	params.NewU = NewU;
	params.NewUL = NewUL;
	params.NewV = NewV;
	params.NewVL = NewVL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpriteComponent.SetSprite
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// class UTexture2D*              NewSprite                      (CPF_Parm)

void USpriteComponent::SetSprite(class UTexture2D* NewSprite)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpriteComponent.SetSprite");

	struct
	{
		class UTexture2D*              NewSprite;
	} params;
	params.NewSprite = NewSprite;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.OnUpdatePropertyBlurOpacity
// (FUNC_Defined, FUNC_Public)

void URadialBlurComponent::OnUpdatePropertyBlurOpacity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.OnUpdatePropertyBlurOpacity");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.OnUpdatePropertyBlurFalloffExponent
// (FUNC_Defined, FUNC_Public)

void URadialBlurComponent::OnUpdatePropertyBlurFalloffExponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.OnUpdatePropertyBlurFalloffExponent");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.OnUpdatePropertyBlurScale
// (FUNC_Defined, FUNC_Public)

void URadialBlurComponent::OnUpdatePropertyBlurScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.OnUpdatePropertyBlurScale");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.SetEnabled
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bInEnabled                     (CPF_Parm)

void URadialBlurComponent::SetEnabled(bool bInEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.SetEnabled");

	struct
	{
		bool                           bInEnabled;
	} params;
	params.bInEnabled = bInEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.SetBlurOpacity
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          InBlurOpacity                  (CPF_Parm)

void URadialBlurComponent::SetBlurOpacity(float InBlurOpacity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.SetBlurOpacity");

	struct
	{
		float                          InBlurOpacity;
	} params;
	params.InBlurOpacity = InBlurOpacity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.SetBlurFalloffExponent
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          InBlurFalloffExponent          (CPF_Parm)

void URadialBlurComponent::SetBlurFalloffExponent(float InBlurFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.SetBlurFalloffExponent");

	struct
	{
		float                          InBlurFalloffExponent;
	} params;
	params.InBlurFalloffExponent = InBlurFalloffExponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.SetBlurScale
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          InBlurScale                    (CPF_Parm)

void URadialBlurComponent::SetBlurScale(float InBlurScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.SetBlurScale");

	struct
	{
		float                          InBlurScale;
	} params;
	params.InBlurScale = InBlurScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RadialBlurComponent.SetMaterial
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UMaterialInterface*      InMaterial                     (CPF_Parm)

void URadialBlurComponent::SetMaterial(class UMaterialInterface* InMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RadialBlurComponent.SetMaterial");

	struct
	{
		class UMaterialInterface*      InMaterial;
	} params;
	params.InMaterial = InMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCaptureComponent.ForceRecapture
// (FUNC_Final, FUNC_Native, FUNC_Public)

void USceneCaptureComponent::ForceRecapture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.ForceRecapture");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCaptureComponent.SetEnabled
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bEnable                        (CPF_Parm)

void USceneCaptureComponent::SetEnabled(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.SetEnabled");

	struct
	{
		bool                           bEnable;
	} params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCaptureComponent.SetFrameRate
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          NewFrameRate                   (CPF_Parm)

void USceneCaptureComponent::SetFrameRate(float NewFrameRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCaptureComponent.SetFrameRate");

	struct
	{
		float                          NewFrameRate;
	} params;
	params.NewFrameRate = NewFrameRate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapture2DComponent.SetView
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 NewLocation                    (CPF_Parm)
// struct FRotator                NewRotation                    (CPF_Parm)

void USceneCapture2DComponent::SetView(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DComponent.SetView");

	struct
	{
		struct FVector                 NewLocation;
		struct FRotator                NewRotation;
	} params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapture2DComponent.SetCaptureParameters
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UTextureRenderTarget2D*  NewTextureTarget               (CPF_OptionalParm, CPF_Parm)
// float                          NewFOV                         (CPF_OptionalParm, CPF_Parm)
// float                          NewNearPlane                   (CPF_OptionalParm, CPF_Parm)
// float                          NewFarPlane                    (CPF_OptionalParm, CPF_Parm)

void USceneCapture2DComponent::SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DComponent.SetCaptureParameters");

	struct
	{
		class UTextureRenderTarget2D*  NewTextureTarget;
		float                          NewFOV;
		float                          NewNearPlane;
		float                          NewFarPlane;
	} params;
	params.NewTextureTarget = NewTextureTarget;
	params.NewFOV = NewFOV;
	params.NewNearPlane = NewNearPlane;
	params.NewFarPlane = NewFarPlane;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapture2DHitMaskComponent.SetFadingStartTimeSinceHit
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          InFadingStartTimeSinceHit      (CPF_Const, CPF_Parm)

void USceneCapture2DHitMaskComponent::SetFadingStartTimeSinceHit(float InFadingStartTimeSinceHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DHitMaskComponent.SetFadingStartTimeSinceHit");

	struct
	{
		float                          InFadingStartTimeSinceHit;
	} params;
	params.InFadingStartTimeSinceHit = InFadingStartTimeSinceHit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapture2DHitMaskComponent.SetCaptureParameters
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 InMaskPosition                 (CPF_Const, CPF_Parm)
// float                          InMaskRadius                   (CPF_Const, CPF_Parm)
// struct FVector                 InStartupPosition              (CPF_Const, CPF_Parm)
// bool                           bOnlyWhenFacing                (CPF_Const, CPF_Parm)

void USceneCapture2DHitMaskComponent::SetCaptureParameters(const struct FVector& InMaskPosition, float InMaskRadius, const struct FVector& InStartupPosition, bool bOnlyWhenFacing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DHitMaskComponent.SetCaptureParameters");

	struct
	{
		struct FVector                 InMaskPosition;
		float                          InMaskRadius;
		struct FVector                 InStartupPosition;
		bool                           bOnlyWhenFacing;
	} params;
	params.InMaskPosition = InMaskPosition;
	params.InMaskRadius = InMaskRadius;
	params.InStartupPosition = InStartupPosition;
	params.bOnlyWhenFacing = bOnlyWhenFacing;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapture2DHitMaskComponent.SetCaptureTargetTexture
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UTextureRenderTarget2D*  InTextureTarget                (CPF_Const, CPF_Parm)

void USceneCapture2DHitMaskComponent::SetCaptureTargetTexture(class UTextureRenderTarget2D* InTextureTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapture2DHitMaskComponent.SetCaptureTargetTexture");

	struct
	{
		class UTextureRenderTarget2D*  InTextureTarget;
	} params;
	params.InTextureTarget = InTextureTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneCapturePortalComponent.SetCaptureParameters
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UTextureRenderTarget2D*  NewTextureTarget               (CPF_OptionalParm, CPF_Parm)
// float                          NewScaleFOV                    (CPF_OptionalParm, CPF_Parm)
// class AActor*                  NewViewDest                    (CPF_OptionalParm, CPF_Parm)

void USceneCapturePortalComponent::SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneCapturePortalComponent.SetCaptureParameters");

	struct
	{
		class UTextureRenderTarget2D*  NewTextureTarget;
		float                          NewScaleFOV;
		class AActor*                  NewViewDest;
	} params;
	params.NewTextureTarget = NewTextureTarget;
	params.NewScaleFOV = NewScaleFOV;
	params.NewViewDest = NewViewDest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ActorFactory.PostCreateActor
// (FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  NewActor                       (CPF_Parm)
// class USeqAct_ActorFactory*    ActorFactoryData               (CPF_Const, CPF_OptionalParm, CPF_Parm)

void UActorFactory::PostCreateActor(class AActor* NewActor, class USeqAct_ActorFactory* ActorFactoryData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ActorFactory.PostCreateActor");

	struct
	{
		class AActor*                  NewActor;
		class USeqAct_ActorFactory*    ActorFactoryData;
	} params;
	params.NewActor = NewActor;
	params.ActorFactoryData = ActorFactoryData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SoundCue.GetCueDuration
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USoundCue::GetCueDuration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundCue.GetCueDuration");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ArchetypePool.SpawnClass
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UClass*                  InClass                        (CPF_Parm)
// class AActor*                  SpawnOwner                     (CPF_OptionalParm, CPF_Parm)
// struct FVector                 SpawnLocation                  (CPF_OptionalParm, CPF_Parm)
// struct FRotator                SpawnRotation                  (CPF_OptionalParm, CPF_Parm)
// bool                           bNoCollisionFail               (CPF_OptionalParm, CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_CoerceParm)

class AActor* UArchetypePool::SpawnClass(class UClass* InClass, class AActor* SpawnOwner, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, bool bNoCollisionFail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ArchetypePool.SpawnClass");

	struct
	{
		class UClass*                  InClass;
		class AActor*                  SpawnOwner;
		struct FVector                 SpawnLocation;
		struct FRotator                SpawnRotation;
		bool                           bNoCollisionFail;
		class AActor*                  ReturnValue;
	} params;
	params.InClass = InClass;
	params.SpawnOwner = SpawnOwner;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.bNoCollisionFail = bNoCollisionFail;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ArchetypePool.SpawnArchetype
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  InArchetype                    (CPF_Parm)
// class AActor*                  SpawnOwner                     (CPF_OptionalParm, CPF_Parm)
// struct FVector                 SpawnLocation                  (CPF_OptionalParm, CPF_Parm)
// struct FRotator                SpawnRotation                  (CPF_OptionalParm, CPF_Parm)
// bool                           bNoCollisionFail               (CPF_OptionalParm, CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_CoerceParm)

class AActor* UArchetypePool::SpawnArchetype(class AActor* InArchetype, class AActor* SpawnOwner, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, bool bNoCollisionFail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ArchetypePool.SpawnArchetype");

	struct
	{
		class AActor*                  InArchetype;
		class AActor*                  SpawnOwner;
		struct FVector                 SpawnLocation;
		struct FRotator                SpawnRotation;
		bool                           bNoCollisionFail;
		class AActor*                  ReturnValue;
	} params;
	params.InArchetype = InArchetype;
	params.SpawnOwner = SpawnOwner;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.bNoCollisionFail = bNoCollisionFail;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ArchetypePool.InstanceClass
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UClass*                  InClass                        (CPF_Parm)
// class UObject*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_CoerceParm)

class UObject* UArchetypePool::InstanceClass(class UClass* InClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ArchetypePool.InstanceClass");

	struct
	{
		class UClass*                  InClass;
		class UObject*                 ReturnValue;
	} params;
	params.InClass = InClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ArchetypePool.InstanceArchetype
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UObject*                 InArchetype                    (CPF_Parm)
// class UObject*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_CoerceParm)

class UObject* UArchetypePool::InstanceArchetype(class UObject* InArchetype)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ArchetypePool.InstanceArchetype");

	struct
	{
		class UObject*                 InArchetype;
		class UObject*                 ReturnValue;
	} params;
	params.InArchetype = InArchetype;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.DrawDebugGraph
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 Title                          (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// float                          ValueX                         (CPF_Parm)
// float                          ValueY                         (CPF_Parm)
// float                          UL_X                           (CPF_Parm)
// float                          UL_Y                           (CPF_Parm)
// float                          W                              (CPF_Parm)
// float                          H                              (CPF_Parm)
// struct FVector2D               RangeX                         (CPF_Parm)
// struct FVector2D               RangeY                         (CPF_Parm)

void UCanvas::DrawDebugGraph(const struct FString& Title, float ValueX, float ValueY, float UL_X, float UL_Y, float W, float H, const struct FVector2D& RangeX, const struct FVector2D& RangeY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawDebugGraph");

	struct
	{
		struct FString                 Title;
		float                          ValueX;
		float                          ValueY;
		float                          UL_X;
		float                          UL_Y;
		float                          W;
		float                          H;
		struct FVector2D               RangeX;
		struct FVector2D               RangeY;
	} params;
	params.Title = Title;
	params.ValueX = ValueX;
	params.ValueY = ValueY;
	params.UL_X = UL_X;
	params.UL_Y = UL_Y;
	params.W = W;
	params.H = H;
	params.RangeX = RangeX;
	params.RangeY = RangeY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTextureDoubleLine
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 StartPoint                     (CPF_Parm)
// struct FVector                 EndPoint                       (CPF_Parm)
// float                          Perc                           (CPF_Parm)
// float                          Spacing                        (CPF_Parm)
// float                          Width                          (CPF_Parm)
// struct FColor                  LineColor                      (CPF_Parm)
// struct FColor                  AltLineColor                   (CPF_Parm)
// class UTexture*                Tex                            (CPF_Parm)
// float                          U                              (CPF_Parm)
// float                          V                              (CPF_Parm)
// float                          UL                             (CPF_Parm)
// float                          VL                             (CPF_Parm)

void UCanvas::DrawTextureDoubleLine(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Spacing, float Width, const struct FColor& LineColor, const struct FColor& AltLineColor, class UTexture* Tex, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTextureDoubleLine");

	struct
	{
		struct FVector                 StartPoint;
		struct FVector                 EndPoint;
		float                          Perc;
		float                          Spacing;
		float                          Width;
		struct FColor                  LineColor;
		struct FColor                  AltLineColor;
		class UTexture*                Tex;
		float                          U;
		float                          V;
		float                          UL;
		float                          VL;
	} params;
	params.StartPoint = StartPoint;
	params.EndPoint = EndPoint;
	params.Perc = Perc;
	params.Spacing = Spacing;
	params.Width = Width;
	params.LineColor = LineColor;
	params.AltLineColor = AltLineColor;
	params.Tex = Tex;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTextureLine
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 StartPoint                     (CPF_Parm)
// struct FVector                 EndPoint                       (CPF_Parm)
// float                          Perc                           (CPF_Parm)
// float                          Width                          (CPF_Parm)
// struct FColor                  LineColor                      (CPF_Parm)
// class UTexture*                LineTexture                    (CPF_Parm)
// float                          U                              (CPF_Parm)
// float                          V                              (CPF_Parm)
// float                          UL                             (CPF_Parm)
// float                          VL                             (CPF_Parm)

void UCanvas::DrawTextureLine(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Width, const struct FColor& LineColor, class UTexture* LineTexture, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTextureLine");

	struct
	{
		struct FVector                 StartPoint;
		struct FVector                 EndPoint;
		float                          Perc;
		float                          Width;
		struct FColor                  LineColor;
		class UTexture*                LineTexture;
		float                          U;
		float                          V;
		float                          UL;
		float                          VL;
	} params;
	params.StartPoint = StartPoint;
	params.EndPoint = EndPoint;
	params.Perc = Perc;
	params.Width = Width;
	params.LineColor = LineColor;
	params.LineTexture = LineTexture;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.Draw2DLine
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          X1                             (CPF_Parm)
// float                          Y1                             (CPF_Parm)
// float                          X2                             (CPF_Parm)
// float                          Y2                             (CPF_Parm)
// struct FColor                  LineColor                      (CPF_Parm)

void UCanvas::Draw2DLine(float X1, float Y1, float X2, float Y2, const struct FColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Draw2DLine");

	struct
	{
		float                          X1;
		float                          Y1;
		float                          X2;
		float                          Y2;
		struct FColor                  LineColor;
	} params;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetDrawColorStruct
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// struct FColor                  C                              (CPF_Parm)

void UCanvas::SetDrawColorStruct(const struct FColor& C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetDrawColorStruct");

	struct
	{
		struct FColor                  C;
	} params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetDrawColor
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  R                              (CPF_Parm)
// unsigned char                  G                              (CPF_Parm)
// unsigned char                  B                              (CPF_Parm)
// unsigned char                  A                              (CPF_OptionalParm, CPF_Parm)

void UCanvas::SetDrawColor(unsigned char R, unsigned char G, unsigned char B, unsigned char A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetDrawColor");

	struct
	{
		unsigned char                  R;
		unsigned char                  G;
		unsigned char                  B;
		unsigned char                  A;
	} params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawBox
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// float                          Width                          (CPF_Parm)
// float                          Height                         (CPF_Parm)

void UCanvas::DrawBox(float Width, float Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawBox");

	struct
	{
		float                          Width;
		float                          Height;
	} params;
	params.Width = Width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawRect
// (FUNC_Final, FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          RectX                          (CPF_Parm)
// float                          RectY                          (CPF_Parm)
// class UTexture*                Tex                            (CPF_OptionalParm, CPF_Parm)

void UCanvas::DrawRect(float RectX, float RectY, class UTexture* Tex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawRect");

	struct
	{
		float                          RectX;
		float                          RectY;
		class UTexture*                Tex;
	} params;
	params.RectX = RectX;
	params.RectY = RectY;
	params.Tex = Tex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawPixel
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            X                              (CPF_Parm)
// int                            Y                              (CPF_Parm)
// struct FLinearColor            PixelColor                     (CPF_Parm)
// TEnumAsByte<enum class EBlendMode> BlendMode                      (CPF_OptionalParm, CPF_Parm)

void UCanvas::DrawPixel(int X, int Y, const struct FLinearColor& PixelColor, TEnumAsByte<enum class EBlendMode> BlendMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawPixel");

	struct
	{
		int                            X;
		int                            Y;
		struct FLinearColor            PixelColor;
		TEnumAsByte<enum class EBlendMode> BlendMode;
	} params;
	params.X = X;
	params.Y = Y;
	params.PixelColor = PixelColor;
	params.BlendMode = BlendMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawIcon
// (FUNC_Final, FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FCanvasIcon             Icon                           (CPF_Parm)
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)
// float                          Scale                          (CPF_OptionalParm, CPF_Parm)

void UCanvas::DrawIcon(const struct FCanvasIcon& Icon, float X, float Y, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawIcon");

	struct
	{
		struct FCanvasIcon             Icon;
		float                          X;
		float                          Y;
		float                          Scale;
	} params;
	params.Icon = Icon;
	params.X = X;
	params.Y = Y;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawScaledIcon
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// struct FCanvasIcon             Icon                           (CPF_Parm)
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)
// struct FVector                 Scale                          (CPF_Parm)

void UCanvas::DrawScaledIcon(const struct FCanvasIcon& Icon, float X, float Y, const struct FVector& Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawScaledIcon");

	struct
	{
		struct FCanvasIcon             Icon;
		float                          X;
		float                          Y;
		struct FVector                 Scale;
	} params;
	params.Icon = Icon;
	params.X = X;
	params.Y = Y;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.MakeIcon
// (FUNC_Final, FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class UTexture*                Texture                        (CPF_Parm)
// float                          U                              (CPF_OptionalParm, CPF_Parm)
// float                          V                              (CPF_OptionalParm, CPF_Parm)
// float                          UL                             (CPF_OptionalParm, CPF_Parm)
// float                          VL                             (CPF_OptionalParm, CPF_Parm)
// struct FCanvasIcon             ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FCanvasIcon UCanvas::MakeIcon(class UTexture* Texture, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.MakeIcon");

	struct
	{
		class UTexture*                Texture;
		float                          U;
		float                          V;
		float                          UL;
		float                          VL;
		struct FCanvasIcon             ReturnValue;
	} params;
	params.Texture = Texture;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.DrawBlendedTile
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UTexture*                Tex                            (CPF_Parm)
// float                          XL                             (CPF_Parm)
// float                          YL                             (CPF_Parm)
// float                          U                              (CPF_Parm)
// float                          V                              (CPF_Parm)
// float                          UL                             (CPF_Parm)
// float                          VL                             (CPF_Parm)
// TEnumAsByte<enum class ECanvasBlendMode> Blend                          (CPF_Parm)

void UCanvas::DrawBlendedTile(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, TEnumAsByte<enum class ECanvasBlendMode> Blend)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawBlendedTile");

	struct
	{
		class UTexture*                Tex;
		float                          XL;
		float                          YL;
		float                          U;
		float                          V;
		float                          UL;
		float                          VL;
		TEnumAsByte<enum class ECanvasBlendMode> Blend;
	} params;
	params.Tex = Tex;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.Blend = Blend;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTexture
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// class UTexture*                Tex                            (CPF_Parm)
// float                          Scale                          (CPF_Parm)

void UCanvas::DrawTexture(class UTexture* Tex, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTexture");

	struct
	{
		class UTexture*                Tex;
		float                          Scale;
	} params;
	params.Tex = Tex;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.PopMaskRegion
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UCanvas::PopMaskRegion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PopMaskRegion");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.PushMaskRegion
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)
// float                          XL                             (CPF_Parm)
// float                          YL                             (CPF_Parm)

void UCanvas::PushMaskRegion(float X, float Y, float XL, float YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PushMaskRegion");

	struct
	{
		float                          X;
		float                          Y;
		float                          XL;
		float                          YL;
	} params;
	params.X = X;
	params.Y = Y;
	params.XL = XL;
	params.YL = YL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetClip
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)

void UCanvas::SetClip(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetClip");

	struct
	{
		float                          X;
		float                          Y;
	} params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetOrigin
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)

void UCanvas::SetOrigin(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetOrigin");

	struct
	{
		float                          X;
		float                          Y;
	} params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetPos
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          PosX                           (CPF_Parm)
// float                          PosY                           (CPF_Parm)
// float                          PosZ                           (CPF_OptionalParm, CPF_Parm)

void UCanvas::SetPos(float PosX, float PosY, float PosZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetPos");

	struct
	{
		float                          PosX;
		float                          PosY;
		float                          PosZ;
	} params;
	params.PosX = PosX;
	params.PosY = PosY;
	params.PosZ = PosZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.GetDefaultCanvasFont
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UFont*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UFont* UCanvas::GetDefaultCanvasFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.GetDefaultCanvasFont");

	struct
	{
		class UFont*                   ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.Reset
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bKeepOrigin                    (CPF_OptionalParm, CPF_Parm)

void UCanvas::Reset(bool bKeepOrigin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Reset");

	struct
	{
		bool                           bKeepOrigin;
	} params;
	params.bKeepOrigin = bKeepOrigin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.Push3DTransform
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Translation                    (CPF_Parm)
// struct FRotator                Rotation                       (CPF_Parm)
// float                          FOV                            (CPF_OptionalParm, CPF_Parm)

void UCanvas::Push3DTransform(const struct FVector& Translation, const struct FRotator& Rotation, float FOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Push3DTransform");

	struct
	{
		struct FVector                 Translation;
		struct FRotator                Rotation;
		float                          FOV;
	} params;
	params.Translation = Translation;
	params.Rotation = Rotation;
	params.FOV = FOV;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.PopTransform
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UCanvas::PopTransform()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PopTransform");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.PushTranslationMatrix
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 TranslationVector              (CPF_Parm)

void UCanvas::PushTranslationMatrix(const struct FVector& TranslationVector)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PushTranslationMatrix");

	struct
	{
		struct FVector                 TranslationVector;
	} params;
	params.TranslationVector = TranslationVector;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DeProject
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector2D               ScreenPos                      (CPF_Parm)
// struct FVector                 WorldOrigin                    (CPF_Parm, CPF_OutParm)
// struct FVector                 WorldDirection                 (CPF_Parm, CPF_OutParm)

void UCanvas::DeProject(const struct FVector2D& ScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DeProject");

	struct
	{
		struct FVector2D               ScreenPos;
		struct FVector                 WorldOrigin;
		struct FVector                 WorldDirection;
	} params;
	params.ScreenPos = ScreenPos;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WorldOrigin != nullptr)
		*WorldOrigin = params.WorldOrigin;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;
}


// Function Engine.Canvas.Project
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 Location                       (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector UCanvas::Project(const struct FVector& Location)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Project");

	struct
	{
		struct FVector                 Location;
		struct FVector                 ReturnValue;
	} params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.DrawText
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 Text                           (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// bool                           CR                             (CPF_OptionalParm, CPF_Parm)
// float                          XScale                         (CPF_OptionalParm, CPF_Parm)
// float                          YScale                         (CPF_OptionalParm, CPF_Parm)
// struct FFontRenderInfo         RenderInfo                     (CPF_Const, CPF_OptionalParm, CPF_Parm, CPF_OutParm)

void UCanvas::DrawText(const struct FString& Text, bool CR, float XScale, float YScale, struct FFontRenderInfo* RenderInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawText");

	struct
	{
		struct FString                 Text;
		bool                           CR;
		float                          XScale;
		float                          YScale;
		struct FFontRenderInfo         RenderInfo;
	} params;
	params.Text = Text;
	params.CR = CR;
	params.XScale = XScale;
	params.YScale = YScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RenderInfo != nullptr)
		*RenderInfo = params.RenderInfo;
}


// Function Engine.Canvas.TextSize
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 String                         (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// float                          XL                             (CPF_Parm, CPF_OutParm)
// float                          YL                             (CPF_Parm, CPF_OutParm)
// float                          XScale                         (CPF_OptionalParm, CPF_Parm)
// float                          YScale                         (CPF_OptionalParm, CPF_Parm)

void UCanvas::TextSize(const struct FString& String, float XScale, float YScale, float* XL, float* YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.TextSize");

	struct
	{
		struct FString                 String;
		float                          XL;
		float                          YL;
		float                          XScale;
		float                          YScale;
	} params;
	params.String = String;
	params.XScale = XScale;
	params.YScale = YScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (XL != nullptr)
		*XL = params.XL;
	if (YL != nullptr)
		*YL = params.YL;
}


// Function Engine.Canvas.StrLen
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 String                         (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// float                          XL                             (CPF_Parm, CPF_OutParm)
// float                          YL                             (CPF_Parm, CPF_OutParm)

void UCanvas::StrLen(const struct FString& String, float* XL, float* YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.StrLen");

	struct
	{
		struct FString                 String;
		float                          XL;
		float                          YL;
	} params;
	params.String = String;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (XL != nullptr)
		*XL = params.XL;
	if (YL != nullptr)
		*YL = params.YL;
}


// Function Engine.Canvas.CreateFontRenderInfo
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// bool                           bClipText                      (CPF_OptionalParm, CPF_Parm)
// bool                           bEnableShadow                  (CPF_OptionalParm, CPF_Parm)
// struct FLinearColor            GlowColor                      (CPF_OptionalParm, CPF_Parm)
// struct FVector2D               GlowOuterRadius                (CPF_OptionalParm, CPF_Parm)
// struct FVector2D               GlowInnerRadius                (CPF_OptionalParm, CPF_Parm)
// struct FFontRenderInfo         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FFontRenderInfo UCanvas::STATIC_CreateFontRenderInfo(bool bClipText, bool bEnableShadow, const struct FLinearColor& GlowColor, const struct FVector2D& GlowOuterRadius, const struct FVector2D& GlowInnerRadius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.CreateFontRenderInfo");

	struct
	{
		bool                           bClipText;
		bool                           bEnableShadow;
		struct FLinearColor            GlowColor;
		struct FVector2D               GlowOuterRadius;
		struct FVector2D               GlowInnerRadius;
		struct FFontRenderInfo         ReturnValue;
	} params;
	params.bClipText = bClipText;
	params.bEnableShadow = bEnableShadow;
	params.GlowColor = GlowColor;
	params.GlowOuterRadius = GlowOuterRadius;
	params.GlowInnerRadius = GlowInnerRadius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.DrawTris
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UTexture*                Tex                            (CPF_Parm)
// TArray<struct FCanvasUVTri>    Triangles                      (CPF_Parm, CPF_NeedCtorLink)
// struct FColor                  InColor                        (CPF_Parm)

void UCanvas::DrawTris(class UTexture* Tex, TArray<struct FCanvasUVTri> Triangles, const struct FColor& InColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTris");

	struct
	{
		class UTexture*                Tex;
		TArray<struct FCanvasUVTri>    Triangles;
		struct FColor                  InColor;
	} params;
	params.Tex = Tex;
	params.Triangles = Triangles;
	params.InColor = InColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTileStretched
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UTexture*                Tex                            (CPF_Parm)
// float                          XL                             (CPF_Parm)
// float                          YL                             (CPF_Parm)
// float                          U                              (CPF_Parm)
// float                          V                              (CPF_Parm)
// float                          UL                             (CPF_Parm)
// float                          VL                             (CPF_Parm)
// struct FLinearColor            LColor                         (CPF_OptionalParm, CPF_Parm)
// bool                           bStretchHorizontally           (CPF_OptionalParm, CPF_Parm)
// bool                           bStretchVertically             (CPF_OptionalParm, CPF_Parm)
// float                          ScalingFactor                  (CPF_OptionalParm, CPF_Parm)

void UCanvas::DrawTileStretched(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor, bool bStretchHorizontally, bool bStretchVertically, float ScalingFactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTileStretched");

	struct
	{
		class UTexture*                Tex;
		float                          XL;
		float                          YL;
		float                          U;
		float                          V;
		float                          UL;
		float                          VL;
		struct FLinearColor            LColor;
		bool                           bStretchHorizontally;
		bool                           bStretchVertically;
		float                          ScalingFactor;
	} params;
	params.Tex = Tex;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.LColor = LColor;
	params.bStretchHorizontally = bStretchHorizontally;
	params.bStretchVertically = bStretchVertically;
	params.ScalingFactor = ScalingFactor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTimer
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UTexture*                Tex                            (CPF_Parm)
// float                          StartTime                      (CPF_Parm)
// float                          TotalTime                      (CPF_Parm)
// float                          XL                             (CPF_Parm)
// float                          YL                             (CPF_Parm)
// float                          U                              (CPF_Parm)
// float                          V                              (CPF_Parm)
// float                          UL                             (CPF_Parm)
// float                          VL                             (CPF_Parm)
// struct FLinearColor            LColor                         (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class EBlendMode> Blend                          (CPF_OptionalParm, CPF_Parm)

void UCanvas::DrawTimer(class UTexture* Tex, float StartTime, float TotalTime, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor, TEnumAsByte<enum class EBlendMode> Blend)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTimer");

	struct
	{
		class UTexture*                Tex;
		float                          StartTime;
		float                          TotalTime;
		float                          XL;
		float                          YL;
		float                          U;
		float                          V;
		float                          UL;
		float                          VL;
		struct FLinearColor            LColor;
		TEnumAsByte<enum class EBlendMode> Blend;
	} params;
	params.Tex = Tex;
	params.StartTime = StartTime;
	params.TotalTime = TotalTime;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.LColor = LColor;
	params.Blend = Blend;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawRotatedMaterialTile
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UMaterialInterface*      Mat                            (CPF_Parm)
// struct FRotator                Rotation                       (CPF_Parm)
// float                          XL                             (CPF_Parm)
// float                          YL                             (CPF_Parm)
// float                          U                              (CPF_OptionalParm, CPF_Parm)
// float                          V                              (CPF_OptionalParm, CPF_Parm)
// float                          UL                             (CPF_OptionalParm, CPF_Parm)
// float                          VL                             (CPF_OptionalParm, CPF_Parm)
// float                          AnchorX                        (CPF_OptionalParm, CPF_Parm)
// float                          AnchorY                        (CPF_OptionalParm, CPF_Parm)

void UCanvas::DrawRotatedMaterialTile(class UMaterialInterface* Mat, const struct FRotator& Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawRotatedMaterialTile");

	struct
	{
		class UMaterialInterface*      Mat;
		struct FRotator                Rotation;
		float                          XL;
		float                          YL;
		float                          U;
		float                          V;
		float                          UL;
		float                          VL;
		float                          AnchorX;
		float                          AnchorY;
	} params;
	params.Mat = Mat;
	params.Rotation = Rotation;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.AnchorX = AnchorX;
	params.AnchorY = AnchorY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawRotatedTile
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UTexture*                Tex                            (CPF_Parm)
// struct FRotator                Rotation                       (CPF_Parm)
// float                          XL                             (CPF_Parm)
// float                          YL                             (CPF_Parm)
// float                          U                              (CPF_Parm)
// float                          V                              (CPF_Parm)
// float                          UL                             (CPF_Parm)
// float                          VL                             (CPF_Parm)
// float                          AnchorX                        (CPF_OptionalParm, CPF_Parm)
// float                          AnchorY                        (CPF_OptionalParm, CPF_Parm)

void UCanvas::DrawRotatedTile(class UTexture* Tex, const struct FRotator& Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawRotatedTile");

	struct
	{
		class UTexture*                Tex;
		struct FRotator                Rotation;
		float                          XL;
		float                          YL;
		float                          U;
		float                          V;
		float                          UL;
		float                          VL;
		float                          AnchorX;
		float                          AnchorY;
	} params;
	params.Tex = Tex;
	params.Rotation = Rotation;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.AnchorX = AnchorX;
	params.AnchorY = AnchorY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawMaterialTile
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UMaterialInterface*      Mat                            (CPF_Parm)
// float                          XL                             (CPF_Parm)
// float                          YL                             (CPF_Parm)
// float                          U                              (CPF_OptionalParm, CPF_Parm)
// float                          V                              (CPF_OptionalParm, CPF_Parm)
// float                          UL                             (CPF_OptionalParm, CPF_Parm)
// float                          VL                             (CPF_OptionalParm, CPF_Parm)
// bool                           bClipTile                      (CPF_OptionalParm, CPF_Parm)

void UCanvas::DrawMaterialTile(class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL, bool bClipTile)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawMaterialTile");

	struct
	{
		class UMaterialInterface*      Mat;
		float                          XL;
		float                          YL;
		float                          U;
		float                          V;
		float                          UL;
		float                          VL;
		bool                           bClipTile;
	} params;
	params.Mat = Mat;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.bClipTile = bClipTile;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.PreOptimizeDrawTiles
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Num                            (CPF_Parm)
// class UTexture*                Tex                            (CPF_Parm)
// TEnumAsByte<enum class EBlendMode> Blend                          (CPF_OptionalParm, CPF_Parm)

void UCanvas::PreOptimizeDrawTiles(int Num, class UTexture* Tex, TEnumAsByte<enum class EBlendMode> Blend)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.PreOptimizeDrawTiles");

	struct
	{
		int                            Num;
		class UTexture*                Tex;
		TEnumAsByte<enum class EBlendMode> Blend;
	} params;
	params.Num = Num;
	params.Tex = Tex;
	params.Blend = Blend;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTile
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UTexture*                Tex                            (CPF_Parm)
// float                          XL                             (CPF_Parm)
// float                          YL                             (CPF_Parm)
// float                          U                              (CPF_Parm)
// float                          V                              (CPF_Parm)
// float                          UL                             (CPF_Parm)
// float                          VL                             (CPF_Parm)
// struct FLinearColor            LColor                         (CPF_OptionalParm, CPF_Parm)
// bool                           ClipTile                       (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class EBlendMode> Blend                          (CPF_OptionalParm, CPF_Parm)

void UCanvas::DrawTile(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor, bool ClipTile, TEnumAsByte<enum class EBlendMode> Blend)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTile");

	struct
	{
		class UTexture*                Tex;
		float                          XL;
		float                          YL;
		float                          U;
		float                          V;
		float                          UL;
		float                          VL;
		struct FLinearColor            LColor;
		bool                           ClipTile;
		TEnumAsByte<enum class EBlendMode> Blend;
	} params;
	params.Tex = Tex;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.LColor = LColor;
	params.ClipTile = ClipTile;
	params.Blend = Blend;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GeneratePathToLocation
// (FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Goal                           (CPF_Parm)
// float                          WithinDistance                 (CPF_OptionalParm, CPF_Parm)
// bool                           bAllowPartialPath              (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::GeneratePathToLocation(const struct FVector& Goal, float WithinDistance, bool bAllowPartialPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GeneratePathToLocation");

	struct
	{
		struct FVector                 Goal;
		float                          WithinDistance;
		bool                           bAllowPartialPath;
		bool                           ReturnValue;
	} params;
	params.Goal = Goal;
	params.WithinDistance = WithinDistance;
	params.bAllowPartialPath = bAllowPartialPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.GeneratePathToActor
// (FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  Goal                           (CPF_Parm)
// float                          WithinDistance                 (CPF_OptionalParm, CPF_Parm)
// bool                           bAllowPartialPath              (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::GeneratePathToActor(class AActor* Goal, float WithinDistance, bool bAllowPartialPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GeneratePathToActor");

	struct
	{
		class AActor*                  Goal;
		float                          WithinDistance;
		bool                           bAllowPartialPath;
		bool                           ReturnValue;
	} params;
	params.Goal = Goal;
	params.WithinDistance = WithinDistance;
	params.bAllowPartialPath = bAllowPartialPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.InterpolationFinished
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (CPF_Parm)

void AController::InterpolationFinished(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InterpolationFinished");

	struct
	{
		class USeqAct_Interp*          InterpAction;
	} params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.InterpolationStarted
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (CPF_Parm)
// class UInterpGroupInst*        GroupInst                      (CPF_Parm)

void AController::InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InterpolationStarted");

	struct
	{
		class USeqAct_Interp*          InterpAction;
		class UInterpGroupInst*        GroupInst;
	} params;
	params.InterpAction = InterpAction;
	params.GroupInst = GroupInst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.InitNavigationHandle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AController::InitNavigationHandle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InitNavigationHandle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReadyForLift
// (FUNC_Public)

void AController::ReadyForLift()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReadyForLift");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SendMessage
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  Recipient                      (CPF_Parm)
// struct FName                   MessageType                    (CPF_Parm)
// float                          Wait                           (CPF_Parm)
// class UClass*                  DamageType                     (CPF_OptionalParm, CPF_Parm)

void AController::SendMessage(class APlayerReplicationInfo* Recipient, const struct FName& MessageType, float Wait, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SendMessage");

	struct
	{
		class APlayerReplicationInfo*  Recipient;
		struct FName                   MessageType;
		float                          Wait;
		class UClass*                  DamageType;
	} params;
	params.Recipient = Recipient;
	params.MessageType = MessageType;
	params.Wait = Wait;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.CurrentLevelUnloaded
// (FUNC_Event, FUNC_Public)

void AController::CurrentLevelUnloaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CurrentLevelUnloaded");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.IsInCombat
// (FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bForceCheck                    (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::IsInCombat(bool bForceCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsInCombat");

	struct
	{
		bool                           bForceCheck;
		bool                           ReturnValue;
	} params;
	params.bForceCheck = bForceCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsSpectating
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::IsSpectating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsSpectating");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.OnToggleHidden
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_ToggleHidden*    Action                         (CPF_Parm)

void AController::OnToggleHidden(class USeqAct_ToggleHidden* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnToggleHidden");

	struct
	{
		class USeqAct_ToggleHidden*    Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyAddInventory
// (FUNC_Public)
// Parameters:
// class AInventory*              NewItem                        (CPF_Parm)

void AController::NotifyAddInventory(class AInventory* NewItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyAddInventory");

	struct
	{
		class AInventory*              NewItem;
	} params;
	params.NewItem = NewItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnModifyHealth
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_ModifyHealth*    Action                         (CPF_Parm)

void AController::OnModifyHealth(class USeqAct_ModifyHealth* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnModifyHealth");

	struct
	{
		class USeqAct_ModifyHealth*    Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyCoverClaimViolation
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// class AController*             NewClaim                       (CPF_Parm)
// class ACoverLink*              Link                           (CPF_Parm)
// int                            SlotIdx                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::NotifyCoverClaimViolation(class AController* NewClaim, class ACoverLink* Link, int SlotIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyCoverClaimViolation");

	struct
	{
		class AController*             NewClaim;
		class ACoverLink*              Link;
		int                            SlotIdx;
		bool                           ReturnValue;
	} params;
	params.NewClaim = NewClaim;
	params.Link = Link;
	params.SlotIdx = SlotIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyCoverAdjusted
// (FUNC_Simulated, FUNC_Event, FUNC_Public)

void AController::NotifyCoverAdjusted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyCoverAdjusted");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyCoverDisabled
// (FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class ACoverLink*              Link                           (CPF_Parm)
// int                            SlotIdx                        (CPF_Parm)
// bool                           bAdjacentIdx                   (CPF_OptionalParm, CPF_Parm)

void AController::NotifyCoverDisabled(class ACoverLink* Link, int SlotIdx, bool bAdjacentIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyCoverDisabled");

	struct
	{
		class ACoverLink*              Link;
		int                            SlotIdx;
		bool                           bAdjacentIdx;
	} params;
	params.Link = Link;
	params.SlotIdx = SlotIdx;
	params.bAdjacentIdx = bAdjacentIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnSetVelocity
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_SetVelocity*     Action                         (CPF_Parm)

void AController::OnSetVelocity(class USeqAct_SetVelocity* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnSetVelocity");

	struct
	{
		class USeqAct_SetVelocity*     Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnSetPhysics
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_SetPhysics*      Action                         (CPF_Parm)

void AController::OnSetPhysics(class USeqAct_SetPhysics* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnSetPhysics");

	struct
	{
		class USeqAct_SetPhysics*      Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnToggleGodMode
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_ToggleGodMode*   inAction                       (CPF_Parm)

void AController::OnToggleGodMode(class USeqAct_ToggleGodMode* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnToggleGodMode");

	struct
	{
		class USeqAct_ToggleGodMode*   inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnAttachToActor
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_AttachToActor*   Action                         (CPF_Parm)

void AController::OnAttachToActor(class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnAttachToActor");

	struct
	{
		class USeqAct_AttachToActor*   Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnTeleport
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Teleport*        Action                         (CPF_Parm)

void AController::OnTeleport(class USeqAct_Teleport* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnTeleport");

	struct
	{
		class USeqAct_Teleport*        Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.IsDead
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::IsDead()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsDead");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.GetHumanReadableName
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString AController::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetHumanReadableName");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.DisplayDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm, CPF_OutParm)
// float                          out_YPos                       (CPF_Parm, CPF_OutParm)

void AController::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.DisplayDebug");

	struct
	{
		class AHUD*                    HUD;
		float                          out_YL;
		float                          out_YPos;
	} params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Controller.StopLatentExecution
// (FUNC_Final, FUNC_Native, FUNC_Public)

void AController::StopLatentExecution()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopLatentExecution");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.InLatentExecution
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            LatentActionNumber             (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::InLatentExecution(int LatentActionNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InLatentExecution");

	struct
	{
		int                            LatentActionNumber;
		bool                           ReturnValue;
	} params;
	params.LatentActionNumber = LatentActionNumber;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.ReachedPreciseDestination
// (FUNC_Event, FUNC_Public)

void AController::ReachedPreciseDestination()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReachedPreciseDestination");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyMissedJump
// (FUNC_Event, FUNC_Public)

void AController::NotifyMissedJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyMissedJump");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyJumpApex
// (FUNC_Event, FUNC_Public)

void AController::NotifyJumpApex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyJumpApex");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyBump
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::NotifyBump(class AActor* Other, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyBump");

	struct
	{
		class AActor*                  Other;
		struct FVector                 HitNormal;
		bool                           ReturnValue;
	} params;
	params.Other = Other;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyFallingHitWall
// (FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  Wall                           (CPF_Parm)

void AController::NotifyFallingHitWall(const struct FVector& HitNormal, class AActor* Wall)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyFallingHitWall");

	struct
	{
		struct FVector                 HitNormal;
		class AActor*                  Wall;
	} params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyHitWall
// (FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  Wall                           (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::NotifyHitWall(const struct FVector& HitNormal, class AActor* Wall)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyHitWall");

	struct
	{
		struct FVector                 HitNormal;
		class AActor*                  Wall;
		bool                           ReturnValue;
	} params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyLanded
// (FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  FloorActor                     (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::NotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyLanded");

	struct
	{
		struct FVector                 HitNormal;
		class AActor*                  FloorActor;
		bool                           ReturnValue;
	} params;
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyHeadVolumeChange
// (FUNC_Event, FUNC_Public)
// Parameters:
// class APhysicsVolume*          NewVolume                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::NotifyHeadVolumeChange(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyHeadVolumeChange");

	struct
	{
		class APhysicsVolume*          NewVolume;
		bool                           ReturnValue;
	} params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyPhysicsVolumeChange
// (FUNC_Event, FUNC_Public)
// Parameters:
// class APhysicsVolume*          NewVolume                      (CPF_Parm)

void AController::NotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyPhysicsVolumeChange");

	struct
	{
		class APhysicsVolume*          NewVolume;
	} params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.LandingShake
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::LandingShake()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.LandingShake");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.GetActorEyesViewPoint
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 out_Location                   (CPF_Parm, CPF_OutParm)
// struct FRotator                out_Rotation                   (CPF_Parm, CPF_OutParm)

void AController::GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetActorEyesViewPoint");

	struct
	{
		struct FVector                 out_Location;
		struct FRotator                out_Rotation;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.Controller.HandlePathObstruction
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  BlockedBy                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::HandlePathObstruction(class AActor* BlockedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.HandlePathObstruction");

	struct
	{
		class AActor*                  BlockedBy;
		bool                           ReturnValue;
	} params;
	params.BlockedBy = BlockedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.UnderLift
// (FUNC_Public)
// Parameters:
// class ALiftCenter*             Lift                           (CPF_Parm)

void AController::UnderLift(class ALiftCenter* Lift)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.UnderLift");

	struct
	{
		class ALiftCenter*             Lift;
	} params;
	params.Lift = Lift;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MoverFinished
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::MoverFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoverFinished");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.WaitForMover
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AInterpActor*            M                              (CPF_Parm)

void AController::WaitForMover(class AInterpActor* M)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WaitForMover");

	struct
	{
		class AInterpActor*            M;
	} params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.AllowDetourTo
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ANavigationPoint*        N                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::AllowDetourTo(class ANavigationPoint* N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.AllowDetourTo");

	struct
	{
		class ANavigationPoint*        N;
		bool                           ReturnValue;
	} params;
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.MayFall
// (FUNC_Event, FUNC_Public)
// Parameters:
// bool                           bFloor                         (CPF_Parm)
// struct FVector                 FloorNormal                    (CPF_Parm)

void AController::MayFall(bool bFloor, const struct FVector& FloorNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MayFall");

	struct
	{
		bool                           bFloor;
		struct FVector                 FloorNormal;
	} params;
	params.bFloor = bFloor;
	params.FloorNormal = FloorNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.EndClimbLadder
// (FUNC_Native, FUNC_Public)

void AController::EndClimbLadder()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.EndClimbLadder");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.LongFall
// (FUNC_Event, FUNC_Public)

void AController::LongFall()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.LongFall");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.WaitForLanding
// (FUNC_Final, FUNC_Latent, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          waitDuration                   (CPF_OptionalParm, CPF_Parm)

void AController::WaitForLanding(float waitDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WaitForLanding");

	struct
	{
		float                          waitDuration;
	} params;
	params.waitDuration = waitDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PickWallAdjust
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 HitNormal                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::PickWallAdjust(const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PickWallAdjust");

	struct
	{
		struct FVector                 HitNormal;
		bool                           ReturnValue;
	} params;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.MoveUnreachable
// (FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 AttemptedDest                  (CPF_Parm)
// class AActor*                  AttemptedTarget                (CPF_Parm)

void AController::MoveUnreachable(const struct FVector& AttemptedDest, class AActor* AttemptedTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveUnreachable");

	struct
	{
		struct FVector                 AttemptedDest;
		class AActor*                  AttemptedTarget;
	} params;
	params.AttemptedDest = AttemptedDest;
	params.AttemptedTarget = AttemptedTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ActorReachable
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  anActor                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::ActorReachable(class AActor* anActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ActorReachable");

	struct
	{
		class AActor*                  anActor;
		bool                           ReturnValue;
	} params;
	params.anActor = anActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.PointReachable
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 aPoint                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::PointReachable(const struct FVector& aPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PointReachable");

	struct
	{
		struct FVector                 aPoint;
		bool                           ReturnValue;
	} params;
	params.aPoint = aPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathToIntercept
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// class AActor*                  InRouteGoal                    (CPF_Parm)
// bool                           bWeightDetours                 (CPF_OptionalParm, CPF_Parm)
// int                            MaxPathLength                  (CPF_OptionalParm, CPF_Parm)
// bool                           bReturnPartial                 (CPF_OptionalParm, CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AActor* AController::FindPathToIntercept(class APawn* P, class AActor* InRouteGoal, bool bWeightDetours, int MaxPathLength, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathToIntercept");

	struct
	{
		class APawn*                   P;
		class AActor*                  InRouteGoal;
		bool                           bWeightDetours;
		int                            MaxPathLength;
		bool                           bReturnPartial;
		class AActor*                  ReturnValue;
	} params;
	params.P = P;
	params.InRouteGoal = InRouteGoal;
	params.bWeightDetours = bWeightDetours;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindRandomDest
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class ANavigationPoint*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ANavigationPoint* AController::FindRandomDest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindRandomDest");

	struct
	{
		class ANavigationPoint*        ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathTowardNearest
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UClass*                  GoalClass                      (CPF_Parm)
// bool                           bWeightDetours                 (CPF_OptionalParm, CPF_Parm)
// int                            MaxPathLength                  (CPF_OptionalParm, CPF_Parm)
// bool                           bReturnPartial                 (CPF_OptionalParm, CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AActor* AController::FindPathTowardNearest(class UClass* GoalClass, bool bWeightDetours, int MaxPathLength, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathTowardNearest");

	struct
	{
		class UClass*                  GoalClass;
		bool                           bWeightDetours;
		int                            MaxPathLength;
		bool                           bReturnPartial;
		class AActor*                  ReturnValue;
	} params;
	params.GoalClass = GoalClass;
	params.bWeightDetours = bWeightDetours;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathToward
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  anActor                        (CPF_Parm)
// bool                           bWeightDetours                 (CPF_OptionalParm, CPF_Parm)
// int                            MaxPathLength                  (CPF_OptionalParm, CPF_Parm)
// bool                           bReturnPartial                 (CPF_OptionalParm, CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AActor* AController::FindPathToward(class AActor* anActor, bool bWeightDetours, int MaxPathLength, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathToward");

	struct
	{
		class AActor*                  anActor;
		bool                           bWeightDetours;
		int                            MaxPathLength;
		bool                           bReturnPartial;
		class AActor*                  ReturnValue;
	} params;
	params.anActor = anActor;
	params.bWeightDetours = bWeightDetours;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathTo
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 aPoint                         (CPF_Parm)
// int                            MaxPathLength                  (CPF_OptionalParm, CPF_Parm)
// bool                           bReturnPartial                 (CPF_OptionalParm, CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AActor* AController::FindPathTo(const struct FVector& aPoint, int MaxPathLength, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathTo");

	struct
	{
		struct FVector                 aPoint;
		int                            MaxPathLength;
		bool                           bReturnPartial;
		class AActor*                  ReturnValue;
	} params;
	params.aPoint = aPoint;
	params.MaxPathLength = MaxPathLength;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FinishRotation
// (FUNC_Final, FUNC_Latent, FUNC_Native, FUNC_Public)

void AController::FinishRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FinishRotation");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetupSpecialPathAbilities
// (FUNC_Event, FUNC_Public)

void AController::SetupSpecialPathAbilities()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetupSpecialPathAbilities");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MoveToward
// (FUNC_Final, FUNC_Latent, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  NewTarget                      (CPF_Parm)
// class AActor*                  ViewFocus                      (CPF_OptionalParm, CPF_Parm)
// float                          DestinationOffset              (CPF_OptionalParm, CPF_Parm)
// bool                           bUseStrafing                   (CPF_OptionalParm, CPF_Parm)
// bool                           bShouldWalk                    (CPF_OptionalParm, CPF_Parm)

void AController::MoveToward(class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, bool bUseStrafing, bool bShouldWalk)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveToward");

	struct
	{
		class AActor*                  NewTarget;
		class AActor*                  ViewFocus;
		float                          DestinationOffset;
		bool                           bUseStrafing;
		bool                           bShouldWalk;
	} params;
	params.NewTarget = NewTarget;
	params.ViewFocus = ViewFocus;
	params.DestinationOffset = DestinationOffset;
	params.bUseStrafing = bUseStrafing;
	params.bShouldWalk = bShouldWalk;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MoveToDirectNonPathPos
// (FUNC_Final, FUNC_Latent, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 NewDestination                 (CPF_Parm)
// class AActor*                  ViewFocus                      (CPF_OptionalParm, CPF_Parm)
// float                          DestinationOffset              (CPF_OptionalParm, CPF_Parm)
// bool                           bShouldWalk                    (CPF_OptionalParm, CPF_Parm)

void AController::MoveToDirectNonPathPos(const struct FVector& NewDestination, class AActor* ViewFocus, float DestinationOffset, bool bShouldWalk)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveToDirectNonPathPos");

	struct
	{
		struct FVector                 NewDestination;
		class AActor*                  ViewFocus;
		float                          DestinationOffset;
		bool                           bShouldWalk;
	} params;
	params.NewDestination = NewDestination;
	params.ViewFocus = ViewFocus;
	params.DestinationOffset = DestinationOffset;
	params.bShouldWalk = bShouldWalk;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MoveTo
// (FUNC_Final, FUNC_Latent, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 NewDestination                 (CPF_Parm)
// class AActor*                  ViewFocus                      (CPF_OptionalParm, CPF_Parm)
// float                          DestinationOffset              (CPF_OptionalParm, CPF_Parm)
// bool                           bShouldWalk                    (CPF_OptionalParm, CPF_Parm)

void AController::MoveTo(const struct FVector& NewDestination, class AActor* ViewFocus, float DestinationOffset, bool bShouldWalk)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveTo");

	struct
	{
		struct FVector                 NewDestination;
		class AActor*                  ViewFocus;
		float                          DestinationOffset;
		bool                           bShouldWalk;
	} params;
	params.NewDestination = NewDestination;
	params.ViewFocus = ViewFocus;
	params.DestinationOffset = DestinationOffset;
	params.bShouldWalk = bShouldWalk;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.EnemyNotVisible
// (FUNC_Event, FUNC_Public)

void AController::EnemyNotVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.EnemyNotVisible");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SeeMonster
// (FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Seen                           (CPF_Parm)

void AController::SeeMonster(class APawn* Seen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SeeMonster");

	struct
	{
		class APawn*                   Seen;
	} params;
	params.Seen = Seen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SeePlayer
// (FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Seen                           (CPF_Parm)

void AController::SeePlayer(class APawn* Seen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SeePlayer");

	struct
	{
		class APawn*                   Seen;
	} params;
	params.Seen = Seen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.HearNoise
// (FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          Loudness                       (CPF_Parm)
// class AActor*                  NoiseMaker                     (CPF_Parm)
// struct FName                   NoiseType                      (CPF_OptionalParm, CPF_Parm)

void AController::HearNoise(float Loudness, class AActor* NoiseMaker, const struct FName& NoiseType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.HearNoise");

	struct
	{
		float                          Loudness;
		class AActor*                  NoiseMaker;
		struct FName                   NoiseType;
	} params;
	params.Loudness = Loudness;
	params.NoiseMaker = NoiseMaker;
	params.NoiseType = NoiseType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PickTarget
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  TargetClass                    (CPF_Parm)
// float                          bestAim                        (CPF_Parm, CPF_OutParm)
// float                          bestDist                       (CPF_Parm, CPF_OutParm)
// struct FVector                 FireDir                        (CPF_Parm)
// struct FVector                 projStart                      (CPF_Parm)
// float                          MaxRange                       (CPF_Parm)
// class APawn*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APawn* AController::PickTarget(class UClass* TargetClass, const struct FVector& FireDir, const struct FVector& projStart, float MaxRange, float* bestAim, float* bestDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PickTarget");

	struct
	{
		class UClass*                  TargetClass;
		float                          bestAim;
		float                          bestDist;
		struct FVector                 FireDir;
		struct FVector                 projStart;
		float                          MaxRange;
		class APawn*                   ReturnValue;
	} params;
	params.TargetClass = TargetClass;
	params.FireDir = FireDir;
	params.projStart = projStart;
	params.MaxRange = MaxRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bestAim != nullptr)
		*bestAim = params.bestAim;
	if (bestDist != nullptr)
		*bestDist = params.bestDist;

	return params.ReturnValue;
}


// Function Engine.Controller.CanSeeByPoints
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ViewLocation                   (CPF_Parm)
// struct FVector                 TestLocation                   (CPF_Parm)
// struct FRotator                ViewRotation                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::CanSeeByPoints(const struct FVector& ViewLocation, const struct FVector& TestLocation, const struct FRotator& ViewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CanSeeByPoints");

	struct
	{
		struct FVector                 ViewLocation;
		struct FVector                 TestLocation;
		struct FRotator                ViewRotation;
		bool                           ReturnValue;
	} params;
	params.ViewLocation = ViewLocation;
	params.TestLocation = TestLocation;
	params.ViewRotation = ViewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.CanSee
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::CanSee(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CanSee");

	struct
	{
		class APawn*                   Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.LineOfSightTo
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// struct FVector                 chkLocation                    (CPF_OptionalParm, CPF_Parm)
// bool                           bTryAlternateTargetLoc         (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::LineOfSightTo(class AActor* Other, const struct FVector& chkLocation, bool bTryAlternateTargetLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.LineOfSightTo");

	struct
	{
		class AActor*                  Other;
		struct FVector                 chkLocation;
		bool                           bTryAlternateTargetLoc;
		bool                           ReturnValue;
	} params;
	params.Other = Other;
	params.chkLocation = chkLocation;
	params.bTryAlternateTargetLoc = bTryAlternateTargetLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyChangedWeapon
// (FUNC_Public)
// Parameters:
// class AWeapon*                 PrevWeapon                     (CPF_Parm)
// class AWeapon*                 NewWeapon                      (CPF_Parm)

void AController::NotifyChangedWeapon(class AWeapon* PrevWeapon, class AWeapon* NewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyChangedWeapon");

	struct
	{
		class AWeapon*                 PrevWeapon;
		class AWeapon*                 NewWeapon;
	} params;
	params.PrevWeapon = PrevWeapon;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientSwitchToBestWeapon
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// bool                           bForceNewWeapon                (CPF_OptionalParm, CPF_Parm)

void AController::ClientSwitchToBestWeapon(bool bForceNewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSwitchToBestWeapon");

	struct
	{
		bool                           bForceNewWeapon;
	} params;
	params.bForceNewWeapon = bForceNewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SwitchToBestWeapon
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bForceNewWeapon                (CPF_OptionalParm, CPF_Parm)

void AController::SwitchToBestWeapon(bool bForceNewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SwitchToBestWeapon");

	struct
	{
		bool                           bForceNewWeapon;
	} params;
	params.bForceNewWeapon = bForceNewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReceiveProjectileWarning
// (FUNC_Public)
// Parameters:
// class AProjectile*             Proj                           (CPF_Parm)

void AController::ReceiveProjectileWarning(class AProjectile* Proj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveProjectileWarning");

	struct
	{
		class AProjectile*             Proj;
	} params;
	params.Proj = Proj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReceiveWarning
// (FUNC_Public)
// Parameters:
// class APawn*                   shooter                        (CPF_Parm)
// float                          projSpeed                      (CPF_Parm)
// struct FVector                 FireDir                        (CPF_Parm)

void AController::ReceiveWarning(class APawn* shooter, float projSpeed, const struct FVector& FireDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveWarning");

	struct
	{
		class APawn*                   shooter;
		float                          projSpeed;
		struct FVector                 FireDir;
	} params;
	params.shooter = shooter;
	params.projSpeed = projSpeed;
	params.FireDir = FireDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.InstantWarnTarget
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  InTarget                       (CPF_Parm)
// class AWeapon*                 FiredWeapon                    (CPF_Parm)
// struct FVector                 FireDir                        (CPF_Parm)

void AController::InstantWarnTarget(class AActor* InTarget, class AWeapon* FiredWeapon, const struct FVector& FireDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InstantWarnTarget");

	struct
	{
		class AActor*                  InTarget;
		class AWeapon*                 FiredWeapon;
		struct FVector                 FireDir;
	} params;
	params.InTarget = InTarget;
	params.FiredWeapon = FiredWeapon;
	params.FireDir = FireDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetAdjustedAimFor
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AWeapon*                 W                              (CPF_Parm)
// struct FVector                 StartFireLoc                   (CPF_Parm)
// struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FRotator AController::GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetAdjustedAimFor");

	struct
	{
		class AWeapon*                 W;
		struct FVector                 StartFireLoc;
		struct FRotator                ReturnValue;
	} params;
	params.W = W;
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.HandlePickup
// (FUNC_Public)
// Parameters:
// class AInventory*              Inv                            (CPF_Parm)

void AController::HandlePickup(class AInventory* Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.HandlePickup");

	struct
	{
		class AInventory*              Inv;
	} params;
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RoundHasEnded
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  EndRoundFocus                  (CPF_OptionalParm, CPF_Parm)

void AController::RoundHasEnded(class AActor* EndRoundFocus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RoundHasEnded");

	struct
	{
		class AActor*                  EndRoundFocus;
	} params;
	params.EndRoundFocus = EndRoundFocus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.StopFiring
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AController::StopFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopFiring");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.FireWeaponAt
// (FUNC_Public)
// Parameters:
// class AActor*                  inActor                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::FireWeaponAt(class AActor* inActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FireWeaponAt");

	struct
	{
		class AActor*                  inActor;
		bool                           ReturnValue;
	} params;
	params.inActor = inActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.RatePickup
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  PickupHolder                   (CPF_Parm)
// class UClass*                  inPickup                       (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AController::RatePickup(class AActor* PickupHolder, class UClass* inPickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RatePickup");

	struct
	{
		class AActor*                  PickupHolder;
		class UClass*                  inPickup;
		float                          ReturnValue;
	} params;
	params.PickupHolder = PickupHolder;
	params.inPickup = inPickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.WarnProjExplode
// (FUNC_Public)
// Parameters:
// class AProjectile*             Proj                           (CPF_Parm)

void AController::WarnProjExplode(class AProjectile* Proj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WarnProjExplode");

	struct
	{
		class AProjectile*             Proj;
	} params;
	params.Proj = Proj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyProjLanded
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AProjectile*             Proj                           (CPF_Parm)

void AController::NotifyProjLanded(class AProjectile* Proj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyProjLanded");

	struct
	{
		class AProjectile*             Proj;
	} params;
	params.Proj = Proj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyKilled
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Killer                         (CPF_Parm)
// class AController*             Killed                         (CPF_Parm)
// class APawn*                   KilledPawn                     (CPF_Parm)
// class UClass*                  damageTyp                      (CPF_Parm)

void AController::NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* damageTyp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyKilled");

	struct
	{
		class AController*             Killer;
		class AController*             Killed;
		class APawn*                   KilledPawn;
		class UClass*                  damageTyp;
	} params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.KilledPawn = KilledPawn;
	params.damageTyp = damageTyp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GameHasEnded
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  EndGameFocus                   (CPF_OptionalParm, CPF_Parm)
// bool                           bIsWinner                      (CPF_OptionalParm, CPF_Parm)

void AController::GameHasEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GameHasEnded");

	struct
	{
		class AActor*                  EndGameFocus;
		bool                           bIsWinner;
	} params;
	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetCharacter
// (FUNC_Public)
// Parameters:
// struct FString                 inCharacter                    (CPF_Parm, CPF_NeedCtorLink)

void AController::SetCharacter(const struct FString& inCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetCharacter");

	struct
	{
		struct FString                 inCharacter;
	} params;
	params.inCharacter = inCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ServerGivePawn
// (FUNC_Public)

void AController::ServerGivePawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ServerGivePawn");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ServerRestartPlayer
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)

void AController::ServerRestartPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ServerRestartPlayer");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetTeamNum
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

unsigned char AController::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetTeamNum");

	struct
	{
		unsigned char                  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.InitPlayerReplicationInfo
// (FUNC_Defined, FUNC_Public)

void AController::InitPlayerReplicationInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InitPlayerReplicationInfo");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyTakeHit
// (FUNC_Public)
// Parameters:
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// int                            Damage                         (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)

void AController::NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyTakeHit");

	struct
	{
		class AController*             InstigatedBy;
		struct FVector                 HitLocation;
		int                            Damage;
		class UClass*                  DamageType;
		struct FVector                 Momentum;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.EnemyJustTeleported
// (FUNC_Defined, FUNC_Public)

void AController::EnemyJustTeleported()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.EnemyJustTeleported");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.BeyondFogDistance
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ViewPoint                      (CPF_Parm)
// struct FVector                 OtherPoint                     (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::BeyondFogDistance(const struct FVector& ViewPoint, const struct FVector& OtherPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.BeyondFogDistance");

	struct
	{
		struct FVector                 ViewPoint;
		struct FVector                 OtherPoint;
		bool                           ReturnValue;
	} params;
	params.ViewPoint = ViewPoint;
	params.OtherPoint = OtherPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.Restart
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bVehicleTransition             (CPF_Parm)

void AController::Restart(bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Restart");

	struct
	{
		bool                           bVehicleTransition;
	} params;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.CleanupPRI
// (FUNC_Defined, FUNC_Public)

void AController::CleanupPRI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CleanupPRI");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.Destroyed
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AController::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyPostLanded
// (FUNC_Event, FUNC_Public)

void AController::NotifyPostLanded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyPostLanded");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GamePlayEndedState
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::GamePlayEndedState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GamePlayEndedState");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.PawnDied
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   inPawn                         (CPF_Parm)

void AController::PawnDied(class APawn* inPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PawnDied");

	struct
	{
		class APawn*                   inPawn;
	} params;
	params.inPawn = inPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.UnPossess
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AController::UnPossess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.UnPossess");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.Possess
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   inPawn                         (CPF_Parm)
// bool                           bVehicleTransition             (CPF_Parm)

void AController::Possess(class APawn* inPawn, bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Possess");

	struct
	{
		class APawn*                   inPawn;
		bool                           bVehicleTransition;
	} params;
	params.inPawn = inPawn;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnPossess
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_Possess*         inAction                       (CPF_Parm)

void AController::OnPossess(class USeqAct_Possess* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnPossess");

	struct
	{
		class USeqAct_Possess*         inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AController::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientSetRotation
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FRotator                NewRotation                    (CPF_Parm)
// bool                           bResetCamera                   (CPF_OptionalParm, CPF_Parm)

void AController::ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetRotation");

	struct
	{
		struct FRotator                NewRotation;
		bool                           bResetCamera;
	} params;
	params.NewRotation = NewRotation;
	params.bResetCamera = bResetCamera;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientSetLocation
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FVector                 NewLocation                    (CPF_Parm)
// struct FRotator                NewRotation                    (CPF_Parm)

void AController::ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetLocation");

	struct
	{
		struct FVector                 NewLocation;
		struct FRotator                NewRotation;
	} params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.Reset
// (FUNC_Defined, FUNC_Public)

void AController::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AController::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetSkelControlScale
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   SkelControlName                (CPF_Parm)
// float                          Scale                          (CPF_Parm)

void AController::SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetSkelControlScale");

	struct
	{
		struct FName                   SkelControlName;
		float                          Scale;
	} params;
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetMorphWeight
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   MorphNodeName                  (CPF_Parm)
// float                          MorphWeight                    (CPF_Parm)

void AController::SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetMorphWeight");

	struct
	{
		struct FName                   MorphNodeName;
		float                          MorphWeight;
	} params;
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.StopActorFaceFXAnim
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AController::StopActorFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopActorFaceFXAnim");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PlayActorFaceFXAnim
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (CPF_Parm)
// struct FString                 GroupName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SeqName                        (CPF_Parm, CPF_NeedCtorLink)
// class USoundCue*               SoundCueToPlay                 (CPF_Parm)
// class UAkEvent*                AkEventToPlay                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PlayActorFaceFXAnim");

	struct
	{
		class UFaceFXAnimSet*          AnimSet;
		struct FString                 GroupName;
		struct FString                 SeqName;
		class USoundCue*               SoundCueToPlay;
		class UAkEvent*                AkEventToPlay;
		bool                           ReturnValue;
	} params;
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;
	params.SoundCueToPlay = SoundCueToPlay;
	params.AkEventToPlay = AkEventToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FinishAnimControl
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void AController::FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FinishAnimControl");

	struct
	{
		class UInterpGroup*            InInterpGroup;
	} params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetAnimPosition
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   SlotName                       (CPF_Parm)
// int                            ChannelIndex                   (CPF_Parm)
// struct FName                   InAnimSeqName                  (CPF_Parm)
// float                          InPosition                     (CPF_Parm)
// bool                           bFireNotifies                  (CPF_Parm)
// bool                           bLooping                       (CPF_Parm)
// bool                           bEnableRootMotion              (CPF_Parm)

void AController::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetAnimPosition");

	struct
	{
		struct FName                   SlotName;
		int                            ChannelIndex;
		struct FName                   InAnimSeqName;
		float                          InPosition;
		bool                           bFireNotifies;
		bool                           bLooping;
		bool                           bEnableRootMotion;
	} params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.BeginAnimControl
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void AController::BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.BeginAnimControl");

	struct
	{
		class UInterpGroup*            InInterpGroup;
	} params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyPathChanged
// (FUNC_Event, FUNC_Public)

void AController::NotifyPathChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyPathChanged");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetAdjustLocation
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AController::GetAdjustLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetAdjustLocation");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.SetAdjustLocation
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 NewLoc                         (CPF_Parm)
// bool                           bAdjust                        (CPF_Parm)
// bool                           bOffsetFromBase                (CPF_OptionalParm, CPF_Parm)

void AController::SetAdjustLocation(const struct FVector& NewLoc, bool bAdjust, bool bOffsetFromBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetAdjustLocation");

	struct
	{
		struct FVector                 NewLoc;
		bool                           bAdjust;
		bool                           bOffsetFromBase;
	} params;
	params.NewLoc = NewLoc;
	params.bAdjust = bAdjust;
	params.bOffsetFromBase = bOffsetFromBase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetDestinationPosition
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AController::GetDestinationPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetDestinationPosition");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.SetDestinationPosition
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Dest                           (CPF_Parm)
// bool                           bOffsetFromBase                (CPF_OptionalParm, CPF_Parm)

void AController::SetDestinationPosition(const struct FVector& Dest, bool bOffsetFromBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetDestinationPosition");

	struct
	{
		struct FVector                 Dest;
		bool                           bOffsetFromBase;
	} params;
	params.Dest = Dest;
	params.bOffsetFromBase = bOffsetFromBase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetFocalPoint
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AController::GetFocalPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetFocalPoint");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.SetFocalPoint
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 FP                             (CPF_Parm)
// bool                           bOffsetFromBase                (CPF_OptionalParm, CPF_Parm)

void AController::SetFocalPoint(const struct FVector& FP, bool bOffsetFromBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetFocalPoint");

	struct
	{
		struct FVector                 FP;
		bool                           bOffsetFromBase;
	} params;
	params.FP = FP;
	params.bOffsetFromBase = bOffsetFromBase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RouteCache_RemoveIndex
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            InIndex                        (CPF_Parm)
// int                            Count                          (CPF_OptionalParm, CPF_Parm)

void AController::RouteCache_RemoveIndex(int InIndex, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_RemoveIndex");

	struct
	{
		int                            InIndex;
		int                            Count;
	} params;
	params.InIndex = InIndex;
	params.Count = Count;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RouteCache_RemoveItem
// (FUNC_Native, FUNC_Public)
// Parameters:
// class ANavigationPoint*        Nav                            (CPF_Parm)

void AController::RouteCache_RemoveItem(class ANavigationPoint* Nav)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_RemoveItem");

	struct
	{
		class ANavigationPoint*        Nav;
	} params;
	params.Nav = Nav;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RouteCache_InsertItem
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class ANavigationPoint*        Nav                            (CPF_Parm)
// int                            Idx                            (CPF_OptionalParm, CPF_Parm)

void AController::RouteCache_InsertItem(class ANavigationPoint* Nav, int Idx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_InsertItem");

	struct
	{
		class ANavigationPoint*        Nav;
		int                            Idx;
	} params;
	params.Nav = Nav;
	params.Idx = Idx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RouteCache_AddItem
// (FUNC_Native, FUNC_Public)
// Parameters:
// class ANavigationPoint*        Nav                            (CPF_Parm)

void AController::RouteCache_AddItem(class ANavigationPoint* Nav)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_AddItem");

	struct
	{
		class ANavigationPoint*        Nav;
	} params;
	params.Nav = Nav;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RouteCache_Empty
// (FUNC_Native, FUNC_Public)

void AController::RouteCache_Empty()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RouteCache_Empty");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.IsLocalController
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::IsLocalController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLocalController");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsLocalPlayerController
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AController::IsLocalPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsLocalPlayerController");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetMatineeConstantCameraAnim
// (FUNC_Event, FUNC_Public)
// Parameters:
// bool                           bOn                            (CPF_Parm)
// unsigned char                  Type                           (CPF_Parm)
// float                          Rate                           (CPF_Parm)

void APlayerController::SetMatineeConstantCameraAnim(bool bOn, unsigned char Type, float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetMatineeConstantCameraAnim");

	struct
	{
		bool                           bOn;
		unsigned char                  Type;
		float                          Rate;
	} params;
	params.bOn = bOn;
	params.Type = Type;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyDisconnect
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 Command                        (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::NotifyDisconnect(const struct FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyDisconnect");

	struct
	{
		struct FString                 Command;
		bool                           ReturnValue;
	} params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ReceivedGameClass
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class UClass*                  GameClass                      (CPF_Parm)

void APlayerController::ReceivedGameClass(class UClass* GameClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceivedGameClass");

	struct
	{
		class UClass*                  GameClass;
	} params;
	params.GameClass = GameClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetHearSoundTransform
// (FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 OutLocation                    (CPF_Parm, CPF_OutParm)
// struct FRotator                OutRotation                    (CPF_Parm, CPF_OutParm)

void APlayerController::GetHearSoundTransform(struct FVector* OutLocation, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetHearSoundTransform");

	struct
	{
		struct FVector                 OutLocation;
		struct FRotator                OutRotation;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLocation != nullptr)
		*OutLocation = params.OutLocation;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
}


// Function Engine.PlayerController.LogOutBugItAIGoToLogFile
// (FUNC_Final, FUNC_Native, FUNC_Private)
// Parameters:
// struct FString                 InScreenShotDesc               (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// struct FString                 InGoString                     (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// struct FString                 InLocString                    (CPF_Const, CPF_Parm, CPF_NeedCtorLink)

void APlayerController::LogOutBugItAIGoToLogFile(const struct FString& InScreenShotDesc, const struct FString& InGoString, const struct FString& InLocString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LogOutBugItAIGoToLogFile");

	struct
	{
		struct FString                 InScreenShotDesc;
		struct FString                 InGoString;
		struct FString                 InLocString;
	} params;
	params.InScreenShotDesc = InScreenShotDesc;
	params.InGoString = InGoString;
	params.InLocString = InLocString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LogOutBugItGoToLogFile
// (FUNC_Final, FUNC_Native, FUNC_Private)
// Parameters:
// struct FString                 InScreenShotDesc               (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// struct FString                 InGoString                     (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// struct FString                 InLocString                    (CPF_Const, CPF_Parm, CPF_NeedCtorLink)

void APlayerController::LogOutBugItGoToLogFile(const struct FString& InScreenShotDesc, const struct FString& InGoString, const struct FString& InLocString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LogOutBugItGoToLogFile");

	struct
	{
		struct FString                 InScreenShotDesc;
		struct FString                 InGoString;
		struct FString                 InLocString;
	} params;
	params.InScreenShotDesc = InScreenShotDesc;
	params.InGoString = InGoString;
	params.InLocString = InLocString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DisableDebugAI
// (FUNC_Defined, FUNC_Public)

void APlayerController::DisableDebugAI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DisableDebugAI");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnEngineInitialTick
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APlayerController::OnEngineInitialTick()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnEngineInitialTick");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.BugItStringCreator
// (FUNC_Defined, FUNC_Exec, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 ViewLocation                   (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FRotator                ViewRotation                   (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 GoString                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 LocString                      (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void APlayerController::BugItStringCreator(struct FVector* ViewLocation, struct FRotator* ViewRotation, struct FString* GoString, struct FString* LocString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugItStringCreator");

	struct
	{
		struct FVector                 ViewLocation;
		struct FRotator                ViewRotation;
		struct FString                 GoString;
		struct FString                 LocString;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ViewLocation != nullptr)
		*ViewLocation = params.ViewLocation;
	if (ViewRotation != nullptr)
		*ViewRotation = params.ViewRotation;
	if (GoString != nullptr)
		*GoString = params.GoString;
	if (LocString != nullptr)
		*LocString = params.LocString;
}


// Function Engine.PlayerController.BugItAI
// (FUNC_Defined, FUNC_Exec, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FString                 ScreenShotDescription          (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)

void APlayerController::BugItAI(const struct FString& ScreenShotDescription)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugItAI");

	struct
	{
		struct FString                 ScreenShotDescription;
	} params;
	params.ScreenShotDescription = ScreenShotDescription;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LogLoc
// (FUNC_Defined, FUNC_Exec, FUNC_Public, FUNC_HasDefaults)

void APlayerController::LogLoc()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LogLoc");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.BugIt
// (FUNC_Defined, FUNC_Exec, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FString                 ScreenShotDescription          (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)

void APlayerController::BugIt(const struct FString& ScreenShotDescription)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugIt");

	struct
	{
		struct FString                 ScreenShotDescription;
	} params;
	params.ScreenShotDescription = ScreenShotDescription;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.BugItWorker
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FVector                 TheLocation                    (CPF_Parm)
// struct FRotator                TheRotation                    (CPF_Parm)

void APlayerController::BugItWorker(const struct FVector& TheLocation, const struct FRotator& TheRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugItWorker");

	struct
	{
		struct FVector                 TheLocation;
		struct FRotator                TheRotation;
	} params;
	params.TheLocation = TheLocation;
	params.TheRotation = TheRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.BugItGoString
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 TheLocation                    (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 TheRotation                    (CPF_Parm, CPF_NeedCtorLink)

void APlayerController::BugItGoString(const struct FString& TheLocation, const struct FString& TheRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugItGoString");

	struct
	{
		struct FString                 TheLocation;
		struct FString                 TheRotation;
	} params;
	params.TheLocation = TheLocation;
	params.TheRotation = TheRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.BugItGo
// (FUNC_Defined, FUNC_Exec, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// float                          X                              (CPF_Parm, CPF_CoerceParm)
// float                          Y                              (CPF_Parm, CPF_CoerceParm)
// float                          Z                              (CPF_Parm, CPF_CoerceParm)
// int                            Pitch                          (CPF_Parm, CPF_CoerceParm)
// int                            Yaw                            (CPF_Parm, CPF_CoerceParm)
// int                            Roll                           (CPF_Parm, CPF_CoerceParm)

void APlayerController::BugItGo(float X, float Y, float Z, int Pitch, int Yaw, int Roll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BugItGo");

	struct
	{
		float                          X;
		float                          Y;
		float                          Z;
		int                            Pitch;
		int                            Yaw;
		int                            Roll;
	} params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;
	params.Pitch = Pitch;
	params.Yaw = Yaw;
	params.Roll = Roll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.HasPeerConnection
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            PeerNetId                      (CPF_Const, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::HasPeerConnection(struct FUniqueNetId* PeerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HasPeerConnection");

	struct
	{
		struct FUniqueNetId            PeerNetId;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PeerNetId != nullptr)
		*PeerNetId = params.PeerNetId;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnSetSoundMode
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_SetSoundMode*    Action                         (CPF_Parm)

void APlayerController::OnSetSoundMode(class USeqAct_SetSoundMode* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnSetSoundMode");

	struct
	{
		class USeqAct_SetSoundMode*    Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSpawnCameraLensEffect
// (FUNC_Defined, FUNC_Net, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_NetClient)
// Parameters:
// class UClass*                  LensEffectEmitterClass         (CPF_Parm)

void APlayerController::ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSpawnCameraLensEffect");

	struct
	{
		class UClass*                  LensEffectEmitterClass;
	} params;
	params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DebugCameraAnims
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void APlayerController::DebugCameraAnims()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DebugCameraAnims");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStopCameraAnim
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// class UCameraAnim*             AnimToStop                     (CPF_Parm)
// bool                           bImmediate                     (CPF_OptionalParm, CPF_Parm)

void APlayerController::ClientStopCameraAnim(class UCameraAnim* AnimToStop, bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraAnim");

	struct
	{
		class UCameraAnim*             AnimToStop;
		bool                           bImmediate;
	} params;
	params.AnimToStop = AnimToStop;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlayCameraAnim
// (FUNC_Defined, FUNC_Net, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// class UCameraAnim*             AnimToPlay                     (CPF_Parm)
// float                          Scale                          (CPF_OptionalParm, CPF_Parm)
// float                          Rate                           (CPF_OptionalParm, CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm, CPF_Parm)
// float                          BlendOutTime                   (CPF_OptionalParm, CPF_Parm)
// bool                           bLoop                          (CPF_OptionalParm, CPF_Parm)
// bool                           bRandomStartTime               (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class ECameraAnimPlaySpace> Space                          (CPF_OptionalParm, CPF_Parm)
// struct FRotator                CustomPlaySpace                (CPF_OptionalParm, CPF_Parm)

void APlayerController::ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<enum class ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraAnim");

	struct
	{
		class UCameraAnim*             AnimToPlay;
		float                          Scale;
		float                          Rate;
		float                          BlendInTime;
		float                          BlendOutTime;
		bool                           bLoop;
		bool                           bRandomStartTime;
		TEnumAsByte<enum class ECameraAnimPlaySpace> Space;
		struct FRotator                CustomPlaySpace;
	} params;
	params.AnimToPlay = AnimToPlay;
	params.Scale = Scale;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Space = Space;
	params.CustomPlaySpace = CustomPlaySpace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnCameraShake
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_CameraShake*     inAction                       (CPF_Parm)

void APlayerController::OnCameraShake(class USeqAct_CameraShake* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnCameraShake");

	struct
	{
		class USeqAct_CameraShake*     inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStopCameraShake
// (FUNC_Defined, FUNC_Net, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// class UCameraShake*            Shake                          (CPF_Parm)

void APlayerController::ClientStopCameraShake(class UCameraShake* Shake)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopCameraShake");

	struct
	{
		class UCameraShake*            Shake;
	} params;
	params.Shake = Shake;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlayCameraShake
// (FUNC_Defined, FUNC_Net, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// class UCameraShake*            Shake                          (CPF_Parm)
// float                          Scale                          (CPF_OptionalParm, CPF_Parm)
// bool                           bTryForceFeedback              (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class ECameraAnimPlaySpace> PlaySpace                      (CPF_OptionalParm, CPF_Parm)
// struct FRotator                UserPlaySpaceRot               (CPF_OptionalParm, CPF_Parm)

void APlayerController::ClientPlayCameraShake(class UCameraShake* Shake, float Scale, bool bTryForceFeedback, TEnumAsByte<enum class ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayCameraShake");

	struct
	{
		class UCameraShake*            Shake;
		float                          Scale;
		bool                           bTryForceFeedback;
		TEnumAsByte<enum class ECameraAnimPlaySpace> PlaySpace;
		struct FRotator                UserPlaySpaceRot;
	} params;
	params.Shake = Shake;
	params.Scale = Scale;
	params.bTryForceFeedback = bTryForceFeedback;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DoForceFeedbackForScreenShake
// (FUNC_Simulated, FUNC_Protected)
// Parameters:
// class UCameraShake*            ShakeData                      (CPF_Parm)
// float                          ShakeScale                     (CPF_Parm)

void APlayerController::DoForceFeedbackForScreenShake(class UCameraShake* ShakeData, float ShakeScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DoForceFeedbackForScreenShake");

	struct
	{
		class UCameraShake*            ShakeData;
		float                          ShakeScale;
	} params;
	params.ShakeData = ShakeData;
	params.ShakeScale = ShakeScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.InputMatchDelegate
// (FUNC_Public, FUNC_Delegate)

void APlayerController::InputMatchDelegate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InputMatchDelegate");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Sentinel_PostAcquireTravelTheWorldPoints
// (FUNC_Public)

void APlayerController::Sentinel_PostAcquireTravelTheWorldPoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Sentinel_PostAcquireTravelTheWorldPoints");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Sentinel_PreAcquireTravelTheWorldPoints
// (FUNC_Public)

void APlayerController::Sentinel_PreAcquireTravelTheWorldPoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Sentinel_PreAcquireTravelTheWorldPoints");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Sentinel_SetupForGamebasedTravelTheWorld
// (FUNC_Public)

void APlayerController::Sentinel_SetupForGamebasedTravelTheWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Sentinel_SetupForGamebasedTravelTheWorld");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnFlyThroughHasEnded
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_FlyThroughHasEnded* inAction                       (CPF_Parm)

void APlayerController::OnFlyThroughHasEnded(class USeqAct_FlyThroughHasEnded* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnFlyThroughHasEnded");

	struct
	{
		class USeqAct_FlyThroughHasEnded* inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetAchievementProgression
// (FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            AchievementId                  (CPF_Parm)
// float                          CurrentValue                   (CPF_Parm, CPF_OutParm)
// float                          MaxValue                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::GetAchievementProgression(int AchievementId, float* CurrentValue, float* MaxValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetAchievementProgression");

	struct
	{
		int                            AchievementId;
		float                          CurrentValue;
		float                          MaxValue;
		bool                           ReturnValue;
	} params;
	params.AchievementId = AchievementId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CurrentValue != nullptr)
		*CurrentValue = params.CurrentValue;
	if (MaxValue != nullptr)
		*MaxValue = params.MaxValue;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetPartyGameTypeName
// (FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString APlayerController::STATIC_GetPartyGameTypeName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPartyGameTypeName");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetPartyMapName
// (FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString APlayerController::STATIC_GetPartyMapName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPartyMapName");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsPartyLeader
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsPartyLeader()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsPartyLeader");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientAddTextureStreamingLoc
// (FUNC_Final, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FVector                 InLoc                          (CPF_Parm)
// float                          Duration                       (CPF_Parm)
// bool                           bOverrideLocation              (CPF_Parm)

void APlayerController::ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAddTextureStreamingLoc");

	struct
	{
		struct FVector                 InLoc;
		float                          Duration;
		bool                           bOverrideLocation;
	} params;
	params.InLoc = InLoc;
	params.Duration = Duration;
	params.bOverrideLocation = bOverrideLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPrestreamTextures
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// class AActor*                  ForcedActor                    (CPF_Parm)
// float                          ForceDuration                  (CPF_Parm)
// bool                           bEnableStreaming               (CPF_Parm)
// int                            CinematicTextureGroups         (CPF_OptionalParm, CPF_Parm)

void APlayerController::ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPrestreamTextures");

	struct
	{
		class AActor*                  ForcedActor;
		float                          ForceDuration;
		bool                           bEnableStreaming;
		int                            CinematicTextureGroups;
	} params;
	params.ForcedActor = ForcedActor;
	params.ForceDuration = ForceDuration;
	params.bEnableStreaming = bEnableStreaming;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// class UMaterialInterface*      Material                       (CPF_Parm)
// float                          ForceDuration                  (CPF_Parm)
// int                            CinematicTextureGroups         (CPF_OptionalParm, CPF_Parm)

void APlayerController::ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetForceMipLevelsToBeResident");

	struct
	{
		class UMaterialInterface*      Material;
		float                          ForceDuration;
		int                            CinematicTextureGroups;
	} params;
	params.Material = Material;
	params.ForceDuration = ForceDuration;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientControlMovieTexture
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// class UTextureMovie*           MovieTexture                   (CPF_Parm)
// TEnumAsByte<enum class EMovieControlType> Mode                           (CPF_Parm)

void APlayerController::ClientControlMovieTexture(class UTextureMovie* MovieTexture, TEnumAsByte<enum class EMovieControlType> Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientControlMovieTexture");

	struct
	{
		class UTextureMovie*           MovieTexture;
		TEnumAsByte<enum class EMovieControlType> Mode;
	} params;
	params.MovieTexture = MovieTexture;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetSplitscreenPlayerCount
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int APlayerController::GetSplitscreenPlayerCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSplitscreenPlayerCount");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetSplitscreenPlayerByIndex
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            PlayerIndex                    (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APlayerReplicationInfo* APlayerController::GetSplitscreenPlayerByIndex(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSplitscreenPlayerByIndex");

	struct
	{
		int                            PlayerIndex;
		class APlayerReplicationInfo*  ReturnValue;
	} params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsSplitscreenPlayer
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            out_SplitscreenPlayerIndex     (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsSplitscreenPlayer(int* out_SplitscreenPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSplitscreenPlayer");

	struct
	{
		int                            out_SplitscreenPlayerIndex;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_SplitscreenPlayerIndex != nullptr)
		*out_SplitscreenPlayerIndex = params.out_SplitscreenPlayerIndex;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsPrimaryPlayer
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsPrimaryPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsPrimaryPlayer");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientNotifyPartyHostLeaving
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FUniqueNetId            PartyHostPlayerId              (CPF_Parm)

void APlayerController::ClientNotifyPartyHostLeaving(const struct FUniqueNetId& PartyHostPlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientNotifyPartyHostLeaving");

	struct
	{
		struct FUniqueNetId            PartyHostPlayerId;
	} params;
	params.PartyHostPlayerId = PartyHostPlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientReturnToParty
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FUniqueNetId            RequestingPlayerId             (CPF_Parm)

void APlayerController::ClientReturnToParty(const struct FUniqueNetId& RequestingPlayerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReturnToParty");

	struct
	{
		struct FUniqueNetId            RequestingPlayerId;
	} params;
	params.RequestingPlayerId = RequestingPlayerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnJoinTravelToSessionComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void APlayerController::OnJoinTravelToSessionComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnJoinTravelToSessionComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PreJoinUpdateGameSettings
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// class UOnlineGameSettings*     GameSettings                   (CPF_Parm)

void APlayerController::PreJoinUpdateGameSettings(const struct FName& SessionName, class UOnlineGameSettings* GameSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PreJoinUpdateGameSettings");

	struct
	{
		struct FName                   SessionName;
		class UOnlineGameSettings*     GameSettings;
	} params;
	params.SessionName = SessionName;
	params.GameSettings = GameSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientTravelToSession
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// class UClass*                  SearchClass                    (CPF_Parm)
// unsigned char                  PlatformSpecificInfo           (CPF_Parm)

void APlayerController::ClientTravelToSession(const struct FName& SessionName, class UClass* SearchClass, unsigned char PlatformSpecificInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravelToSession");

	struct
	{
		struct FName                   SessionName;
		class UClass*                  SearchClass;
		unsigned char                  PlatformSpecificInfo;
	} params;
	params.SessionName = SessionName;
	params.SearchClass = SearchClass;
	params.PlatformSpecificInfo = PlatformSpecificInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PathClear
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void APlayerController::PathClear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PathClear");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PathChild
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Cnt                            (CPF_OptionalParm, CPF_Parm)

void APlayerController::PathChild(int Cnt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PathChild");

	struct
	{
		int                            Cnt;
	} params;
	params.Cnt = Cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PathStep
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Cnt                            (CPF_OptionalParm, CPF_Parm)

void APlayerController::PathStep(int Cnt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PathStep");

	struct
	{
		int                            Cnt;
	} params;
	params.Cnt = Cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SoakPause
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void APlayerController::SoakPause(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SoakPause");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IncrementNumberOfMatchesPlayed
// (FUNC_Defined, FUNC_Public)

void APlayerController::IncrementNumberOfMatchesPlayed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IncrementNumberOfMatchesPlayed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CanViewUserCreatedContent
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::CanViewUserCreatedContent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanViewUserCreatedContent");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientEndOnlineGame
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientEndOnlineGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientEndOnlineGame");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStartOnlineGame
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientStartOnlineGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStartOnlineGame");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnRegisterHostStatGuidComplete
// (FUNC_Public)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void APlayerController::OnRegisterHostStatGuidComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnRegisterHostStatGuidComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientRegisterHostStatGuid
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FString                 StatGuid                       (CPF_Parm, CPF_NeedCtorLink)

void APlayerController::ClientRegisterHostStatGuid(const struct FString& StatGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRegisterHostStatGuid");

	struct
	{
		struct FString                 StatGuid;
	} params;
	params.StatGuid = StatGuid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RemoveAllDebugStrings
// (FUNC_Final, FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_NetClient)

void APlayerController::RemoveAllDebugStrings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoveAllDebugStrings");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RemoveDebugText
// (FUNC_Final, FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_NetClient)
// Parameters:
// class AActor*                  SrcActor                       (CPF_Parm)

void APlayerController::RemoveDebugText(class AActor* SrcActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoveDebugText");

	struct
	{
		class AActor*                  SrcActor;
	} params;
	params.SrcActor = SrcActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AddDebugText
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FString                 DebugText                      (CPF_Parm, CPF_NeedCtorLink)
// class AActor*                  SrcActor                       (CPF_OptionalParm, CPF_Parm)
// float                          Duration                       (CPF_OptionalParm, CPF_Parm)
// struct FVector                 Offset                         (CPF_OptionalParm, CPF_Parm)
// struct FVector                 DesiredOffset                  (CPF_OptionalParm, CPF_Parm)
// struct FColor                  TextColor                      (CPF_OptionalParm, CPF_Parm)
// bool                           bSkipOverwriteCheck            (CPF_OptionalParm, CPF_Parm)
// bool                           bAbsoluteLocation              (CPF_OptionalParm, CPF_Parm)
// bool                           bKeepAttachedToActor           (CPF_OptionalParm, CPF_Parm)
// class UFont*                   InFont                         (CPF_OptionalParm, CPF_Parm)
// struct FVector2D               InTextScale                    (CPF_OptionalParm, CPF_Parm)

void APlayerController::AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& Offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont, const struct FVector2D& InTextScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddDebugText");

	struct
	{
		struct FString                 DebugText;
		class AActor*                  SrcActor;
		float                          Duration;
		struct FVector                 Offset;
		struct FVector                 DesiredOffset;
		struct FColor                  TextColor;
		bool                           bSkipOverwriteCheck;
		bool                           bAbsoluteLocation;
		bool                           bKeepAttachedToActor;
		class UFont*                   InFont;
		struct FVector2D               InTextScale;
	} params;
	params.DebugText = DebugText;
	params.SrcActor = SrcActor;
	params.Duration = Duration;
	params.Offset = Offset;
	params.DesiredOffset = DesiredOffset;
	params.TextColor = TextColor;
	params.bSkipOverwriteCheck = bSkipOverwriteCheck;
	params.bAbsoluteLocation = bAbsoluteLocation;
	params.bKeepAttachedToActor = bKeepAttachedToActor;
	params.InFont = InFont;
	params.InTextScale = InTextScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DrawDebugTextList
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class UCanvas*                 Canvas                         (CPF_Parm)
// float                          RenderDelta                    (CPF_Parm)

void APlayerController::DrawDebugTextList(class UCanvas* Canvas, float RenderDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DrawDebugTextList");

	struct
	{
		class UCanvas*                 Canvas;
		float                          RenderDelta;
	} params;
	params.Canvas = Canvas;
	params.RenderDelta = RenderDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnDestroy
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Destroy*         Action                         (CPF_Parm)

void APlayerController::OnDestroy(class USeqAct_Destroy* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnDestroy");

	struct
	{
		class USeqAct_Destroy*         Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStartNetworkedVoice
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientStartNetworkedVoice()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStartNetworkedVoice");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStopNetworkedVoice
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientStopNetworkedVoice()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopNetworkedVoice");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetHostUniqueId
// (FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FUniqueNetId            InHostId                       (CPF_Parm)

void APlayerController::ClientSetHostUniqueId(const struct FUniqueNetId& InHostId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetHostUniqueId");

	struct
	{
		struct FUniqueNetId            InHostId;
	} params;
	params.InHostId = InHostId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientWriteLeaderboardStats
// (FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// class UClass*                  OnlineStatsWriteClass          (CPF_Parm)
// bool                           bIsIncomplete                  (CPF_OptionalParm, CPF_Parm)

void APlayerController::ClientWriteLeaderboardStats(class UClass* OnlineStatsWriteClass, bool bIsIncomplete)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWriteLeaderboardStats");

	struct
	{
		class UClass*                  OnlineStatsWriteClass;
		bool                           bIsIncomplete;
	} params;
	params.OnlineStatsWriteClass = OnlineStatsWriteClass;
	params.bIsIncomplete = bIsIncomplete;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientWriteOnlinePlayerScores
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
// Parameters:
// int                            LeaderboardId                  (CPF_Parm)

void APlayerController::ClientWriteOnlinePlayerScores(int LeaderboardId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWriteOnlinePlayerScores");

	struct
	{
		int                            LeaderboardId;
	} params;
	params.LeaderboardId = LeaderboardId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientArbitratedMatchEnded
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientArbitratedMatchEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientArbitratedMatchEnded");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyNotEnoughSpaceInInvite
// (FUNC_Defined, FUNC_Public)

void APlayerController::NotifyNotEnoughSpaceInInvite()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyNotEnoughSpaceInInvite");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyNotAllPlayersCanJoinInvite
// (FUNC_Defined, FUNC_Public)

void APlayerController::NotifyNotAllPlayersCanJoinInvite()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyNotAllPlayersCanJoinInvite");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyInviteFailed
// (FUNC_Defined, FUNC_Public)

void APlayerController::NotifyInviteFailed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyInviteFailed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnInviteJoinComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void APlayerController::OnInviteJoinComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnInviteJoinComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ModifyClientURL
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString APlayerController::ModifyClientURL(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ModifyClientURL");

	struct
	{
		struct FString                 URL;
		struct FString                 ReturnValue;
	} params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnDestroyForInviteComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void APlayerController::OnDestroyForInviteComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnDestroyForInviteComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnEndForInviteComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void APlayerController::OnEndForInviteComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnEndForInviteComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClearInviteDelegates
// (FUNC_Defined, FUNC_Public)

void APlayerController::ClearInviteDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearInviteDelegates");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CanAllPlayersPlayOnline
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::CanAllPlayersPlayOnline()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanAllPlayersPlayOnline");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.InviteHasEnoughSpace
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UOnlineGameSettings*     InviteSettings                 (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::InviteHasEnoughSpace(class UOnlineGameSettings* InviteSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InviteHasEnoughSpace");

	struct
	{
		class UOnlineGameSettings*     InviteSettings;
		bool                           ReturnValue;
	} params;
	params.InviteSettings = InviteSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnGameInviteAccepted
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FOnlineGameSearchResult InviteResult                   (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 ErrorString                    (CPF_Parm, CPF_NeedCtorLink)

void APlayerController::OnGameInviteAccepted(const struct FString& ErrorString, struct FOnlineGameSearchResult* InviteResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnGameInviteAccepted");

	struct
	{
		struct FOnlineGameSearchResult InviteResult;
		struct FString                 ErrorString;
	} params;
	params.ErrorString = ErrorString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InviteResult != nullptr)
		*InviteResult = params.InviteResult;
}


// Function Engine.PlayerController.OnArbitrationRegisterComplete
// (FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void APlayerController::OnArbitrationRegisterComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnArbitrationRegisterComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientRegisterForArbitration
// (FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientRegisterForArbitration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRegisterForArbitration");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientWasKicked
// (FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientWasKicked()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWasKicked");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsShowingSubtitles
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsShowingSubtitles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsShowingSubtitles");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetShowSubtitles
// (FUNC_Simulated, FUNC_Exec, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bValue                         (CPF_Parm)

void APlayerController::SetShowSubtitles(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetShowSubtitles");

	struct
	{
		bool                           bValue;
	} params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyDirectorControl
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           bNowControlling                (CPF_Parm)
// class USeqAct_Interp*          CurrentMatinee                 (CPF_Parm)

void APlayerController::NotifyDirectorControl(bool bNowControlling, class USeqAct_Interp* CurrentMatinee)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyDirectorControl");

	struct
	{
		bool                           bNowControlling;
		class USeqAct_Interp*          CurrentMatinee;
	} params;
	params.bNowControlling = bNowControlling;
	params.CurrentMatinee = CurrentMatinee;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUnmutePlayer
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Event, FUNC_Public, FUNC_NetServer)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (CPF_Parm)

void APlayerController::ServerUnmutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUnmutePlayer");

	struct
	{
		struct FUniqueNetId            PlayerNetId;
	} params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerMutePlayer
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Event, FUNC_Public, FUNC_NetServer)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (CPF_Parm)

void APlayerController::ServerMutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMutePlayer");

	struct
	{
		struct FUniqueNetId            PlayerNetId;
	} params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GameplayUnmutePlayer
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (CPF_Parm)

void APlayerController::GameplayUnmutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GameplayUnmutePlayer");

	struct
	{
		struct FUniqueNetId            PlayerNetId;
	} params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GameplayMutePlayer
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (CPF_Parm)

void APlayerController::GameplayMutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GameplayMutePlayer");

	struct
	{
		struct FUniqueNetId            PlayerNetId;
	} params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientUnmutePlayer
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (CPF_Parm)

void APlayerController::ClientUnmutePlayer(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUnmutePlayer");

	struct
	{
		struct FUniqueNetId            PlayerNetId;
	} params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientMutePlayer
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (CPF_Parm)
// bool                           bAddToMuteList                 (CPF_OptionalParm, CPF_Parm)

void APlayerController::ClientMutePlayer(const struct FUniqueNetId& PlayerNetId, bool bAddToMuteList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMutePlayer");

	struct
	{
		struct FUniqueNetId            PlayerNetId;
		bool                           bAddToMuteList;
	} params;
	params.PlayerNetId = PlayerNetId;
	params.bAddToMuteList = bAddToMuteList;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientVoiceHandshakeComplete
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientVoiceHandshakeComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientVoiceHandshakeComplete");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetPlayerControllerFromNetId
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (CPF_Parm)
// class APlayerController*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APlayerController* APlayerController::STATIC_GetPlayerControllerFromNetId(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPlayerControllerFromNetId");

	struct
	{
		struct FUniqueNetId            PlayerNetId;
		class APlayerController*       ReturnValue;
	} params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientSetOnlineStatus
// (FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientSetOnlineStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetOnlineStatus");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SeamlessTravelFrom
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       OldPC                          (CPF_Parm)

void APlayerController::SeamlessTravelFrom(class APlayerController* OldPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SeamlessTravelFrom");

	struct
	{
		class APlayerController*       OldPC;
	} params;
	params.OldPC = OldPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SeamlessTravelTo
// (FUNC_Public)
// Parameters:
// class APlayerController*       NewPC                          (CPF_Parm)

void APlayerController::SeamlessTravelTo(class APlayerController* NewPC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SeamlessTravelTo");

	struct
	{
		class APlayerController*       NewPC;
	} params;
	params.NewPC = NewPC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetSeamlessTravelActorList
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// bool                           bToEntry                       (CPF_Parm)
// TArray<class AActor*>          ActorList                      (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void APlayerController::GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSeamlessTravelActorList");

	struct
	{
		bool                           bToEntry;
		TArray<class AActor*>          ActorList;
	} params;
	params.bToEntry = bToEntry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActorList != nullptr)
		*ActorList = params.ActorList;
}


// Function Engine.PlayerController.IsPlayerMuted
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            Sender                         (CPF_Const, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsPlayerMuted(struct FUniqueNetId* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsPlayerMuted");

	struct
	{
		struct FUniqueNetId            Sender;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Sender != nullptr)
		*Sender = params.Sender;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetUIController
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// class UUIInteraction*          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UUIInteraction* APlayerController::GetUIController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetUIController");

	struct
	{
		class UUIInteraction*          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SaveActorConfig
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FName                   actorName                      (CPF_Parm, CPF_CoerceParm)

void APlayerController::SaveActorConfig(const struct FName& actorName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SaveActorConfig");

	struct
	{
		struct FName                   actorName;
	} params;
	params.actorName = actorName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SaveClassConfig
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 ClassName                      (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)

void APlayerController::SaveClassConfig(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SaveClassConfig");

	struct
	{
		struct FString                 ClassName;
	} params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientWaitForLevelsVisible
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// class USeqAct_WaitForLevelsVisible* inAction                       (CPF_Parm)

void APlayerController::ClientWaitForLevelsVisible(class USeqAct_WaitForLevelsVisible* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientWaitForLevelsVisible");

	struct
	{
		class USeqAct_WaitForLevelsVisible* inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetBlockOnAsyncLoading
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientSetBlockOnAsyncLoading()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetBlockOnAsyncLoading");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientFlushLevelStreaming
// (FUNC_Final, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientFlushLevelStreaming()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientFlushLevelStreaming");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientCancelPendingMapChange
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientCancelPendingMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCancelPendingMapChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientCommitMapChange
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientCommitMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCommitMapChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DelayedPrepareMapChange
// (FUNC_Defined, FUNC_Public)

void APlayerController::DelayedPrepareMapChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DelayedPrepareMapChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPrepareMapChange
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FName                   LevelName                      (CPF_Parm)
// bool                           bFirst                         (CPF_Parm)
// bool                           bLast                          (CPF_Parm)

void APlayerController::ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPrepareMapChange");

	struct
	{
		struct FName                   LevelName;
		bool                           bFirst;
		bool                           bLast;
	} params;
	params.LevelName = LevelName;
	params.bFirst = bFirst;
	params.bLast = bLast;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUpdateLevelVisibility
// (FUNC_Final, FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer)
// Parameters:
// struct FName                   PackageName                    (CPF_Parm)
// bool                           bIsVisible                     (CPF_Parm)

void APlayerController::ServerUpdateLevelVisibility(const struct FName& PackageName, bool bIsVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdateLevelVisibility");

	struct
	{
		struct FName                   PackageName;
		bool                           bIsVisible;
	} params;
	params.PackageName = PackageName;
	params.bIsVisible = bIsVisible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientUpdateLevelStreamingStatus
// (FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Native, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FName                   PackageName                    (CPF_Parm)
// bool                           bNewShouldBeLoaded             (CPF_Parm)
// bool                           bNewShouldBeVisible            (CPF_Parm)
// bool                           bNewShouldBlockOnLoad          (CPF_Parm)

void APlayerController::ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdateLevelStreamingStatus");

	struct
	{
		struct FName                   PackageName;
		bool                           bNewShouldBeLoaded;
		bool                           bNewShouldBeVisible;
		bool                           bNewShouldBlockOnLoad;
	} params;
	params.PackageName = PackageName;
	params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	params.bNewShouldBeVisible = bNewShouldBeVisible;
	params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LevelStreamingStatusChanged
// (FUNC_Final, FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ULevelStreaming*         LevelObject                    (CPF_Parm)
// bool                           bNewShouldBeLoaded             (CPF_Parm)
// bool                           bNewShouldBeVisible            (CPF_Parm)
// bool                           bNewShouldBlockOnLoad          (CPF_Parm)

void APlayerController::LevelStreamingStatusChanged(class ULevelStreaming* LevelObject, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LevelStreamingStatusChanged");

	struct
	{
		class ULevelStreaming*         LevelObject;
		bool                           bNewShouldBeLoaded;
		bool                           bNewShouldBeVisible;
		bool                           bNewShouldBlockOnLoad;
	} params;
	params.LevelObject = LevelObject;
	params.bNewShouldBeLoaded = bNewShouldBeLoaded;
	params.bNewShouldBeVisible = bNewShouldBeVisible;
	params.bNewShouldBlockOnLoad = bNewShouldBlockOnLoad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientForceGarbageCollection
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientForceGarbageCollection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientForceGarbageCollection");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnConsoleCommand
// (FUNC_Public)
// Parameters:
// class USeqAct_ConsoleCommand*  inAction                       (CPF_Parm)

void APlayerController::OnConsoleCommand(class USeqAct_ConsoleCommand* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnConsoleCommand");

	struct
	{
		class USeqAct_ConsoleCommand*  inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetPlayerMovementInput
// (FUNC_Defined, FUNC_Public)

void APlayerController::ResetPlayerMovementInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetPlayerMovementInput");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsLookInputIgnored
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsLookInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsLookInputIgnored");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IgnoreLookInput
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bNewLookInput                  (CPF_Parm)

void APlayerController::IgnoreLookInput(bool bNewLookInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IgnoreLookInput");

	struct
	{
		bool                           bNewLookInput;
	} params;
	params.bNewLookInput = bNewLookInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsMoveInputIgnored
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsMoveInputIgnored()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsMoveInputIgnored");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IgnoreMoveInput
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bNewMoveInput                  (CPF_Parm)

void APlayerController::IgnoreMoveInput(bool bNewMoveInput)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IgnoreMoveInput");

	struct
	{
		bool                           bNewMoveInput;
	} params;
	params.bNewMoveInput = bNewMoveInput;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetCinematicMode
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// bool                           bInCinematicMode               (CPF_Parm)
// bool                           bAffectsMovement               (CPF_Parm)
// bool                           bAffectsTurning                (CPF_Parm)
// bool                           bAffectsHUD                    (CPF_Parm)

void APlayerController::ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCinematicMode");

	struct
	{
		bool                           bInCinematicMode;
		bool                           bAffectsMovement;
		bool                           bAffectsTurning;
		bool                           bAffectsHUD;
	} params;
	params.bInCinematicMode = bInCinematicMode;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;
	params.bAffectsHUD = bAffectsHUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetCinematicMode
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bInCinematicMode               (CPF_Parm)
// bool                           bHidePlayer                    (CPF_Parm)
// bool                           bAffectsHUD                    (CPF_Parm)
// bool                           bAffectsMovement               (CPF_Parm)
// bool                           bAffectsTurning                (CPF_Parm)
// bool                           bAffectsButtons                (CPF_Parm)

void APlayerController::SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsButtons)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetCinematicMode");

	struct
	{
		bool                           bInCinematicMode;
		bool                           bHidePlayer;
		bool                           bAffectsHUD;
		bool                           bAffectsMovement;
		bool                           bAffectsTurning;
		bool                           bAffectsButtons;
	} params;
	params.bInCinematicMode = bInCinematicMode;
	params.bHidePlayer = bHidePlayer;
	params.bAffectsHUD = bAffectsHUD;
	params.bAffectsMovement = bAffectsMovement;
	params.bAffectsTurning = bAffectsTurning;
	params.bAffectsButtons = bAffectsButtons;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnToggleCinematicMode
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_ToggleCinematicMode* Action                         (CPF_Parm)

void APlayerController::OnToggleCinematicMode(class USeqAct_ToggleCinematicMode* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnToggleCinematicMode");

	struct
	{
		class USeqAct_ToggleCinematicMode* Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsForceFeedbackAllowed
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsForceFeedbackAllowed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsForceFeedbackAllowed");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientStopForceFeedbackWaveform
// (FUNC_Final, FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// class UForceFeedbackWaveform*  FFWaveform                     (CPF_OptionalParm, CPF_Parm)

void APlayerController::ClientStopForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopForceFeedbackWaveform");

	struct
	{
		class UForceFeedbackWaveform*  FFWaveform;
	} params;
	params.FFWaveform = FFWaveform;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlayForceFeedbackWaveform
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// class UForceFeedbackWaveform*  FFWaveform                     (CPF_Parm)
// class AActor*                  FFWaveformInstigator           (CPF_OptionalParm, CPF_Parm)

void APlayerController::ClientPlayForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform, class AActor* FFWaveformInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayForceFeedbackWaveform");

	struct
	{
		class UForceFeedbackWaveform*  FFWaveform;
		class AActor*                  FFWaveformInstigator;
	} params;
	params.FFWaveform = FFWaveform;
	params.FFWaveformInstigator = FFWaveformInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlayRumble
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UAnimNotify_Rumble*      TheAnimNotify                  (CPF_Const, CPF_Parm)

void APlayerController::PlayRumble(class UAnimNotify_Rumble* TheAnimNotify)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayRumble");

	struct
	{
		class UAnimNotify_Rumble*      TheAnimNotify;
	} params;
	params.TheAnimNotify = TheAnimNotify;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnForceFeedback
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_ForceFeedback*   Action                         (CPF_Parm)

void APlayerController::OnForceFeedback(class USeqAct_ForceFeedback* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnForceFeedback");

	struct
	{
		class USeqAct_ForceFeedback*   Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyTakeHit
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// int                            Damage                         (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)

void APlayerController::NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyTakeHit");

	struct
	{
		class AController*             InstigatedBy;
		struct FVector                 HitLocation;
		int                            Damage;
		class UClass*                  DamageType;
		struct FVector                 Momentum;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShowGameState
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void APlayerController::ShowGameState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShowGameState");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShowPlayerState
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void APlayerController::ShowPlayerState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShowPlayerState");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerRemoteEvent
// (FUNC_Net, FUNC_Public, FUNC_NetServer)
// Parameters:
// struct FName                   EventName                      (CPF_Parm)

void APlayerController::ServerRemoteEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRemoteEvent");

	struct
	{
		struct FName                   EventName;
	} params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RE
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   EventName                      (CPF_OptionalParm, CPF_Parm)

void APlayerController::RE(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RE");

	struct
	{
		struct FName                   EventName;
	} params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RemoteEvent
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   EventName                      (CPF_OptionalParm, CPF_Parm)

void APlayerController::RemoteEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoteEvent");

	struct
	{
		struct FName                   EventName;
	} params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ListCE
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void APlayerController::ListCE()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ListCE");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ListConsoleEvents
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void APlayerController::ListConsoleEvents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ListConsoleEvents");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CE
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   EventName                      (CPF_OptionalParm, CPF_Parm)

void APlayerController::CE(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CE");

	struct
	{
		struct FName                   EventName;
	} params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CauseEvent
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   EventName                      (CPF_OptionalParm, CPF_Parm)

void APlayerController::CauseEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CauseEvent");

	struct
	{
		struct FName                   EventName;
	} params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerCauseEvent
// (FUNC_Net, FUNC_Public, FUNC_NetServer)
// Parameters:
// struct FName                   EventName                      (CPF_Parm)

void APlayerController::ServerCauseEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCauseEvent");

	struct
	{
		struct FName                   EventName;
	} params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnToggleHUD
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_ToggleHUD*       inAction                       (CPF_Parm)

void APlayerController::OnToggleHUD(class USeqAct_ToggleHUD* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnToggleHUD");

	struct
	{
		class USeqAct_ToggleHUD*       inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnSetCameraTarget
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_SetCameraTarget* inAction                       (CPF_Parm)

void APlayerController::OnSetCameraTarget(class USeqAct_SetCameraTarget* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnSetCameraTarget");

	struct
	{
		class USeqAct_SetCameraTarget* inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientClearKismetText
// (FUNC_Final, FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FVector2D               MessageOffset                  (CPF_Parm)

void APlayerController::ClientClearKismetText(const struct FVector2D& MessageOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientClearKismetText");

	struct
	{
		struct FVector2D               MessageOffset;
	} params;
	params.MessageOffset = MessageOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientDrawKismetText
// (FUNC_Final, FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FKismetDrawTextInfo     DrawTextInfo                   (CPF_Parm, CPF_NeedCtorLink)
// float                          DisplayTime                    (CPF_Parm)

void APlayerController::ClientDrawKismetText(const struct FKismetDrawTextInfo& DrawTextInfo, float DisplayTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientDrawKismetText");

	struct
	{
		struct FKismetDrawTextInfo     DrawTextInfo;
		float                          DisplayTime;
	} params;
	params.DrawTextInfo = DrawTextInfo;
	params.DisplayTime = DisplayTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnDrawText
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_DrawText*        inAction                       (CPF_Parm)

void APlayerController::OnDrawText(class USeqAct_DrawText* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnDrawText");

	struct
	{
		class USeqAct_DrawText*        inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DisplayDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm, CPF_OutParm)
// float                          out_YPos                       (CPF_Parm, CPF_OutParm)

void APlayerController::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DisplayDebug");

	struct
	{
		class AHUD*                    HUD;
		float                          out_YL;
		float                          out_YPos;
	} params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.PlayerController.ClientIgnoreLookInput
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// bool                           bIgnore                        (CPF_Parm)

void APlayerController::ClientIgnoreLookInput(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreLookInput");

	struct
	{
		bool                           bIgnore;
	} params;
	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientIgnoreMoveInput
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// bool                           bIgnore                        (CPF_Parm)

void APlayerController::ClientIgnoreMoveInput(bool bIgnore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIgnoreMoveInput");

	struct
	{
		bool                           bIgnore;
	} params;
	params.bIgnore = bIgnore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnToggleInput
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_ToggleInput*     inAction                       (CPF_Parm)

void APlayerController::OnToggleInput(class USeqAct_ToggleInput* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnToggleInput");

	struct
	{
		class USeqAct_ToggleInput*     inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AdjustHUDRenderSize
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            X                              (CPF_Parm, CPF_OutParm)
// int                            Y                              (CPF_Parm, CPF_OutParm)
// int                            SizeX                          (CPF_Parm, CPF_OutParm)
// int                            SizeY                          (CPF_Parm, CPF_OutParm)
// int                            FullScreenSizeX                (CPF_Const, CPF_Parm)
// int                            FullScreenSizeY                (CPF_Const, CPF_Parm)

void APlayerController::AdjustHUDRenderSize(int FullScreenSizeX, int FullScreenSizeY, int* X, int* Y, int* SizeX, int* SizeY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdjustHUDRenderSize");

	struct
	{
		int                            X;
		int                            Y;
		int                            SizeX;
		int                            SizeY;
		int                            FullScreenSizeX;
		int                            FullScreenSizeY;
	} params;
	params.FullScreenSizeX = FullScreenSizeX;
	params.FullScreenSizeY = FullScreenSizeY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (X != nullptr)
		*X = params.X;
	if (Y != nullptr)
		*Y = params.Y;
	if (SizeX != nullptr)
		*SizeX = params.SizeX;
	if (SizeY != nullptr)
		*SizeY = params.SizeY;
}


// Function Engine.PlayerController.DrawHUD
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AHUD*                    H                              (CPF_Parm)

void APlayerController::DrawHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DrawHUD");

	struct
	{
		class AHUD*                    H;
	} params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CanRestartPlayer
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::CanRestartPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanRestartPlayer");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ViewAPlayer
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            Dir                            (CPF_Parm)

void APlayerController::ViewAPlayer(int Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ViewAPlayer");

	struct
	{
		int                            Dir;
	} params;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetNextViewablePlayer
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            Dir                            (CPF_Parm)
// class APlayerReplicationInfo*  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APlayerReplicationInfo* APlayerController::GetNextViewablePlayer(int Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetNextViewablePlayer");

	struct
	{
		int                            Dir;
		class APlayerReplicationInfo*  ReturnValue;
	} params;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsSpectating
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsSpectating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpectating");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.AdjustPlayerWalkingMoveAccel
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 newAccel                       (CPF_Parm, CPF_OutParm)

void APlayerController::AdjustPlayerWalkingMoveAccel(struct FVector* newAccel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdjustPlayerWalkingMoveAccel");

	struct
	{
		struct FVector                 newAccel;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (newAccel != nullptr)
		*newAccel = params.newAccel;
}


// Function Engine.PlayerController.CheckJumpOrDuck
// (FUNC_Defined, FUNC_Public)

void APlayerController::CheckJumpOrDuck()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CheckJumpOrDuck");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LimitViewRotation
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FRotator                ViewRotation                   (CPF_Parm)
// float                          ViewPitchMin                   (CPF_Parm)
// float                          ViewPitchMax                   (CPF_Parm)
// struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FRotator APlayerController::LimitViewRotation(const struct FRotator& ViewRotation, float ViewPitchMin, float ViewPitchMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LimitViewRotation");

	struct
	{
		struct FRotator                ViewRotation;
		float                          ViewPitchMin;
		float                          ViewPitchMax;
		struct FRotator                ReturnValue;
	} params;
	params.ViewRotation = ViewRotation;
	params.ViewPitchMin = ViewPitchMin;
	params.ViewPitchMax = ViewPitchMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ProcessViewRotation
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// struct FRotator                out_ViewRotation               (CPF_Parm, CPF_OutParm)
// struct FRotator                DeltaRot                       (CPF_Parm)

void APlayerController::ProcessViewRotation(float DeltaTime, const struct FRotator& DeltaRot, struct FRotator* out_ViewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessViewRotation");

	struct
	{
		float                          DeltaTime;
		struct FRotator                out_ViewRotation;
		struct FRotator                DeltaRot;
	} params;
	params.DeltaTime = DeltaTime;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewRotation != nullptr)
		*out_ViewRotation = params.out_ViewRotation;
}


// Function Engine.PlayerController.UpdateRotation
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void APlayerController::UpdateRotation(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateRotation");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ViewShake
// (FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void APlayerController::ViewShake(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ViewShake");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsAimingAt
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AActor*                  ATarget                        (CPF_Parm)
// float                          Epsilon                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsAimingAt(class AActor* ATarget, float Epsilon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsAimingAt");

	struct
	{
		class AActor*                  ATarget;
		float                          Epsilon;
		bool                           ReturnValue;
	} params;
	params.ATarget = ATarget;
	params.Epsilon = Epsilon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetPlayerViewPoint
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 out_Location                   (CPF_Parm, CPF_OutParm)
// struct FRotator                out_Rotation                   (CPF_Parm, CPF_OutParm)

void APlayerController::GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPlayerViewPoint");

	struct
	{
		struct FVector                 out_Location;
		struct FRotator                out_Rotation;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.PlayerController.SpawnPlayerCamera
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APlayerController::SpawnPlayerCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpawnPlayerCamera");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerVerifyViewTarget
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)

void APlayerController::ServerVerifyViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerVerifyViewTarget");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetViewTarget
// (FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AActor* APlayerController::GetViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetViewTarget");

	struct
	{
		class AActor*                  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientSetViewTarget
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// class AActor*                  A                              (CPF_Parm)
// struct FViewTargetTransitionParams TransitionParams               (CPF_OptionalParm, CPF_Parm)

void APlayerController::ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget");

	struct
	{
		class AActor*                  A;
		struct FViewTargetTransitionParams TransitionParams;
	} params;
	params.A = A;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetViewTargetWithBlend
// (FUNC_Final, FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AActor*                  NewViewTarget                  (CPF_Parm)
// float                          BlendTime                      (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class EViewTargetBlendFunction> BlendFunc                      (CPF_OptionalParm, CPF_Parm)
// float                          BlendExp                       (CPF_OptionalParm, CPF_Parm)
// bool                           bLockOutgoing                  (CPF_OptionalParm, CPF_Parm)

void APlayerController::SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<enum class EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetViewTargetWithBlend");

	struct
	{
		class AActor*                  NewViewTarget;
		float                          BlendTime;
		TEnumAsByte<enum class EViewTargetBlendFunction> BlendFunc;
		float                          BlendExp;
		bool                           bLockOutgoing;
	} params;
	params.NewViewTarget = NewViewTarget;
	params.BlendTime = BlendTime;
	params.BlendFunc = BlendFunc;
	params.BlendExp = BlendExp;
	params.bLockOutgoing = bLockOutgoing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetViewTarget
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  NewViewTarget                  (CPF_Parm)
// struct FViewTargetTransitionParams TransitionParams               (CPF_OptionalParm, CPF_Parm)

void APlayerController::SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetViewTarget");

	struct
	{
		class AActor*                  NewViewTarget;
		struct FViewTargetTransitionParams TransitionParams;
	} params;
	params.NewViewTarget = NewViewTarget;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsLocalController
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsLocalController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsLocalController");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsLocalPlayerController
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsLocalPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsLocalPlayerController");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetFOVAngle
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float APlayerController::GetFOVAngle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetFOVAngle");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.AdjustFOV
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void APlayerController::AdjustFOV(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdjustFOV");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyLanded
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  FloorActor                     (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::NotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyLanded");

	struct
	{
		struct FVector                 HitNormal;
		class AActor*                  FloorActor;
		bool                           ReturnValue;
	} params;
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.AimHelpDot
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bInstantHit                    (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float APlayerController::AimHelpDot(bool bInstantHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AimHelpDot");

	struct
	{
		bool                           bInstantHit;
		float                          ReturnValue;
	} params;
	params.bInstantHit = bInstantHit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetAdjustedAimFor
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AWeapon*                 W                              (CPF_Parm)
// struct FVector                 StartFireLoc                   (CPF_Parm)
// struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FRotator APlayerController::GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetAdjustedAimFor");

	struct
	{
		class AWeapon*                 W;
		struct FVector                 StartFireLoc;
		struct FRotator                ReturnValue;
	} params;
	params.W = W;
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CameraLookAtFinished
// (FUNC_Event, FUNC_Public)
// Parameters:
// class USeqAct_CameraLookAt*    Action                         (CPF_Parm)

void APlayerController::CameraLookAtFinished(class USeqAct_CameraLookAt* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CameraLookAtFinished");

	struct
	{
		class USeqAct_CameraLookAt*    Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AimingHelp
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bInstantHit                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::AimingHelp(bool bInstantHit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AimingHelp");

	struct
	{
		bool                           bInstantHit;
		bool                           ReturnValue;
	} params;
	params.bInstantHit = bInstantHit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PlayerMove
// (FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void APlayerController::PlayerMove(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayerMove");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlayerTick
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void APlayerController::PlayerTick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayerTick");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyChangedWeapon
// (FUNC_Public)
// Parameters:
// class AWeapon*                 PreviousWeapon                 (CPF_Parm)
// class AWeapon*                 NewWeapon                      (CPF_Parm)

void APlayerController::NotifyChangedWeapon(class AWeapon* PreviousWeapon, class AWeapon* NewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyChangedWeapon");

	struct
	{
		class AWeapon*                 PreviousWeapon;
		class AWeapon*                 NewWeapon;
	} params;
	params.PreviousWeapon = PreviousWeapon;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientGameEnded
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// class AActor*                  EndGameFocus                   (CPF_Parm)
// bool                           bIsWinner                      (CPF_Parm)

void APlayerController::ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGameEnded");

	struct
	{
		class AActor*                  EndGameFocus;
		bool                           bIsWinner;
	} params;
	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GameHasEnded
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  EndGameFocus                   (CPF_OptionalParm, CPF_Parm)
// bool                           bIsWinner                      (CPF_OptionalParm, CPF_Parm)

void APlayerController::GameHasEnded(class AActor* EndGameFocus, bool bIsWinner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GameHasEnded");

	struct
	{
		class AActor*                  EndGameFocus;
		bool                           bIsWinner;
	} params;
	params.EndGameFocus = EndGameFocus;
	params.bIsWinner = bIsWinner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientRestart
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// class APawn*                   NewPawn                        (CPF_Parm)

void APlayerController::ClientRestart(class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientRestart");

	struct
	{
		class APawn*                   NewPawn;
	} params;
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EnterStartState
// (FUNC_Defined, FUNC_Public)

void APlayerController::EnterStartState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnterStartState");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ForceSingleNetUpdateFor
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  Target                         (CPF_Parm)

void APlayerController::ForceSingleNetUpdateFor(class AActor* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ForceSingleNetUpdateFor");

	struct
	{
		class AActor*                  Target;
	} params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.HasClientLoadedCurrentWorld
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::HasClientLoadedCurrentWorld()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HasClientLoadedCurrentWorld");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.NotifyLoadedWorld
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FName                   WorldPackageName               (CPF_Parm)
// bool                           bFinalDest                     (CPF_Parm)

void APlayerController::NotifyLoadedWorld(const struct FName& WorldPackageName, bool bFinalDest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyLoadedWorld");

	struct
	{
		struct FName                   WorldPackageName;
		bool                           bFinalDest;
	} params;
	params.WorldPackageName = WorldPackageName;
	params.bFinalDest = bFinalDest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerNotifyLoadedWorld
// (FUNC_Final, FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetServer)
// Parameters:
// struct FName                   WorldPackageName               (CPF_Parm)

void APlayerController::ServerNotifyLoadedWorld(const struct FName& WorldPackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerNotifyLoadedWorld");

	struct
	{
		struct FName                   WorldPackageName;
	} params;
	params.WorldPackageName = WorldPackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Restart
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bVehicleTransition             (CPF_Parm)

void APlayerController::Restart(bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Restart");

	struct
	{
		bool                           bVehicleTransition;
	} params;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetProgressMessage
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// TEnumAsByte<enum class EProgressMessageType> MessageType                    (CPF_Parm)
// struct FString                 Message                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Title                          (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           bIgnoreFutureNetworkMessages   (CPF_OptionalParm, CPF_Parm)

void APlayerController::ClientSetProgressMessage(TEnumAsByte<enum class EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title, bool bIgnoreFutureNetworkMessages)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetProgressMessage");

	struct
	{
		TEnumAsByte<enum class EProgressMessageType> MessageType;
		struct FString                 Message;
		struct FString                 Title;
		bool                           bIgnoreFutureNetworkMessages;
	} params;
	params.MessageType = MessageType;
	params.Message = Message;
	params.Title = Title;
	params.bIgnoreFutureNetworkMessages = bIgnoreFutureNetworkMessages;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SwitchLevel
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)

void APlayerController::SwitchLevel(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchLevel");

	struct
	{
		struct FString                 URL;
	} params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ChangeTeam
// (FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 TeamName                       (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)

void APlayerController::ChangeTeam(const struct FString& TeamName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChangeTeam");

	struct
	{
		struct FString                 TeamName;
	} params;
	params.TeamName = TeamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SwitchTeam
// (FUNC_Exec, FUNC_Public)

void APlayerController::SwitchTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchTeam");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerChangeName
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)
// Parameters:
// struct FString                 S                              (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)

void APlayerController::ServerChangeName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChangeName");

	struct
	{
		struct FString                 S;
	} params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetName
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 S                              (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)

void APlayerController::SetName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetName");

	struct
	{
		struct FString                 S;
	} params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Suicide
// (FUNC_Exec, FUNC_Public)

void APlayerController::Suicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Suicide");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TriggerInteracted
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::TriggerInteracted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TriggerInteracted");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.FindVehicleToDrive
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::FindVehicleToDrive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FindVehicleToDrive");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PerformedUseAction
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::PerformedUseAction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PerformedUseAction");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.Use
// (FUNC_Exec, FUNC_Public)

void APlayerController::Use()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Use");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetTriggerUseList
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// float                          interactDistanceToCheck        (CPF_Parm)
// float                          crosshairDist                  (CPF_Parm)
// float                          minDot                         (CPF_Parm)
// bool                           bUsuableOnly                   (CPF_Parm)
// TArray<class ATrigger*>        out_useList                    (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void APlayerController::GetTriggerUseList(float interactDistanceToCheck, float crosshairDist, float minDot, bool bUsuableOnly, TArray<class ATrigger*>* out_useList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetTriggerUseList");

	struct
	{
		float                          interactDistanceToCheck;
		float                          crosshairDist;
		float                          minDot;
		bool                           bUsuableOnly;
		TArray<class ATrigger*>        out_useList;
	} params;
	params.interactDistanceToCheck = interactDistanceToCheck;
	params.crosshairDist = crosshairDist;
	params.minDot = minDot;
	params.bUsuableOnly = bUsuableOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_useList != nullptr)
		*out_useList = params.out_useList;
}


// Function Engine.PlayerController.StopAltFire
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_OptionalParm, CPF_Parm)

void APlayerController::StopAltFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StopAltFire");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.StartAltFire
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_OptionalParm, CPF_Parm)

void APlayerController::StartAltFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StartAltFire");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.StopFire
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_OptionalParm, CPF_Parm)

void APlayerController::StopFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StopFire");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.StartFire
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_OptionalParm, CPF_Parm)

void APlayerController::StartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StartFire");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NextWeapon
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void APlayerController::NextWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NextWeapon");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PrevWeapon
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void APlayerController::PrevWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PrevWeapon");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ThrowWeapon
// (FUNC_Exec, FUNC_Public)

void APlayerController::ThrowWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ThrowWeapon");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UTrace
// (FUNC_Exec, FUNC_Public)

void APlayerController::UTrace()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UTrace");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ConditionalPause
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           bDesiredPauseState             (CPF_Parm)

void APlayerController::ConditionalPause(bool bDesiredPauseState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ConditionalPause");

	struct
	{
		bool                           bDesiredPauseState;
	} params;
	params.bDesiredPauseState = bDesiredPauseState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Pause
// (FUNC_Exec, FUNC_Public)

void APlayerController::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Pause");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsPaused
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsPaused()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsPaused");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetPause
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bPause                         (CPF_Parm)
// struct FScriptDelegate         CanUnpauseDelegate             (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::SetPause(bool bPause, const struct FScriptDelegate& CanUnpauseDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetPause");

	struct
	{
		bool                           bPause;
		struct FScriptDelegate         CanUnpauseDelegate;
		bool                           ReturnValue;
	} params;
	params.bPause = bPause;
	params.CanUnpauseDelegate = CanUnpauseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CanUnpause
// (FUNC_Defined, FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::CanUnpause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanUnpause");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.LocalTravel
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)

void APlayerController::LocalTravel(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LocalTravel");

	struct
	{
		struct FString                 URL;
	} params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RestartLevel
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void APlayerController::RestartLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RestartLevel");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Speech
// (FUNC_Exec, FUNC_Public)
// Parameters:
// struct FName                   Type                           (CPF_Parm)
// int                            Index                          (CPF_Parm)
// struct FString                 Callsign                       (CPF_Parm, CPF_NeedCtorLink)

void APlayerController::Speech(const struct FName& Type, int Index, const struct FString& Callsign)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Speech");

	struct
	{
		struct FName                   Type;
		int                            Index;
		struct FString                 Callsign;
	} params;
	params.Type = Type;
	params.Index = Index;
	params.Callsign = Callsign;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.HandleWalking
// (FUNC_Defined, FUNC_Public)

void APlayerController::HandleWalking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HandleWalking");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReplicateMove
// (FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// struct FVector                 newAccel                       (CPF_Parm)
// TEnumAsByte<enum class EDoubleClickDir> DoubleClickMove                (CPF_Parm)
// struct FRotator                DeltaRot                       (CPF_Parm)

void APlayerController::ReplicateMove(float DeltaTime, const struct FVector& newAccel, TEnumAsByte<enum class EDoubleClickDir> DoubleClickMove, const struct FRotator& DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReplicateMove");

	struct
	{
		float                          DeltaTime;
		struct FVector                 newAccel;
		TEnumAsByte<enum class EDoubleClickDir> DoubleClickMove;
		struct FRotator                DeltaRot;
	} params;
	params.DeltaTime = DeltaTime;
	params.newAccel = newAccel;
	params.DoubleClickMove = DoubleClickMove;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CompressAccel
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            C                              (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int APlayerController::CompressAccel(int C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CompressAccel");

	struct
	{
		int                            C;
		int                            ReturnValue;
	} params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetFreeMove
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// class USavedMove*              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class USavedMove* APlayerController::GetFreeMove()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetFreeMove");

	struct
	{
		class USavedMove*              ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientUpdatePosition
// (FUNC_Defined, FUNC_Public)

void APlayerController::ClientUpdatePosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdatePosition");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClearAckedMoves
// (FUNC_Defined, FUNC_Public)

void APlayerController::ClearAckedMoves()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearAckedMoves");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUpdatePing
// (FUNC_Defined, FUNC_Net, FUNC_Public, FUNC_NetServer)
// Parameters:
// int                            NewPing                        (CPF_Parm)

void APlayerController::ServerUpdatePing(int NewPing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdatePing");

	struct
	{
		int                            NewPing;
	} params;
	params.NewPing = NewPing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UpdateStateFromAdjustment
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   NewState                       (CPF_Parm)

void APlayerController::UpdateStateFromAdjustment(const struct FName& NewState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateStateFromAdjustment");

	struct
	{
		struct FName                   NewState;
	} params;
	params.NewState = NewState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LongClientAdjustPosition
// (FUNC_Defined, FUNC_Net, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
// Parameters:
// float                          TimeStamp                      (CPF_Parm)
// struct FName                   NewState                       (CPF_Parm)
// TEnumAsByte<enum class EPhysics> newPhysics                     (CPF_Parm)
// float                          NewLocX                        (CPF_Parm)
// float                          NewLocY                        (CPF_Parm)
// float                          NewLocZ                        (CPF_Parm)
// float                          NewVelX                        (CPF_Parm)
// float                          NewVelY                        (CPF_Parm)
// float                          NewVelZ                        (CPF_Parm)
// class AActor*                  NewBase                        (CPF_Parm)
// float                          NewFloorX                      (CPF_Parm)
// float                          NewFloorY                      (CPF_Parm)
// float                          NewFloorZ                      (CPF_Parm)

void APlayerController::LongClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<enum class EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LongClientAdjustPosition");

	struct
	{
		float                          TimeStamp;
		struct FName                   NewState;
		TEnumAsByte<enum class EPhysics> newPhysics;
		float                          NewLocX;
		float                          NewLocY;
		float                          NewLocZ;
		float                          NewVelX;
		float                          NewVelY;
		float                          NewVelZ;
		class AActor*                  NewBase;
		float                          NewFloorX;
		float                          NewFloorY;
		float                          NewFloorZ;
	} params;
	params.TimeStamp = TimeStamp;
	params.NewState = NewState;
	params.newPhysics = newPhysics;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewVelX = NewVelX;
	params.NewVelY = NewVelY;
	params.NewVelZ = NewVelZ;
	params.NewBase = NewBase;
	params.NewFloorX = NewFloorX;
	params.NewFloorY = NewFloorY;
	params.NewFloorZ = NewFloorZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SkipPositionUpdateForRM
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::SkipPositionUpdateForRM()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SkipPositionUpdateForRM");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.UpdatePing
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// float                          TimeStamp                      (CPF_Parm)

void APlayerController::UpdatePing(float TimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdatePing");

	struct
	{
		float                          TimeStamp;
	} params;
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientAdjustPosition
// (FUNC_Defined, FUNC_Net, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
// Parameters:
// float                          TimeStamp                      (CPF_Parm)
// struct FName                   NewState                       (CPF_Parm)
// TEnumAsByte<enum class EPhysics> newPhysics                     (CPF_Parm)
// float                          NewLocX                        (CPF_Parm)
// float                          NewLocY                        (CPF_Parm)
// float                          NewLocZ                        (CPF_Parm)
// float                          NewVelX                        (CPF_Parm)
// float                          NewVelY                        (CPF_Parm)
// float                          NewVelZ                        (CPF_Parm)
// class AActor*                  NewBase                        (CPF_Parm)

void APlayerController::ClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<enum class EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAdjustPosition");

	struct
	{
		float                          TimeStamp;
		struct FName                   NewState;
		TEnumAsByte<enum class EPhysics> newPhysics;
		float                          NewLocX;
		float                          NewLocY;
		float                          NewLocZ;
		float                          NewVelX;
		float                          NewVelY;
		float                          NewVelZ;
		class AActor*                  NewBase;
	} params;
	params.TimeStamp = TimeStamp;
	params.NewState = NewState;
	params.newPhysics = newPhysics;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewVelX = NewVelX;
	params.NewVelY = NewVelY;
	params.NewVelZ = NewVelZ;
	params.NewBase = NewBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientAckGoodMove
// (FUNC_Defined, FUNC_Net, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// float                          TimeStamp                      (CPF_Parm)

void APlayerController::ClientAckGoodMove(float TimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAckGoodMove");

	struct
	{
		float                          TimeStamp;
	} params;
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientCapBandwidth
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// int                            Cap                            (CPF_Parm)

void APlayerController::ClientCapBandwidth(int Cap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCapBandwidth");

	struct
	{
		int                            Cap;
	} params;
	params.Cap = Cap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShortClientAdjustPosition
// (FUNC_Defined, FUNC_Net, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
// Parameters:
// float                          TimeStamp                      (CPF_Parm)
// struct FName                   NewState                       (CPF_Parm)
// TEnumAsByte<enum class EPhysics> newPhysics                     (CPF_Parm)
// float                          NewLocX                        (CPF_Parm)
// float                          NewLocY                        (CPF_Parm)
// float                          NewLocZ                        (CPF_Parm)
// class AActor*                  NewBase                        (CPF_Parm)

void APlayerController::ShortClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<enum class EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShortClientAdjustPosition");

	struct
	{
		float                          TimeStamp;
		struct FName                   NewState;
		TEnumAsByte<enum class EPhysics> newPhysics;
		float                          NewLocX;
		float                          NewLocY;
		float                          NewLocZ;
		class AActor*                  NewBase;
	} params;
	params.TimeStamp = TimeStamp;
	params.NewState = NewState;
	params.newPhysics = newPhysics;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewBase = NewBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.VeryShortClientAdjustPosition
// (FUNC_Defined, FUNC_Net, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults, FUNC_NetClient)
// Parameters:
// float                          TimeStamp                      (CPF_Parm)
// float                          NewLocX                        (CPF_Parm)
// float                          NewLocY                        (CPF_Parm)
// float                          NewLocZ                        (CPF_Parm)
// class AActor*                  NewBase                        (CPF_Parm)

void APlayerController::VeryShortClientAdjustPosition(float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.VeryShortClientAdjustPosition");

	struct
	{
		float                          TimeStamp;
		float                          NewLocX;
		float                          NewLocY;
		float                          NewLocZ;
		class AActor*                  NewBase;
	} params;
	params.TimeStamp = TimeStamp;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewBase = NewBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.MoveAutonomous
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// unsigned char                  CompressedFlags                (CPF_Parm)
// struct FVector                 newAccel                       (CPF_Parm)
// struct FRotator                DeltaRot                       (CPF_Parm)

void APlayerController::MoveAutonomous(float DeltaTime, unsigned char CompressedFlags, const struct FVector& newAccel, const struct FRotator& DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.MoveAutonomous");

	struct
	{
		float                          DeltaTime;
		unsigned char                  CompressedFlags;
		struct FVector                 newAccel;
		struct FRotator                DeltaRot;
	} params;
	params.DeltaTime = DeltaTime;
	params.CompressedFlags = CompressedFlags;
	params.newAccel = newAccel;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ProcessMove
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// struct FVector                 newAccel                       (CPF_Parm)
// TEnumAsByte<enum class EDoubleClickDir> DoubleClickMove                (CPF_Parm)
// struct FRotator                DeltaRot                       (CPF_Parm)

void APlayerController::ProcessMove(float DeltaTime, const struct FVector& newAccel, TEnumAsByte<enum class EDoubleClickDir> DoubleClickMove, const struct FRotator& DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessMove");

	struct
	{
		float                          DeltaTime;
		struct FVector                 newAccel;
		TEnumAsByte<enum class EDoubleClickDir> DoubleClickMove;
		struct FRotator                DeltaRot;
	} params;
	params.DeltaTime = DeltaTime;
	params.newAccel = newAccel;
	params.DoubleClickMove = DoubleClickMove;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ProcessDrive
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          InForward                      (CPF_Parm)
// float                          InStrafe                       (CPF_Parm)
// float                          InUp                           (CPF_Parm)
// bool                           InJump                         (CPF_Parm)

void APlayerController::ProcessDrive(float InForward, float InStrafe, float InUp, bool InJump)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessDrive");

	struct
	{
		float                          InForward;
		float                          InStrafe;
		float                          InUp;
		bool                           InJump;
	} params;
	params.InForward = InForward;
	params.InStrafe = InStrafe;
	params.InUp = InUp;
	params.InJump = InJump;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SendClientAdjustment
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APlayerController::SendClientAdjustment()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SendClientAdjustment");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerMoveHandleClientError
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// float                          TimeStamp                      (CPF_Parm)
// struct FVector                 Accel                          (CPF_Parm)
// struct FVector                 ClientLoc                      (CPF_Parm)

void APlayerController::ServerMoveHandleClientError(float TimeStamp, const struct FVector& Accel, const struct FVector& ClientLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMoveHandleClientError");

	struct
	{
		float                          TimeStamp;
		struct FVector                 Accel;
		struct FVector                 ClientLoc;
	} params;
	params.TimeStamp = TimeStamp;
	params.Accel = Accel;
	params.ClientLoc = ClientLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetServerMoveDeltaTime
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          TimeStamp                      (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float APlayerController::GetServerMoveDeltaTime(float TimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetServerMoveDeltaTime");

	struct
	{
		float                          TimeStamp;
		float                          ReturnValue;
	} params;
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ForceDeathUpdate
// (FUNC_Defined, FUNC_Public)

void APlayerController::ForceDeathUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ForceDeathUpdate");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UsingFirstPersonCamera
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::UsingFirstPersonCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UsingFirstPersonCamera");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientSetCameraFade
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// bool                           bEnableFading                  (CPF_Parm)
// struct FColor                  FadeColor                      (CPF_OptionalParm, CPF_Parm)
// struct FVector2D               FadeAlpha                      (CPF_OptionalParm, CPF_Parm)
// float                          FadeTime                       (CPF_OptionalParm, CPF_Parm)
// bool                           bFadeAudio                     (CPF_OptionalParm, CPF_Parm)

void APlayerController::ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCameraFade");

	struct
	{
		bool                           bEnableFading;
		struct FColor                  FadeColor;
		struct FVector2D               FadeAlpha;
		float                          FadeTime;
		bool                           bFadeAudio;
	} params;
	params.bEnableFading = bEnableFading;
	params.FadeColor = FadeColor;
	params.FadeAlpha = FadeAlpha;
	params.FadeTime = FadeTime;
	params.bFadeAudio = bFadeAudio;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetCameraMode
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APlayerController::ResetCameraMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetCameraMode");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetCameraMode
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   NewCamMode                     (CPF_Parm)

void APlayerController::SetCameraMode(const struct FName& NewCamMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetCameraMode");

	struct
	{
		struct FName                   NewCamMode;
	} params;
	params.NewCamMode = NewCamMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetCameraMode
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FName                   NewCamMode                     (CPF_Parm)

void APlayerController::ClientSetCameraMode(const struct FName& NewCamMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetCameraMode");

	struct
	{
		struct FName                   NewCamMode;
	} params;
	params.NewCamMode = NewCamMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Camera
// (FUNC_Exec, FUNC_Public)
// Parameters:
// struct FName                   NewMode                        (CPF_Parm)

void APlayerController::Camera(const struct FName& NewMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Camera");

	struct
	{
		struct FName                   NewMode;
	} params;
	params.NewMode = NewMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PreClientTravel
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 PendingURL                     (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class ETravelType> TravelType                     (CPF_Parm)
// bool                           bIsSeamlessTravel              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::PreClientTravel(const struct FString& PendingURL, TEnumAsByte<enum class ETravelType> TravelType, bool bIsSeamlessTravel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PreClientTravel");

	struct
	{
		struct FString                 PendingURL;
		TEnumAsByte<enum class ETravelType> TravelType;
		bool                           bIsSeamlessTravel;
		bool                           ReturnValue;
	} params;
	params.PendingURL = PendingURL;
	params.TravelType = TravelType;
	params.bIsSeamlessTravel = bIsSeamlessTravel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.TeamSay
// (FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 msg                            (CPF_Parm, CPF_NeedCtorLink)

void APlayerController::TeamSay(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TeamSay");

	struct
	{
		struct FString                 msg;
	} params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientAdminMessage
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FString                 msg                            (CPF_Parm, CPF_NeedCtorLink)

void APlayerController::ClientAdminMessage(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAdminMessage");

	struct
	{
		struct FString                 msg;
	} params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Say
// (FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 msg                            (CPF_Parm, CPF_NeedCtorLink)

void APlayerController::Say(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Say");

	struct
	{
		struct FString                 msg;
	} params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AllowTextMessage
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 msg                            (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::AllowTextMessage(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AllowTextMessage");

	struct
	{
		struct FString                 msg;
		bool                           ReturnValue;
	} params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.Mutate
// (FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 MutateString                   (CPF_Parm, CPF_NeedCtorLink)

void APlayerController::Mutate(const struct FString& MutateString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Mutate");

	struct
	{
		struct FString                 MutateString;
	} params;
	params.MutateString = MutateString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FOV
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// float                          F                              (CPF_Parm)

void APlayerController::FOV(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FOV");

	struct
	{
		float                          F;
	} params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetFOV
// (FUNC_Defined, FUNC_Public)

void APlayerController::ResetFOV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetFOV");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetFOV
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          NewFOV                         (CPF_Parm)

void APlayerController::SetFOV(float NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetFOV");

	struct
	{
		float                          NewFOV;
	} params;
	params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FixFOV
// (FUNC_Defined, FUNC_Public)

void APlayerController::FixFOV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FixFOV");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Destroyed
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APlayerController::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CleanupPawn
// (FUNC_Defined, FUNC_Public)

void APlayerController::CleanupPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CleanupPawn");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClearOnlineDelegates
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APlayerController::ClearOnlineDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearOnlineDelegates");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnPartyMembersInfoChanged
// (FUNC_Public)
// Parameters:
// struct FString                 PlayerName                     (CPF_Parm, CPF_NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// int                            CustomData1                    (CPF_Parm)
// int                            CustomData2                    (CPF_Parm)
// int                            CustomData3                    (CPF_Parm)
// int                            CustomData4                    (CPF_Parm)

void APlayerController::OnPartyMembersInfoChanged(const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, int CustomData1, int CustomData2, int CustomData3, int CustomData4)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnPartyMembersInfoChanged");

	struct
	{
		struct FString                 PlayerName;
		struct FUniqueNetId            PlayerID;
		int                            CustomData1;
		int                            CustomData2;
		int                            CustomData3;
		int                            CustomData4;
	} params;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;
	params.CustomData1 = CustomData1;
	params.CustomData2 = CustomData2;
	params.CustomData3 = CustomData3;
	params.CustomData4 = CustomData4;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnPartyMemberListChanged
// (FUNC_Public)
// Parameters:
// bool                           bJoinedOrLeft                  (CPF_Parm)
// struct FString                 PlayerName                     (CPF_Parm, CPF_NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)

void APlayerController::OnPartyMemberListChanged(bool bJoinedOrLeft, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnPartyMemberListChanged");

	struct
	{
		bool                           bJoinedOrLeft;
		struct FString                 PlayerName;
		struct FUniqueNetId            PlayerID;
	} params;
	params.bJoinedOrLeft = bJoinedOrLeft;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RegisterOnlineDelegates
// (FUNC_Defined, FUNC_Public)

void APlayerController::RegisterOnlineDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RegisterOnlineDelegates");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlayBeepSound
// (FUNC_Public)

void APlayerController::PlayBeepSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayBeepSound");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TeamMessage
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (CPF_Parm)
// struct FString                 S                              (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// struct FName                   Type                           (CPF_Parm)
// float                          MsgLifeTime                    (CPF_OptionalParm, CPF_Parm)

void APlayerController::TeamMessage(class APlayerReplicationInfo* PRI, const struct FString& S, const struct FName& Type, float MsgLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TeamMessage");

	struct
	{
		class APlayerReplicationInfo*  PRI;
		struct FString                 S;
		struct FName                   Type;
		float                          MsgLifeTime;
	} params;
	params.PRI = PRI;
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SpeakTTS
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 S                              (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// class APlayerReplicationInfo*  PRI                            (CPF_OptionalParm, CPF_Parm)

void APlayerController::SpeakTTS(const struct FString& S, class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpeakTTS");

	struct
	{
		struct FString                 S;
		class APlayerReplicationInfo*  PRI;
	} params;
	params.S = S;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CreateTTSSoundCue
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Private)
// Parameters:
// struct FString                 StrToSpeak                     (CPF_Parm, CPF_NeedCtorLink)
// class APlayerReplicationInfo*  PRI                            (CPF_Parm)
// class USoundCue*               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class USoundCue* APlayerController::CreateTTSSoundCue(const struct FString& StrToSpeak, class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CreateTTSSoundCue");

	struct
	{
		struct FString                 StrToSpeak;
		class APlayerReplicationInfo*  PRI;
		class USoundCue*               ReturnValue;
	} params;
	params.StrToSpeak = StrToSpeak;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.AllowTTSMessageFrom
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Private)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::AllowTTSMessageFrom(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AllowTTSMessageFrom");

	struct
	{
		class APlayerReplicationInfo*  PRI;
		bool                           ReturnValue;
	} params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CanCommunicate
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Private)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::CanCommunicate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanCommunicate");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientMessage
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FString                 S                              (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// struct FName                   Type                           (CPF_OptionalParm, CPF_Parm)
// float                          MsgLifeTime                    (CPF_OptionalParm, CPF_Parm)

void APlayerController::ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMessage");

	struct
	{
		struct FString                 S;
		struct FName                   Type;
		float                          MsgLifeTime;
	} params;
	params.S = S;
	params.Type = Type;
	params.MsgLifeTime = MsgLifeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlayActorFaceFXAnim
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// class AActor*                  SourceActor                    (CPF_Parm)
// class UFaceFXAnimSet*          AnimSet                        (CPF_Parm)
// struct FString                 GroupName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SeqName                        (CPF_Parm, CPF_NeedCtorLink)
// class USoundCue*               SoundCueToPlay                 (CPF_Parm)
// class UAkEvent*                AkEventToPlay                  (CPF_Parm)

void APlayerController::ClientPlayActorFaceFXAnim(class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayActorFaceFXAnim");

	struct
	{
		class AActor*                  SourceActor;
		class UFaceFXAnimSet*          AnimSet;
		struct FString                 GroupName;
		struct FString                 SeqName;
		class USoundCue*               SoundCueToPlay;
		class UAkEvent*                AkEventToPlay;
	} params;
	params.SourceActor = SourceActor;
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;
	params.SoundCueToPlay = SoundCueToPlay;
	params.AkEventToPlay = AkEventToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Kismet_ClientStopSound
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_NetClient)
// Parameters:
// class USoundCue*               ASound                         (CPF_Parm)
// class AActor*                  SourceActor                    (CPF_Parm)
// float                          FadeOutTime                    (CPF_Parm)

void APlayerController::Kismet_ClientStopSound(class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Kismet_ClientStopSound");

	struct
	{
		class USoundCue*               ASound;
		class AActor*                  SourceActor;
		float                          FadeOutTime;
	} params;
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.FadeOutTime = FadeOutTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Kismet_ClientPlaySound
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_NetClient)
// Parameters:
// class USoundCue*               ASound                         (CPF_Parm)
// class AActor*                  SourceActor                    (CPF_Parm)
// float                          VolumeMultiplier               (CPF_Parm)
// float                          PitchMultiplier                (CPF_Parm)
// float                          FadeInTime                     (CPF_Parm)
// bool                           bSuppressSubtitles             (CPF_Parm)
// bool                           bSuppressSpatialization        (CPF_Parm)

void APlayerController::Kismet_ClientPlaySound(class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, bool bSuppressSubtitles, bool bSuppressSpatialization)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Kismet_ClientPlaySound");

	struct
	{
		class USoundCue*               ASound;
		class AActor*                  SourceActor;
		float                          VolumeMultiplier;
		float                          PitchMultiplier;
		float                          FadeInTime;
		bool                           bSuppressSubtitles;
		bool                           bSuppressSpatialization;
	} params;
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.VolumeMultiplier = VolumeMultiplier;
	params.PitchMultiplier = PitchMultiplier;
	params.FadeInTime = FadeInTime;
	params.bSuppressSubtitles = bSuppressSubtitles;
	params.bSuppressSpatialization = bSuppressSpatialization;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsClosestLocalPlayerToActor
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AActor*                  TheActor                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsClosestLocalPlayerToActor(class AActor* TheActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsClosestLocalPlayerToActor");

	struct
	{
		class AActor*                  TheActor;
		bool                           ReturnValue;
	} params;
	params.TheActor = TheActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.WwiseClientHearSound
// (FUNC_Net, FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// class UAkEvent*                ASound                         (CPF_Parm)
// class AActor*                  SourceActor                    (CPF_Parm)
// struct FVector                 SourceLocation                 (CPF_Parm)
// bool                           bStopWhenOwnerDestroyed        (CPF_Parm)
// bool                           bIsOccluded                    (CPF_OptionalParm, CPF_Parm)

void APlayerController::WwiseClientHearSound(class UAkEvent* ASound, class AActor* SourceActor, const struct FVector& SourceLocation, bool bStopWhenOwnerDestroyed, bool bIsOccluded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.WwiseClientHearSound");

	struct
	{
		class UAkEvent*                ASound;
		class AActor*                  SourceActor;
		struct FVector                 SourceLocation;
		bool                           bStopWhenOwnerDestroyed;
		bool                           bIsOccluded;
	} params;
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.SourceLocation = SourceLocation;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.bIsOccluded = bIsOccluded;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientHearSound
// (FUNC_Defined, FUNC_Net, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// class USoundCue*               ASound                         (CPF_Parm)
// class AActor*                  SourceActor                    (CPF_Parm)
// struct FVector                 SourceLocation                 (CPF_Parm)
// bool                           bStopWhenOwnerDestroyed        (CPF_Parm)
// bool                           bIsOccluded                    (CPF_OptionalParm, CPF_Parm)

void APlayerController::ClientHearSound(class USoundCue* ASound, class AActor* SourceActor, const struct FVector& SourceLocation, bool bStopWhenOwnerDestroyed, bool bIsOccluded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientHearSound");

	struct
	{
		class USoundCue*               ASound;
		class AActor*                  SourceActor;
		struct FVector                 SourceLocation;
		bool                           bStopWhenOwnerDestroyed;
		bool                           bIsOccluded;
	} params;
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.SourceLocation = SourceLocation;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.bIsOccluded = bIsOccluded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetPooledAudioComponent
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class USoundCue*               ASound                         (CPF_Parm)
// class AActor*                  SourceActor                    (CPF_Parm)
// bool                           bStopWhenOwnerDestroyed        (CPF_Parm)
// bool                           bUseLocation                   (CPF_OptionalParm, CPF_Parm)
// struct FVector                 SourceLocation                 (CPF_OptionalParm, CPF_Parm)
// class UAudioComponent*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UAudioComponent* APlayerController::GetPooledAudioComponent(class USoundCue* ASound, class AActor* SourceActor, bool bStopWhenOwnerDestroyed, bool bUseLocation, const struct FVector& SourceLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPooledAudioComponent");

	struct
	{
		class USoundCue*               ASound;
		class AActor*                  SourceActor;
		bool                           bStopWhenOwnerDestroyed;
		bool                           bUseLocation;
		struct FVector                 SourceLocation;
		class UAudioComponent*         ReturnValue;
	} params;
	params.ASound = ASound;
	params.SourceActor = SourceActor;
	params.bStopWhenOwnerDestroyed = bStopWhenOwnerDestroyed;
	params.bUseLocation = bUseLocation;
	params.SourceLocation = SourceLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.HearSoundFinished
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class UAudioComponent*         AC                             (CPF_Parm, CPF_EditInline)

void APlayerController::HearSoundFinished(class UAudioComponent* AC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HearSoundFinished");

	struct
	{
		class UAudioComponent*         AC;
	} params;
	params.AC = AC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlaySound
// (FUNC_Defined, FUNC_Net, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_NetClient)
// Parameters:
// class USoundCue*               ASound                         (CPF_Parm)

void APlayerController::ClientPlaySound(class USoundCue* ASound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlaySound");

	struct
	{
		class USoundCue*               ASound;
	} params;
	params.ASound = ASound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReceiveLocalizedMessage
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// class UClass*                  Message                        (CPF_Parm)
// int                            Switch                         (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_OptionalParm, CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm, CPF_Parm)

void APlayerController::ReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceiveLocalizedMessage");

	struct
	{
		class UClass*                  Message;
		int                            Switch;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		class UObject*                 OptionalObject;
	} params;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.HandlePickup
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AInventory*              Inv                            (CPF_Parm)

void APlayerController::HandlePickup(class AInventory* Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HandlePickup");

	struct
	{
		class AInventory*              Inv;
	} params;
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetSecondaryHUD
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// class UClass*                  newHUDType                     (CPF_Parm)

void APlayerController::ClientSetSecondaryHUD(class UClass* newHUDType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetSecondaryHUD");

	struct
	{
		class UClass*                  newHUDType;
	} params;
	params.newHUDType = newHUDType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetHUD
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// class UClass*                  newHUDType                     (CPF_Parm)

void APlayerController::ClientSetHUD(class UClass* newHUDType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetHUD");

	struct
	{
		class UClass*                  newHUDType;
	} params;
	params.newHUDType = newHUDType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PawnDied
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void APlayerController::PawnDied(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PawnDied");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UnPossess
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APlayerController::UnPossess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UnPossess");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerAcknowledgePossession
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void APlayerController::ServerAcknowledgePossession(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerAcknowledgePossession");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AcknowledgePossession
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void APlayerController::AcknowledgePossession(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AcknowledgePossession");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Possess
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   aPawn                          (CPF_Parm)
// bool                           bVehicleTransition             (CPF_Parm)

void APlayerController::Possess(class APawn* aPawn, bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Possess");

	struct
	{
		class APawn*                   aPawn;
		bool                           bVehicleTransition;
	} params;
	params.aPawn = aPawn;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GivePawn
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// class APawn*                   NewPawn                        (CPF_Parm)

void APlayerController::GivePawn(class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GivePawn");

	struct
	{
		class APawn*                   NewPawn;
	} params;
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AskForPawn
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)

void APlayerController::AskForPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AskForPawn");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientGotoState
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FName                   NewState                       (CPF_Parm)
// struct FName                   NewLabel                       (CPF_OptionalParm, CPF_Parm)

void APlayerController::ClientGotoState(const struct FName& NewState, const struct FName& NewLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGotoState");

	struct
	{
		struct FName                   NewState;
		struct FName                   NewLabel;
	} params;
	params.NewState = NewState;
	params.NewLabel = NewLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetTiltActive
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// bool                           bActive                        (CPF_Parm)

void APlayerController::SetTiltActive(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetTiltActive");

	struct
	{
		bool                           bActive;
	} params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsMouseAvailable
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsMouseAvailable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsMouseAvailable");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsKeyboardAvailable
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsKeyboardAvailable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsKeyboardAvailable");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetUseTiltForwardAndBack
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bActive                        (CPF_Parm)

void APlayerController::SetUseTiltForwardAndBack(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetUseTiltForwardAndBack");

	struct
	{
		bool                           bActive;
	} params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetOnlyUseControllerTiltInput
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bActive                        (CPF_Parm)

void APlayerController::SetOnlyUseControllerTiltInput(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetOnlyUseControllerTiltInput");

	struct
	{
		bool                           bActive;
	} params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetControllerTiltActive
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bActive                        (CPF_Parm)

void APlayerController::SetControllerTiltActive(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetControllerTiltActive");

	struct
	{
		bool                           bActive;
	} params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsControllerTiltActive
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsControllerTiltActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsControllerTiltActive");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetRumbleScale
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// float                          ScaleBy                        (CPF_Parm)

void APlayerController::SetRumbleScale(float ScaleBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetRumbleScale");

	struct
	{
		float                          ScaleBy;
	} params;
	params.ScaleBy = ScaleBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReloadProfileSettings
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void APlayerController::ReloadProfileSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReloadProfileSettings");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UnregisterStandardPlayerDataStores
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void APlayerController::UnregisterStandardPlayerDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UnregisterStandardPlayerDataStores");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UnregisterPlayerDataStores
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void APlayerController::UnregisterPlayerDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UnregisterPlayerDataStores");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RegisterStandardPlayerDataStores
// (FUNC_Defined, FUNC_Simulated, FUNC_Protected)

void APlayerController::RegisterStandardPlayerDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RegisterStandardPlayerDataStores");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RegisterCustomPlayerDataStores
// (FUNC_Defined, FUNC_Simulated, FUNC_Protected)

void APlayerController::RegisterCustomPlayerDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RegisterCustomPlayerDataStores");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RegisterPlayerDataStores
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)

void APlayerController::RegisterPlayerDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RegisterPlayerDataStores");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientInitializeDataStores
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientInitializeDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientInitializeDataStores");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.InitInputSystem
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APlayerController::InitInputSystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InitInputSystem");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetOnlineSubsystem
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class UOnlineSubsystem*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UOnlineSubsystem* APlayerController::GetOnlineSubsystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetOnlineSubsystem");

	struct
	{
		class UOnlineSubsystem*        ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PostControllerIdChange
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)

void APlayerController::PostControllerIdChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PostControllerIdChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PreControllerIdChange
// (FUNC_Defined, FUNC_Public)

void APlayerController::PreControllerIdChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PreControllerIdChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CleanOutSavedMoves
// (FUNC_Defined, FUNC_Public)

void APlayerController::CleanOutSavedMoves()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CleanOutSavedMoves");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientReset
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)

void APlayerController::ClientReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Reset
// (FUNC_Defined, FUNC_Public)

void APlayerController::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SpawnDefaultHUD
// (FUNC_Defined, FUNC_Public)

void APlayerController::SpawnDefaultHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpawnDefaultHUD");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EnableCheats
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void APlayerController::EnableCheats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnableCheats");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AddCheats
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bForce                         (CPF_OptionalParm, CPF_Parm)

void APlayerController::AddCheats(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddCheats");

	struct
	{
		bool                           bForce;
	} params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.KickWarning
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APlayerController::KickWarning()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.KickWarning");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerGivePawn
// (FUNC_Defined, FUNC_Public)

void APlayerController::ServerGivePawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerGivePawn");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerShortTimeout
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)

void APlayerController::ServerShortTimeout()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerShortTimeout");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetTimeMargin
// (FUNC_Defined, FUNC_Public)

void APlayerController::ResetTimeMargin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetTimeMargin");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PreRender
// (FUNC_Event, FUNC_Public)
// Parameters:
// class UCanvas*                 Canvas                         (CPF_Parm)

void APlayerController::PreRender(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PreRender");

	struct
	{
		class UCanvas*                 Canvas;
	} params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnJoinMigratedGame
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void APlayerController::OnJoinMigratedGame(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnJoinMigratedGame");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PeerDesignatedAsClient
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)

void APlayerController::PeerDesignatedAsClient(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PeerDesignatedAsClient");

	struct
	{
		struct FName                   SessionName;
	} params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnUnregisterPlayerCompleteForJoinMigrate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void APlayerController::OnUnregisterPlayerCompleteForJoinMigrate(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnUnregisterPlayerCompleteForJoinMigrate");

	struct
	{
		struct FName                   SessionName;
		struct FUniqueNetId            PlayerID;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PeerReceivedMigratedSession
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FUniqueNetId            FromPeerNetId                  (CPF_Parm)
// struct FName                   SessionName                    (CPF_Parm)
// class UClass*                  SearchClass                    (CPF_Parm)
// unsigned char                  PlatformSpecificInfo           (CPF_Parm)

void APlayerController::PeerReceivedMigratedSession(const struct FUniqueNetId& FromPeerNetId, const struct FName& SessionName, class UClass* SearchClass, unsigned char PlatformSpecificInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PeerReceivedMigratedSession");

	struct
	{
		struct FUniqueNetId            FromPeerNetId;
		struct FName                   SessionName;
		class UClass*                  SearchClass;
		unsigned char                  PlatformSpecificInfo;
	} params;
	params.FromPeerNetId = FromPeerNetId;
	params.SessionName = SessionName;
	params.SearchClass = SearchClass;
	params.PlatformSpecificInfo = PlatformSpecificInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TellPeerToTravelToSession
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FUniqueNetId            ToPeerNetId                    (CPF_Parm)
// struct FName                   SessionName                    (CPF_Parm)
// class UClass*                  SearchClass                    (CPF_Parm)
// unsigned char                  PlatformSpecificInfo           (CPF_Parm)
// int                            PlatformSpecificInfoSize       (CPF_Parm)

void APlayerController::TellPeerToTravelToSession(const struct FUniqueNetId& ToPeerNetId, const struct FName& SessionName, class UClass* SearchClass, unsigned char PlatformSpecificInfo, int PlatformSpecificInfoSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TellPeerToTravelToSession");

	struct
	{
		struct FUniqueNetId            ToPeerNetId;
		struct FName                   SessionName;
		class UClass*                  SearchClass;
		unsigned char                  PlatformSpecificInfo;
		int                            PlatformSpecificInfoSize;
	} params;
	params.ToPeerNetId = ToPeerNetId;
	params.SessionName = SessionName;
	params.SearchClass = SearchClass;
	params.PlatformSpecificInfo = PlatformSpecificInfo;
	params.PlatformSpecificInfoSize = PlatformSpecificInfoSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TellPeerToTravel
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FUniqueNetId            ToPeerNetId                    (CPF_Parm)

void APlayerController::TellPeerToTravel(const struct FUniqueNetId& ToPeerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TellPeerToTravel");

	struct
	{
		struct FUniqueNetId            ToPeerNetId;
	} params;
	params.ToPeerNetId = ToPeerNetId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PeerTravelAsHost
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          TravelCountdownTimer           (CPF_Parm)
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)

void APlayerController::PeerTravelAsHost(float TravelCountdownTimer, const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PeerTravelAsHost");

	struct
	{
		float                          TravelCountdownTimer;
		struct FString                 URL;
	} params;
	params.TravelCountdownTimer = TravelCountdownTimer;
	params.URL = URL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetNewPeerHostURL
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString APlayerController::GetNewPeerHostURL()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetNewPeerHostURL");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PeerDesignatedAsHost
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)

void APlayerController::PeerDesignatedAsHost(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PeerDesignatedAsHost");

	struct
	{
		struct FName                   SessionName;
	} params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetCurrentSearchClass
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UClass*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UClass* APlayerController::GetCurrentSearchClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetCurrentSearchClass");

	struct
	{
		class UClass*                  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnHostMigratedOnlineGame
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void APlayerController::OnHostMigratedOnlineGame(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnHostMigratedOnlineGame");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OnUnregisterPlayerCompleteForHostMigrate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void APlayerController::OnUnregisterPlayerCompleteForHostMigrate(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnUnregisterPlayerCompleteForHostMigrate");

	struct
	{
		struct FName                   SessionName;
		struct FUniqueNetId            PlayerID;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RemoveMissingPeersFromSession
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// struct FScriptDelegate         UnregisterDelegate             (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::RemoveMissingPeersFromSession(const struct FName& SessionName, const struct FScriptDelegate& UnregisterDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoveMissingPeersFromSession");

	struct
	{
		struct FName                   SessionName;
		struct FScriptDelegate         UnregisterDelegate;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;
	params.UnregisterDelegate = UnregisterDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetPRIFromNetId
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// class APlayerReplicationInfo*  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APlayerReplicationInfo* APlayerController::GetPRIFromNetId(const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPRIFromNetId");

	struct
	{
		struct FUniqueNetId            PlayerID;
		class APlayerReplicationInfo*  ReturnValue;
	} params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnMissingPeersUnregistered
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void APlayerController::OnMissingPeersUnregistered(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnMissingPeersUnregistered");

	struct
	{
		struct FName                   SessionName;
		struct FUniqueNetId            PlayerID;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetRegisteredPlayersInSession
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// TArray<struct FUniqueNetId>    OutRegisteredPlayers           (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void APlayerController::GetRegisteredPlayersInSession(const struct FName& SessionName, TArray<struct FUniqueNetId>* OutRegisteredPlayers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetRegisteredPlayersInSession");

	struct
	{
		struct FName                   SessionName;
		TArray<struct FUniqueNetId>    OutRegisteredPlayers;
	} params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutRegisteredPlayers != nullptr)
		*OutRegisteredPlayers = params.OutRegisteredPlayers;
}


// Function Engine.PlayerController.NotifyHostMigrationStarted
// (FUNC_Simulated, FUNC_Public)

void APlayerController::NotifyHostMigrationStarted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyHostMigrationStarted");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.MigrateNewHost
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::MigrateNewHost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.MigrateNewHost");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsBestHostPeer
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PeerNetId                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::IsBestHostPeer(const struct FUniqueNetId& PeerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsBestHostPeer");

	struct
	{
		struct FUniqueNetId            PeerNetId;
		bool                           ReturnValue;
	} params;
	params.PeerNetId = PeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.NotifyPeerDisconnectHost
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PeerNetId                      (CPF_Parm)

void APlayerController::NotifyPeerDisconnectHost(const struct FUniqueNetId& PeerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyPeerDisconnectHost");

	struct
	{
		struct FUniqueNetId            PeerNetId;
	} params;
	params.PeerNetId = PeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientUpdateBestNextHosts
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FUniqueNetId            SortedNextHosts                (CPF_Parm)
// unsigned char                  NumEntries                     (CPF_Parm)

void APlayerController::ClientUpdateBestNextHosts(const struct FUniqueNetId& SortedNextHosts, unsigned char NumEntries)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdateBestNextHosts");

	struct
	{
		struct FUniqueNetId            SortedNextHosts;
		unsigned char                  NumEntries;
	} params;
	params.SortedNextHosts = SortedNextHosts;
	params.NumEntries = NumEntries;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RemovePeer
// (FUNC_Event, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PeerNetId                      (CPF_Parm)

void APlayerController::RemovePeer(const struct FUniqueNetId& PeerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemovePeer");

	struct
	{
		struct FUniqueNetId            PeerNetId;
	} params;
	params.PeerNetId = PeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AddPeer
// (FUNC_Event, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PeerNetId                      (CPF_Parm)
// TEnumAsByte<enum class ENATType> NatType                        (CPF_Parm)

void APlayerController::AddPeer(const struct FUniqueNetId& PeerNetId, TEnumAsByte<enum class ENATType> NatType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddPeer");

	struct
	{
		struct FUniqueNetId            PeerNetId;
		TEnumAsByte<enum class ENATType> NatType;
	} params;
	params.PeerNetId = PeerNetId;
	params.NatType = NatType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FindConnectedPeerIndex
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PeerNetId                      (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int APlayerController::FindConnectedPeerIndex(const struct FUniqueNetId& PeerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FindConnectedPeerIndex");

	struct
	{
		struct FUniqueNetId            PeerNetId;
		int                            ReturnValue;
	} params;
	params.PeerNetId = PeerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ReceivedPlayer
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void APlayerController::ReceivedPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceivedPlayer");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void APlayerController::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SpawnCoverReplicator
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class ACoverReplicator*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ACoverReplicator* APlayerController::SpawnCoverReplicator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpawnCoverReplicator");

	struct
	{
		class ACoverReplicator*        ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CanUnpauseControllerConnected
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::CanUnpauseControllerConnected()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanUnpauseControllerConnected");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnControllerChanged
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// bool                           bIsConnected                   (CPF_Parm)

void APlayerController::OnControllerChanged(int ControllerId, bool bIsConnected)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnControllerChanged");

	struct
	{
		int                            ControllerId;
		bool                           bIsConnected;
	} params;
	params.ControllerId = ControllerId;
	params.bIsConnected = bIsConnected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CanUnpauseExternalUI
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::CanUnpauseExternalUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanUnpauseExternalUI");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.OnExternalUIChanged
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bIsOpening                     (CPF_Parm)

void APlayerController::OnExternalUIChanged(bool bIsOpening)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OnExternalUIChanged");

	struct
	{
		bool                           bIsOpening;
	} params;
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ForceClearUnpauseDelegates
// (FUNC_Defined, FUNC_Public)

void APlayerController::ForceClearUnpauseDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ForceClearUnpauseDelegates");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DisableActorHeadTracking
// (FUNC_Net, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// class AActor*                  TargetActor                    (CPF_Parm)

void APlayerController::DisableActorHeadTracking(class AActor* TargetActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DisableActorHeadTracking");

	struct
	{
		class AActor*                  TargetActor;
	} params;
	params.TargetActor = TargetActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EnableActorHeadTracking
// (FUNC_Net, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// class AActor*                  TargetActor                    (CPF_Parm)
// struct FName                   TrackControllerName            (CPF_Parm)
// class UClass*                  ActorClassesToLookAt           (CPF_Parm)
// bool                           bLookAtPawns                   (CPF_Parm)
// float                          MinLookAtTime                  (CPF_Parm)
// float                          MaxLookAtTime                  (CPF_Parm)
// float                          MaxInterestTime                (CPF_Parm)
// float                          LookAtActorRadius              (CPF_Parm)
// struct FName                   TargetBoneNames                (CPF_Parm)

void APlayerController::EnableActorHeadTracking(class AActor* TargetActor, const struct FName& TrackControllerName, class UClass* ActorClassesToLookAt, bool bLookAtPawns, float MinLookAtTime, float MaxLookAtTime, float MaxInterestTime, float LookAtActorRadius, const struct FName& TargetBoneNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnableActorHeadTracking");

	struct
	{
		class AActor*                  TargetActor;
		struct FName                   TrackControllerName;
		class UClass*                  ActorClassesToLookAt;
		bool                           bLookAtPawns;
		float                          MinLookAtTime;
		float                          MaxLookAtTime;
		float                          MaxInterestTime;
		float                          LookAtActorRadius;
		struct FName                   TargetBoneNames;
	} params;
	params.TargetActor = TargetActor;
	params.TrackControllerName = TrackControllerName;
	params.ActorClassesToLookAt = ActorClassesToLookAt;
	params.bLookAtPawns = bLookAtPawns;
	params.MinLookAtTime = MinLookAtTime;
	params.MaxLookAtTime = MaxLookAtTime;
	params.MaxInterestTime = MaxInterestTime;
	params.LookAtActorRadius = LookAtActorRadius;
	params.TargetBoneNames = TargetBoneNames;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FellOutOfWorld
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UClass*                  dmgType                        (CPF_Parm)

void APlayerController::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FellOutOfWorld");

	struct
	{
		class UClass*                  dmgType;
	} params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CleanUpAudioComponents
// (FUNC_Native, FUNC_Public)

void APlayerController::CleanUpAudioComponents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CleanUpAudioComponents");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FindStairRotation
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int APlayerController::FindStairRotation(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FindStairRotation");

	struct
	{
		float                          DeltaTime;
		int                            ReturnValue;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CheckSpeedHack
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerController::CheckSpeedHack(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CheckSpeedHack");

	struct
	{
		float                          DeltaTime;
		bool                           ReturnValue;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerProcessConvolve
// (FUNC_Final, FUNC_Net, FUNC_NetReliable, FUNC_Native, FUNC_Event, FUNC_Private, FUNC_NetServer)
// Parameters:
// struct FString                 C                              (CPF_Parm, CPF_NeedCtorLink)
// int                            H                              (CPF_Parm)

void APlayerController::ServerProcessConvolve(const struct FString& C, int H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerProcessConvolve");

	struct
	{
		struct FString                 C;
		int                            H;
	} params;
	params.C = C;
	params.H = H;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientConvolve
// (FUNC_Final, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_Private, FUNC_NetClient)
// Parameters:
// struct FString                 C                              (CPF_Parm, CPF_NeedCtorLink)
// int                            H                              (CPF_Parm)

void APlayerController::ClientConvolve(const struct FString& C, int H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientConvolve");

	struct
	{
		struct FString                 C;
		int                            H;
	} params;
	params.C = C;
	params.H = H;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetAudioGroupVolume
// (FUNC_Exec, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   GroupName                      (CPF_Parm)
// float                          Volume                         (CPF_Parm)

void APlayerController::SetAudioGroupVolume(const struct FName& GroupName, float Volume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAudioGroupVolume");

	struct
	{
		struct FName                   GroupName;
		float                          Volume;
	} params;
	params.GroupName = GroupName;
	params.Volume = Volume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetAllowMatureLanguage
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bAllowMatureLanguge            (CPF_Parm)

void APlayerController::SetAllowMatureLanguage(bool bAllowMatureLanguge)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAllowMatureLanguage");

	struct
	{
		bool                           bAllowMatureLanguge;
	} params;
	params.bAllowMatureLanguge = bAllowMatureLanguge;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PasteFromClipboard
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString APlayerController::PasteFromClipboard()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PasteFromClipboard");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CopyToClipboard
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 Text                           (CPF_Parm, CPF_NeedCtorLink)

void APlayerController::CopyToClipboard(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CopyToClipboard");

	struct
	{
		struct FString                 Text;
	} params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UpdateURL
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 NewOption                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 NewValue                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           bSave1Default                  (CPF_Parm)

void APlayerController::UpdateURL(const struct FString& NewOption, const struct FString& NewValue, bool bSave1Default)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateURL");

	struct
	{
		struct FString                 NewOption;
		struct FString                 NewValue;
		bool                           bSave1Default;
	} params;
	params.NewOption = NewOption;
	params.NewValue = NewValue;
	params.bSave1Default = bSave1Default;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientTravel
// (FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_NetClient)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class ETravelType> TravelType                     (CPF_Parm)
// bool                           bSeamless                      (CPF_OptionalParm, CPF_Parm)
// struct FGuid                   MapPackageGuid                 (CPF_OptionalParm, CPF_Parm, CPF_AlwaysInit)

void APlayerController::ClientTravel(const struct FString& URL, TEnumAsByte<enum class ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravel");

	struct
	{
		struct FString                 URL;
		TEnumAsByte<enum class ETravelType> TravelType;
		bool                           bSeamless;
		struct FGuid                   MapPackageGuid;
	} params;
	params.URL = URL;
	params.TravelType = TravelType;
	params.bSeamless = bSeamless;
	params.MapPackageGuid = MapPackageGuid;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ConsoleCommand
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 Command                        (CPF_Parm, CPF_NeedCtorLink)
// bool                           bWriteToLog                    (CPF_OptionalParm, CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString APlayerController::ConsoleCommand(const struct FString& Command, bool bWriteToLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ConsoleCommand");

	struct
	{
		struct FString                 Command;
		bool                           bWriteToLog;
		struct FString                 ReturnValue;
	} params;
	params.Command = Command;
	params.bWriteToLog = bWriteToLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetServerNetworkAddress
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString APlayerController::GetServerNetworkAddress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetServerNetworkAddress");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetPlayerNetworkAddress
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString APlayerController::GetPlayerNetworkAddress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPlayerNetworkAddress");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetNetSpeed
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            NewSpeed                       (CPF_Parm)

void APlayerController::SetNetSpeed(int NewSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetNetSpeed");

	struct
	{
		int                            NewSpeed;
	} params;
	params.NewSpeed = NewSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.AnalyticsEndSession
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::AnalyticsEndSession()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.AnalyticsEndSession");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.AnalyticsStartSession
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::AnalyticsStartSession()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.AnalyticsStartSession");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.GetAnalyticsUserId
// (FUNC_Exec, FUNC_Native, FUNC_Public)

void UCheatManager::GetAnalyticsUserId()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.GetAnalyticsUserId");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetAnalyticsUserId
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::SetAnalyticsUserId(const struct FString& UserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetAnalyticsUserId");

	struct
	{
		struct FString                 UserId;
	} params;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SendAnalyticsCachedEvents
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::SendAnalyticsCachedEvents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SendAnalyticsCachedEvents");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SendAnalyticsCurrencyGivenEvent
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 GameCurrencyType               (CPF_Parm, CPF_NeedCtorLink)
// int                            GameCurrencyAmount             (CPF_Parm)

void UCheatManager::SendAnalyticsCurrencyGivenEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SendAnalyticsCurrencyGivenEvent");

	struct
	{
		struct FString                 GameCurrencyType;
		int                            GameCurrencyAmount;
	} params;
	params.GameCurrencyType = GameCurrencyType;
	params.GameCurrencyAmount = GameCurrencyAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SendAnalyticsCurrencyPurchaseEvent
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 GameCurrencyType               (CPF_Parm, CPF_NeedCtorLink)
// int                            GameCurrencyAmount             (CPF_Parm)
// struct FString                 RealCurrencyType               (CPF_Parm, CPF_NeedCtorLink)
// float                          RealMoneyCost                  (CPF_Parm)
// struct FString                 PaymentProvider                (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::SendAnalyticsCurrencyPurchaseEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount, const struct FString& RealCurrencyType, float RealMoneyCost, const struct FString& PaymentProvider)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SendAnalyticsCurrencyPurchaseEvent");

	struct
	{
		struct FString                 GameCurrencyType;
		int                            GameCurrencyAmount;
		struct FString                 RealCurrencyType;
		float                          RealMoneyCost;
		struct FString                 PaymentProvider;
	} params;
	params.GameCurrencyType = GameCurrencyType;
	params.GameCurrencyAmount = GameCurrencyAmount;
	params.RealCurrencyType = RealCurrencyType;
	params.RealMoneyCost = RealMoneyCost;
	params.PaymentProvider = PaymentProvider;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SendAnalyticsItemPurchaseEvent
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 ItemID                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Currency                       (CPF_Parm, CPF_NeedCtorLink)
// int                            PerItemCost                    (CPF_Parm)
// int                            ItemQuantity                   (CPF_Parm)

void UCheatManager::SendAnalyticsItemPurchaseEvent(const struct FString& ItemID, const struct FString& Currency, int PerItemCost, int ItemQuantity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SendAnalyticsItemPurchaseEvent");

	struct
	{
		struct FString                 ItemID;
		struct FString                 Currency;
		int                            PerItemCost;
		int                            ItemQuantity;
	} params;
	params.ItemID = ItemID;
	params.Currency = Currency;
	params.PerItemCost = PerItemCost;
	params.ItemQuantity = ItemQuantity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SendAnalyticsUserAttributeEvent
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 AttributeName                  (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 AttributeValue                 (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::SendAnalyticsUserAttributeEvent(const struct FString& AttributeName, const struct FString& AttributeValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SendAnalyticsUserAttributeEvent");

	struct
	{
		struct FString                 AttributeName;
		struct FString                 AttributeValue;
	} params;
	params.AttributeName = AttributeName;
	params.AttributeValue = AttributeValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SendAnalyticsEvent
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 AttributeName                  (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// struct FString                 AttributeValue                 (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::SendAnalyticsEvent(const struct FString& EventName, const struct FString& AttributeName, const struct FString& AttributeValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SendAnalyticsEvent");

	struct
	{
		struct FString                 EventName;
		struct FString                 AttributeName;
		struct FString                 AttributeValue;
	} params;
	params.EventName = EventName;
	params.AttributeName = AttributeName;
	params.AttributeValue = AttributeValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.OnRequestComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UHttpRequestInterface*   OriginalRequest                (CPF_Parm)
// class UHttpResponseInterface*  Response                       (CPF_Parm)
// bool                           bDidSucceed                    (CPF_Parm)

void UCheatManager::OnRequestComplete(class UHttpRequestInterface* OriginalRequest, class UHttpResponseInterface* Response, bool bDidSucceed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnRequestComplete");

	struct
	{
		class UHttpRequestInterface*   OriginalRequest;
		class UHttpResponseInterface*  Response;
		bool                           bDidSucceed;
	} params;
	params.OriginalRequest = OriginalRequest;
	params.Response = Response;
	params.bDidSucceed = bDidSucceed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.TestHttp
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 Verb                           (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Payload                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)
// bool                           bSendParallelRequest           (CPF_OptionalParm, CPF_Parm)

void UCheatManager::TestHttp(const struct FString& Verb, const struct FString& Payload, const struct FString& URL, bool bSendParallelRequest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.TestHttp");

	struct
	{
		struct FString                 Verb;
		struct FString                 Payload;
		struct FString                 URL;
		bool                           bSendParallelRequest;
	} params;
	params.Verb = Verb;
	params.Payload = Payload;
	params.URL = URL;
	params.bSendParallelRequest = bSendParallelRequest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.OnDeleteUserFileComplete
// (FUNC_Final, FUNC_Defined, FUNC_Private)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::OnDeleteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnDeleteUserFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 UserId;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugDeleteUserFile
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::DebugDeleteUserFile(const struct FString& UserId, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugDeleteUserFile");

	struct
	{
		struct FString                 UserId;
		struct FString                 Filename;
	} params;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.OnReadUserFileComplete
// (FUNC_Final, FUNC_Defined, FUNC_Private)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::OnReadUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnReadUserFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 UserId;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugReadUserFile
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::DebugReadUserFile(const struct FString& UserId, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugReadUserFile");

	struct
	{
		struct FString                 UserId;
		struct FString                 Filename;
	} params;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.OnWriteUserFileComplete
// (FUNC_Final, FUNC_Defined, FUNC_Private)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::OnWriteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnWriteUserFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 UserId;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugWriteUserFile
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::DebugWriteUserFile(const struct FString& UserId, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugWriteUserFile");

	struct
	{
		struct FString                 UserId;
		struct FString                 Filename;
	} params;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.OnEnumerateUserFilesComplete
// (FUNC_Final, FUNC_Defined, FUNC_Private)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::OnEnumerateUserFilesComplete(bool bWasSuccessful, const struct FString& UserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnEnumerateUserFilesComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 UserId;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugQueryUserFiles
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::DebugQueryUserFiles(const struct FString& UserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugQueryUserFiles");

	struct
	{
		struct FString                 UserId;
	} params;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.OnReceivedLocalNotificationDebug
// (FUNC_Final, FUNC_Defined, FUNC_Private, FUNC_HasOutParms)
// Parameters:
// struct FNotificationInfo       Notification                   (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           bWasAppActive                  (CPF_Parm)

void UCheatManager::OnReceivedLocalNotificationDebug(bool bWasAppActive, struct FNotificationInfo* Notification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnReceivedLocalNotificationDebug");

	struct
	{
		struct FNotificationInfo       Notification;
		bool                           bWasAppActive;
	} params;
	params.bWasAppActive = bWasAppActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Notification != nullptr)
		*Notification = params.Notification;
}


// Function Engine.CheatManager.DebugNotification
// (FUNC_Defined, FUNC_Exec, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FString                 MessageBody                    (CPF_Parm, CPF_NeedCtorLink)
// int                            SecondsFromNow                 (CPF_Parm)

void UCheatManager::DebugNotification(const struct FString& MessageBody, int SecondsFromNow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugNotification");

	struct
	{
		struct FString                 MessageBody;
		int                            SecondsFromNow;
	} params;
	params.MessageBody = MessageBody;
	params.SecondsFromNow = SecondsFromNow;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DrawLocationXYZ
// (FUNC_Defined, FUNC_Exec, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// float                          X                              (CPF_Parm)
// float                          Y                              (CPF_Parm)
// float                          Z                              (CPF_Parm)

void UCheatManager::DrawLocationXYZ(float X, float Y, float Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DrawLocationXYZ");

	struct
	{
		float                          X;
		float                          Y;
		float                          Z;
	} params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DrawLocation
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FVector                 Loc                            (CPF_Parm)

void UCheatManager::DrawLocation(const struct FVector& Loc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DrawLocation");

	struct
	{
		struct FVector                 Loc;
	} params;
	params.Loc = Loc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DumpCoverStats
// (FUNC_Exec, FUNC_Native, FUNC_Public)

void UCheatManager::DumpCoverStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DumpCoverStats");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugEmsDownload
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::DebugEmsDownload()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugEmsDownload");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugDeleteTitleFiles
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::DebugDeleteTitleFiles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugDeleteTitleFiles");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.OnSaveComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::OnSaveComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnSaveComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugSaveTitleFile
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::DebugSaveTitleFile(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugSaveTitleFile");

	struct
	{
		struct FString                 Filename;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.OnLoadComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::OnLoadComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnLoadComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.OnDownloadComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::OnDownloadComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnDownloadComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugDownloadTitleFile
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           bFromCache                     (CPF_OptionalParm, CPF_Parm)

void UCheatManager::DebugDownloadTitleFile(const struct FString& Filename, bool bFromCache)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugDownloadTitleFile");

	struct
	{
		struct FString                 Filename;
		bool                           bFromCache;
	} params;
	params.Filename = Filename;
	params.bFromCache = bFromCache;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugIniLocPatcher
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::DebugIniLocPatcher()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugIniLocPatcher");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ToggleAILogging
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::ToggleAILogging()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ToggleAILogging");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.VerifyNavMeshCoverRefs
// (FUNC_Exec, FUNC_Native, FUNC_Public)

void UCheatManager::VerifyNavMeshCoverRefs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.VerifyNavMeshCoverRefs");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.PrintNavMeshObstacles
// (FUNC_Exec, FUNC_Native, FUNC_Public)

void UCheatManager::PrintNavMeshObstacles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.PrintNavMeshObstacles");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.PrintAllPathObjectEdges
// (FUNC_Exec, FUNC_Native, FUNC_Public)

void UCheatManager::PrintAllPathObjectEdges()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.PrintAllPathObjectEdges");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.NavMeshVerification
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          interval                       (CPF_OptionalParm, CPF_Parm)

void UCheatManager::NavMeshVerification(float interval)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.NavMeshVerification");

	struct
	{
		float                          interval;
	} params;
	params.interval = interval;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DrawUnsupportingEdges
// (FUNC_Exec, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 PawnClassName                  (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)

void UCheatManager::DrawUnsupportingEdges(const struct FString& PawnClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DrawUnsupportingEdges");

	struct
	{
		struct FString                 PawnClassName;
	} params;
	params.PawnClassName = PawnClassName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.VerifyNavMeshObjects
// (FUNC_Exec, FUNC_Native, FUNC_Public)

void UCheatManager::VerifyNavMeshObjects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.VerifyNavMeshObjects");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.LogParticleActivateSystemCalls
// (FUNC_Exec, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bShouldLog                     (CPF_Parm)

void UCheatManager::LogParticleActivateSystemCalls(bool bShouldLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.LogParticleActivateSystemCalls");

	struct
	{
		bool                           bShouldLog;
	} params;
	params.bShouldLog = bShouldLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.LogPlaySoundCalls
// (FUNC_Exec, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bShouldLog                     (CPF_Parm)

void UCheatManager::LogPlaySoundCalls(bool bShouldLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.LogPlaySoundCalls");

	struct
	{
		bool                           bShouldLog;
	} params;
	params.bShouldLog = bShouldLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.InitCheatManager
// (FUNC_Public)

void UCheatManager::InitCheatManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.InitCheatManager");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.VerbosePathDebug
// (FUNC_Defined, FUNC_Exec, FUNC_Public, FUNC_HasDefaults)

void UCheatManager::VerbosePathDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.VerbosePathDebug");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.TestPylonConnectivity
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::TestPylonConnectivity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.TestPylonConnectivity");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.TestNavMeshPath
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// bool                           bDrawPath                      (CPF_OptionalParm, CPF_Parm)

void UCheatManager::TestNavMeshPath(bool bDrawPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.TestNavMeshPath");

	struct
	{
		bool                           bDrawPath;
	} params;
	params.bDrawPath = bDrawPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetOnlineDebugLevel
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// int                            DebugLevel                     (CPF_Parm)

void UCheatManager::SetOnlineDebugLevel(int DebugLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetOnlineDebugLevel");

	struct
	{
		int                            DebugLevel;
	} params;
	params.DebugLevel = DebugLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.TestLevel
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::TestLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.TestLevel");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.StreamLevelOut
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FName                   PackageName                    (CPF_Parm)

void UCheatManager::StreamLevelOut(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelOut");

	struct
	{
		struct FName                   PackageName;
	} params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.OnlyLoadLevel
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FName                   PackageName                    (CPF_Parm)

void UCheatManager::OnlyLoadLevel(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.OnlyLoadLevel");

	struct
	{
		struct FName                   PackageName;
	} params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.StreamLevelIn
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FName                   PackageName                    (CPF_Parm)

void UCheatManager::StreamLevelIn(const struct FName& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.StreamLevelIn");

	struct
	{
		struct FName                   PackageName;
	} params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetLevelStreamingStatus
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   PackageName                    (CPF_Parm)
// bool                           bShouldBeLoaded                (CPF_Parm)
// bool                           bShouldBeVisible               (CPF_Parm)

void UCheatManager::SetLevelStreamingStatus(const struct FName& PackageName, bool bShouldBeLoaded, bool bShouldBeVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetLevelStreamingStatus");

	struct
	{
		struct FName                   PackageName;
		bool                           bShouldBeLoaded;
		bool                           bShouldBeVisible;
	} params;
	params.PackageName = PackageName;
	params.bShouldBeLoaded = bShouldBeLoaded;
	params.bShouldBeVisible = bShouldBeVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.AllWeapons
// (FUNC_Exec, FUNC_Public)

void UCheatManager::AllWeapons()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.AllWeapons");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Loaded
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::Loaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Loaded");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewClass
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// class UClass*                  aClass                         (CPF_Parm)

void UCheatManager::ViewClass(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewClass");

	struct
	{
		class UClass*                  aClass;
	} params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewBot
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::ViewBot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewBot");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewActor
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FName                   actorName                      (CPF_Parm)

void UCheatManager::ViewActor(const struct FName& actorName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewActor");

	struct
	{
		struct FName                   actorName;
	} params;
	params.actorName = actorName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewPlayer
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 S                              (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::ViewPlayer(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewPlayer");

	struct
	{
		struct FString                 S;
	} params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewSelf
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bQuiet                         (CPF_OptionalParm, CPF_Parm)

void UCheatManager::ViewSelf(bool bQuiet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewSelf");

	struct
	{
		bool                           bQuiet;
	} params;
	params.bQuiet = bQuiet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.RememberSpot
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::RememberSpot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.RememberSpot");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FractureAllMeshesToMaximizeMemoryUsage
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::FractureAllMeshesToMaximizeMemoryUsage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FractureAllMeshesToMaximizeMemoryUsage");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FractureAllMeshes
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::FractureAllMeshes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FractureAllMeshes");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DestroyFractures
// (FUNC_Defined, FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          Radius                         (CPF_OptionalParm, CPF_Parm)

void UCheatManager::DestroyFractures(float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DestroyFractures");

	struct
	{
		float                          Radius;
	} params;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SuspendAI
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::SuspendAI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SuspendAI");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.PlayersOnly
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::PlayersOnly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.PlayersOnly");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.GiveWeapon
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 WeaponClassStr                 (CPF_Parm, CPF_NeedCtorLink)
// class AWeapon*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AWeapon* UCheatManager::GiveWeapon(const struct FString& WeaponClassStr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.GiveWeapon");

	struct
	{
		struct FString                 WeaponClassStr;
		class AWeapon*                 ReturnValue;
	} params;
	params.WeaponClassStr = WeaponClassStr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CheatManager.Summon
// (FUNC_Defined, FUNC_Exec, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FString                 ClassName                      (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::Summon(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Summon");

	struct
	{
		struct FString                 ClassName;
	} params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Avatar
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FName                   ClassName                      (CPF_Parm)

void UCheatManager::Avatar(const struct FName& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Avatar");

	struct
	{
		struct FName                   ClassName;
	} params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.KillPawns
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::KillPawns()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillPawns");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.KillAllPawns
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UClass*                  aClass                         (CPF_Parm)

void UCheatManager::KillAllPawns(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillAllPawns");

	struct
	{
		class UClass*                  aClass;
	} params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.KillAll
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// class UClass*                  aClass                         (CPF_Parm)

void UCheatManager::KillAll(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillAll");

	struct
	{
		class UClass*                  aClass;
	} params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetSpeed
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// float                          F                              (CPF_Parm)

void UCheatManager::SetSpeed(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetSpeed");

	struct
	{
		float                          F;
	} params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetGravity
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// float                          F                              (CPF_Parm)

void UCheatManager::SetGravity(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetGravity");

	struct
	{
		float                          F;
	} params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetJumpZ
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// float                          F                              (CPF_Parm)

void UCheatManager::SetJumpZ(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetJumpZ");

	struct
	{
		float                          F;
	} params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Slomo
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// float                          T                              (CPF_Parm)

void UCheatManager::Slomo(float T)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Slomo");

	struct
	{
		float                          T;
	} params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.God
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::God()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.God");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.AllAmmo
// (FUNC_Exec, FUNC_Public)

void UCheatManager::AllAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.AllAmmo");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Ghost
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::Ghost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Ghost");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Walk
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::Walk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Walk");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Fly
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::Fly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Fly");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Amphibious
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::Amphibious()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Amphibious");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.EndPath
// (FUNC_Exec, FUNC_Public)

void UCheatManager::EndPath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.EndPath");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ChangeSize
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// float                          F                              (CPF_Parm)

void UCheatManager::ChangeSize(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ChangeSize");

	struct
	{
		float                          F;
	} params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Teleport
// (FUNC_Defined, FUNC_Exec, FUNC_Public, FUNC_HasDefaults)

void UCheatManager::Teleport()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Teleport");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.KillViewedActor
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::KillViewedActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillViewedActor");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.WriteToLog
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 Param                          (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::WriteToLog(const struct FString& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.WriteToLog");

	struct
	{
		struct FString                 Param;
	} params;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FreezeFrame
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// float                          Delay                          (CPF_Parm)

void UCheatManager::FreezeFrame(float Delay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FreezeFrame");

	struct
	{
		float                          Delay;
	} params;
	params.Delay = Delay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ListDynamicActors
// (FUNC_Exec, FUNC_Public)

void UCheatManager::ListDynamicActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ListDynamicActors");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugPause
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UCheatManager::DebugPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugPause");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.EditAIByTrace
// (FUNC_Defined, FUNC_Exec, FUNC_Public, FUNC_HasDefaults)

void UCheatManager::EditAIByTrace()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.EditAIByTrace");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DebugAI
// (FUNC_Exec, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   Category                       (CPF_OptionalParm, CPF_Parm, CPF_CoerceParm)

void UCheatManager::DebugAI(const struct FName& Category)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DebugAI");

	struct
	{
		struct FName                   Category;
	} params;
	params.Category = Category;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FXStop
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// class UClass*                  aClass                         (CPF_Parm)

void UCheatManager::FXStop(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FXStop");

	struct
	{
		class UClass*                  aClass;
	} params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FXPlay
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// class UClass*                  aClass                         (CPF_Parm)
// struct FString                 FXAnimPath                     (CPF_Parm, CPF_NeedCtorLink)

void UCheatManager::FXPlay(class UClass* aClass, const struct FString& FXAnimPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FXPlay");

	struct
	{
		class UClass*                  aClass;
		struct FString                 FXAnimPath;
	} params;
	params.aClass = aClass;
	params.FXAnimPath = FXAnimPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CloudSaveSystem.GetKeyValue
// (FUNC_Final, FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            SaveSlot                       (CPF_Parm)
// struct FString                 KeyName                        (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class EPlatformInterfaceDataType> Type                           (CPF_Parm)
// struct FPlatformInterfaceDelegateResult Value                          (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudSaveSystem::GetKeyValue(int SaveSlot, const struct FString& KeyName, TEnumAsByte<enum class EPlatformInterfaceDataType> Type, struct FPlatformInterfaceDelegateResult* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.GetKeyValue");

	struct
	{
		int                            SaveSlot;
		struct FString                 KeyName;
		TEnumAsByte<enum class EPlatformInterfaceDataType> Type;
		struct FPlatformInterfaceDelegateResult Value;
		bool                           ReturnValue;
	} params;
	params.SaveSlot = SaveSlot;
	params.KeyName = KeyName;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystem.GetDataStoreIDAndBlobNameForSaveSlot
// (FUNC_Final, FUNC_Defined, FUNC_Private, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// int                            SaveSlot                       (CPF_Parm)
// struct FString                 DataStoreID                    (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 DataBlobName                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudSaveSystem::GetDataStoreIDAndBlobNameForSaveSlot(int SaveSlot, struct FString* DataStoreID, struct FString* DataBlobName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.GetDataStoreIDAndBlobNameForSaveSlot");

	struct
	{
		int                            SaveSlot;
		struct FString                 DataStoreID;
		struct FString                 DataBlobName;
		bool                           ReturnValue;
	} params;
	params.SaveSlot = SaveSlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DataStoreID != nullptr)
		*DataStoreID = params.DataStoreID;
	if (DataBlobName != nullptr)
		*DataBlobName = params.DataBlobName;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystem.SetKeyValue
// (FUNC_Final, FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            SaveSlot                       (CPF_Parm)
// struct FString                 KeyName                        (CPF_Parm, CPF_NeedCtorLink)
// struct FPlatformInterfaceData  Value                          (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudSaveSystem::SetKeyValue(int SaveSlot, const struct FString& KeyName, struct FPlatformInterfaceData* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.SetKeyValue");

	struct
	{
		int                            SaveSlot;
		struct FString                 KeyName;
		struct FPlatformInterfaceData  Value;
		bool                           ReturnValue;
	} params;
	params.SaveSlot = SaveSlot;
	params.KeyName = KeyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystem.InternalSetSaveSlotKeyValues
// (FUNC_Final, FUNC_Defined, FUNC_Private, FUNC_HasDefaults)
// Parameters:
// int                            SaveSlot                       (CPF_Parm)
// struct FString                 DataStoreID                    (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SaveDataBlobName               (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudSaveSystem::InternalSetSaveSlotKeyValues(int SaveSlot, const struct FString& DataStoreID, const struct FString& SaveDataBlobName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.InternalSetSaveSlotKeyValues");

	struct
	{
		int                            SaveSlot;
		struct FString                 DataStoreID;
		struct FString                 SaveDataBlobName;
		bool                           ReturnValue;
	} params;
	params.SaveSlot = SaveSlot;
	params.DataStoreID = DataStoreID;
	params.SaveDataBlobName = SaveDataBlobName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystem.SetSaveSlotKeyValues
// (FUNC_Final, FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 DataStoreID                    (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SaveDataBlobName               (CPF_Parm, CPF_NeedCtorLink)
// int                            SaveSlot                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudSaveSystem::SetSaveSlotKeyValues(const struct FString& DataStoreID, const struct FString& SaveDataBlobName, int* SaveSlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.SetSaveSlotKeyValues");

	struct
	{
		struct FString                 DataStoreID;
		struct FString                 SaveDataBlobName;
		int                            SaveSlot;
		bool                           ReturnValue;
	} params;
	params.DataStoreID = DataStoreID;
	params.SaveDataBlobName = SaveDataBlobName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SaveSlot != nullptr)
		*SaveSlot = params.SaveSlot;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystem.OnDeleteSaveDataComplete
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bWasSucessfull                 (CPF_Parm)
// struct FString                 StorageID                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BlobName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void UCloudSaveSystem::OnDeleteSaveDataComplete(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.OnDeleteSaveDataComplete");

	struct
	{
		bool                           bWasSucessfull;
		struct FString                 StorageID;
		struct FString                 BlobName;
		struct FString                 Error;
	} params;
	params.bWasSucessfull = bWasSucessfull;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CloudSaveSystem.DeleteSaveData
// (FUNC_Final, FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// int                            SaveSlot                       (CPF_Parm)
// struct FScriptDelegate         InDeleteSaveDataCallback       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudSaveSystem::DeleteSaveData(int SaveSlot, const struct FScriptDelegate& InDeleteSaveDataCallback)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.DeleteSaveData");

	struct
	{
		int                            SaveSlot;
		struct FScriptDelegate         InDeleteSaveDataCallback;
		bool                           ReturnValue;
	} params;
	params.SaveSlot = SaveSlot;
	params.InDeleteSaveDataCallback = InDeleteSaveDataCallback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystem.OnSetSaveDataComplete
// (FUNC_Final, FUNC_Defined, FUNC_Private)
// Parameters:
// bool                           bWasSucessfull                 (CPF_Parm)
// struct FString                 StorageID                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BlobName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void UCloudSaveSystem::OnSetSaveDataComplete(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.OnSetSaveDataComplete");

	struct
	{
		bool                           bWasSucessfull;
		struct FString                 StorageID;
		struct FString                 BlobName;
		struct FString                 Error;
	} params;
	params.bWasSucessfull = bWasSucessfull;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CloudSaveSystem.SetSaveData
// (FUNC_Final, FUNC_Defined, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// int                            SaveSlot                       (CPF_Parm)
// struct FScriptDelegate         InSetSaveDataCallback          (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          SaveDataBlob                   (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UCloudSaveSystem::SetSaveData(int SaveSlot, const struct FScriptDelegate& InSetSaveDataCallback, TArray<unsigned char>* SaveDataBlob)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.SetSaveData");

	struct
	{
		int                            SaveSlot;
		struct FScriptDelegate         InSetSaveDataCallback;
		TArray<unsigned char>          SaveDataBlob;
	} params;
	params.SaveSlot = SaveSlot;
	params.InSetSaveDataCallback = InSetSaveDataCallback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SaveDataBlob != nullptr)
		*SaveDataBlob = params.SaveDataBlob;
}


// Function Engine.CloudSaveSystem.OnGetSaveDataComplete
// (FUNC_Final, FUNC_Defined, FUNC_Private, FUNC_HasOutParms)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 StorageID                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BlobName                       (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          DataBlob                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void UCloudSaveSystem::OnGetSaveDataComplete(bool bWasSuccessful, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error, TArray<unsigned char>* DataBlob)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.OnGetSaveDataComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 StorageID;
		struct FString                 BlobName;
		TArray<unsigned char>          DataBlob;
		struct FString                 Error;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DataBlob != nullptr)
		*DataBlob = params.DataBlob;
}


// Function Engine.CloudSaveSystem.GetSaveData
// (FUNC_Final, FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// int                            SaveSlot                       (CPF_Parm)
// struct FScriptDelegate         OnGetSaveDataCallback          (CPF_Parm, CPF_NeedCtorLink)

void UCloudSaveSystem::GetSaveData(int SaveSlot, const struct FScriptDelegate& OnGetSaveDataCallback)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.GetSaveData");

	struct
	{
		int                            SaveSlot;
		struct FScriptDelegate         OnGetSaveDataCallback;
	} params;
	params.SaveSlot = SaveSlot;
	params.OnGetSaveDataCallback = OnGetSaveDataCallback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CloudSaveSystem.Init
// (FUNC_Final, FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// TScriptInterface<class UCloudSaveSystemKVSInterface> InKeyValueStore                (CPF_Parm)
// TScriptInterface<class UCloudSaveSystemDataBlobStoreInterface> InDataBlobStore                (CPF_Parm)
// int                            VersionNumber                  (CPF_Parm)

void UCloudSaveSystem::Init(const TScriptInterface<class UCloudSaveSystemKVSInterface>& InKeyValueStore, const TScriptInterface<class UCloudSaveSystemDataBlobStoreInterface>& InDataBlobStore, int VersionNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.Init");

	struct
	{
		TScriptInterface<class UCloudSaveSystemKVSInterface> InKeyValueStore;
		TScriptInterface<class UCloudSaveSystemDataBlobStoreInterface> InDataBlobStore;
		int                            VersionNumber;
	} params;
	params.InKeyValueStore = InKeyValueStore;
	params.InDataBlobStore = InDataBlobStore;
	params.VersionNumber = VersionNumber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CloudSaveSystem.DeserializeObject
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  ObjectClass                    (CPF_Parm)
// TArray<unsigned char>          Data                           (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// TEnumAsByte<enum class SaveDataVersionSupport> VersionSupport                 (CPF_Parm)
// int                            DataVersion                    (CPF_Parm)
// class UObject*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UObject* UCloudSaveSystem::DeserializeObject(class UClass* ObjectClass, TEnumAsByte<enum class SaveDataVersionSupport> VersionSupport, int DataVersion, TArray<unsigned char>* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.DeserializeObject");

	struct
	{
		class UClass*                  ObjectClass;
		TArray<unsigned char>          Data;
		TEnumAsByte<enum class SaveDataVersionSupport> VersionSupport;
		int                            DataVersion;
		class UObject*                 ReturnValue;
	} params;
	params.ObjectClass = ObjectClass;
	params.VersionSupport = VersionSupport;
	params.DataVersion = DataVersion;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystem.SerializeObject
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UObject*                 ObjectToSerialize              (CPF_Parm)
// TArray<unsigned char>          Data                           (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            DataVersion                    (CPF_Parm)

void UCloudSaveSystem::SerializeObject(class UObject* ObjectToSerialize, int DataVersion, TArray<unsigned char>* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.SerializeObject");

	struct
	{
		class UObject*                 ObjectToSerialize;
		TArray<unsigned char>          Data;
		int                            DataVersion;
	} params;
	params.ObjectToSerialize = ObjectToSerialize;
	params.DataVersion = DataVersion;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.CloudSaveSystem.AreAnySlotOperationsActive
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudSaveSystem::AreAnySlotOperationsActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.AreAnySlotOperationsActive");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystem.IsDeleteOperationActive
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudSaveSystem::IsDeleteOperationActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.IsDeleteOperationActive");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystem.IsOperationActiveForSlot
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// int                            SlotIndex                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudSaveSystem::IsOperationActiveForSlot(int SlotIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.IsOperationActiveForSlot");

	struct
	{
		int                            SlotIndex;
		bool                           ReturnValue;
	} params;
	params.SlotIndex = SlotIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystem.WriteNumSaveSlots
// (FUNC_Final, FUNC_Defined, FUNC_Private, FUNC_HasDefaults)
// Parameters:
// int                            NumSaveSlots                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudSaveSystem::WriteNumSaveSlots(int NumSaveSlots)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.WriteNumSaveSlots");

	struct
	{
		int                            NumSaveSlots;
		bool                           ReturnValue;
	} params;
	params.NumSaveSlots = NumSaveSlots;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystem.DoesSaveSlotKeyValueDataAlreadyExist
// (FUNC_Final, FUNC_Defined, FUNC_Private)
// Parameters:
// struct FString                 DataStoreID                    (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 DataBlobName                   (CPF_Parm, CPF_NeedCtorLink)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UCloudSaveSystem::DoesSaveSlotKeyValueDataAlreadyExist(const struct FString& DataStoreID, const struct FString& DataBlobName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.DoesSaveSlotKeyValueDataAlreadyExist");

	struct
	{
		struct FString                 DataStoreID;
		struct FString                 DataBlobName;
		int                            ReturnValue;
	} params;
	params.DataStoreID = DataStoreID;
	params.DataBlobName = DataBlobName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystem.GetNumberOfSaveSlots
// (FUNC_Final, FUNC_Defined, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// int                            NumSaveSlots                   (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudSaveSystem::GetNumberOfSaveSlots(int* NumSaveSlots)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.GetNumberOfSaveSlots");

	struct
	{
		int                            NumSaveSlots;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NumSaveSlots != nullptr)
		*NumSaveSlots = params.NumSaveSlots;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystem.SaveSystemCallback
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// int                            SaveSlot                       (CPF_Parm)
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void UCloudSaveSystem::SaveSystemCallback(bool bWasSuccessful, int SaveSlot, const struct FString& Error)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.SaveSystemCallback");

	struct
	{
		bool                           bWasSuccessful;
		int                            SaveSlot;
		struct FString                 Error;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.SaveSlot = SaveSlot;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CloudSaveSystem.OnGetSaveDataCallback
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// int                            SaveSlot                       (CPF_Parm)
// TArray<unsigned char>          DataBlob                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void UCloudSaveSystem::OnGetSaveDataCallback(bool bWasSuccessful, int SaveSlot, const struct FString& Error, TArray<unsigned char>* DataBlob)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystem.OnGetSaveDataCallback");

	struct
	{
		bool                           bWasSuccessful;
		int                            SaveSlot;
		TArray<unsigned char>          DataBlob;
		struct FString                 Error;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.SaveSlot = SaveSlot;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DataBlob != nullptr)
		*DataBlob = params.DataBlob;
}


// Function Engine.DamageType.VehicleDamageScalingFor
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class AVehicle*                V                              (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UDamageType::STATIC_VehicleDamageScalingFor(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.VehicleDamageScalingFor");

	struct
	{
		class AVehicle*                V;
		float                          ReturnValue;
	} params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DateTime.UTCSecondsSince
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_Public)

void UDateTime::STATIC_UTCSecondsSince()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DateTime.UTCSecondsSince");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DateTime.SetClientTime
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UDateTime::SetClientTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DateTime.SetClientTime");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DateTime.DateTimeFromUTCSeconds
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            Year                           (CPF_Parm, CPF_OutParm)
// int                            Month                          (CPF_Parm, CPF_OutParm)
// int                            Day                            (CPF_Parm, CPF_OutParm)
// int                            Hour                           (CPF_Parm, CPF_OutParm)
// int                            Minute                         (CPF_Parm, CPF_OutParm)
// int                            Second                         (CPF_Parm, CPF_OutParm)

void UDateTime::STATIC_DateTimeFromUTCSeconds(int* Year, int* Month, int* Day, int* Hour, int* Minute, int* Second)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DateTime.DateTimeFromUTCSeconds");

	struct
	{
		int                            Year;
		int                            Month;
		int                            Day;
		int                            Hour;
		int                            Minute;
		int                            Second;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Year != nullptr)
		*Year = params.Year;
	if (Month != nullptr)
		*Month = params.Month;
	if (Day != nullptr)
		*Day = params.Day;
	if (Hour != nullptr)
		*Hour = params.Hour;
	if (Minute != nullptr)
		*Minute = params.Minute;
	if (Second != nullptr)
		*Second = params.Second;
}


// Function Engine.DateTime.UTCSecondsFromDateTime
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// int                            Year                           (CPF_Parm)
// int                            Month                          (CPF_Parm)
// int                            Day                            (CPF_Parm)
// int                            Hour                           (CPF_Parm)
// int                            Minute                         (CPF_Parm)
// int                            Second                         (CPF_Parm)

void UDateTime::STATIC_UTCSecondsFromDateTime(int Year, int Month, int Day, int Hour, int Minute, int Second)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DateTime.UTCSecondsFromDateTime");

	struct
	{
		int                            Year;
		int                            Month;
		int                            Day;
		int                            Hour;
		int                            Minute;
		int                            Second;
	} params;
	params.Year = Year;
	params.Month = Month;
	params.Day = Day;
	params.Hour = Hour;
	params.Minute = Minute;
	params.Second = Second;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DateTime.UtcToLocalTimeString
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UDateTime::STATIC_UtcToLocalTimeString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DateTime.UtcToLocalTimeString");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DateTime.UtcToLocalTime
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FDateTimeData           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FDateTimeData UDateTime::STATIC_UtcToLocalTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DateTime.UtcToLocalTime");

	struct
	{
		struct FDateTimeData           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DateTime.GetUtcTimeStamp
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UDateTime::STATIC_GetUtcTimeStamp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DateTime.GetUtcTimeStamp");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DateTime.GetUTCTime
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FDateTimeData           TimeData                       (CPF_Const, CPF_Parm, CPF_OutParm)
// bool                           RemoveEpoch                    (CPF_OptionalParm, CPF_Parm)

void UDateTime::STATIC_GetUTCTime(bool RemoveEpoch, struct FDateTimeData* TimeData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DateTime.GetUTCTime");

	struct
	{
		struct FDateTimeData           TimeData;
		bool                           RemoveEpoch;
	} params;
	params.RemoveEpoch = RemoveEpoch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (TimeData != nullptr)
		*TimeData = params.TimeData;
}


// Function Engine.DateTime.GetTimeSpanUTC
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FDateTimeData           Date1                          (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FDateTimeData           Date2                          (CPF_Const, CPF_Parm, CPF_OutParm)

void UDateTime::STATIC_GetTimeSpanUTC(struct FDateTimeData* Date1, struct FDateTimeData* Date2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DateTime.GetTimeSpanUTC");

	struct
	{
		struct FDateTimeData           Date1;
		struct FDateTimeData           Date2;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Date1 != nullptr)
		*Date1 = params.Date1;
	if (Date2 != nullptr)
		*Date2 = params.Date2;
}


// Function Engine.DateTime.GetTimeSpanDateTime
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FDateTimeData           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FDateTimeData UDateTime::STATIC_GetTimeSpanDateTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DateTime.GetTimeSpanDateTime");

	struct
	{
		struct FDateTimeData           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DateTime.GetDateTime
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           AddEpoch                       (CPF_OptionalParm, CPF_Parm)
// struct FDateTimeData           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FDateTimeData UDateTime::STATIC_GetDateTime(bool AddEpoch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DateTime.GetDateTime");

	struct
	{
		bool                           AddEpoch;
		struct FDateTimeData           ReturnValue;
	} params;
	params.AddEpoch = AddEpoch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DateTime.HasDatePassed
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FDateTimeData           Data                           (CPF_Const, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UDateTime::STATIC_HasDatePassed(struct FDateTimeData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DateTime.HasDatePassed");

	struct
	{
		struct FDateTimeData           Data;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

	return params.ReturnValue;
}


// Function Engine.DateTime.GetUTCSecondsFromString
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 DateTime                       (CPF_Parm, CPF_NeedCtorLink)

void UDateTime::STATIC_GetUTCSecondsFromString(const struct FString& DateTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DateTime.GetUTCSecondsFromString");

	struct
	{
		struct FString                 DateTime;
	} params;
	params.DateTime = DateTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DateTime.GetUTCSeconds
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)

void UDateTime::STATIC_GetUTCSeconds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DateTime.GetUTCSeconds");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EngineShare.Init
// (FUNC_Event, FUNC_Public)

void UEngineShare::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EngineShare.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EngineShare.GetPsyVersionNumber
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UEngineShare::STATIC_GetPsyVersionNumber()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EngineShare.GetPsyVersionNumber");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EngineShare.GetInstance
// (FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UClass*                  Type                           (CPF_OptionalParm, CPF_Parm)
// class UEngineShare*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_CoerceParm)

class UEngineShare* UEngineShare::STATIC_GetInstance(class UClass* Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EngineShare.GetInstance");

	struct
	{
		class UClass*                  Type;
		class UEngineShare*            ReturnValue;
	} params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FaceFXAsset.UnmountFaceFXAnimSet
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (CPF_Parm)

void UFaceFXAsset::UnmountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FaceFXAsset.UnmountFaceFXAnimSet");

	struct
	{
		class UFaceFXAnimSet*          AnimSet;
	} params;
	params.AnimSet = AnimSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FaceFXAsset.MountFaceFXAnimSet
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (CPF_Parm)

void UFaceFXAsset::MountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FaceFXAsset.MountFaceFXAnimSet");

	struct
	{
		class UFaceFXAnimSet*          AnimSet;
	} params;
	params.AnimSet = AnimSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Font.GetStringHeightAndWidth
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 InString                       (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            Height                         (CPF_Parm, CPF_OutParm)
// int                            Width                          (CPF_Parm, CPF_OutParm)

void UFont::GetStringHeightAndWidth(struct FString* InString, int* Height, int* Width)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Font.GetStringHeightAndWidth");

	struct
	{
		struct FString                 InString;
		int                            Height;
		int                            Width;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InString != nullptr)
		*InString = params.InString;
	if (Height != nullptr)
		*Height = params.Height;
	if (Width != nullptr)
		*Width = params.Width;
}


// Function Engine.Font.GetMaxCharHeight
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UFont::GetMaxCharHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Font.GetMaxCharHeight");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Font.GetAuthoredViewportHeight
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ViewportHeight                 (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UFont::GetAuthoredViewportHeight(float ViewportHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Font.GetAuthoredViewportHeight");

	struct
	{
		float                          ViewportHeight;
		float                          ReturnValue;
	} params;
	params.ViewportHeight = ViewportHeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Font.GetScalingFactor
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          HeightTest                     (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UFont::GetScalingFactor(float HeightTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Font.GetScalingFactor");

	struct
	{
		float                          HeightTest;
		float                          ReturnValue;
	} params;
	params.HeightTest = HeightTest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Font.GetResolutionPageIndex
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          HeightTest                     (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UFont::GetResolutionPageIndex(float HeightTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Font.GetResolutionPageIndex");

	struct
	{
		float                          HeightTest;
		int                            ReturnValue;
	} params;
	params.HeightTest = HeightTest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MultiFont.GetResolutionTestTableIndex
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          HeightTest                     (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UMultiFont::GetResolutionTestTableIndex(float HeightTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiFont.GetResolutionTestTableIndex");

	struct
	{
		float                          HeightTest;
		int                            ReturnValue;
	} params;
	params.HeightTest = HeightTest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFeedbackManager.PauseWaveform
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bPause                         (CPF_OptionalParm, CPF_Parm)

void UForceFeedbackManager::PauseWaveform(bool bPause)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackManager.PauseWaveform");

	struct
	{
		bool                           bPause;
	} params;
	params.bPause = bPause;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFeedbackManager.StopForceFeedbackWaveform
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UForceFeedbackWaveform*  WaveForm                       (CPF_OptionalParm, CPF_Parm)

void UForceFeedbackManager::StopForceFeedbackWaveform(class UForceFeedbackWaveform* WaveForm)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackManager.StopForceFeedbackWaveform");

	struct
	{
		class UForceFeedbackWaveform*  WaveForm;
	} params;
	params.WaveForm = WaveForm;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFeedbackManager.PlayForceFeedbackWaveform
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class UForceFeedbackWaveform*  WaveForm                       (CPF_Parm)
// class AActor*                  WaveInstigator                 (CPF_Parm)

void UForceFeedbackManager::PlayForceFeedbackWaveform(class UForceFeedbackWaveform* WaveForm, class AActor* WaveInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFeedbackManager.PlayForceFeedbackWaveform");

	struct
	{
		class UForceFeedbackWaveform*  WaveForm;
		class AActor*                  WaveInstigator;
	} params;
	params.WaveForm = WaveForm;
	params.WaveInstigator = WaveInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEvents.GetFilename
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UGameplayEvents::GetFilename()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEvents.GetFilename");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEvents.CloseStatsFile
// (FUNC_Public)

void UGameplayEvents::CloseStatsFile()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEvents.CloseStatsFile");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEvents.OpenStatsFile
// (FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameplayEvents::OpenStatsFile(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEvents.OpenStatsFile");

	struct
	{
		struct FString                 Filename;
		bool                           ReturnValue;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.GetSessionDuration
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UGameplayEventsReader::GetSessionDuration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetSessionDuration");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.GetSessionEnd
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UGameplayEventsReader::GetSessionEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetSessionEnd");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.GetSessionStart
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UGameplayEventsReader::GetSessionStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetSessionStart");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.GetSessionTimestamp
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UGameplayEventsReader::GetSessionTimestamp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetSessionTimestamp");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.GetPlatform
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UGameplayEventsReader::GetPlatform()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetPlatform");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.GetTitleID
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UGameplayEventsReader::GetTitleID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetTitleID");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.GetSessionID
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UGameplayEventsReader::GetSessionID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.GetSessionID");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.ProcessStreamEnd
// (FUNC_Final, FUNC_Native, FUNC_Private)

void UGameplayEventsReader::ProcessStreamEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.ProcessStreamEnd");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsReader.ProcessStream
// (FUNC_Native, FUNC_Public)

void UGameplayEventsReader::ProcessStream()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.ProcessStream");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsReader.ProcessStreamStart
// (FUNC_Final, FUNC_Native, FUNC_Private)

void UGameplayEventsReader::ProcessStreamStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.ProcessStreamStart");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsReader.UnregisterHandler
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UGameplayEventsHandler*  ExistingHandler                (CPF_Parm)

void UGameplayEventsReader::UnregisterHandler(class UGameplayEventsHandler* ExistingHandler)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.UnregisterHandler");

	struct
	{
		class UGameplayEventsHandler*  ExistingHandler;
	} params;
	params.ExistingHandler = ExistingHandler;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsReader.RegisterHandler
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UGameplayEventsHandler*  NewHandler                     (CPF_Parm)

void UGameplayEventsReader::RegisterHandler(class UGameplayEventsHandler* NewHandler)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.RegisterHandler");

	struct
	{
		class UGameplayEventsHandler*  NewHandler;
	} params;
	params.NewHandler = NewHandler;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsReader.SerializeHeader
// (FUNC_Native, FUNC_Protected)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameplayEventsReader::SerializeHeader()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.SerializeHeader");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsReader.CloseStatsFile
// (FUNC_Native, FUNC_Public)

void UGameplayEventsReader::CloseStatsFile()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.CloseStatsFile");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsReader.OpenStatsFile
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameplayEventsReader::OpenStatsFile(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsReader.OpenStatsFile");

	struct
	{
		struct FString                 Filename;
		bool                           ReturnValue;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriterBase.RecordCoverLinkFireLinks
// (FUNC_Public)
// Parameters:
// class ACoverLink*              Link                           (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UGameplayEventsWriterBase::RecordCoverLinkFireLinks(class ACoverLink* Link, class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.RecordCoverLinkFireLinks");

	struct
	{
		class ACoverLink*              Link;
		class AController*             Player;
		int                            ReturnValue;
	} params;
	params.Link = Link;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriterBase.RecordAIPathFail
// (FUNC_Public)
// Parameters:
// class AController*             AI                             (CPF_Parm)
// struct FString                 Reason                         (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// struct FVector                 Dest                           (CPF_Parm)

void UGameplayEventsWriterBase::RecordAIPathFail(class AController* AI, const struct FString& Reason, const struct FVector& Dest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.RecordAIPathFail");

	struct
	{
		class AController*             AI;
		struct FString                 Reason;
		struct FVector                 Dest;
	} params;
	params.AI = AI;
	params.Reason = Reason;
	params.Dest = Dest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogSystemPollEvents
// (FUNC_Public)

void UGameplayEventsWriterBase::LogSystemPollEvents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogSystemPollEvents");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogProjectileIntEvent
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// class UClass*                  Proj                           (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGameplayEventsWriterBase::LogProjectileIntEvent(int EventID, class AController* Player, class UClass* Proj, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogProjectileIntEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		class UClass*                  Proj;
		int                            Value;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.Proj = Proj;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogDamageEvent
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// class UClass*                  dmgType                        (CPF_Parm)
// class AController*             Target                         (CPF_Parm)
// int                            Amount                         (CPF_Parm)

void UGameplayEventsWriterBase::LogDamageEvent(int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogDamageEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		class UClass*                  dmgType;
		class AController*             Target;
		int                            Amount;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.dmgType = dmgType;
	params.Target = Target;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogWeaponIntEvent
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// class UClass*                  WeaponClass                    (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGameplayEventsWriterBase::LogWeaponIntEvent(int EventID, class AController* Player, class UClass* WeaponClass, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogWeaponIntEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		class UClass*                  WeaponClass;
		int                            Value;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.WeaponClass = WeaponClass;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogPlayerPlayerEvent
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// class AController*             Target                         (CPF_Parm)

void UGameplayEventsWriterBase::LogPlayerPlayerEvent(int EventID, class AController* Player, class AController* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogPlayerPlayerEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		class AController*             Target;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogPlayerKillDeath
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// int                            KillType                       (CPF_Parm)
// class AController*             Killer                         (CPF_Parm)
// class UClass*                  dmgType                        (CPF_Parm)
// class AController*             Dead                           (CPF_Parm)

void UGameplayEventsWriterBase::LogPlayerKillDeath(int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogPlayerKillDeath");

	struct
	{
		int                            EventID;
		int                            KillType;
		class AController*             Killer;
		class UClass*                  dmgType;
		class AController*             Dead;
	} params;
	params.EventID = EventID;
	params.KillType = KillType;
	params.Killer = Killer;
	params.dmgType = dmgType;
	params.Dead = Dead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogAllPlayerPositionsEvent
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)

void UGameplayEventsWriterBase::LogAllPlayerPositionsEvent(int EventID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogAllPlayerPositionsEvent");

	struct
	{
		int                            EventID;
	} params;
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogPlayerLoginChange
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// struct FString                 PlayerName                     (CPF_Parm, CPF_NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           bSplitScreen                   (CPF_Parm)

void UGameplayEventsWriterBase::LogPlayerLoginChange(int EventID, class AController* Player, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, bool bSplitScreen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogPlayerLoginChange");

	struct
	{
		int                            EventID;
		class AController*             Player;
		struct FString                 PlayerName;
		struct FUniqueNetId            PlayerID;
		bool                           bSplitScreen;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;
	params.bSplitScreen = bSplitScreen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogPlayerSpawnEvent
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// class UClass*                  PawnClass                      (CPF_Parm)
// int                            TeamID                         (CPF_Parm)

void UGameplayEventsWriterBase::LogPlayerSpawnEvent(int EventID, class AController* Player, class UClass* PawnClass, int TeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogPlayerSpawnEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		class UClass*                  PawnClass;
		int                            TeamID;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.PawnClass = PawnClass;
	params.TeamID = TeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogPlayerStringEvent
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// struct FString                 EventString                    (CPF_Parm, CPF_NeedCtorLink)

void UGameplayEventsWriterBase::LogPlayerStringEvent(int EventID, class AController* Player, const struct FString& EventString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogPlayerStringEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		struct FString                 EventString;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.EventString = EventString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogPlayerFloatEvent
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UGameplayEventsWriterBase::LogPlayerFloatEvent(int EventID, class AController* Player, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogPlayerFloatEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		float                          Value;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogPlayerIntEvent
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGameplayEventsWriterBase::LogPlayerIntEvent(int EventID, class AController* Player, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogPlayerIntEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		int                            Value;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogTeamStringEvent
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class ATeamInfo*               Team                           (CPF_Parm)
// struct FString                 Value                          (CPF_Parm, CPF_NeedCtorLink)

void UGameplayEventsWriterBase::LogTeamStringEvent(int EventID, class ATeamInfo* Team, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogTeamStringEvent");

	struct
	{
		int                            EventID;
		class ATeamInfo*               Team;
		struct FString                 Value;
	} params;
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogTeamFloatEvent
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class ATeamInfo*               Team                           (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UGameplayEventsWriterBase::LogTeamFloatEvent(int EventID, class ATeamInfo* Team, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogTeamFloatEvent");

	struct
	{
		int                            EventID;
		class ATeamInfo*               Team;
		float                          Value;
	} params;
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogTeamIntEvent
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class ATeamInfo*               Team                           (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGameplayEventsWriterBase::LogTeamIntEvent(int EventID, class ATeamInfo* Team, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogTeamIntEvent");

	struct
	{
		int                            EventID;
		class ATeamInfo*               Team;
		int                            Value;
	} params;
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogGamePositionEvent
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            EventID                        (CPF_Parm)
// struct FVector                 Position                       (CPF_Const, CPF_Parm, CPF_OutParm)
// float                          Value                          (CPF_Parm)

void UGameplayEventsWriterBase::LogGamePositionEvent(int EventID, float Value, struct FVector* Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogGamePositionEvent");

	struct
	{
		int                            EventID;
		struct FVector                 Position;
		float                          Value;
	} params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Position != nullptr)
		*Position = params.Position;
}


// Function Engine.GameplayEventsWriterBase.LogGameFloatEvent
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UGameplayEventsWriterBase::LogGameFloatEvent(int EventID, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogGameFloatEvent");

	struct
	{
		int                            EventID;
		float                          Value;
	} params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogGameStringEvent
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// struct FString                 Value                          (CPF_Parm, CPF_NeedCtorLink)

void UGameplayEventsWriterBase::LogGameStringEvent(int EventID, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogGameStringEvent");

	struct
	{
		int                            EventID;
		struct FString                 Value;
	} params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.LogGameIntEvent
// (FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGameplayEventsWriterBase::LogGameIntEvent(int EventID, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.LogGameIntEvent");

	struct
	{
		int                            EventID;
		int                            Value;
	} params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.EndLogging
// (FUNC_Public)

void UGameplayEventsWriterBase::EndLogging()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.EndLogging");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.ResetLogging
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          HeartbeatDelta                 (CPF_OptionalParm, CPF_Parm)

void UGameplayEventsWriterBase::ResetLogging(float HeartbeatDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.ResetLogging");

	struct
	{
		float                          HeartbeatDelta;
	} params;
	params.HeartbeatDelta = HeartbeatDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.StartLogging
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          HeartbeatDelta                 (CPF_OptionalParm, CPF_Parm)

void UGameplayEventsWriterBase::StartLogging(float HeartbeatDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.StartLogging");

	struct
	{
		float                          HeartbeatDelta;
	} params;
	params.HeartbeatDelta = HeartbeatDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.GetPlaylistId
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UGameplayEventsWriterBase::GetPlaylistId()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.GetPlaylistId");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriterBase.GetGameTypeId
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UGameplayEventsWriterBase::GetGameTypeId()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.GetGameTypeId");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriterBase.Poll
// (FUNC_Defined, FUNC_Public)

void UGameplayEventsWriterBase::Poll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.Poll");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.StopPolling
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UGameplayEventsWriterBase::StopPolling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.StopPolling");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.StartPolling
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          HearbeatDelta                  (CPF_Parm)

void UGameplayEventsWriterBase::StartPolling(float HearbeatDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.StartPolling");

	struct
	{
		float                          HearbeatDelta;
	} params;
	params.HearbeatDelta = HearbeatDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriterBase.IsSessionInProgress
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameplayEventsWriterBase::IsSessionInProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriterBase.IsSessionInProgress");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsUploadAnalytics.RecordCoverLinkFireLinks
// (FUNC_Public)
// Parameters:
// class ACoverLink*              Link                           (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UGameplayEventsUploadAnalytics::RecordCoverLinkFireLinks(class ACoverLink* Link, class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.RecordCoverLinkFireLinks");

	struct
	{
		class ACoverLink*              Link;
		class AController*             Player;
		int                            ReturnValue;
	} params;
	params.Link = Link;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsUploadAnalytics.RecordAIPathFail
// (FUNC_Public)
// Parameters:
// class AController*             AI                             (CPF_Parm)
// struct FString                 Reason                         (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// struct FVector                 Dest                           (CPF_Parm)

void UGameplayEventsUploadAnalytics::RecordAIPathFail(class AController* AI, const struct FString& Reason, const struct FVector& Dest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.RecordAIPathFail");

	struct
	{
		class AController*             AI;
		struct FString                 Reason;
		struct FVector                 Dest;
	} params;
	params.AI = AI;
	params.Reason = Reason;
	params.Dest = Dest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.GetGenericParamListEntry
// (FUNC_Public)
// Parameters:
// class UGenericParamListStatEntry* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UGenericParamListStatEntry* UGameplayEventsUploadAnalytics::GetGenericParamListEntry()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.GetGenericParamListEntry");

	struct
	{
		class UGenericParamListStatEntry* ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsUploadAnalytics.LogProjectileIntEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// class UClass*                  Proj                           (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGameplayEventsUploadAnalytics::LogProjectileIntEvent(int EventID, class AController* Player, class UClass* Proj, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogProjectileIntEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		class UClass*                  Proj;
		int                            Value;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.Proj = Proj;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogDamageEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// class UClass*                  dmgType                        (CPF_Parm)
// class AController*             Target                         (CPF_Parm)
// int                            Amount                         (CPF_Parm)

void UGameplayEventsUploadAnalytics::LogDamageEvent(int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogDamageEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		class UClass*                  dmgType;
		class AController*             Target;
		int                            Amount;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.dmgType = dmgType;
	params.Target = Target;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogWeaponIntEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// class UClass*                  WeaponClass                    (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGameplayEventsUploadAnalytics::LogWeaponIntEvent(int EventID, class AController* Player, class UClass* WeaponClass, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogWeaponIntEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		class UClass*                  WeaponClass;
		int                            Value;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.WeaponClass = WeaponClass;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogPlayerPlayerEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// class AController*             Target                         (CPF_Parm)

void UGameplayEventsUploadAnalytics::LogPlayerPlayerEvent(int EventID, class AController* Player, class AController* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogPlayerPlayerEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		class AController*             Target;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogPlayerKillDeath
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// int                            KillType                       (CPF_Parm)
// class AController*             Killer                         (CPF_Parm)
// class UClass*                  dmgType                        (CPF_Parm)
// class AController*             Dead                           (CPF_Parm)

void UGameplayEventsUploadAnalytics::LogPlayerKillDeath(int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogPlayerKillDeath");

	struct
	{
		int                            EventID;
		int                            KillType;
		class AController*             Killer;
		class UClass*                  dmgType;
		class AController*             Dead;
	} params;
	params.EventID = EventID;
	params.KillType = KillType;
	params.Killer = Killer;
	params.dmgType = dmgType;
	params.Dead = Dead;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogAllPlayerPositionsEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)

void UGameplayEventsUploadAnalytics::LogAllPlayerPositionsEvent(int EventID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogAllPlayerPositionsEvent");

	struct
	{
		int                            EventID;
	} params;
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogPlayerLoginChange
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// struct FString                 PlayerName                     (CPF_Parm, CPF_NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           bSplitScreen                   (CPF_Parm)

void UGameplayEventsUploadAnalytics::LogPlayerLoginChange(int EventID, class AController* Player, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, bool bSplitScreen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogPlayerLoginChange");

	struct
	{
		int                            EventID;
		class AController*             Player;
		struct FString                 PlayerName;
		struct FUniqueNetId            PlayerID;
		bool                           bSplitScreen;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;
	params.bSplitScreen = bSplitScreen;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogPlayerSpawnEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// class UClass*                  PawnClass                      (CPF_Parm)
// int                            TeamID                         (CPF_Parm)

void UGameplayEventsUploadAnalytics::LogPlayerSpawnEvent(int EventID, class AController* Player, class UClass* PawnClass, int TeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogPlayerSpawnEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		class UClass*                  PawnClass;
		int                            TeamID;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.PawnClass = PawnClass;
	params.TeamID = TeamID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogPlayerStringEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// struct FString                 EventString                    (CPF_Parm, CPF_NeedCtorLink)

void UGameplayEventsUploadAnalytics::LogPlayerStringEvent(int EventID, class AController* Player, const struct FString& EventString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogPlayerStringEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		struct FString                 EventString;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.EventString = EventString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogPlayerFloatEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UGameplayEventsUploadAnalytics::LogPlayerFloatEvent(int EventID, class AController* Player, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogPlayerFloatEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		float                          Value;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogPlayerIntEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGameplayEventsUploadAnalytics::LogPlayerIntEvent(int EventID, class AController* Player, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogPlayerIntEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		int                            Value;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogTeamStringEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class ATeamInfo*               Team                           (CPF_Parm)
// struct FString                 Value                          (CPF_Parm, CPF_NeedCtorLink)

void UGameplayEventsUploadAnalytics::LogTeamStringEvent(int EventID, class ATeamInfo* Team, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogTeamStringEvent");

	struct
	{
		int                            EventID;
		class ATeamInfo*               Team;
		struct FString                 Value;
	} params;
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogTeamFloatEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class ATeamInfo*               Team                           (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UGameplayEventsUploadAnalytics::LogTeamFloatEvent(int EventID, class ATeamInfo* Team, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogTeamFloatEvent");

	struct
	{
		int                            EventID;
		class ATeamInfo*               Team;
		float                          Value;
	} params;
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogTeamIntEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class ATeamInfo*               Team                           (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGameplayEventsUploadAnalytics::LogTeamIntEvent(int EventID, class ATeamInfo* Team, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogTeamIntEvent");

	struct
	{
		int                            EventID;
		class ATeamInfo*               Team;
		int                            Value;
	} params;
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogGamePositionEvent
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            EventID                        (CPF_Parm)
// struct FVector                 Position                       (CPF_Const, CPF_Parm, CPF_OutParm)
// float                          Value                          (CPF_Parm)

void UGameplayEventsUploadAnalytics::LogGamePositionEvent(int EventID, float Value, struct FVector* Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogGamePositionEvent");

	struct
	{
		int                            EventID;
		struct FVector                 Position;
		float                          Value;
	} params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Position != nullptr)
		*Position = params.Position;
}


// Function Engine.GameplayEventsUploadAnalytics.LogGameFloatEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UGameplayEventsUploadAnalytics::LogGameFloatEvent(int EventID, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogGameFloatEvent");

	struct
	{
		int                            EventID;
		float                          Value;
	} params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogGameStringEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// struct FString                 Value                          (CPF_Parm, CPF_NeedCtorLink)

void UGameplayEventsUploadAnalytics::LogGameStringEvent(int EventID, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogGameStringEvent");

	struct
	{
		int                            EventID;
		struct FString                 Value;
	} params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.LogGameIntEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGameplayEventsUploadAnalytics::LogGameIntEvent(int EventID, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.LogGameIntEvent");

	struct
	{
		int                            EventID;
		int                            Value;
	} params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.EndLogging
// (FUNC_Native, FUNC_Public)

void UGameplayEventsUploadAnalytics::EndLogging()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.EndLogging");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.ResetLogging
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          HeartbeatDelta                 (CPF_OptionalParm, CPF_Parm)

void UGameplayEventsUploadAnalytics::ResetLogging(float HeartbeatDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.ResetLogging");

	struct
	{
		float                          HeartbeatDelta;
	} params;
	params.HeartbeatDelta = HeartbeatDelta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsUploadAnalytics.StartLogging
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          HeartbeatDelta                 (CPF_OptionalParm, CPF_Parm)

void UGameplayEventsUploadAnalytics::StartLogging(float HeartbeatDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsUploadAnalytics.StartLogging");

	struct
	{
		float                          HeartbeatDelta;
	} params;
	params.HeartbeatDelta = HeartbeatDelta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.RecordCoverLinkFireLinks
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class ACoverLink*              Link                           (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UGameplayEventsWriter::RecordCoverLinkFireLinks(class ACoverLink* Link, class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.RecordCoverLinkFireLinks");

	struct
	{
		class ACoverLink*              Link;
		class AController*             Player;
		int                            ReturnValue;
	} params;
	params.Link = Link;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriter.RecordAIPathFail
// (FUNC_Public)
// Parameters:
// class AController*             AI                             (CPF_Parm)
// struct FString                 Reason                         (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// struct FVector                 Dest                           (CPF_Parm)

void UGameplayEventsWriter::RecordAIPathFail(class AController* AI, const struct FString& Reason, const struct FVector& Dest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.RecordAIPathFail");

	struct
	{
		class AController*             AI;
		struct FString                 Reason;
		struct FVector                 Dest;
	} params;
	params.AI = AI;
	params.Reason = Reason;
	params.Dest = Dest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.GetGenericParamListEntry
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UGenericParamListStatEntry* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UGenericParamListStatEntry* UGameplayEventsWriter::GetGenericParamListEntry()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.GetGenericParamListEntry");

	struct
	{
		class UGenericParamListStatEntry* ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriter.LogSystemPollEvents
// (FUNC_Native, FUNC_Public)

void UGameplayEventsWriter::LogSystemPollEvents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogSystemPollEvents");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogProjectileIntEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// class UClass*                  Proj                           (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGameplayEventsWriter::LogProjectileIntEvent(int EventID, class AController* Player, class UClass* Proj, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogProjectileIntEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		class UClass*                  Proj;
		int                            Value;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.Proj = Proj;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogDamageEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// class UClass*                  dmgType                        (CPF_Parm)
// class AController*             Target                         (CPF_Parm)
// int                            Amount                         (CPF_Parm)

void UGameplayEventsWriter::LogDamageEvent(int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogDamageEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		class UClass*                  dmgType;
		class AController*             Target;
		int                            Amount;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.dmgType = dmgType;
	params.Target = Target;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogWeaponIntEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// class UClass*                  WeaponClass                    (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGameplayEventsWriter::LogWeaponIntEvent(int EventID, class AController* Player, class UClass* WeaponClass, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogWeaponIntEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		class UClass*                  WeaponClass;
		int                            Value;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.WeaponClass = WeaponClass;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogPlayerPlayerEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// class AController*             Target                         (CPF_Parm)

void UGameplayEventsWriter::LogPlayerPlayerEvent(int EventID, class AController* Player, class AController* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerPlayerEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		class AController*             Target;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.Target = Target;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogPlayerKillDeath
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// int                            KillType                       (CPF_Parm)
// class AController*             Killer                         (CPF_Parm)
// class UClass*                  dmgType                        (CPF_Parm)
// class AController*             Dead                           (CPF_Parm)

void UGameplayEventsWriter::LogPlayerKillDeath(int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerKillDeath");

	struct
	{
		int                            EventID;
		int                            KillType;
		class AController*             Killer;
		class UClass*                  dmgType;
		class AController*             Dead;
	} params;
	params.EventID = EventID;
	params.KillType = KillType;
	params.Killer = Killer;
	params.dmgType = dmgType;
	params.Dead = Dead;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogAllPlayerPositionsEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)

void UGameplayEventsWriter::LogAllPlayerPositionsEvent(int EventID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogAllPlayerPositionsEvent");

	struct
	{
		int                            EventID;
	} params;
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogPlayerLoginChange
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// struct FString                 PlayerName                     (CPF_Parm, CPF_NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           bSplitScreen                   (CPF_Parm)

void UGameplayEventsWriter::LogPlayerLoginChange(int EventID, class AController* Player, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, bool bSplitScreen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerLoginChange");

	struct
	{
		int                            EventID;
		class AController*             Player;
		struct FString                 PlayerName;
		struct FUniqueNetId            PlayerID;
		bool                           bSplitScreen;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;
	params.bSplitScreen = bSplitScreen;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogPlayerSpawnEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// class UClass*                  PawnClass                      (CPF_Parm)
// int                            TeamID                         (CPF_Parm)

void UGameplayEventsWriter::LogPlayerSpawnEvent(int EventID, class AController* Player, class UClass* PawnClass, int TeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerSpawnEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		class UClass*                  PawnClass;
		int                            TeamID;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.PawnClass = PawnClass;
	params.TeamID = TeamID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogPlayerStringEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// struct FString                 EventString                    (CPF_Parm, CPF_NeedCtorLink)

void UGameplayEventsWriter::LogPlayerStringEvent(int EventID, class AController* Player, const struct FString& EventString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerStringEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		struct FString                 EventString;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.EventString = EventString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogPlayerFloatEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UGameplayEventsWriter::LogPlayerFloatEvent(int EventID, class AController* Player, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerFloatEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		float                          Value;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogPlayerIntEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class AController*             Player                         (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGameplayEventsWriter::LogPlayerIntEvent(int EventID, class AController* Player, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogPlayerIntEvent");

	struct
	{
		int                            EventID;
		class AController*             Player;
		int                            Value;
	} params;
	params.EventID = EventID;
	params.Player = Player;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogTeamStringEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class ATeamInfo*               Team                           (CPF_Parm)
// struct FString                 Value                          (CPF_Parm, CPF_NeedCtorLink)

void UGameplayEventsWriter::LogTeamStringEvent(int EventID, class ATeamInfo* Team, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogTeamStringEvent");

	struct
	{
		int                            EventID;
		class ATeamInfo*               Team;
		struct FString                 Value;
	} params;
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogTeamFloatEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class ATeamInfo*               Team                           (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UGameplayEventsWriter::LogTeamFloatEvent(int EventID, class ATeamInfo* Team, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogTeamFloatEvent");

	struct
	{
		int                            EventID;
		class ATeamInfo*               Team;
		float                          Value;
	} params;
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogTeamIntEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// class ATeamInfo*               Team                           (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGameplayEventsWriter::LogTeamIntEvent(int EventID, class ATeamInfo* Team, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogTeamIntEvent");

	struct
	{
		int                            EventID;
		class ATeamInfo*               Team;
		int                            Value;
	} params;
	params.EventID = EventID;
	params.Team = Team;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogGamePositionEvent
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            EventID                        (CPF_Parm)
// struct FVector                 Position                       (CPF_Const, CPF_Parm, CPF_OutParm)
// float                          Value                          (CPF_Parm)

void UGameplayEventsWriter::LogGamePositionEvent(int EventID, float Value, struct FVector* Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogGamePositionEvent");

	struct
	{
		int                            EventID;
		struct FVector                 Position;
		float                          Value;
	} params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Position != nullptr)
		*Position = params.Position;
}


// Function Engine.GameplayEventsWriter.LogGameFloatEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UGameplayEventsWriter::LogGameFloatEvent(int EventID, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogGameFloatEvent");

	struct
	{
		int                            EventID;
		float                          Value;
	} params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogGameStringEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// struct FString                 Value                          (CPF_Parm, CPF_NeedCtorLink)

void UGameplayEventsWriter::LogGameStringEvent(int EventID, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogGameStringEvent");

	struct
	{
		int                            EventID;
		struct FString                 Value;
	} params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.LogGameIntEvent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGameplayEventsWriter::LogGameIntEvent(int EventID, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.LogGameIntEvent");

	struct
	{
		int                            EventID;
		int                            Value;
	} params;
	params.EventID = EventID;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.EndLogging
// (FUNC_Native, FUNC_Public)

void UGameplayEventsWriter::EndLogging()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.EndLogging");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.ResetLogging
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          HeartbeatDelta                 (CPF_OptionalParm, CPF_Parm)

void UGameplayEventsWriter::ResetLogging(float HeartbeatDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.ResetLogging");

	struct
	{
		float                          HeartbeatDelta;
	} params;
	params.HeartbeatDelta = HeartbeatDelta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.StartLogging
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          HeartbeatDelta                 (CPF_OptionalParm, CPF_Parm)

void UGameplayEventsWriter::StartLogging(float HeartbeatDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.StartLogging");

	struct
	{
		float                          HeartbeatDelta;
	} params;
	params.HeartbeatDelta = HeartbeatDelta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.SerializeFooter
// (FUNC_Native, FUNC_Protected)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameplayEventsWriter::SerializeFooter()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.SerializeFooter");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriter.SerializeHeader
// (FUNC_Native, FUNC_Protected)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameplayEventsWriter::SerializeHeader()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.SerializeHeader");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriter.CloseStatsFile
// (FUNC_Native, FUNC_Public)

void UGameplayEventsWriter::CloseStatsFile()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.CloseStatsFile");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsWriter.OpenStatsFile
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameplayEventsWriter::OpenStatsFile(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.OpenStatsFile");

	struct
	{
		struct FString                 Filename;
		bool                           ReturnValue;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsWriter.ResolvePlayerIndex
// (FUNC_Native, FUNC_Public)
// Parameters:
// class AController*             Player                         (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UGameplayEventsWriter::ResolvePlayerIndex(class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsWriter.ResolvePlayerIndex");

	struct
	{
		class AController*             Player;
		int                            ReturnValue;
	} params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameplayEventsHandler.RemoveFilter
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)

void UGameplayEventsHandler::RemoveFilter(int EventID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.RemoveFilter");

	struct
	{
		int                            EventID;
	} params;
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsHandler.AddFilter
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            EventID                        (CPF_Parm)

void UGameplayEventsHandler::AddFilter(int EventID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.AddFilter");

	struct
	{
		int                            EventID;
	} params;
	params.EventID = EventID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsHandler.ResolveGroupFilters
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UGameplayEventsHandler::ResolveGroupFilters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.ResolveGroupFilters");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsHandler.PostProcessStream
// (FUNC_Event, FUNC_Public)

void UGameplayEventsHandler::PostProcessStream()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.PostProcessStream");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsHandler.PreProcessStream
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UGameplayEventsHandler::PreProcessStream()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.PreProcessStream");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameplayEventsHandler.SetReader
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UGameplayEventsReader*   NewReader                      (CPF_Parm)

void UGameplayEventsHandler::SetReader(class UGameplayEventsReader* NewReader)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameplayEventsHandler.SetReader");

	struct
	{
		class UGameplayEventsReader*   NewReader;
	} params;
	params.NewReader = NewReader;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GenericParamListStatEntry.CommitToDisk
// (FUNC_Native, FUNC_Public)

void UGenericParamListStatEntry::CommitToDisk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.CommitToDisk");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GenericParamListStatEntry.GetString
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParamName                      (CPF_Parm)
// struct FString                 out_string                     (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGenericParamListStatEntry::GetString(const struct FName& ParamName, struct FString* out_string)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.GetString");

	struct
	{
		struct FName                   ParamName;
		struct FString                 out_string;
		bool                           ReturnValue;
	} params;
	params.ParamName = ParamName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_string != nullptr)
		*out_string = params.out_string;

	return params.ReturnValue;
}


// Function Engine.GenericParamListStatEntry.GetVector
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParamName                      (CPF_Parm)
// struct FVector                 out_vector                     (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGenericParamListStatEntry::GetVector(const struct FName& ParamName, struct FVector* out_vector)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.GetVector");

	struct
	{
		struct FName                   ParamName;
		struct FVector                 out_vector;
		bool                           ReturnValue;
	} params;
	params.ParamName = ParamName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_vector != nullptr)
		*out_vector = params.out_vector;

	return params.ReturnValue;
}


// Function Engine.GenericParamListStatEntry.GetInt
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParamName                      (CPF_Parm)
// int                            out_int                        (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGenericParamListStatEntry::GetInt(const struct FName& ParamName, int* out_int)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.GetInt");

	struct
	{
		struct FName                   ParamName;
		int                            out_int;
		bool                           ReturnValue;
	} params;
	params.ParamName = ParamName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_int != nullptr)
		*out_int = params.out_int;

	return params.ReturnValue;
}


// Function Engine.GenericParamListStatEntry.GetFloat
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParamName                      (CPF_Parm)
// float                          out_Float                      (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGenericParamListStatEntry::GetFloat(const struct FName& ParamName, float* out_Float)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.GetFloat");

	struct
	{
		struct FName                   ParamName;
		float                          out_Float;
		bool                           ReturnValue;
	} params;
	params.ParamName = ParamName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Float != nullptr)
		*out_Float = params.out_Float;

	return params.ReturnValue;
}


// Function Engine.GenericParamListStatEntry.AddString
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParamName                      (CPF_Parm)
// struct FString                 Value                          (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)

void UGenericParamListStatEntry::AddString(const struct FName& ParamName, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.AddString");

	struct
	{
		struct FName                   ParamName;
		struct FString                 Value;
	} params;
	params.ParamName = ParamName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GenericParamListStatEntry.AddVector
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParamName                      (CPF_Parm)
// struct FVector                 Value                          (CPF_Parm)

void UGenericParamListStatEntry::AddVector(const struct FName& ParamName, const struct FVector& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.AddVector");

	struct
	{
		struct FName                   ParamName;
		struct FVector                 Value;
	} params;
	params.ParamName = ParamName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GenericParamListStatEntry.AddInt
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParamName                      (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UGenericParamListStatEntry::AddInt(const struct FName& ParamName, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.AddInt");

	struct
	{
		struct FName                   ParamName;
		int                            Value;
	} params;
	params.ParamName = ParamName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GenericParamListStatEntry.AddFloat
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParamName                      (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UGenericParamListStatEntry::AddFloat(const struct FName& ParamName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GenericParamListStatEntry.AddFloat");

	struct
	{
		struct FName                   ParamName;
		float                          Value;
	} params;
	params.ParamName = ParamName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HttpBaseInterface.GetContent
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<unsigned char>          Content                        (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UHttpBaseInterface::GetContent(TArray<unsigned char>* Content)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpBaseInterface.GetContent");

	struct
	{
		TArray<unsigned char>          Content;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Content != nullptr)
		*Content = params.Content;
}


// Function Engine.HttpBaseInterface.GetURL
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UHttpBaseInterface::GetURL()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpBaseInterface.GetURL");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HttpBaseInterface.GetContentLength
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UHttpBaseInterface::GetContentLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpBaseInterface.GetContentLength");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HttpBaseInterface.GetContentType
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UHttpBaseInterface::GetContentType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpBaseInterface.GetContentType");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HttpBaseInterface.GetURLParameter
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ParameterName                  (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UHttpBaseInterface::GetURLParameter(const struct FString& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpBaseInterface.GetURLParameter");

	struct
	{
		struct FString                 ParameterName;
		struct FString                 ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HttpBaseInterface.GetHeaders
// (FUNC_Native, FUNC_Public)
// Parameters:
// TArray<struct FString>         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

TArray<struct FString> UHttpBaseInterface::GetHeaders()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpBaseInterface.GetHeaders");

	struct
	{
		TArray<struct FString>         ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HttpBaseInterface.GetHeader
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 HeaderName                     (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UHttpBaseInterface::GetHeader(const struct FString& HeaderName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpBaseInterface.GetHeader");

	struct
	{
		struct FString                 HeaderName;
		struct FString                 ReturnValue;
	} params;
	params.HeaderName = HeaderName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HttpRequestInterface.SetProcessRequestCompleteDelegate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FScriptDelegate         ProcessRequestCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)
// class UHttpRequestInterface*   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UHttpRequestInterface* UHttpRequestInterface::SetProcessRequestCompleteDelegate(const struct FScriptDelegate& ProcessRequestCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.SetProcessRequestCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ProcessRequestCompleteDelegate;
		class UHttpRequestInterface*   ReturnValue;
	} params;
	params.ProcessRequestCompleteDelegate = ProcessRequestCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HttpRequestInterface.OnProcessRequestComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// class UHttpRequestInterface*   OriginalRequest                (CPF_Parm)
// class UHttpResponseInterface*  InHttpResponse                 (CPF_Parm)
// bool                           bDidSucceed                    (CPF_Parm)

void UHttpRequestInterface::OnProcessRequestComplete(class UHttpRequestInterface* OriginalRequest, class UHttpResponseInterface* InHttpResponse, bool bDidSucceed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.OnProcessRequestComplete");

	struct
	{
		class UHttpRequestInterface*   OriginalRequest;
		class UHttpResponseInterface*  InHttpResponse;
		bool                           bDidSucceed;
	} params;
	params.OriginalRequest = OriginalRequest;
	params.InHttpResponse = InHttpResponse;
	params.bDidSucceed = bDidSucceed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HttpRequestInterface.ProcessRequest
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UHttpRequestInterface::ProcessRequest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.ProcessRequest");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HttpRequestInterface.SetHeader
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 HeaderName                     (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 HeaderValue                    (CPF_Parm, CPF_NeedCtorLink)
// class UHttpRequestInterface*   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UHttpRequestInterface* UHttpRequestInterface::SetHeader(const struct FString& HeaderName, const struct FString& HeaderValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.SetHeader");

	struct
	{
		struct FString                 HeaderName;
		struct FString                 HeaderValue;
		class UHttpRequestInterface*   ReturnValue;
	} params;
	params.HeaderName = HeaderName;
	params.HeaderValue = HeaderValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HttpRequestInterface.SetContentAsString
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ContentString                  (CPF_Parm, CPF_NeedCtorLink)
// class UHttpRequestInterface*   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UHttpRequestInterface* UHttpRequestInterface::SetContentAsString(const struct FString& ContentString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.SetContentAsString");

	struct
	{
		struct FString                 ContentString;
		class UHttpRequestInterface*   ReturnValue;
	} params;
	params.ContentString = ContentString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HttpRequestInterface.SetContent
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<unsigned char>          ContentPayload                 (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// class UHttpRequestInterface*   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UHttpRequestInterface* UHttpRequestInterface::SetContent(TArray<unsigned char>* ContentPayload)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.SetContent");

	struct
	{
		TArray<unsigned char>          ContentPayload;
		class UHttpRequestInterface*   ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ContentPayload != nullptr)
		*ContentPayload = params.ContentPayload;

	return params.ReturnValue;
}


// Function Engine.HttpRequestInterface.SetURL
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)
// class UHttpRequestInterface*   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UHttpRequestInterface* UHttpRequestInterface::SetURL(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.SetURL");

	struct
	{
		struct FString                 URL;
		class UHttpRequestInterface*   ReturnValue;
	} params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HttpRequestInterface.SetVerb
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 Verb                           (CPF_Parm, CPF_NeedCtorLink)
// class UHttpRequestInterface*   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UHttpRequestInterface* UHttpRequestInterface::SetVerb(const struct FString& Verb)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.SetVerb");

	struct
	{
		struct FString                 Verb;
		class UHttpRequestInterface*   ReturnValue;
	} params;
	params.Verb = Verb;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HttpRequestInterface.GetVerb
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UHttpRequestInterface::GetVerb()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpRequestInterface.GetVerb");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HttpResponseInterface.IsContentCompressed
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UHttpResponseInterface::IsContentCompressed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpResponseInterface.IsContentCompressed");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HttpResponseInterface.GetContentAsString
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UHttpResponseInterface::GetContentAsString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpResponseInterface.GetContentAsString");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HttpResponseInterface.GetResponseCode
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UHttpResponseInterface::GetResponseCode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpResponseInterface.GetResponseCode");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.IniLocPatcher.UpdateLocFileName
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UIniLocPatcher::UpdateLocFileName(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.UpdateLocFileName");

	struct
	{
		struct FString                 Filename;
		struct FString                 ReturnValue;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.IniLocPatcher.ClearCachedFiles
// (FUNC_Defined, FUNC_Public)

void UIniLocPatcher::ClearCachedFiles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.ClearCachedFiles");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.ClearReadFileDelegate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  (CPF_Parm, CPF_NeedCtorLink)

void UIniLocPatcher::ClearReadFileDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.ClearReadFileDelegate");

	struct
	{
		struct FScriptDelegate         ReadTitleFileCompleteDelegate;
	} params;
	params.ReadTitleFileCompleteDelegate = ReadTitleFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.AddReadFileDelegate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  (CPF_Parm, CPF_NeedCtorLink)

void UIniLocPatcher::AddReadFileDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.AddReadFileDelegate");

	struct
	{
		struct FScriptDelegate         ReadTitleFileCompleteDelegate;
	} params;
	params.ReadTitleFileCompleteDelegate = ReadTitleFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.AddFileToDownload
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UIniLocPatcher::AddFileToDownload(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.AddFileToDownload");

	struct
	{
		struct FString                 Filename;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.ProcessIniLocFile
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           bIsUnicode                     (CPF_Parm)
// TArray<unsigned char>          FileData                       (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UIniLocPatcher::ProcessIniLocFile(const struct FString& Filename, bool bIsUnicode, TArray<unsigned char>* FileData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.ProcessIniLocFile");

	struct
	{
		struct FString                 Filename;
		bool                           bIsUnicode;
		TArray<unsigned char>          FileData;
	} params;
	params.Filename = Filename;
	params.bIsUnicode = bIsUnicode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FileData != nullptr)
		*FileData = params.FileData;
}


// Function Engine.IniLocPatcher.CheckForAllFilesComplete
// (FUNC_Defined, FUNC_Public)

void UIniLocPatcher::CheckForAllFilesComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.CheckForAllFilesComplete");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.TriggerDownloadCompleteDelegates
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bSuccess                       (CPF_Parm)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UIniLocPatcher::TriggerDownloadCompleteDelegates(bool bSuccess, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.TriggerDownloadCompleteDelegates");

	struct
	{
		bool                           bSuccess;
		struct FString                 Filename;
	} params;
	params.bSuccess = bSuccess;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.OnFileCacheSaveComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UIniLocPatcher::OnFileCacheSaveComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.OnFileCacheSaveComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.OnFileCacheLoadComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UIniLocPatcher::OnFileCacheLoadComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.OnFileCacheLoadComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.OnDownloadFileComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UIniLocPatcher::OnDownloadFileComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.OnDownloadFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.StartLoadingFiles
// (FUNC_Defined, FUNC_Public)

void UIniLocPatcher::StartLoadingFiles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.StartLoadingFiles");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.OnRequestTitleFileListComplete
// (FUNC_Public)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// TArray<struct FString>         ResultStr                      (CPF_Parm, CPF_NeedCtorLink)

void UIniLocPatcher::OnRequestTitleFileListComplete(bool bWasSuccessful, TArray<struct FString> ResultStr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.OnRequestTitleFileListComplete");

	struct
	{
		bool                           bWasSuccessful;
		TArray<struct FString>         ResultStr;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.ResultStr = ResultStr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.DownloadFiles
// (FUNC_Defined, FUNC_Public)

void UIniLocPatcher::DownloadFiles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.DownloadFiles");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.Init
// (FUNC_Defined, FUNC_Public)

void UIniLocPatcher::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.OnAllTitleFilesCompleted
// (FUNC_Public, FUNC_Delegate)

void UIniLocPatcher::OnAllTitleFilesCompleted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.OnAllTitleFilesCompleted");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IniLocPatcher.OnReadTitleFileComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UIniLocPatcher::OnReadTitleFileComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IniLocPatcher.OnReadTitleFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interface_NavigationHandle.NotifyPathChanged
// (FUNC_Event, FUNC_Public)

void UInterface_NavigationHandle::NotifyPathChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interface_NavigationHandle.NotifyPathChanged");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interface_Speaker.Speak
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USoundCue*               Cue                            (CPF_Parm)

void UInterface_Speaker::Speak(class USoundCue* Cue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interface_Speaker.Speak");

	struct
	{
		class USoundCue*               Cue;
	} params;
	params.Cue = Cue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JsonObject.DecodeJson
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 Str                            (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// class UJsonObject*             ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UJsonObject* UJsonObject::STATIC_DecodeJson(const struct FString& Str)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.DecodeJson");

	struct
	{
		struct FString                 Str;
		class UJsonObject*             ReturnValue;
	} params;
	params.Str = Str;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JsonObject.EncodeJson
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UJsonObject*             Root                           (CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UJsonObject::STATIC_EncodeJson(class UJsonObject* Root)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.EncodeJson");

	struct
	{
		class UJsonObject*             Root;
		struct FString                 ReturnValue;
	} params;
	params.Root = Root;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JsonObject.SetBoolValue
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 Key                            (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// bool                           Value                          (CPF_Parm)

void UJsonObject::SetBoolValue(const struct FString& Key, bool Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.SetBoolValue");

	struct
	{
		struct FString                 Key;
		bool                           Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JsonObject.SetFloatValue
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 Key                            (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// float                          Value                          (CPF_Parm)

void UJsonObject::SetFloatValue(const struct FString& Key, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.SetFloatValue");

	struct
	{
		struct FString                 Key;
		float                          Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JsonObject.SetIntValue
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 Key                            (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// int                            Value                          (CPF_Parm)

void UJsonObject::SetIntValue(const struct FString& Key, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.SetIntValue");

	struct
	{
		struct FString                 Key;
		int                            Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JsonObject.SetStringValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 Key                            (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Value                          (CPF_Const, CPF_Parm, CPF_NeedCtorLink)

void UJsonObject::SetStringValue(const struct FString& Key, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.SetStringValue");

	struct
	{
		struct FString                 Key;
		struct FString                 Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JsonObject.SetObject
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 Key                            (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// class UJsonObject*             Object                         (CPF_Parm)

void UJsonObject::SetObject(const struct FString& Key, class UJsonObject* Object)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.SetObject");

	struct
	{
		struct FString                 Key;
		class UJsonObject*             Object;
	} params;
	params.Key = Key;
	params.Object = Object;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JsonObject.GetBoolValue
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 Key                            (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UJsonObject::GetBoolValue(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.GetBoolValue");

	struct
	{
		struct FString                 Key;
		bool                           ReturnValue;
	} params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JsonObject.GetFloatValue
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 Key                            (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UJsonObject::GetFloatValue(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.GetFloatValue");

	struct
	{
		struct FString                 Key;
		float                          ReturnValue;
	} params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JsonObject.GetIntValue
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 Key                            (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UJsonObject::GetIntValue(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.GetIntValue");

	struct
	{
		struct FString                 Key;
		int                            ReturnValue;
	} params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JsonObject.HasKey
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 Key                            (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UJsonObject::HasKey(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.HasKey");

	struct
	{
		struct FString                 Key;
		bool                           ReturnValue;
	} params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JsonObject.GetStringValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 Key                            (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UJsonObject::GetStringValue(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.GetStringValue");

	struct
	{
		struct FString                 Key;
		struct FString                 ReturnValue;
	} params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JsonObject.GetObject
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 Key                            (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// class UJsonObject*             ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UJsonObject* UJsonObject::GetObject(const struct FString& Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JsonObject.GetObject");

	struct
	{
		struct FString                 Key;
		class UJsonObject*             ReturnValue;
	} params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.RequiresMTXAuthorizationCode
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::RequiresMTXAuthorizationCode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.RequiresMTXAuthorizationCode");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.RequiresAuthorizationCode
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::RequiresAuthorizationCode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.RequiresAuthorizationCode");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.IsRequestingAuthorizationCode
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// struct FScriptDelegate         Callback                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::IsRequestingAuthorizationCode(const struct FUniqueNetId& PlayerID, const struct FScriptDelegate& Callback)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.IsRequestingAuthorizationCode");

	struct
	{
		struct FUniqueNetId            PlayerID;
		struct FScriptDelegate         Callback;
		bool                           ReturnValue;
	} params;
	params.PlayerID = PlayerID;
	params.Callback = Callback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.RequestAuthorizationCode
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// struct FScriptDelegate         Callback                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::RequestAuthorizationCode(const struct FUniqueNetId& PlayerID, const struct FScriptDelegate& Callback)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.RequestAuthorizationCode");

	struct
	{
		struct FUniqueNetId            PlayerID;
		struct FScriptDelegate         Callback;
		bool                           ReturnValue;
	} params;
	params.PlayerID = PlayerID;
	params.Callback = Callback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.OnReceivedAuthorizationCode
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bSuccess                       (CPF_Parm)
// struct FString                 AuthorizationCode              (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 EncryptedTicket                (CPF_Parm, CPF_NeedCtorLink)
// int                            IssuerID                       (CPF_Parm)

void UOnlineAuthInterface::OnReceivedAuthorizationCode(bool bSuccess, const struct FString& AuthorizationCode, const struct FString& EncryptedTicket, int IssuerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnReceivedAuthorizationCode");

	struct
	{
		bool                           bSuccess;
		struct FString                 AuthorizationCode;
		struct FString                 EncryptedTicket;
		int                            IssuerID;
	} params;
	params.bSuccess = bSuccess;
	params.AuthorizationCode = AuthorizationCode;
	params.EncryptedTicket = EncryptedTicket;
	params.IssuerID = IssuerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.GetServerAddr
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FIpAddr                 OutServerIP                    (CPF_Parm, CPF_OutParm)
// int                            OutServerPort                  (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::GetServerAddr(struct FIpAddr* OutServerIP, int* OutServerPort)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.GetServerAddr");

	struct
	{
		struct FIpAddr                 OutServerIP;
		int                            OutServerPort;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutServerIP != nullptr)
		*OutServerIP = params.OutServerIP;
	if (OutServerPort != nullptr)
		*OutServerPort = params.OutServerPort;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.GetServerUniqueId
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            OutServerUID                   (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::GetServerUniqueId(struct FUniqueNetId* OutServerUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.GetServerUniqueId");

	struct
	{
		struct FUniqueNetId            OutServerUID;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutServerUID != nullptr)
		*OutServerUID = params.OutServerUID;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.FindLocalServerAuthSession
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UPlayer*                 ClientConnection               (CPF_Parm)
// struct FLocalAuthSession       OutSessionInfo                 (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::FindLocalServerAuthSession(class UPlayer* ClientConnection, struct FLocalAuthSession* OutSessionInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.FindLocalServerAuthSession");

	struct
	{
		class UPlayer*                 ClientConnection;
		struct FLocalAuthSession       OutSessionInfo;
		bool                           ReturnValue;
	} params;
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.FindServerAuthSession
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UPlayer*                 ServerConnection               (CPF_Parm)
// struct FAuthSession            OutSessionInfo                 (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::FindServerAuthSession(class UPlayer* ServerConnection, struct FAuthSession* OutSessionInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.FindServerAuthSession");

	struct
	{
		class UPlayer*                 ServerConnection;
		struct FAuthSession            OutSessionInfo;
		bool                           ReturnValue;
	} params;
	params.ServerConnection = ServerConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.FindLocalClientAuthSession
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UPlayer*                 ServerConnection               (CPF_Parm)
// struct FLocalAuthSession       OutSessionInfo                 (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::FindLocalClientAuthSession(class UPlayer* ServerConnection, struct FLocalAuthSession* OutSessionInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.FindLocalClientAuthSession");

	struct
	{
		class UPlayer*                 ServerConnection;
		struct FLocalAuthSession       OutSessionInfo;
		bool                           ReturnValue;
	} params;
	params.ServerConnection = ServerConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.FindClientAuthSession
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UPlayer*                 ClientConnection               (CPF_Parm)
// struct FAuthSession            OutSessionInfo                 (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::FindClientAuthSession(class UPlayer* ClientConnection, struct FAuthSession* OutSessionInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.FindClientAuthSession");

	struct
	{
		class UPlayer*                 ClientConnection;
		struct FAuthSession            OutSessionInfo;
		bool                           ReturnValue;
	} params;
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.AllLocalServerAuthSessions
// (FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FLocalAuthSession       OutSessionInfo                 (CPF_Parm, CPF_OutParm)

void UOnlineAuthInterface::AllLocalServerAuthSessions(struct FLocalAuthSession* OutSessionInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AllLocalServerAuthSessions");

	struct
	{
		struct FLocalAuthSession       OutSessionInfo;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;
}


// Function Engine.OnlineAuthInterface.AllServerAuthSessions
// (FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FAuthSession            OutSessionInfo                 (CPF_Parm, CPF_OutParm)

void UOnlineAuthInterface::AllServerAuthSessions(struct FAuthSession* OutSessionInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AllServerAuthSessions");

	struct
	{
		struct FAuthSession            OutSessionInfo;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;
}


// Function Engine.OnlineAuthInterface.AllLocalClientAuthSessions
// (FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FLocalAuthSession       OutSessionInfo                 (CPF_Parm, CPF_OutParm)

void UOnlineAuthInterface::AllLocalClientAuthSessions(struct FLocalAuthSession* OutSessionInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AllLocalClientAuthSessions");

	struct
	{
		struct FLocalAuthSession       OutSessionInfo;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;
}


// Function Engine.OnlineAuthInterface.AllClientAuthSessions
// (FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FAuthSession            OutSessionInfo                 (CPF_Parm, CPF_OutParm)

void UOnlineAuthInterface::AllClientAuthSessions(struct FAuthSession* OutSessionInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AllClientAuthSessions");

	struct
	{
		struct FAuthSession            OutSessionInfo;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSessionInfo != nullptr)
		*OutSessionInfo = params.OutSessionInfo;
}


// Function Engine.OnlineAuthInterface.EndAllRemoteServerAuthSessions
// (FUNC_Public)

void UOnlineAuthInterface::EndAllRemoteServerAuthSessions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndAllRemoteServerAuthSessions");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.EndAllLocalServerAuthSessions
// (FUNC_Public)

void UOnlineAuthInterface::EndAllLocalServerAuthSessions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndAllLocalServerAuthSessions");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.EndRemoteServerAuthSession
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            ServerUID                      (CPF_Parm)
// struct FIpAddr                 ServerIP                       (CPF_Parm)

void UOnlineAuthInterface::EndRemoteServerAuthSession(const struct FUniqueNetId& ServerUID, const struct FIpAddr& ServerIP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndRemoteServerAuthSession");

	struct
	{
		struct FUniqueNetId            ServerUID;
		struct FIpAddr                 ServerIP;
	} params;
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.EndLocalServerAuthSession
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            ClientUID                      (CPF_Parm)
// struct FIpAddr                 ClientIP                       (CPF_Parm)

void UOnlineAuthInterface::EndLocalServerAuthSession(const struct FUniqueNetId& ClientUID, const struct FIpAddr& ClientIP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndLocalServerAuthSession");

	struct
	{
		struct FUniqueNetId            ClientUID;
		struct FIpAddr                 ClientIP;
	} params;
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.VerifyServerAuthSession
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            ServerUID                      (CPF_Parm)
// struct FIpAddr                 ServerIP                       (CPF_Parm)
// int                            AuthTicketUID                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::VerifyServerAuthSession(const struct FUniqueNetId& ServerUID, const struct FIpAddr& ServerIP, int AuthTicketUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.VerifyServerAuthSession");

	struct
	{
		struct FUniqueNetId            ServerUID;
		struct FIpAddr                 ServerIP;
		int                            AuthTicketUID;
		bool                           ReturnValue;
	} params;
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.CreateServerAuthSession
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            ClientUID                      (CPF_Parm)
// struct FIpAddr                 ClientIP                       (CPF_Parm)
// int                            ClientPort                     (CPF_Parm)
// int                            OutAuthTicketUID               (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::CreateServerAuthSession(const struct FUniqueNetId& ClientUID, const struct FIpAddr& ClientIP, int ClientPort, int* OutAuthTicketUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.CreateServerAuthSession");

	struct
	{
		struct FUniqueNetId            ClientUID;
		struct FIpAddr                 ClientIP;
		int                            ClientPort;
		int                            OutAuthTicketUID;
		bool                           ReturnValue;
	} params;
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;
	params.ClientPort = ClientPort;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutAuthTicketUID != nullptr)
		*OutAuthTicketUID = params.OutAuthTicketUID;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.EndAllRemoteClientAuthSessions
// (FUNC_Public)

void UOnlineAuthInterface::EndAllRemoteClientAuthSessions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndAllRemoteClientAuthSessions");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.EndAllLocalClientAuthSessions
// (FUNC_Public)

void UOnlineAuthInterface::EndAllLocalClientAuthSessions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndAllLocalClientAuthSessions");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.EndRemoteClientAuthSession
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            ClientUID                      (CPF_Parm)
// struct FIpAddr                 ClientIP                       (CPF_Parm)

void UOnlineAuthInterface::EndRemoteClientAuthSession(const struct FUniqueNetId& ClientUID, const struct FIpAddr& ClientIP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndRemoteClientAuthSession");

	struct
	{
		struct FUniqueNetId            ClientUID;
		struct FIpAddr                 ClientIP;
	} params;
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.EndLocalClientAuthSession
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            ServerUID                      (CPF_Parm)
// struct FIpAddr                 ServerIP                       (CPF_Parm)
// int                            ServerPort                     (CPF_Parm)

void UOnlineAuthInterface::EndLocalClientAuthSession(const struct FUniqueNetId& ServerUID, const struct FIpAddr& ServerIP, int ServerPort)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.EndLocalClientAuthSession");

	struct
	{
		struct FUniqueNetId            ServerUID;
		struct FIpAddr                 ServerIP;
		int                            ServerPort;
	} params;
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;
	params.ServerPort = ServerPort;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.VerifyClientAuthSession
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            ClientUID                      (CPF_Parm)
// struct FIpAddr                 ClientIP                       (CPF_Parm)
// int                            ClientPort                     (CPF_Parm)
// int                            AuthTicketUID                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::VerifyClientAuthSession(const struct FUniqueNetId& ClientUID, const struct FIpAddr& ClientIP, int ClientPort, int AuthTicketUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.VerifyClientAuthSession");

	struct
	{
		struct FUniqueNetId            ClientUID;
		struct FIpAddr                 ClientIP;
		int                            ClientPort;
		int                            AuthTicketUID;
		bool                           ReturnValue;
	} params;
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;
	params.ClientPort = ClientPort;
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.CreateClientAuthSession
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            ServerUID                      (CPF_Parm)
// struct FIpAddr                 ServerIP                       (CPF_Parm)
// int                            ServerPort                     (CPF_Parm)
// bool                           bSecure                        (CPF_Parm)
// int                            OutAuthTicketUID               (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::CreateClientAuthSession(const struct FUniqueNetId& ServerUID, const struct FIpAddr& ServerIP, int ServerPort, bool bSecure, int* OutAuthTicketUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.CreateClientAuthSession");

	struct
	{
		struct FUniqueNetId            ServerUID;
		struct FIpAddr                 ServerIP;
		int                            ServerPort;
		bool                           bSecure;
		int                            OutAuthTicketUID;
		bool                           ReturnValue;
	} params;
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;
	params.ServerPort = ServerPort;
	params.bSecure = bSecure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutAuthTicketUID != nullptr)
		*OutAuthTicketUID = params.OutAuthTicketUID;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.SendServerAuthRetryRequest
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::SendServerAuthRetryRequest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.SendServerAuthRetryRequest");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.SendClientAuthEndSessionRequest
// (FUNC_Public)
// Parameters:
// class UPlayer*                 ClientConnection               (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::SendClientAuthEndSessionRequest(class UPlayer* ClientConnection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.SendClientAuthEndSessionRequest");

	struct
	{
		class UPlayer*                 ClientConnection;
		bool                           ReturnValue;
	} params;
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.SendServerAuthResponse
// (FUNC_Public)
// Parameters:
// class UPlayer*                 ClientConnection               (CPF_Parm)
// int                            AuthTicketUID                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::SendServerAuthResponse(class UPlayer* ClientConnection, int AuthTicketUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.SendServerAuthResponse");

	struct
	{
		class UPlayer*                 ClientConnection;
		int                            AuthTicketUID;
		bool                           ReturnValue;
	} params;
	params.ClientConnection = ClientConnection;
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.SendClientAuthResponse
// (FUNC_Public)
// Parameters:
// int                            AuthTicketUID                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::SendClientAuthResponse(int AuthTicketUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.SendClientAuthResponse");

	struct
	{
		int                            AuthTicketUID;
		bool                           ReturnValue;
	} params;
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.SendServerAuthRequest
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            ServerUID                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::SendServerAuthRequest(const struct FUniqueNetId& ServerUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.SendServerAuthRequest");

	struct
	{
		struct FUniqueNetId            ServerUID;
		bool                           ReturnValue;
	} params;
	params.ServerUID = ServerUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.SendClientAuthRequest
// (FUNC_Public)
// Parameters:
// class UPlayer*                 ClientConnection               (CPF_Parm)
// struct FUniqueNetId            ClientUID                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::SendClientAuthRequest(class UPlayer* ClientConnection, const struct FUniqueNetId& ClientUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.SendClientAuthRequest");

	struct
	{
		class UPlayer*                 ClientConnection;
		struct FUniqueNetId            ClientUID;
		bool                           ReturnValue;
	} params;
	params.ClientConnection = ClientConnection;
	params.ClientUID = ClientUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAuthInterface.ClearServerConnectionCloseDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ServerConnectionCloseDelegate  (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::ClearServerConnectionCloseDelegate(const struct FScriptDelegate& ServerConnectionCloseDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearServerConnectionCloseDelegate");

	struct
	{
		struct FScriptDelegate         ServerConnectionCloseDelegate;
	} params;
	params.ServerConnectionCloseDelegate = ServerConnectionCloseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.AddServerConnectionCloseDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ServerConnectionCloseDelegate  (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::AddServerConnectionCloseDelegate(const struct FScriptDelegate& ServerConnectionCloseDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddServerConnectionCloseDelegate");

	struct
	{
		struct FScriptDelegate         ServerConnectionCloseDelegate;
	} params;
	params.ServerConnectionCloseDelegate = ServerConnectionCloseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.OnServerConnectionClose
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// class UPlayer*                 ServerConnection               (CPF_Parm)

void UOnlineAuthInterface::OnServerConnectionClose(class UPlayer* ServerConnection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnServerConnectionClose");

	struct
	{
		class UPlayer*                 ServerConnection;
	} params;
	params.ServerConnection = ServerConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.ClearClientConnectionCloseDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ClientConnectionCloseDelegate  (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::ClearClientConnectionCloseDelegate(const struct FScriptDelegate& ClientConnectionCloseDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearClientConnectionCloseDelegate");

	struct
	{
		struct FScriptDelegate         ClientConnectionCloseDelegate;
	} params;
	params.ClientConnectionCloseDelegate = ClientConnectionCloseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.AddClientConnectionCloseDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ClientConnectionCloseDelegate  (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::AddClientConnectionCloseDelegate(const struct FScriptDelegate& ClientConnectionCloseDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddClientConnectionCloseDelegate");

	struct
	{
		struct FScriptDelegate         ClientConnectionCloseDelegate;
	} params;
	params.ClientConnectionCloseDelegate = ClientConnectionCloseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.OnClientConnectionClose
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// class UPlayer*                 ClientConnection               (CPF_Parm)

void UOnlineAuthInterface::OnClientConnectionClose(class UPlayer* ClientConnection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnClientConnectionClose");

	struct
	{
		class UPlayer*                 ClientConnection;
	} params;
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.ClearServerAuthRetryRequestDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ServerAuthRetryRequestDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::ClearServerAuthRetryRequestDelegate(const struct FScriptDelegate& ServerAuthRetryRequestDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearServerAuthRetryRequestDelegate");

	struct
	{
		struct FScriptDelegate         ServerAuthRetryRequestDelegate;
	} params;
	params.ServerAuthRetryRequestDelegate = ServerAuthRetryRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.AddServerAuthRetryRequestDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ServerAuthRetryRequestDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::AddServerAuthRetryRequestDelegate(const struct FScriptDelegate& ServerAuthRetryRequestDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddServerAuthRetryRequestDelegate");

	struct
	{
		struct FScriptDelegate         ServerAuthRetryRequestDelegate;
	} params;
	params.ServerAuthRetryRequestDelegate = ServerAuthRetryRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.OnServerAuthRetryRequest
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// class UPlayer*                 ClientConnection               (CPF_Parm)

void UOnlineAuthInterface::OnServerAuthRetryRequest(class UPlayer* ClientConnection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnServerAuthRetryRequest");

	struct
	{
		class UPlayer*                 ClientConnection;
	} params;
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.ClearClientAuthEndSessionRequestDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ClientAuthEndSessionRequestDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::ClearClientAuthEndSessionRequestDelegate(const struct FScriptDelegate& ClientAuthEndSessionRequestDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearClientAuthEndSessionRequestDelegate");

	struct
	{
		struct FScriptDelegate         ClientAuthEndSessionRequestDelegate;
	} params;
	params.ClientAuthEndSessionRequestDelegate = ClientAuthEndSessionRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.AddClientAuthEndSessionRequestDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ClientAuthEndSessionRequestDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::AddClientAuthEndSessionRequestDelegate(const struct FScriptDelegate& ClientAuthEndSessionRequestDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddClientAuthEndSessionRequestDelegate");

	struct
	{
		struct FScriptDelegate         ClientAuthEndSessionRequestDelegate;
	} params;
	params.ClientAuthEndSessionRequestDelegate = ClientAuthEndSessionRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.OnClientAuthEndSessionRequest
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// class UPlayer*                 ServerConnection               (CPF_Parm)

void UOnlineAuthInterface::OnClientAuthEndSessionRequest(class UPlayer* ServerConnection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnClientAuthEndSessionRequest");

	struct
	{
		class UPlayer*                 ServerConnection;
	} params;
	params.ServerConnection = ServerConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.ClearServerAuthCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ServerAuthCompleteDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::ClearServerAuthCompleteDelegate(const struct FScriptDelegate& ServerAuthCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearServerAuthCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ServerAuthCompleteDelegate;
	} params;
	params.ServerAuthCompleteDelegate = ServerAuthCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.AddServerAuthCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ServerAuthCompleteDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::AddServerAuthCompleteDelegate(const struct FScriptDelegate& ServerAuthCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddServerAuthCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ServerAuthCompleteDelegate;
	} params;
	params.ServerAuthCompleteDelegate = ServerAuthCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.OnServerAuthComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bSuccess                       (CPF_Parm)
// struct FUniqueNetId            ServerUID                      (CPF_Parm)
// class UPlayer*                 ServerConnection               (CPF_Parm)
// struct FString                 ExtraInfo                      (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::OnServerAuthComplete(bool bSuccess, const struct FUniqueNetId& ServerUID, class UPlayer* ServerConnection, const struct FString& ExtraInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnServerAuthComplete");

	struct
	{
		bool                           bSuccess;
		struct FUniqueNetId            ServerUID;
		class UPlayer*                 ServerConnection;
		struct FString                 ExtraInfo;
	} params;
	params.bSuccess = bSuccess;
	params.ServerUID = ServerUID;
	params.ServerConnection = ServerConnection;
	params.ExtraInfo = ExtraInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.ClearClientAuthCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ClientAuthCompleteDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::ClearClientAuthCompleteDelegate(const struct FScriptDelegate& ClientAuthCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearClientAuthCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ClientAuthCompleteDelegate;
	} params;
	params.ClientAuthCompleteDelegate = ClientAuthCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.AddClientAuthCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ClientAuthCompleteDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::AddClientAuthCompleteDelegate(const struct FScriptDelegate& ClientAuthCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddClientAuthCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ClientAuthCompleteDelegate;
	} params;
	params.ClientAuthCompleteDelegate = ClientAuthCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.OnClientAuthComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bSuccess                       (CPF_Parm)
// struct FUniqueNetId            ClientUID                      (CPF_Parm)
// class UPlayer*                 ClientConnection               (CPF_Parm)
// struct FString                 ExtraInfo                      (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::OnClientAuthComplete(bool bSuccess, const struct FUniqueNetId& ClientUID, class UPlayer* ClientConnection, const struct FString& ExtraInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnClientAuthComplete");

	struct
	{
		bool                           bSuccess;
		struct FUniqueNetId            ClientUID;
		class UPlayer*                 ClientConnection;
		struct FString                 ExtraInfo;
	} params;
	params.bSuccess = bSuccess;
	params.ClientUID = ClientUID;
	params.ClientConnection = ClientConnection;
	params.ExtraInfo = ExtraInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.ClearServerAuthResponseDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ServerAuthResponseDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::ClearServerAuthResponseDelegate(const struct FScriptDelegate& ServerAuthResponseDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearServerAuthResponseDelegate");

	struct
	{
		struct FScriptDelegate         ServerAuthResponseDelegate;
	} params;
	params.ServerAuthResponseDelegate = ServerAuthResponseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.AddServerAuthResponseDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ServerAuthResponseDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::AddServerAuthResponseDelegate(const struct FScriptDelegate& ServerAuthResponseDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddServerAuthResponseDelegate");

	struct
	{
		struct FScriptDelegate         ServerAuthResponseDelegate;
	} params;
	params.ServerAuthResponseDelegate = ServerAuthResponseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.OnServerAuthResponse
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FUniqueNetId            ServerUID                      (CPF_Parm)
// struct FIpAddr                 ServerIP                       (CPF_Parm)
// int                            AuthTicketUID                  (CPF_Parm)

void UOnlineAuthInterface::OnServerAuthResponse(const struct FUniqueNetId& ServerUID, const struct FIpAddr& ServerIP, int AuthTicketUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnServerAuthResponse");

	struct
	{
		struct FUniqueNetId            ServerUID;
		struct FIpAddr                 ServerIP;
		int                            AuthTicketUID;
	} params;
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.ClearClientAuthResponseDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ClientAuthResponseDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::ClearClientAuthResponseDelegate(const struct FScriptDelegate& ClientAuthResponseDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearClientAuthResponseDelegate");

	struct
	{
		struct FScriptDelegate         ClientAuthResponseDelegate;
	} params;
	params.ClientAuthResponseDelegate = ClientAuthResponseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.AddClientAuthResponseDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ClientAuthResponseDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::AddClientAuthResponseDelegate(const struct FScriptDelegate& ClientAuthResponseDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddClientAuthResponseDelegate");

	struct
	{
		struct FScriptDelegate         ClientAuthResponseDelegate;
	} params;
	params.ClientAuthResponseDelegate = ClientAuthResponseDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.OnClientAuthResponse
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FUniqueNetId            ClientUID                      (CPF_Parm)
// struct FIpAddr                 ClientIP                       (CPF_Parm)
// int                            AuthTicketUID                  (CPF_Parm)

void UOnlineAuthInterface::OnClientAuthResponse(const struct FUniqueNetId& ClientUID, const struct FIpAddr& ClientIP, int AuthTicketUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnClientAuthResponse");

	struct
	{
		struct FUniqueNetId            ClientUID;
		struct FIpAddr                 ClientIP;
		int                            AuthTicketUID;
	} params;
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.ClearServerAuthRequestDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ServerAuthRequestDelegate      (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::ClearServerAuthRequestDelegate(const struct FScriptDelegate& ServerAuthRequestDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearServerAuthRequestDelegate");

	struct
	{
		struct FScriptDelegate         ServerAuthRequestDelegate;
	} params;
	params.ServerAuthRequestDelegate = ServerAuthRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.AddServerAuthRequestDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ServerAuthRequestDelegate      (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::AddServerAuthRequestDelegate(const struct FScriptDelegate& ServerAuthRequestDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddServerAuthRequestDelegate");

	struct
	{
		struct FScriptDelegate         ServerAuthRequestDelegate;
	} params;
	params.ServerAuthRequestDelegate = ServerAuthRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.OnServerAuthRequest
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// class UPlayer*                 ClientConnection               (CPF_Parm)
// struct FUniqueNetId            ClientUID                      (CPF_Parm)
// struct FIpAddr                 ClientIP                       (CPF_Parm)
// int                            ClientPort                     (CPF_Parm)

void UOnlineAuthInterface::OnServerAuthRequest(class UPlayer* ClientConnection, const struct FUniqueNetId& ClientUID, const struct FIpAddr& ClientIP, int ClientPort)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnServerAuthRequest");

	struct
	{
		class UPlayer*                 ClientConnection;
		struct FUniqueNetId            ClientUID;
		struct FIpAddr                 ClientIP;
		int                            ClientPort;
	} params;
	params.ClientConnection = ClientConnection;
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;
	params.ClientPort = ClientPort;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.ClearClientAuthRequestDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ClientAuthRequestDelegate      (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::ClearClientAuthRequestDelegate(const struct FScriptDelegate& ClientAuthRequestDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearClientAuthRequestDelegate");

	struct
	{
		struct FScriptDelegate         ClientAuthRequestDelegate;
	} params;
	params.ClientAuthRequestDelegate = ClientAuthRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.AddClientAuthRequestDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ClientAuthRequestDelegate      (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::AddClientAuthRequestDelegate(const struct FScriptDelegate& ClientAuthRequestDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddClientAuthRequestDelegate");

	struct
	{
		struct FScriptDelegate         ClientAuthRequestDelegate;
	} params;
	params.ClientAuthRequestDelegate = ClientAuthRequestDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.OnClientAuthRequest
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FUniqueNetId            ServerUID                      (CPF_Parm)
// struct FIpAddr                 ServerIP                       (CPF_Parm)
// int                            ServerPort                     (CPF_Parm)
// bool                           bSecure                        (CPF_Parm)

void UOnlineAuthInterface::OnClientAuthRequest(const struct FUniqueNetId& ServerUID, const struct FIpAddr& ServerIP, int ServerPort, bool bSecure)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnClientAuthRequest");

	struct
	{
		struct FUniqueNetId            ServerUID;
		struct FIpAddr                 ServerIP;
		int                            ServerPort;
		bool                           bSecure;
	} params;
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;
	params.ServerPort = ServerPort;
	params.bSecure = bSecure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.ClearAuthReadyDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         AuthReadyDelegate              (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::ClearAuthReadyDelegate(const struct FScriptDelegate& AuthReadyDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.ClearAuthReadyDelegate");

	struct
	{
		struct FScriptDelegate         AuthReadyDelegate;
	} params;
	params.AuthReadyDelegate = AuthReadyDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.AddAuthReadyDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         AuthReadyDelegate              (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAuthInterface::AddAuthReadyDelegate(const struct FScriptDelegate& AuthReadyDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.AddAuthReadyDelegate");

	struct
	{
		struct FScriptDelegate         AuthReadyDelegate;
	} params;
	params.AuthReadyDelegate = AuthReadyDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.OnAuthReady
// (FUNC_Public, FUNC_Delegate)

void UOnlineAuthInterface::OnAuthReady()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.OnAuthReady");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAuthInterface.IsReady
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAuthInterface::IsReady()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAuthInterface.IsReady");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineEventTracker.RaiseEvent
// (FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 EventName                      (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// TArray<struct FString>         EventParams                    (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineEventTracker::RaiseEvent(const struct FString& EventName, TArray<struct FString> EventParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineEventTracker.RaiseEvent");

	struct
	{
		struct FString                 EventName;
		TArray<struct FString>         EventParams;
		bool                           ReturnValue;
	} params;
	params.EventName = EventName;
	params.EventParams = EventParams;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineEventTracker.ShutDown
// (FUNC_Event, FUNC_Public)

void UOnlineEventTracker::ShutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineEventTracker.ShutDown");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineEventTracker.Init
// (FUNC_Event, FUNC_Public)

void UOnlineEventTracker::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineEventTracker.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineMatchmakingStats.StopTimer
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FMMStats_Timer          Timer                          (CPF_Parm, CPF_OutParm)

void UOnlineMatchmakingStats::StopTimer(struct FMMStats_Timer* Timer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMatchmakingStats.StopTimer");

	struct
	{
		struct FMMStats_Timer          Timer;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Timer != nullptr)
		*Timer = params.Timer;
}


// Function Engine.OnlineMatchmakingStats.StartTimer
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FMMStats_Timer          Timer                          (CPF_Parm, CPF_OutParm)

void UOnlineMatchmakingStats::StartTimer(struct FMMStats_Timer* Timer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMatchmakingStats.StartTimer");

	struct
	{
		struct FMMStats_Timer          Timer;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Timer != nullptr)
		*Timer = params.Timer;
}


// Function Engine.OnlinePlayerStorage.SetDefaultVersionNumber
// (FUNC_Native, FUNC_Public)

void UOnlinePlayerStorage::SetDefaultVersionNumber()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetDefaultVersionNumber");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerStorage.GetVersionNumber
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UOnlinePlayerStorage::GetVersionNumber()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetVersionNumber");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.AppendVersionToSettings
// (FUNC_Native, FUNC_Public)

void UOnlinePlayerStorage::AppendVersionToSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.AppendVersionToSettings");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerStorage.SetToDefaults
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UOnlinePlayerStorage::SetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetToDefaults");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerStorage.AddSettingFloat
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            SettingId                      (CPF_Parm)

void UOnlinePlayerStorage::AddSettingFloat(int SettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.AddSettingFloat");

	struct
	{
		int                            SettingId;
	} params;
	params.SettingId = SettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerStorage.AddSettingInt
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            SettingId                      (CPF_Parm)

void UOnlinePlayerStorage::AddSettingInt(int SettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.AddSettingInt");

	struct
	{
		int                            SettingId;
	} params;
	params.SettingId = SettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerStorage.GetRangedProfileSettingValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ProfileId                      (CPF_Parm)
// float                          OutValue                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::GetRangedProfileSettingValue(int ProfileId, float* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetRangedProfileSettingValue");

	struct
	{
		int                            ProfileId;
		float                          OutValue;
		bool                           ReturnValue;
	} params;
	params.ProfileId = ProfileId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.SetRangedProfileSettingValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ProfileId                      (CPF_Parm)
// float                          NewValue                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::SetRangedProfileSettingValue(int ProfileId, float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetRangedProfileSettingValue");

	struct
	{
		int                            ProfileId;
		float                          NewValue;
		bool                           ReturnValue;
	} params;
	params.ProfileId = ProfileId;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingRange
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ProfileId                      (CPF_Parm)
// float                          OutMinValue                    (CPF_Parm, CPF_OutParm)
// float                          OutMaxValue                    (CPF_Parm, CPF_OutParm)
// float                          RangeIncrement                 (CPF_Parm, CPF_OutParm)
// unsigned char                  bFormatAsInt                   (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingRange(int ProfileId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingRange");

	struct
	{
		int                            ProfileId;
		float                          OutMinValue;
		float                          OutMaxValue;
		float                          RangeIncrement;
		unsigned char                  bFormatAsInt;
		bool                           ReturnValue;
	} params;
	params.ProfileId = ProfileId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutMinValue != nullptr)
		*OutMinValue = params.OutMinValue;
	if (OutMaxValue != nullptr)
		*OutMaxValue = params.OutMaxValue;
	if (RangeIncrement != nullptr)
		*RangeIncrement = params.RangeIncrement;
	if (bFormatAsInt != nullptr)
		*bFormatAsInt = params.bFormatAsInt;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingMappingIds
// (FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ProfileId                      (CPF_Parm)
// TArray<int>                    Ids                            (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::STATIC_GetProfileSettingMappingIds(int ProfileId, TArray<int>* Ids)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingMappingIds");

	struct
	{
		int                            ProfileId;
		TArray<int>                    Ids;
		bool                           ReturnValue;
	} params;
	params.ProfileId = ProfileId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Ids != nullptr)
		*Ids = params.Ids;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingMappingType
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ProfileId                      (CPF_Parm)
// TEnumAsByte<enum class EPropertyValueMappingType> OutType                        (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingMappingType(int ProfileId, TEnumAsByte<enum class EPropertyValueMappingType>* OutType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingMappingType");

	struct
	{
		int                            ProfileId;
		TEnumAsByte<enum class EPropertyValueMappingType> OutType;
		bool                           ReturnValue;
	} params;
	params.ProfileId = ProfileId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutType != nullptr)
		*OutType = params.OutType;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.SetProfileSettingValueFloat
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// float                          Value                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::SetProfileSettingValueFloat(int ProfileSettingId, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetProfileSettingValueFloat");

	struct
	{
		int                            ProfileSettingId;
		float                          Value;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.SetProfileSettingValueInt
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// int                            Value                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::SetProfileSettingValueInt(int ProfileSettingId, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetProfileSettingValueInt");

	struct
	{
		int                            ProfileSettingId;
		int                            Value;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.SetProfileSettingValueId
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// int                            Value                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::SetProfileSettingValueId(int ProfileSettingId, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetProfileSettingValueId");

	struct
	{
		int                            ProfileSettingId;
		int                            Value;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValueFloat
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// float                          Value                          (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingValueFloat(int ProfileSettingId, float* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueFloat");

	struct
	{
		int                            ProfileSettingId;
		float                          Value;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValueInt
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// int                            Value                          (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingValueInt(int ProfileSettingId, int* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueInt");

	struct
	{
		int                            ProfileSettingId;
		int                            Value;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValueFromListIndex
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// int                            ListIndex                      (CPF_Parm)
// int                            Value                          (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingValueFromListIndex(int ProfileSettingId, int ListIndex, int* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueFromListIndex");

	struct
	{
		int                            ProfileSettingId;
		int                            ListIndex;
		int                            Value;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValueId
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// int                            ValueId                        (CPF_Parm, CPF_OutParm)
// int                            ListIndex                      (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingValueId(int ProfileSettingId, int* ValueId, int* ListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueId");

	struct
	{
		int                            ProfileSettingId;
		int                            ValueId;
		int                            ListIndex;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueId != nullptr)
		*ValueId = params.ValueId;
	if (ListIndex != nullptr)
		*ListIndex = params.ListIndex;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.SetProfileSettingValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// struct FString                 NewValue                       (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::SetProfileSettingValue(int ProfileSettingId, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetProfileSettingValue");

	struct
	{
		int                            ProfileSettingId;
		struct FString                 NewValue;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.SetProfileSettingValueByName
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ProfileSettingName             (CPF_Parm)
// struct FString                 NewValue                       (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::SetProfileSettingValueByName(const struct FName& ProfileSettingName, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.SetProfileSettingValueByName");

	struct
	{
		struct FName                   ProfileSettingName;
		struct FString                 NewValue;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValueByName
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ProfileSettingName             (CPF_Parm)
// struct FString                 Value                          (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingValueByName(const struct FName& ProfileSettingName, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueByName");

	struct
	{
		struct FName                   ProfileSettingName;
		struct FString                 Value;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValues
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// TArray<struct FName>           Values                         (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingValues(int ProfileSettingId, TArray<struct FName>* Values)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValues");

	struct
	{
		int                            ProfileSettingId;
		TArray<struct FName>           Values;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Values != nullptr)
		*Values = params.Values;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValueName
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName UOnlinePlayerStorage::GetProfileSettingValueName(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValueName");

	struct
	{
		int                            ProfileSettingId;
		struct FName                   ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingValue
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// struct FString                 Value                          (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            ValueMapID                     (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingValue(int ProfileSettingId, int ValueMapID, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingValue");

	struct
	{
		int                            ProfileSettingId;
		struct FString                 Value;
		int                            ValueMapID;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;
	params.ValueMapID = ValueMapID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.IsProfileSettingIdMapped
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::IsProfileSettingIdMapped(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.IsProfileSettingIdMapped");

	struct
	{
		int                            ProfileSettingId;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.FindDefaultProfileMappingIndexByName
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FName                   ProfileSettingName             (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UOnlinePlayerStorage::STATIC_FindDefaultProfileMappingIndexByName(const struct FName& ProfileSettingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.FindDefaultProfileMappingIndexByName");

	struct
	{
		struct FName                   ProfileSettingName;
		int                            ReturnValue;
	} params;
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.FindProfileMappingIndexByName
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ProfileSettingName             (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UOnlinePlayerStorage::FindProfileMappingIndexByName(const struct FName& ProfileSettingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.FindProfileMappingIndexByName");

	struct
	{
		struct FName                   ProfileSettingName;
		int                            ReturnValue;
	} params;
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.FindProfileMappingIndex
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UOnlinePlayerStorage::FindProfileMappingIndex(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.FindProfileMappingIndex");

	struct
	{
		int                            ProfileSettingId;
		int                            ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.FindProfileSettingIndex
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UOnlinePlayerStorage::FindProfileSettingIndex(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.FindProfileSettingIndex");

	struct
	{
		int                            ProfileSettingId;
		int                            ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingColumnHeader
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UOnlinePlayerStorage::GetProfileSettingColumnHeader(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingColumnHeader");

	struct
	{
		int                            ProfileSettingId;
		struct FString                 ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingName
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName UOnlinePlayerStorage::GetProfileSettingName(int ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingName");

	struct
	{
		int                            ProfileSettingId;
		struct FName                   ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerStorage.GetProfileSettingId
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ProfileSettingName             (CPF_Parm)
// int                            ProfileSettingId               (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerStorage::GetProfileSettingId(const struct FName& ProfileSettingName, int* ProfileSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerStorage.GetProfileSettingId");

	struct
	{
		struct FName                   ProfileSettingName;
		int                            ProfileSettingId;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingName = ProfileSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ProfileSettingId != nullptr)
		*ProfileSettingId = params.ProfileSettingId;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.ModifyAvailableProfileSettings
// (FUNC_Event, FUNC_Public)

void UOnlineProfileSettings::ModifyAvailableProfileSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.ModifyAvailableProfileSettings");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineProfileSettings.AppendVersionToReadIds
// (FUNC_Native, FUNC_Public)

void UOnlineProfileSettings::AppendVersionToReadIds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.AppendVersionToReadIds");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineProfileSettings.SetToDefaults
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UOnlineProfileSettings::SetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.SetToDefaults");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultFloat
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// float                          DefaultFloat                   (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineProfileSettings::GetProfileSettingDefaultFloat(int ProfileSettingId, float* DefaultFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingDefaultFloat");

	struct
	{
		int                            ProfileSettingId;
		float                          DefaultFloat;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DefaultFloat != nullptr)
		*DefaultFloat = params.DefaultFloat;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultInt
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// int                            DefaultInt                     (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineProfileSettings::GetProfileSettingDefaultInt(int ProfileSettingId, int* DefaultInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingDefaultInt");

	struct
	{
		int                            ProfileSettingId;
		int                            DefaultInt;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DefaultInt != nullptr)
		*DefaultInt = params.DefaultInt;

	return params.ReturnValue;
}


// Function Engine.OnlineProfileSettings.GetProfileSettingDefaultId
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ProfileSettingId               (CPF_Parm)
// int                            DefaultId                      (CPF_Parm, CPF_OutParm)
// int                            ListIndex                      (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineProfileSettings::GetProfileSettingDefaultId(int ProfileSettingId, int* DefaultId, int* ListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineProfileSettings.GetProfileSettingDefaultId");

	struct
	{
		int                            ProfileSettingId;
		int                            DefaultId;
		int                            ListIndex;
		bool                           ReturnValue;
	} params;
	params.ProfileSettingId = ProfileSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DefaultId != nullptr)
		*DefaultId = params.DefaultId;
	if (ListIndex != nullptr)
		*ListIndex = params.ListIndex;

	return params.ReturnValue;
}


// Function Engine.OnlineStats.GetViewName
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ViewId                         (CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName UOnlineStats::GetViewName(int ViewId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStats.GetViewName");

	struct
	{
		int                            ViewId;
		struct FName                   ReturnValue;
	} params;
	params.ViewId = ViewId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStats.GetViewId
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ViewName                       (CPF_Parm)
// int                            ViewId                         (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStats::GetViewId(const struct FName& ViewName, int* ViewId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStats.GetViewId");

	struct
	{
		struct FName                   ViewName;
		int                            ViewId;
		bool                           ReturnValue;
	} params;
	params.ViewName = ViewName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ViewId != nullptr)
		*ViewId = params.ViewId;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.GetRankForPlayer
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UOnlineStatsRead::GetRankForPlayer(const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.GetRankForPlayer");

	struct
	{
		struct FUniqueNetId            PlayerID;
		int                            ReturnValue;
	} params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.AddPlayer
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 PlayerName                     (CPF_Parm, CPF_NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)

void UOnlineStatsRead::AddPlayer(const struct FString& PlayerName, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.AddPlayer");

	struct
	{
		struct FString                 PlayerName;
		struct FUniqueNetId            PlayerID;
	} params;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsRead.IsStatZero
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// int                            StatColumnNo                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsRead::IsStatZero(const struct FUniqueNetId& PlayerID, int StatColumnNo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.IsStatZero");

	struct
	{
		struct FUniqueNetId            PlayerID;
		int                            StatColumnNo;
		bool                           ReturnValue;
	} params;
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.GetStatValueForPlayerAsString
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// int                            StatColumnNo                   (CPF_Parm)
// struct FString                 StatValue                      (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsRead::GetStatValueForPlayerAsString(const struct FUniqueNetId& PlayerID, int StatColumnNo, struct FString* StatValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.GetStatValueForPlayerAsString");

	struct
	{
		struct FUniqueNetId            PlayerID;
		int                            StatColumnNo;
		struct FString                 StatValue;
		bool                           ReturnValue;
	} params;
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StatValue != nullptr)
		*StatValue = params.StatValue;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.SetFloatStatValueForPlayer
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// int                            StatColumnNo                   (CPF_Parm)
// float                          StatValue                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsRead::SetFloatStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, float StatValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.SetFloatStatValueForPlayer");

	struct
	{
		struct FUniqueNetId            PlayerID;
		int                            StatColumnNo;
		float                          StatValue;
		bool                           ReturnValue;
	} params;
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;
	params.StatValue = StatValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.GetFloatStatValueForPlayer
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// int                            StatColumnNo                   (CPF_Parm)
// float                          StatValue                      (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsRead::GetFloatStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, float* StatValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.GetFloatStatValueForPlayer");

	struct
	{
		struct FUniqueNetId            PlayerID;
		int                            StatColumnNo;
		float                          StatValue;
		bool                           ReturnValue;
	} params;
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StatValue != nullptr)
		*StatValue = params.StatValue;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.SetIntStatValueForPlayer
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// int                            StatColumnNo                   (CPF_Parm)
// int                            StatValue                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsRead::SetIntStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, int StatValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.SetIntStatValueForPlayer");

	struct
	{
		struct FUniqueNetId            PlayerID;
		int                            StatColumnNo;
		int                            StatValue;
		bool                           ReturnValue;
	} params;
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;
	params.StatValue = StatValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.GetIntStatValueForPlayer
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// int                            StatColumnNo                   (CPF_Parm)
// int                            StatValue                      (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsRead::GetIntStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, int* StatValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.GetIntStatValueForPlayer");

	struct
	{
		struct FUniqueNetId            PlayerID;
		int                            StatColumnNo;
		int                            StatValue;
		bool                           ReturnValue;
	} params;
	params.PlayerID = PlayerID;
	params.StatColumnNo = StatColumnNo;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StatValue != nullptr)
		*StatValue = params.StatValue;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsRead.OnReadComplete
// (FUNC_Event, FUNC_Public)

void UOnlineStatsRead::OnReadComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsRead.OnReadComplete");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.DecrementIntStat
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            StatId                         (CPF_Parm)
// int                            DecBy                          (CPF_OptionalParm, CPF_Parm)

void UOnlineStatsWrite::DecrementIntStat(int StatId, int DecBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.DecrementIntStat");

	struct
	{
		int                            StatId;
		int                            DecBy;
	} params;
	params.StatId = StatId;
	params.DecBy = DecBy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.DecrementFloatStat
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            StatId                         (CPF_Parm)
// float                          DecBy                          (CPF_OptionalParm, CPF_Parm)

void UOnlineStatsWrite::DecrementFloatStat(int StatId, float DecBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.DecrementFloatStat");

	struct
	{
		int                            StatId;
		float                          DecBy;
	} params;
	params.StatId = StatId;
	params.DecBy = DecBy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.IncrementIntStat
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            StatId                         (CPF_Parm)
// int                            IncBy                          (CPF_OptionalParm, CPF_Parm)

void UOnlineStatsWrite::IncrementIntStat(int StatId, int IncBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.IncrementIntStat");

	struct
	{
		int                            StatId;
		int                            IncBy;
	} params;
	params.StatId = StatId;
	params.IncBy = IncBy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.IncrementFloatStat
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            StatId                         (CPF_Parm)
// float                          IncBy                          (CPF_OptionalParm, CPF_Parm)

void UOnlineStatsWrite::IncrementFloatStat(int StatId, float IncBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.IncrementFloatStat");

	struct
	{
		int                            StatId;
		float                          IncBy;
	} params;
	params.StatId = StatId;
	params.IncBy = IncBy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.SetIntStat
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            StatId                         (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UOnlineStatsWrite::SetIntStat(int StatId, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.SetIntStat");

	struct
	{
		int                            StatId;
		int                            Value;
	} params;
	params.StatId = StatId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.SetFloatStat
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            StatId                         (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UOnlineStatsWrite::SetFloatStat(int StatId, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.SetFloatStat");

	struct
	{
		int                            StatId;
		float                          Value;
	} params;
	params.StatId = StatId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite.GetStatName
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            StatId                         (CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName UOnlineStatsWrite::GetStatName(int StatId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.GetStatName");

	struct
	{
		int                            StatId;
		struct FName                   ReturnValue;
	} params;
	params.StatId = StatId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsWrite.GetStatId
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   StatName                       (CPF_Parm)
// int                            StatId                         (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsWrite::GetStatId(const struct FName& StatName, int* StatId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.GetStatId");

	struct
	{
		struct FName                   StatName;
		int                            StatId;
		bool                           ReturnValue;
	} params;
	params.StatName = StatName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StatId != nullptr)
		*StatId = params.StatId;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsWrite.OnStatsWriteComplete
// (FUNC_Public, FUNC_Delegate)

void UOnlineStatsWrite::OnStatsWriteComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite.OnStatsWriteComplete");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.ShowRestrictionMessage
// (FUNC_Public)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilege> Privilege                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::ShowRestrictionMessage(int ControllerId, TEnumAsByte<enum class EFeaturePrivilege> Privilege)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.ShowRestrictionMessage");

	struct
	{
		int                            ControllerId;
		TEnumAsByte<enum class EFeaturePrivilege> Privilege;
		bool                           ReturnValue;
	} params;
	params.ControllerId = ControllerId;
	params.Privilege = Privilege;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.IsOriginalAppOwner
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::IsOriginalAppOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.IsOriginalAppOwner");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.CanPlayersTextChat
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// struct FUniqueNetId            TargetId                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::CanPlayersTextChat(const struct FUniqueNetId& PlayerID, const struct FUniqueNetId& TargetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.CanPlayersTextChat");

	struct
	{
		struct FUniqueNetId            PlayerID;
		struct FUniqueNetId            TargetId;
		bool                           ReturnValue;
	} params;
	params.PlayerID = PlayerID;
	params.TargetId = TargetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.ShowHelpUI
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::ShowHelpUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.ShowHelpUI");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.ResetStats
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bResetAchievements             (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::ResetStats(bool bResetAchievements)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.ResetStats");

	struct
	{
		bool                           bResetAchievements;
		bool                           ReturnValue;
	} params;
	params.bResetAchievements = bResetAchievements;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.FinishOnlineGameSession
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ServerID                       (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSubsystem::FinishOnlineGameSession(const struct FString& ServerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.FinishOnlineGameSession");

	struct
	{
		struct FString                 ServerID;
	} params;
	params.ServerID = ServerID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.StartOnlineGameSession
// (FUNC_Public)
// Parameters:
// struct FString                 ServerID                       (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSubsystem::StartOnlineGameSession(const struct FString& ServerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.StartOnlineGameSession");

	struct
	{
		struct FString                 ServerID;
	} params;
	params.ServerID = ServerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.ClearSystemUserControllerPairingChangedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         PairingChangeDelegate          (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSubsystem::ClearSystemUserControllerPairingChangedDelegate(const struct FScriptDelegate& PairingChangeDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.ClearSystemUserControllerPairingChangedDelegate");

	struct
	{
		struct FScriptDelegate         PairingChangeDelegate;
	} params;
	params.PairingChangeDelegate = PairingChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.AddSystemUserControllerPairingChangedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         PairingChangeDelegate          (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSubsystem::AddSystemUserControllerPairingChangedDelegate(const struct FScriptDelegate& PairingChangeDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.AddSystemUserControllerPairingChangedDelegate");

	struct
	{
		struct FScriptDelegate         PairingChangeDelegate;
	} params;
	params.PairingChangeDelegate = PairingChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.OnSystemUserControllerPairingChanged
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// int                            NewLocalUserNum                (CPF_Parm)
// int                            PreviousLocalUserNum           (CPF_Parm)

void UOnlineSubsystem::OnSystemUserControllerPairingChanged(int NewLocalUserNum, int PreviousLocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.OnSystemUserControllerPairingChanged");

	struct
	{
		int                            NewLocalUserNum;
		int                            PreviousLocalUserNum;
	} params;
	params.NewLocalUserNum = NewLocalUserNum;
	params.PreviousLocalUserNum = PreviousLocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.IsAchievementUnlocked
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            AchievementId                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::IsAchievementUnlocked(unsigned char LocalUserNum, int AchievementId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.IsAchievementUnlocked");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            AchievementId;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.AchievementId = AchievementId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.IsRichPresenceLocalized
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::IsRichPresenceLocalized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.IsRichPresenceLocalized");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.UpdateGameProgress
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalPlayerNum                 (CPF_Parm)
// float                          Progress                       (CPF_Parm)

void UOnlineSubsystem::UpdateGameProgress(unsigned char LocalPlayerNum, float Progress)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.UpdateGameProgress");

	struct
	{
		unsigned char                  LocalPlayerNum;
		float                          Progress;
	} params;
	params.LocalPlayerNum = LocalPlayerNum;
	params.Progress = Progress;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.ClearAccountPickerInput
// (FUNC_Public)

void UOnlineSubsystem::ClearAccountPickerInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.ClearAccountPickerInput");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.LookForAccountPickerInput
// (FUNC_Public)

void UOnlineSubsystem::LookForAccountPickerInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.LookForAccountPickerInput");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.AddPlayerToSession
// (FUNC_Public)
// Parameters:
// unsigned char                  ControllerId                   (CPF_Parm)

void UOnlineSubsystem::AddPlayerToSession(unsigned char ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.AddPlayerToSession");

	struct
	{
		unsigned char                  ControllerId;
	} params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.ClearPrimaryPlayer
// (FUNC_Public)

void UOnlineSubsystem::ClearPrimaryPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.ClearPrimaryPlayer");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.RemoveUserAssociation
// (FUNC_Public)
// Parameters:
// unsigned char                  ControllerId                   (CPF_Parm)

void UOnlineSubsystem::RemoveUserAssociation(unsigned char ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.RemoveUserAssociation");

	struct
	{
		unsigned char                  ControllerId;
	} params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.MapEnd
// (FUNC_Public)

void UOnlineSubsystem::MapEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.MapEnd");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.MapStart
// (FUNC_Public)

void UOnlineSubsystem::MapStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.MapStart");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.OnlineMatchEnd
// (FUNC_Public)

void UOnlineSubsystem::OnlineMatchEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.OnlineMatchEnd");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.OnlineMatchStart
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 MapName                        (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSubsystem::OnlineMatchStart(const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.OnlineMatchStart");

	struct
	{
		struct FString                 MapName;
	} params;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.SetSessionDifficultyLevel
// (FUNC_Public)
// Parameters:
// int                            DifficultyLevel                (CPF_Parm)

void UOnlineSubsystem::SetSessionDifficultyLevel(int DifficultyLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetSessionDifficultyLevel");

	struct
	{
		int                            DifficultyLevel;
	} params;
	params.DifficultyLevel = DifficultyLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.SetSessionGameplayModeName
// (FUNC_Public)
// Parameters:
// struct FName                   GameplayModeName               (CPF_Parm)

void UOnlineSubsystem::SetSessionGameplayModeName(const struct FName& GameplayModeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetSessionGameplayModeName");

	struct
	{
		struct FName                   GameplayModeName;
	} params;
	params.GameplayModeName = GameplayModeName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.SetSessionGameplayMode
// (FUNC_Public)
// Parameters:
// int                            GameplayMode                   (CPF_Parm)

void UOnlineSubsystem::SetSessionGameplayMode(int GameplayMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetSessionGameplayMode");

	struct
	{
		int                            GameplayMode;
	} params;
	params.GameplayMode = GameplayMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.PrintDebugInfo
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class UDebugDrawer*            Drawer                         (CPF_Parm)

void UOnlineSubsystem::PrintDebugInfo(class UDebugDrawer* Drawer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.PrintDebugInfo");

	struct
	{
		class UDebugDrawer*            Drawer;
	} params;
	params.Drawer = Drawer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.GetOnlinePlatformFromName
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 PlatformName                   (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class OnlinePlatform> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class OnlinePlatform> UOnlineSubsystem::STATIC_GetOnlinePlatformFromName(const struct FString& PlatformName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.GetOnlinePlatformFromName");

	struct
	{
		struct FString                 PlatformName;
		TEnumAsByte<enum class OnlinePlatform> ReturnValue;
	} params;
	params.PlatformName = PlatformName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.GetPlatformName
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class OnlinePlatform> PlatformType                   (CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UOnlineSubsystem::STATIC_GetPlatformName(TEnumAsByte<enum class OnlinePlatform> PlatformType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.GetPlatformName");

	struct
	{
		TEnumAsByte<enum class OnlinePlatform> PlatformType;
		struct FString                 ReturnValue;
	} params;
	params.PlatformType = PlatformType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.IsEnabled
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.IsEnabled");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetPlayedWith
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (CPF_Const, CPF_Parm)

void UOnlineSubsystem::SetPlayedWith(const struct FUniqueNetId& PlayerNetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetPlayedWith");

	struct
	{
		struct FUniqueNetId            PlayerNetId;
	} params;
	params.PlayerNetId = PlayerNetId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.ReadOnlineAvatar
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (CPF_Const, CPF_Parm)
// TEnumAsByte<enum class AvatarSize> Size                           (CPF_Parm)
// struct FScriptDelegate         ReadOnlineAvatarCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSubsystem::ReadOnlineAvatar(const struct FUniqueNetId& PlayerNetId, TEnumAsByte<enum class AvatarSize> Size, const struct FScriptDelegate& ReadOnlineAvatarCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.ReadOnlineAvatar");

	struct
	{
		struct FUniqueNetId            PlayerNetId;
		TEnumAsByte<enum class AvatarSize> Size;
		struct FScriptDelegate         ReadOnlineAvatarCompleteDelegate;
	} params;
	params.PlayerNetId = PlayerNetId;
	params.Size = Size;
	params.ReadOnlineAvatarCompleteDelegate = ReadOnlineAvatarCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.OnReadOnlineAvatarComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FUniqueNetId            PlayerNetId                    (CPF_Const, CPF_Parm)
// class UTexture*                Avatar                         (CPF_Parm)
// struct FString                 OnlinePlayerName               (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSubsystem::OnReadOnlineAvatarComplete(const struct FUniqueNetId& PlayerNetId, class UTexture* Avatar, const struct FString& OnlinePlayerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.OnReadOnlineAvatarComplete");

	struct
	{
		struct FUniqueNetId            PlayerNetId;
		class UTexture*                Avatar;
		struct FString                 OnlinePlayerName;
	} params;
	params.PlayerNetId = PlayerNetId;
	params.Avatar = Avatar;
	params.OnlinePlayerName = OnlinePlayerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.SetDebugSpewLevel
// (FUNC_Public)
// Parameters:
// int                            DebugSpewLevel                 (CPF_Parm)

void UOnlineSubsystem::SetDebugSpewLevel(int DebugSpewLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetDebugSpewLevel");

	struct
	{
		int                            DebugSpewLevel;
	} params;
	params.DebugSpewLevel = DebugSpewLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.DumpVoiceRegistration
// (FUNC_Public)

void UOnlineSubsystem::DumpVoiceRegistration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.DumpVoiceRegistration");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.DumpSessionState
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)

void UOnlineSubsystem::DumpSessionState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.DumpSessionState");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.DumpGameSettings
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class UOnlineGameSettings*     GameSettings                   (CPF_Const, CPF_Parm)

void UOnlineSubsystem::STATIC_DumpGameSettings(class UOnlineGameSettings* GameSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.DumpGameSettings");

	struct
	{
		class UOnlineGameSettings*     GameSettings;
	} params;
	params.GameSettings = GameSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.GetNumSupportedLogins
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UOnlineSubsystem::STATIC_GetNumSupportedLogins()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.GetNumSupportedLogins");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.GetBuildUniqueId
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UOnlineSubsystem::GetBuildUniqueId()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.GetBuildUniqueId");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.GetPlayerUniqueNetIdFromIndex
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// int                            UserIndex                      (CPF_Parm)
// struct FUniqueNetId            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FUniqueNetId UOnlineSubsystem::GetPlayerUniqueNetIdFromIndex(int UserIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.GetPlayerUniqueNetIdFromIndex");

	struct
	{
		int                            UserIndex;
		struct FUniqueNetId            ReturnValue;
	} params;
	params.UserIndex = UserIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.StringToUniqueLobbyId
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 UniqueNetIdString              (CPF_Parm, CPF_NeedCtorLink)
// struct FUniqueLobbyId          out_UniqueId                   (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::STATIC_StringToUniqueLobbyId(const struct FString& UniqueNetIdString, struct FUniqueLobbyId* out_UniqueId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.StringToUniqueLobbyId");

	struct
	{
		struct FString                 UniqueNetIdString;
		struct FUniqueLobbyId          out_UniqueId;
		bool                           ReturnValue;
	} params;
	params.UniqueNetIdString = UniqueNetIdString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_UniqueId != nullptr)
		*out_UniqueId = params.out_UniqueId;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.UniqueLobbyIdToString
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          IdToConvert                    (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UOnlineSubsystem::STATIC_UniqueLobbyIdToString(struct FUniqueLobbyId* IdToConvert)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.UniqueLobbyIdToString");

	struct
	{
		struct FUniqueLobbyId          IdToConvert;
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IdToConvert != nullptr)
		*IdToConvert = params.IdToConvert;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.StringToUniqueNetId
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 UniqueNetIdString              (CPF_Parm, CPF_NeedCtorLink)
// struct FUniqueNetId            out_UniqueId                   (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::STATIC_StringToUniqueNetId(const struct FString& UniqueNetIdString, struct FUniqueNetId* out_UniqueId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.StringToUniqueNetId");

	struct
	{
		struct FString                 UniqueNetIdString;
		struct FUniqueNetId            out_UniqueId;
		bool                           ReturnValue;
	} params;
	params.UniqueNetIdString = UniqueNetIdString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_UniqueId != nullptr)
		*out_UniqueId = params.out_UniqueId;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.UniqueNetIdToString
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            IdToConvert                    (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UOnlineSubsystem::STATIC_UniqueNetIdToString(struct FUniqueNetId* IdToConvert)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.UniqueNetIdToString");

	struct
	{
		struct FUniqueNetId            IdToConvert;
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IdToConvert != nullptr)
		*IdToConvert = params.IdToConvert;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.GetNamedInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   InterfaceName                  (CPF_Parm)
// class UObject*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UObject* UOnlineSubsystem::GetNamedInterface(const struct FName& InterfaceName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.GetNamedInterface");

	struct
	{
		struct FName                   InterfaceName;
		class UObject*                 ReturnValue;
	} params;
	params.InterfaceName = InterfaceName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetNamedInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   InterfaceName                  (CPF_Parm)
// class UObject*                 NewInterface                   (CPF_Parm)

void UOnlineSubsystem::SetNamedInterface(const struct FName& InterfaceName, class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetNamedInterface");

	struct
	{
		struct FName                   InterfaceName;
		class UObject*                 NewInterface;
	} params;
	params.InterfaceName = InterfaceName;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.SetCommunityContentInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 InCommunityContentInterface    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetCommunityContentInterface(class UObject* InCommunityContentInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetCommunityContentInterface");

	struct
	{
		class UObject*                 InCommunityContentInterface;
		bool                           ReturnValue;
	} params;
	params.InCommunityContentInterface = InCommunityContentInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetGameDVRInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 InGameDVRInterface             (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetGameDVRInterface(class UObject* InGameDVRInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetGameDVRInterface");

	struct
	{
		class UObject*                 InGameDVRInterface;
		bool                           ReturnValue;
	} params;
	params.InGameDVRInterface = InGameDVRInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetSharedCloudInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 InCloudInterface               (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetSharedCloudInterface(class UObject* InCloudInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetSharedCloudInterface");

	struct
	{
		class UObject*                 InCloudInterface;
		bool                           ReturnValue;
	} params;
	params.InCloudInterface = InCloudInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetUserCloudInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 InCloudInterface               (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetUserCloudInterface(class UObject* InCloudInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetUserCloudInterface");

	struct
	{
		class UObject*                 InCloudInterface;
		bool                           ReturnValue;
	} params;
	params.InCloudInterface = InCloudInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetAuthInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 InAuthInterface                (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetAuthInterface(class UObject* InAuthInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetAuthInterface");

	struct
	{
		class UObject*                 InAuthInterface;
		bool                           ReturnValue;
	} params;
	params.InAuthInterface = InAuthInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetSocialInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 InSocialInterface              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetSocialInterface(class UObject* InSocialInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetSocialInterface");

	struct
	{
		class UObject*                 InSocialInterface;
		bool                           ReturnValue;
	} params;
	params.InSocialInterface = InSocialInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetTitleFileCacheInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 NewInterface                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetTitleFileCacheInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetTitleFileCacheInterface");

	struct
	{
		class UObject*                 NewInterface;
		bool                           ReturnValue;
	} params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetTitleFileInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 NewInterface                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetTitleFileInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetTitleFileInterface");

	struct
	{
		class UObject*                 NewInterface;
		bool                           ReturnValue;
	} params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetPartyChatInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 NewInterface                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetPartyChatInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetPartyChatInterface");

	struct
	{
		class UObject*                 NewInterface;
		bool                           ReturnValue;
	} params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetNewsInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 NewInterface                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetNewsInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetNewsInterface");

	struct
	{
		class UObject*                 NewInterface;
		bool                           ReturnValue;
	} params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetStatsInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 NewInterface                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetStatsInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetStatsInterface");

	struct
	{
		class UObject*                 NewInterface;
		bool                           ReturnValue;
	} params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetVoiceInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 NewInterface                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetVoiceInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetVoiceInterface");

	struct
	{
		class UObject*                 NewInterface;
		bool                           ReturnValue;
	} params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetContentInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 NewInterface                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetContentInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetContentInterface");

	struct
	{
		class UObject*                 NewInterface;
		bool                           ReturnValue;
	} params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetLobbyInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 InInterface                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetLobbyInterface(class UObject* InInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetLobbyInterface");

	struct
	{
		class UObject*                 InInterface;
		bool                           ReturnValue;
	} params;
	params.InInterface = InInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetPurchaseInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 NewInterface                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetPurchaseInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetPurchaseInterface");

	struct
	{
		class UObject*                 NewInterface;
		bool                           ReturnValue;
	} params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetGameInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 NewInterface                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetGameInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetGameInterface");

	struct
	{
		class UObject*                 NewInterface;
		bool                           ReturnValue;
	} params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetSystemInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 NewInterface                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetSystemInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetSystemInterface");

	struct
	{
		class UObject*                 NewInterface;
		bool                           ReturnValue;
	} params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetMarketplaceInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 NewInterface                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetMarketplaceInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetMarketplaceInterface");

	struct
	{
		class UObject*                 NewInterface;
		bool                           ReturnValue;
	} params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetPlayerInterfaceEx
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 NewInterface                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetPlayerInterfaceEx(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetPlayerInterfaceEx");

	struct
	{
		class UObject*                 NewInterface;
		bool                           ReturnValue;
	} params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetPlayerInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 NewInterface                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetPlayerInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetPlayerInterface");

	struct
	{
		class UObject*                 NewInterface;
		bool                           ReturnValue;
	} params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.SetAccountInterface
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UObject*                 NewInterface                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::SetAccountInterface(class UObject* NewInterface)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.SetAccountInterface");

	struct
	{
		class UObject*                 NewInterface;
		bool                           ReturnValue;
	} params;
	params.NewInterface = NewInterface;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.Exit
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UOnlineSubsystem::Exit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.Exit");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.PostInit
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::PostInit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.PostInit");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.Init
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSubsystem::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.Init");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.EncodeBase64
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 Text                           (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

TArray<unsigned char> UOnlineSubsystem::STATIC_EncodeBase64(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.EncodeBase64");

	struct
	{
		struct FString                 Text;
		TArray<unsigned char>          ReturnValue;
	} params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.DecodeBase64
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 Text                           (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

TArray<unsigned char> UOnlineSubsystem::STATIC_DecodeBase64(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.DecodeBase64");

	struct
	{
		struct FString                 Text;
		TArray<unsigned char>          ReturnValue;
	} params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSubsystem.GetFeaturePrivilegeLevel
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilege> Privilege                      (CPF_Parm)
// struct FScriptDelegate         Callback                       (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSubsystem::GetFeaturePrivilegeLevel(unsigned char LocalUserNum, TEnumAsByte<enum class EFeaturePrivilege> Privilege, const struct FScriptDelegate& Callback)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.GetFeaturePrivilegeLevel");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilege> Privilege;
		struct FScriptDelegate         Callback;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.Privilege = Privilege;
	params.Callback = Callback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSubsystem.FeaturePrivilegeLevelUpdated
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilege> Privilege                      (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> Level                          (CPF_Parm)

void UOnlineSubsystem::FeaturePrivilegeLevelUpdated(unsigned char LocalUserNum, TEnumAsByte<enum class EFeaturePrivilege> Privilege, TEnumAsByte<enum class EFeaturePrivilegeLevel> Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSubsystem.FeaturePrivilegeLevelUpdated");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilege> Privilege;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> Level;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.Privilege = Privilege;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlatformInterfaceBase.ClearDelegate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            DelegateType                   (CPF_Parm)
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UPlatformInterfaceBase::ClearDelegate(int DelegateType, const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.ClearDelegate");

	struct
	{
		int                            DelegateType;
		struct FScriptDelegate         InDelegate;
	} params;
	params.DelegateType = DelegateType;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlatformInterfaceBase.AddDelegate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            DelegateType                   (CPF_Parm)
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UPlatformInterfaceBase::AddDelegate(int DelegateType, const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.AddDelegate");

	struct
	{
		int                            DelegateType;
		struct FScriptDelegate         InDelegate;
	} params;
	params.DelegateType = DelegateType;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlatformInterfaceBase.GetInAppMessageInterface
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UInAppMessageBase*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UInAppMessageBase* UPlatformInterfaceBase::STATIC_GetInAppMessageInterface()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetInAppMessageInterface");

	struct
	{
		class UInAppMessageBase*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceBase.GetAppNotificationsInterface
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UAppNotificationsBase*   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UAppNotificationsBase* UPlatformInterfaceBase::STATIC_GetAppNotificationsInterface()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetAppNotificationsInterface");

	struct
	{
		class UAppNotificationsBase*   ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceBase.GetTwitterIntegration
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UTwitterIntegrationBase* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UTwitterIntegrationBase* UPlatformInterfaceBase::STATIC_GetTwitterIntegration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetTwitterIntegration");

	struct
	{
		class UTwitterIntegrationBase* ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceBase.GetAnalyticEventsInterface
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UAnalyticEventsBase*     ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UAnalyticEventsBase* UPlatformInterfaceBase::STATIC_GetAnalyticEventsInterface()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetAnalyticEventsInterface");

	struct
	{
		class UAnalyticEventsBase*     ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceBase.GetMicroTransactionInterface
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UMicroTransactionBase*   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMicroTransactionBase* UPlatformInterfaceBase::STATIC_GetMicroTransactionInterface()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetMicroTransactionInterface");

	struct
	{
		class UMicroTransactionBase*   ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceBase.GetInGameAdManager
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UInGameAdManager*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UInGameAdManager* UPlatformInterfaceBase::STATIC_GetInGameAdManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetInGameAdManager");

	struct
	{
		class UInGameAdManager*        ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceBase.GetFacebookIntegration
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UFacebookIntegration*    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UFacebookIntegration* UPlatformInterfaceBase::STATIC_GetFacebookIntegration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetFacebookIntegration");

	struct
	{
		class UFacebookIntegration*    ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceBase.GetLocalStorageInterface
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UCloudStorageBase*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UCloudStorageBase* UPlatformInterfaceBase::STATIC_GetLocalStorageInterface()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetLocalStorageInterface");

	struct
	{
		class UCloudStorageBase*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceBase.GetCloudStorageInterface
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UCloudStorageBase*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UCloudStorageBase* UPlatformInterfaceBase::STATIC_GetCloudStorageInterface()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.GetCloudStorageInterface");

	struct
	{
		class UCloudStorageBase*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceBase.CallDelegates
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            DelegateType                   (CPF_Parm)
// struct FPlatformInterfaceDelegateResult DelegateResult                 (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UPlatformInterfaceBase::CallDelegates(int DelegateType, struct FPlatformInterfaceDelegateResult* DelegateResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.CallDelegates");

	struct
	{
		int                            DelegateType;
		struct FPlatformInterfaceDelegateResult DelegateResult;
	} params;
	params.DelegateType = DelegateType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DelegateResult != nullptr)
		*DelegateResult = params.DelegateResult;
}


// Function Engine.PlatformInterfaceBase.PlatformInterfaceDelegate
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// struct FPlatformInterfaceDelegateResult Result                         (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UPlatformInterfaceBase::PlatformInterfaceDelegate(struct FPlatformInterfaceDelegateResult* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceBase.PlatformInterfaceDelegate");

	struct
	{
		struct FPlatformInterfaceDelegateResult Result;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;
}


// Function Engine.MicroTransactionBase.GetProductIndex
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 Identifier                     (CPF_Parm, CPF_NeedCtorLink)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UMicroTransactionBase::GetProductIndex(const struct FString& Identifier)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MicroTransactionBase.GetProductIndex");

	struct
	{
		struct FString                 Identifier;
		int                            ReturnValue;
	} params;
	params.Identifier = Identifier;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MicroTransactionBase.BeginPurchase
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// int                            Index                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMicroTransactionBase::BeginPurchase(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MicroTransactionBase.BeginPurchase");

	struct
	{
		int                            Index;
		bool                           ReturnValue;
	} params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MicroTransactionBase.IsAllowedToMakePurchases
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMicroTransactionBase::IsAllowedToMakePurchases()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MicroTransactionBase.IsAllowedToMakePurchases");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MicroTransactionBase.QueryForAvailablePurchases
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMicroTransactionBase::QueryForAvailablePurchases()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MicroTransactionBase.QueryForAvailablePurchases");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MicroTransactionBase.Init
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UMicroTransactionBase::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MicroTransactionBase.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Player.SwitchController
// (FUNC_Native, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)

void UPlayer::SwitchController(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Player.SwitchController");

	struct
	{
		class APlayerController*       PC;
	} params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Player.EventReceivedController
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// class UPlayer*                 PlayerRef                      (CPF_Parm)

void UPlayer::EventReceivedController(class UPlayer* PlayerRef)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Player.EventReceivedController");

	struct
	{
		class UPlayer*                 PlayerRef;
	} params;
	params.PlayerRef = PlayerRef;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.Cleanup
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bExit                          (CPF_OptionalParm, CPF_Parm)

void ULocalPlayer::Cleanup(bool bExit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.Cleanup");

	struct
	{
		bool                           bExit;
	} params;
	params.bExit = bExit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.Exit
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void ULocalPlayer::Exit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.Exit");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.NotifyServerConnectionClose
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void ULocalPlayer::NotifyServerConnectionClose()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.NotifyServerConnectionClose");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.ViewportClosed
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void ULocalPlayer::ViewportClosed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ViewportClosed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.StaticOnServerConnectionClose
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class UPlayer*                 ServerConnection               (CPF_Parm)

void ULocalPlayer::STATIC_StaticOnServerConnectionClose(class UPlayer* ServerConnection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.StaticOnServerConnectionClose");

	struct
	{
		class UPlayer*                 ServerConnection;
	} params;
	params.ServerConnection = ServerConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.OnServerConnectionClose
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UPlayer*                 ServerConnection               (CPF_Parm)

void ULocalPlayer::OnServerConnectionClose(class UPlayer* ServerConnection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.OnServerConnectionClose");

	struct
	{
		class UPlayer*                 ServerConnection;
	} params;
	params.ServerConnection = ServerConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.ServerAuthFailure
// (FUNC_Defined, FUNC_Public)

void ULocalPlayer::ServerAuthFailure()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ServerAuthFailure");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.ServerAuthTimedOut
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)

void ULocalPlayer::ServerAuthTimedOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ServerAuthTimedOut");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.OnServerAuthComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bSuccess                       (CPF_Parm)
// struct FUniqueNetId            ServerUID                      (CPF_Parm)
// class UPlayer*                 ServerConnection               (CPF_Parm)
// struct FString                 ExtraInfo                      (CPF_Parm, CPF_NeedCtorLink)

void ULocalPlayer::OnServerAuthComplete(bool bSuccess, const struct FUniqueNetId& ServerUID, class UPlayer* ServerConnection, const struct FString& ExtraInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.OnServerAuthComplete");

	struct
	{
		bool                           bSuccess;
		struct FUniqueNetId            ServerUID;
		class UPlayer*                 ServerConnection;
		struct FString                 ExtraInfo;
	} params;
	params.bSuccess = bSuccess;
	params.ServerUID = ServerUID;
	params.ServerConnection = ServerConnection;
	params.ExtraInfo = ExtraInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.ProcessServerAuthResponse
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FUniqueNetId            ServerUID                      (CPF_Parm)
// struct FIpAddr                 ServerIP                       (CPF_Parm)
// int                            AuthTicketUID                  (CPF_Parm)

void ULocalPlayer::ProcessServerAuthResponse(const struct FUniqueNetId& ServerUID, const struct FIpAddr& ServerIP, int AuthTicketUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ProcessServerAuthResponse");

	struct
	{
		struct FUniqueNetId            ServerUID;
		struct FIpAddr                 ServerIP;
		int                            AuthTicketUID;
	} params;
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.ProcessClientAuthEndSessionRequest
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class UPlayer*                 ServerConnection               (CPF_Parm)

void ULocalPlayer::ProcessClientAuthEndSessionRequest(class UPlayer* ServerConnection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ProcessClientAuthEndSessionRequest");

	struct
	{
		class UPlayer*                 ServerConnection;
	} params;
	params.ServerConnection = ServerConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.ProcessClientAuthRequest
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FUniqueNetId            ServerUID                      (CPF_Parm)
// struct FIpAddr                 ServerIP                       (CPF_Parm)
// int                            ServerPort                     (CPF_Parm)
// bool                           bSecure                        (CPF_Parm)

void ULocalPlayer::ProcessClientAuthRequest(const struct FUniqueNetId& ServerUID, const struct FIpAddr& ServerIP, int ServerPort, bool bSecure)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ProcessClientAuthRequest");

	struct
	{
		struct FUniqueNetId            ServerUID;
		struct FIpAddr                 ServerIP;
		int                            ServerPort;
		bool                           bSecure;
	} params;
	params.ServerUID = ServerUID;
	params.ServerIP = ServerIP;
	params.ServerPort = ServerPort;
	params.bSecure = bSecure;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.NotifyServerConnectionOpen
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void ULocalPlayer::NotifyServerConnectionOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.NotifyServerConnectionOpen");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.GetNickname
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString ULocalPlayer::GetNickname()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetNickname");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.GetUniqueNetId
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FUniqueNetId            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FUniqueNetId ULocalPlayer::GetUniqueNetId()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetUniqueNetId");

	struct
	{
		struct FUniqueNetId            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.FastProject
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 WorldLoc                       (CPF_Parm)
// struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector2D ULocalPlayer::FastProject(const struct FVector& WorldLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.FastProject");

	struct
	{
		struct FVector                 WorldLoc;
		struct FVector2D               ReturnValue;
	} params;
	params.WorldLoc = WorldLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.FastDeProject
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector2D               RelativeScreenPos              (CPF_Parm)
// struct FVector                 WorldOrigin                    (CPF_Parm, CPF_OutParm)
// struct FVector                 WorldDirection                 (CPF_Parm, CPF_OutParm)

void ULocalPlayer::FastDeProject(const struct FVector2D& RelativeScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.FastDeProject");

	struct
	{
		struct FVector2D               RelativeScreenPos;
		struct FVector                 WorldOrigin;
		struct FVector                 WorldDirection;
	} params;
	params.RelativeScreenPos = RelativeScreenPos;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WorldOrigin != nullptr)
		*WorldOrigin = params.WorldOrigin;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;
}


// Function Engine.LocalPlayer.Project
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 WorldLoc                       (CPF_Parm)
// struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector2D ULocalPlayer::Project(const struct FVector& WorldLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.Project");

	struct
	{
		struct FVector                 WorldLoc;
		struct FVector2D               ReturnValue;
	} params;
	params.WorldLoc = WorldLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.DeProject
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector2D               RelativeScreenPos              (CPF_Parm)
// struct FVector                 WorldOrigin                    (CPF_Parm, CPF_OutParm)
// struct FVector                 WorldDirection                 (CPF_Parm, CPF_OutParm)

void ULocalPlayer::DeProject(const struct FVector2D& RelativeScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.DeProject");

	struct
	{
		struct FVector2D               RelativeScreenPos;
		struct FVector                 WorldOrigin;
		struct FVector                 WorldDirection;
	} params;
	params.RelativeScreenPos = RelativeScreenPos;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WorldOrigin != nullptr)
		*WorldOrigin = params.WorldOrigin;
	if (WorldDirection != nullptr)
		*WorldDirection = params.WorldDirection;
}


// Function Engine.LocalPlayer.TouchPlayerPostProcessChain
// (FUNC_Native, FUNC_Public)

void ULocalPlayer::TouchPlayerPostProcessChain()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.TouchPlayerPostProcessChain");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.GetPostProcessChain
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            InIndex                        (CPF_Parm)
// class UPostProcessChain*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UPostProcessChain* ULocalPlayer::GetPostProcessChain(int InIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetPostProcessChain");

	struct
	{
		int                            InIndex;
		class UPostProcessChain*       ReturnValue;
	} params;
	params.InIndex = InIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.RemoveAllPostProcessingChains
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ULocalPlayer::RemoveAllPostProcessingChains()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.RemoveAllPostProcessingChains");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.RemovePostProcessingChain
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            InIndex                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ULocalPlayer::RemovePostProcessingChain(int InIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.RemovePostProcessingChain");

	struct
	{
		int                            InIndex;
		bool                           ReturnValue;
	} params;
	params.InIndex = InIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.InsertPostProcessingChain
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UPostProcessChain*       InChain                        (CPF_Parm)
// int                            InIndex                        (CPF_Parm)
// bool                           bInClone                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ULocalPlayer::InsertPostProcessingChain(class UPostProcessChain* InChain, int InIndex, bool bInClone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.InsertPostProcessingChain");

	struct
	{
		class UPostProcessChain*       InChain;
		int                            InIndex;
		bool                           bInClone;
		bool                           ReturnValue;
	} params;
	params.InChain = InChain;
	params.InIndex = InIndex;
	params.bInClone = bInClone;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.GetTranslationContext
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UTranslationContext*     ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UTranslationContext* ULocalPlayer::GetTranslationContext()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetTranslationContext");

	struct
	{
		class UTranslationContext*     ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.SetControllerId
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// int                            NewControllerId                (CPF_Parm)

void ULocalPlayer::SetControllerId(int NewControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.SetControllerId");

	struct
	{
		int                            NewControllerId;
	} params;
	params.NewControllerId = NewControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.ClearPostProcessSettingsOverride
// (FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          BlendOutTime                   (CPF_OptionalParm, CPF_Parm)

void ULocalPlayer::ClearPostProcessSettingsOverride(float BlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.ClearPostProcessSettingsOverride");

	struct
	{
		float                          BlendOutTime;
	} params;
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.OverridePostProcessSettingsCurve
// (FUNC_Simulated, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FPostProcessSettings    OverrideSettings               (CPF_Parm, CPF_NeedCtorLink)
// struct FInterpCurveFloat       Curve                          (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void ULocalPlayer::OverridePostProcessSettingsCurve(const struct FPostProcessSettings& OverrideSettings, struct FInterpCurveFloat* Curve)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.OverridePostProcessSettingsCurve");

	struct
	{
		struct FPostProcessSettings    OverrideSettings;
		struct FInterpCurveFloat       Curve;
	} params;
	params.OverrideSettings = OverrideSettings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Curve != nullptr)
		*Curve = params.Curve;
}


// Function Engine.LocalPlayer.OverridePostProcessSettings
// (FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FPostProcessSettings    OverrideSettings               (CPF_Parm, CPF_NeedCtorLink)
// float                          BlendInTime                    (CPF_OptionalParm, CPF_Parm)

void ULocalPlayer::OverridePostProcessSettings(const struct FPostProcessSettings& OverrideSettings, float BlendInTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.OverridePostProcessSettings");

	struct
	{
		struct FPostProcessSettings    OverrideSettings;
		float                          BlendInTime;
	} params;
	params.OverrideSettings = OverrideSettings;
	params.BlendInTime = BlendInTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.GetActorVisibility
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  TestActor                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ULocalPlayer::GetActorVisibility(class AActor* TestActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.GetActorVisibility");

	struct
	{
		class AActor*                  TestActor;
		bool                           ReturnValue;
	} params;
	params.TestActor = TestActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalPlayer.SendSplitJoin
// (FUNC_Final, FUNC_Native, FUNC_Public)

void ULocalPlayer::SendSplitJoin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.SendSplitJoin");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalPlayer.SpawnPlayActor
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 OutError                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ULocalPlayer::SpawnPlayActor(const struct FString& URL, struct FString* OutError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalPlayer.SpawnPlayActor");

	struct
	{
		struct FString                 URL;
		struct FString                 OutError;
		bool                           ReturnValue;
	} params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;

	return params.ReturnValue;
}


// Function Engine.PostProcessChain.FindPostProcessEffect
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   EffectName                     (CPF_Parm)
// class UPostProcessEffect*      ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UPostProcessEffect* UPostProcessChain::FindPostProcessEffect(const struct FName& EffectName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PostProcessChain.FindPostProcessEffect");

	struct
	{
		struct FName                   EffectName;
		class UPostProcessEffect*      ReturnValue;
	} params;
	params.EffectName = EffectName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ReachSpec.IsBlockedFor
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UReachSpec::IsBlockedFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ReachSpec.IsBlockedFor");

	struct
	{
		class APawn*                   P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ReachSpec.GetDirection
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector UReachSpec::GetDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ReachSpec.GetDirection");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ReachSpec.GetEnd
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class ANavigationPoint*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ANavigationPoint* UReachSpec::GetEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ReachSpec.GetEnd");

	struct
	{
		class ANavigationPoint*        ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ReachSpec.CostFor
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UReachSpec::CostFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ReachSpec.CostFor");

	struct
	{
		class APawn*                   P;
		int                            ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.GetDebugString
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString USavedMove::GetDebugString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.GetDebugString");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.SetFlags
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// unsigned char                  Flags                          (CPF_Parm)
// class APlayerController*       PC                             (CPF_Parm)
// TEnumAsByte<enum class EDoubleClickDir> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EDoubleClickDir> USavedMove::STATIC_SetFlags(unsigned char Flags, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.SetFlags");

	struct
	{
		unsigned char                  Flags;
		class APlayerController*       PC;
		TEnumAsByte<enum class EDoubleClickDir> ReturnValue;
	} params;
	params.Flags = Flags;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.CompressedFlags
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

unsigned char USavedMove::CompressedFlags()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.CompressedFlags");

	struct
	{
		unsigned char                  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.ResetMoveFor
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void USavedMove::ResetMoveFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.ResetMoveFor");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.PrepMoveFor
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void USavedMove::PrepMoveFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.PrepMoveFor");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.SetMoveFor
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       P                              (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)
// struct FVector                 newAccel                       (CPF_Parm)
// TEnumAsByte<enum class EDoubleClickDir> InDoubleClick                  (CPF_Parm)

void USavedMove::SetMoveFor(class APlayerController* P, float DeltaTime, const struct FVector& newAccel, TEnumAsByte<enum class EDoubleClickDir> InDoubleClick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.SetMoveFor");

	struct
	{
		class APlayerController*       P;
		float                          DeltaTime;
		struct FVector                 newAccel;
		TEnumAsByte<enum class EDoubleClickDir> InDoubleClick;
	} params;
	params.P = P;
	params.DeltaTime = DeltaTime;
	params.newAccel = newAccel;
	params.InDoubleClick = InDoubleClick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.CanCombineWith
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USavedMove*              NewMove                        (CPF_Parm)
// class APawn*                   inPawn                         (CPF_Parm)
// float                          MaxDelta                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USavedMove::CanCombineWith(class USavedMove* NewMove, class APawn* inPawn, float MaxDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.CanCombineWith");

	struct
	{
		class USavedMove*              NewMove;
		class APawn*                   inPawn;
		float                          MaxDelta;
		bool                           ReturnValue;
	} params;
	params.NewMove = NewMove;
	params.inPawn = inPawn;
	params.MaxDelta = MaxDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.SetInitialPosition
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void USavedMove::SetInitialPosition(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.SetInitialPosition");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.GetStartLocation
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector USavedMove::GetStartLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.GetStartLocation");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.IsImportantMove
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FVector                 CompareAccel                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USavedMove::IsImportantMove(const struct FVector& CompareAccel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.IsImportantMove");

	struct
	{
		struct FVector                 CompareAccel;
		bool                           ReturnValue;
	} params;
	params.CompareAccel = CompareAccel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.PostUpdate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       P                              (CPF_Parm)

void USavedMove::PostUpdate(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.PostUpdate");

	struct
	{
		class APlayerController*       P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.Clear
// (FUNC_Defined, FUNC_Public)

void USavedMove::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.Clear");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.SetHardwareMouseCursorVisibility
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// bool                           bIsVisible                     (CPF_Parm)

void UGameViewportClient::SetHardwareMouseCursorVisibility(bool bIsVisible)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetHardwareMouseCursorVisibility");

	struct
	{
		bool                           bIsVisible;
	} params;
	params.bIsVisible = bIsVisible;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.DebugSetUISystemEnabled
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bOldUISystemActive             (CPF_Parm)
// bool                           bGFxUISystemActive             (CPF_Parm)

void UGameViewportClient::DebugSetUISystemEnabled(bool bOldUISystemActive, bool bGFxUISystemActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DebugSetUISystemEnabled");

	struct
	{
		bool                           bOldUISystemActive;
		bool                           bGFxUISystemActive;
	} params;
	params.bOldUISystemActive = bOldUISystemActive;
	params.bGFxUISystemActive = bGFxUISystemActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.IsScaleformEnabled
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameViewportClient::IsScaleformEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.IsScaleformEnabled");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.DisableScaleform
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UGameViewportClient::DisableScaleform()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DisableScaleform");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.EnableScaleform
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UGameViewportClient::EnableScaleform()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.EnableScaleform");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.BecomePrimaryPlayer
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            PlayerIndex                    (CPF_Parm)

void UGameViewportClient::BecomePrimaryPlayer(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.BecomePrimaryPlayer");

	struct
	{
		int                            PlayerIndex;
	} params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.OnPrimaryPlayerSwitch
// (FUNC_Public)
// Parameters:
// class ULocalPlayer*            OldPrimaryPlayer               (CPF_Parm)
// class ULocalPlayer*            NewPrimaryPlayer               (CPF_Parm)

void UGameViewportClient::OnPrimaryPlayerSwitch(class ULocalPlayer* OldPrimaryPlayer, class ULocalPlayer* NewPrimaryPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.OnPrimaryPlayerSwitch");

	struct
	{
		class ULocalPlayer*            OldPrimaryPlayer;
		class ULocalPlayer*            NewPrimaryPlayer;
	} params;
	params.OldPrimaryPlayer = OldPrimaryPlayer;
	params.NewPrimaryPlayer = NewPrimaryPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.FixupOwnerReferences
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// TArray<int>                    IDMappings                     (CPF_Parm, CPF_NeedCtorLink)

void UGameViewportClient::FixupOwnerReferences(TArray<int> IDMappings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.FixupOwnerReferences");

	struct
	{
		TArray<int>                    IDMappings;
	} params;
	params.IDMappings = IDMappings;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.GetPlayerOwner
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ULocalPlayer* UGameViewportClient::GetPlayerOwner(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetPlayerOwner");

	struct
	{
		int                            PlayerIndex;
		class ULocalPlayer*            ReturnValue;
	} params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.ClearProgressMessages
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UGameViewportClient::ClearProgressMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ClearProgressMessages");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.SetProgressTime
// (FUNC_Defined, FUNC_Exec, FUNC_Event, FUNC_Public)
// Parameters:
// float                          T                              (CPF_Parm)

void UGameViewportClient::SetProgressTime(float T)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetProgressTime");

	struct
	{
		float                          T;
	} params;
	params.T = T;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.NotifyConnectionError
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class EProgressMessageType> MessageType                    (CPF_Parm)
// struct FString                 Message                        (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Title                          (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)

void UGameViewportClient::NotifyConnectionError(TEnumAsByte<enum class EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.NotifyConnectionError");

	struct
	{
		TEnumAsByte<enum class EProgressMessageType> MessageType;
		struct FString                 Message;
		struct FString                 Title;
	} params;
	params.MessageType = MessageType;
	params.Message = Message;
	params.Title = Title;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.SetProgressMessage
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class EProgressMessageType> MessageType                    (CPF_Parm)
// struct FString                 Message                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Title                          (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           bIgnoreFutureNetworkMessages   (CPF_OptionalParm, CPF_Parm)

void UGameViewportClient::SetProgressMessage(TEnumAsByte<enum class EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title, bool bIgnoreFutureNetworkMessages)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetProgressMessage");

	struct
	{
		TEnumAsByte<enum class EProgressMessageType> MessageType;
		struct FString                 Message;
		struct FString                 Title;
		bool                           bIgnoreFutureNetworkMessages;
	} params;
	params.MessageType = MessageType;
	params.Message = Message;
	params.Title = Title;
	params.bIgnoreFutureNetworkMessages = bIgnoreFutureNetworkMessages;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.RemoveLocalPlayer
// (FUNC_Final, FUNC_Defined, FUNC_Protected)
// Parameters:
// class ULocalPlayer*            ExistingPlayer                 (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UGameViewportClient::RemoveLocalPlayer(class ULocalPlayer* ExistingPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.RemoveLocalPlayer");

	struct
	{
		class ULocalPlayer*            ExistingPlayer;
		int                            ReturnValue;
	} params;
	params.ExistingPlayer = ExistingPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.AddLocalPlayer
// (FUNC_Final, FUNC_Defined, FUNC_Protected)
// Parameters:
// class ULocalPlayer*            NewPlayer                      (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UGameViewportClient::AddLocalPlayer(class ULocalPlayer* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.AddLocalPlayer");

	struct
	{
		class ULocalPlayer*            NewPlayer;
		int                            ReturnValue;
	} params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.NotifyPlayerRemoved
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            RemovedPlayer                  (CPF_Parm)

void UGameViewportClient::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.NotifyPlayerRemoved");

	struct
	{
		int                            PlayerIndex;
		class ULocalPlayer*            RemovedPlayer;
	} params;
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.NotifyPlayerAdded
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            AddedPlayer                    (CPF_Parm)

void UGameViewportClient::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.NotifyPlayerAdded");

	struct
	{
		int                            PlayerIndex;
		class ULocalPlayer*            AddedPlayer;
	} params;
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.DrawTransitionMessage
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UCanvas*                 Canvas                         (CPF_Parm)
// struct FString                 Message                        (CPF_Parm, CPF_NeedCtorLink)

void UGameViewportClient::DrawTransitionMessage(class UCanvas* Canvas, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DrawTransitionMessage");

	struct
	{
		class UCanvas*                 Canvas;
		struct FString                 Message;
	} params;
	params.Canvas = Canvas;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.DrawTransition
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UCanvas*                 Canvas                         (CPF_Parm)

void UGameViewportClient::DrawTransition(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DrawTransition");

	struct
	{
		class UCanvas*                 Canvas;
	} params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.DisplayProgressMessage
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UCanvas*                 Canvas                         (CPF_Parm)

void UGameViewportClient::DisplayProgressMessage(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DisplayProgressMessage");

	struct
	{
		class UCanvas*                 Canvas;
	} params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.PostRender
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UCanvas*                 Canvas                         (CPF_Parm)

void UGameViewportClient::PostRender(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.PostRender");

	struct
	{
		class UCanvas*                 Canvas;
	} params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.DrawTitleSafeArea
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UCanvas*                 Canvas                         (CPF_Parm)

void UGameViewportClient::DrawTitleSafeArea(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.DrawTitleSafeArea");

	struct
	{
		class UCanvas*                 Canvas;
	} params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.Tick
// (FUNC_Event, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void UGameViewportClient::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.Tick");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.CalculateDeadZoneForAllSides
// (FUNC_Final, FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class ULocalPlayer*            LPlayer                        (CPF_Parm)
// class UCanvas*                 Canvas                         (CPF_Parm)
// float                          fTopSafeZone                   (CPF_Parm, CPF_OutParm)
// float                          fBottomSafeZone                (CPF_Parm, CPF_OutParm)
// float                          fLeftSafeZone                  (CPF_Parm, CPF_OutParm)
// float                          fRightSafeZone                 (CPF_Parm, CPF_OutParm)
// bool                           bUseMaxPercent                 (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameViewportClient::CalculateDeadZoneForAllSides(class ULocalPlayer* LPlayer, class UCanvas* Canvas, bool bUseMaxPercent, float* fTopSafeZone, float* fBottomSafeZone, float* fLeftSafeZone, float* fRightSafeZone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CalculateDeadZoneForAllSides");

	struct
	{
		class ULocalPlayer*            LPlayer;
		class UCanvas*                 Canvas;
		float                          fTopSafeZone;
		float                          fBottomSafeZone;
		float                          fLeftSafeZone;
		float                          fRightSafeZone;
		bool                           bUseMaxPercent;
		bool                           ReturnValue;
	} params;
	params.LPlayer = LPlayer;
	params.Canvas = Canvas;
	params.bUseMaxPercent = bUseMaxPercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fTopSafeZone != nullptr)
		*fTopSafeZone = params.fTopSafeZone;
	if (fBottomSafeZone != nullptr)
		*fBottomSafeZone = params.fBottomSafeZone;
	if (fLeftSafeZone != nullptr)
		*fLeftSafeZone = params.fLeftSafeZone;
	if (fRightSafeZone != nullptr)
		*fRightSafeZone = params.fRightSafeZone;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.CalculateSafeZoneValues
// (FUNC_Final, FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          out_Horizontal                 (CPF_Parm, CPF_OutParm)
// float                          out_Vertical                   (CPF_Parm, CPF_OutParm)
// class UCanvas*                 Canvas                         (CPF_Parm)
// int                            LocalPlayerIndex               (CPF_Parm)
// bool                           bUseMaxPercent                 (CPF_Parm)

void UGameViewportClient::CalculateSafeZoneValues(class UCanvas* Canvas, int LocalPlayerIndex, bool bUseMaxPercent, float* out_Horizontal, float* out_Vertical)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CalculateSafeZoneValues");

	struct
	{
		float                          out_Horizontal;
		float                          out_Vertical;
		class UCanvas*                 Canvas;
		int                            LocalPlayerIndex;
		bool                           bUseMaxPercent;
	} params;
	params.Canvas = Canvas;
	params.LocalPlayerIndex = LocalPlayerIndex;
	params.bUseMaxPercent = bUseMaxPercent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Horizontal != nullptr)
		*out_Horizontal = params.out_Horizontal;
	if (out_Vertical != nullptr)
		*out_Vertical = params.out_Vertical;
}


// Function Engine.GameViewportClient.GetPixelSizeOfScreen
// (FUNC_Final, FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          out_Width                      (CPF_Parm, CPF_OutParm)
// float                          out_Height                     (CPF_Parm, CPF_OutParm)
// class UCanvas*                 Canvas                         (CPF_Parm)
// int                            LocalPlayerIndex               (CPF_Parm)

void UGameViewportClient::GetPixelSizeOfScreen(class UCanvas* Canvas, int LocalPlayerIndex, float* out_Width, float* out_Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetPixelSizeOfScreen");

	struct
	{
		float                          out_Width;
		float                          out_Height;
		class UCanvas*                 Canvas;
		int                            LocalPlayerIndex;
	} params;
	params.Canvas = Canvas;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Width != nullptr)
		*out_Width = params.out_Width;
	if (out_Height != nullptr)
		*out_Height = params.out_Height;
}


// Function Engine.GameViewportClient.HasRightSafeZone
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// int                            LocalPlayerIndex               (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameViewportClient::HasRightSafeZone(int LocalPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasRightSafeZone");

	struct
	{
		int                            LocalPlayerIndex;
		bool                           ReturnValue;
	} params;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HasLeftSafeZone
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// int                            LocalPlayerIndex               (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameViewportClient::HasLeftSafeZone(int LocalPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasLeftSafeZone");

	struct
	{
		int                            LocalPlayerIndex;
		bool                           ReturnValue;
	} params;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HasBottomSafeZone
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// int                            LocalPlayerIndex               (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameViewportClient::HasBottomSafeZone(int LocalPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasBottomSafeZone");

	struct
	{
		int                            LocalPlayerIndex;
		bool                           ReturnValue;
	} params;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HasTopSafeZone
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// int                            LocalPlayerIndex               (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameViewportClient::HasTopSafeZone(int LocalPlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HasTopSafeZone");

	struct
	{
		int                            LocalPlayerIndex;
		bool                           ReturnValue;
	} params;
	params.LocalPlayerIndex = LocalPlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// class ULocalPlayer*            LPlayer                        (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UGameViewportClient::ConvertLocalPlayerToGamePlayerIndex(class ULocalPlayer* LPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ConvertLocalPlayerToGamePlayerIndex");

	struct
	{
		class ULocalPlayer*            LPlayer;
		int                            ReturnValue;
	} params;
	params.LPlayer = LPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.GetSubtitleRegion
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector2D               MinPos                         (CPF_Parm, CPF_OutParm)
// struct FVector2D               MaxPos                         (CPF_Parm, CPF_OutParm)

void UGameViewportClient::GetSubtitleRegion(struct FVector2D* MinPos, struct FVector2D* MaxPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetSubtitleRegion");

	struct
	{
		struct FVector2D               MinPos;
		struct FVector2D               MaxPos;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MinPos != nullptr)
		*MinPos = params.MinPos;
	if (MaxPos != nullptr)
		*MaxPos = params.MaxPos;
}


// Function Engine.GameViewportClient.LayoutPlayers
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UGameViewportClient::LayoutPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.LayoutPlayers");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.UpdateActiveSplitscreenType
// (FUNC_Defined, FUNC_Public)

void UGameViewportClient::UpdateActiveSplitscreenType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.UpdateActiveSplitscreenType");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.GetSplitscreenConfiguration
// (FUNC_Defined, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ESplitScreenType> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class ESplitScreenType> UGameViewportClient::GetSplitscreenConfiguration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetSplitscreenConfiguration");

	struct
	{
		TEnumAsByte<enum class ESplitScreenType> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.SetSplitscreenConfiguration
// (FUNC_Defined, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ESplitScreenType> SplitType                      (CPF_Parm)

void UGameViewportClient::SetSplitscreenConfiguration(TEnumAsByte<enum class ESplitScreenType> SplitType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetSplitscreenConfiguration");

	struct
	{
		TEnumAsByte<enum class ESplitScreenType> SplitType;
	} params;
	params.SplitType = SplitType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.GameSessionEnded
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UGameViewportClient::GameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GameSessionEnded");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.GetInteraction
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UClass*                  InteractionClass               (CPF_Parm)
// class UInteraction*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_CoerceParm)

class UInteraction* UGameViewportClient::GetInteraction(class UClass* InteractionClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetInteraction");

	struct
	{
		class UClass*                  InteractionClass;
		class UInteraction*            ReturnValue;
	} params;
	params.InteractionClass = InteractionClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.RemoveInteraction
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UInteraction*            RemInteraction                 (CPF_Parm)

void UGameViewportClient::RemoveInteraction(class UInteraction* RemInteraction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.RemoveInteraction");

	struct
	{
		class UInteraction*            RemInteraction;
	} params;
	params.RemInteraction = RemInteraction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.InsertInteraction
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UInteraction*            NewInteraction                 (CPF_Parm)
// int                            InIndex                        (CPF_OptionalParm, CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UGameViewportClient::InsertInteraction(class UInteraction* NewInteraction, int InIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.InsertInteraction");

	struct
	{
		class UInteraction*            NewInteraction;
		int                            InIndex;
		int                            ReturnValue;
	} params;
	params.NewInteraction = NewInteraction;
	params.InIndex = InIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.CreateInitialPlayer
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 OutError                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameViewportClient::CreateInitialPlayer(struct FString* OutError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CreateInitialPlayer");

	struct
	{
		struct FString                 OutError;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.Init
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 OutError                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameViewportClient::Init(struct FString* OutError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.Init");

	struct
	{
		struct FString                 OutError;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.FindPlayerByControllerId
// (FUNC_Final, FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// class ULocalPlayer*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ULocalPlayer* UGameViewportClient::FindPlayerByControllerId(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.FindPlayerByControllerId");

	struct
	{
		int                            ControllerId;
		class ULocalPlayer*            ReturnValue;
	} params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.RemovePlayer
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            ExPlayer                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameViewportClient::RemovePlayer(class ULocalPlayer* ExPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.RemovePlayer");

	struct
	{
		class ULocalPlayer*            ExPlayer;
		bool                           ReturnValue;
	} params;
	params.ExPlayer = ExPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.CreatePlayer
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// struct FString                 OutError                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           bSpawnActor                    (CPF_Parm)
// class ULocalPlayer*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ULocalPlayer* UGameViewportClient::CreatePlayer(int ControllerId, bool bSpawnActor, struct FString* OutError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.CreatePlayer");

	struct
	{
		int                            ControllerId;
		struct FString                 OutError;
		bool                           bSpawnActor;
		class ULocalPlayer*            ReturnValue;
	} params;
	params.ControllerId = ControllerId;
	params.bSpawnActor = bSpawnActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.SetMouse
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            X                              (CPF_Parm)
// int                            Y                              (CPF_Parm)

void UGameViewportClient::SetMouse(int X, int Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetMouse");

	struct
	{
		int                            X;
		int                            Y;
	} params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.ForceUpdateMouseCursor
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bSetCursor                     (CPF_Parm)

void UGameViewportClient::ForceUpdateMouseCursor(bool bSetCursor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ForceUpdateMouseCursor");

	struct
	{
		bool                           bSetCursor;
	} params;
	params.bSetCursor = bSetCursor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.NotifySplitscreenLayoutChanged
// (FUNC_Native, FUNC_Public)

void UGameViewportClient::NotifySplitscreenLayoutChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.NotifySplitscreenLayoutChanged");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.SetCustomInteractionObject
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UInteraction*            InInteraction                  (CPF_Parm)

void UGameViewportClient::SetCustomInteractionObject(class UInteraction* InInteraction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.SetCustomInteractionObject");

	struct
	{
		class UInteraction*            InInteraction;
	} params;
	params.InInteraction = InInteraction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.GetCustomInteractionClass
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            InIndex                        (CPF_Parm)
// class UClass*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UClass* UGameViewportClient::GetCustomInteractionClass(int InIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetCustomInteractionClass");

	struct
	{
		int                            InIndex;
		class UClass*                  ReturnValue;
	} params;
	params.InIndex = InIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.GetNumCustomInteractions
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UGameViewportClient::GetNumCustomInteractions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetNumCustomInteractions");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.ShouldForceFullscreenViewport
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameViewportClient::ShouldForceFullscreenViewport()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ShouldForceFullscreenViewport");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.GetMousePosition
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector2D               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector2D UGameViewportClient::GetMousePosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetMousePosition");

	struct
	{
		struct FVector2D               ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.IsFullScreenViewport
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameViewportClient::IsFullScreenViewport()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.IsFullScreenViewport");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.GetViewportSize
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector2D               out_ViewportSize               (CPF_Parm, CPF_OutParm)

void UGameViewportClient::GetViewportSize(struct FVector2D* out_ViewportSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.GetViewportSize");

	struct
	{
		struct FVector2D               out_ViewportSize;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewportSize != nullptr)
		*out_ViewportSize = params.out_ViewportSize;
}


// Function Engine.GameViewportClient.ConsoleCommand
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 Command                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UGameViewportClient::ConsoleCommand(const struct FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.ConsoleCommand");

	struct
	{
		struct FString                 Command;
		struct FString                 ReturnValue;
	} params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.EventScaleformEnabledChanged
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// class UGameViewportClient*     GVC                            (CPF_Parm)

void UGameViewportClient::EventScaleformEnabledChanged(class UGameViewportClient* GVC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.EventScaleformEnabledChanged");

	struct
	{
		class UGameViewportClient*     GVC;
	} params;
	params.GVC = GVC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameViewportClient.HandleInputChar
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// struct FString                 Unicode                        (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameViewportClient::HandleInputChar(int ControllerId, const struct FString& Unicode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HandleInputChar");

	struct
	{
		int                            ControllerId;
		struct FString                 Unicode;
		bool                           ReturnValue;
	} params;
	params.ControllerId = ControllerId;
	params.Unicode = Unicode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HandleInputAxis
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// struct FName                   Key                            (CPF_Parm)
// float                          Delta                          (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)
// bool                           bGamepad                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameViewportClient::HandleInputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HandleInputAxis");

	struct
	{
		int                            ControllerId;
		struct FName                   Key;
		float                          Delta;
		float                          DeltaTime;
		bool                           bGamepad;
		bool                           ReturnValue;
	} params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.Delta = Delta;
	params.DeltaTime = DeltaTime;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameViewportClient.HandleInputKey
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_Delegate)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// struct FName                   Key                            (CPF_Parm)
// TEnumAsByte<enum class EInputEvent> EventType                      (CPF_Parm)
// float                          AmountDepressed                (CPF_Parm)
// bool                           bGamepad                       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameViewportClient::HandleInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<enum class EInputEvent> EventType, float AmountDepressed, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameViewportClient.HandleInputKey");

	struct
	{
		int                            ControllerId;
		struct FName                   Key;
		TEnumAsByte<enum class EInputEvent> EventType;
		float                          AmountDepressed;
		bool                           bGamepad;
		bool                           ReturnValue;
	} params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.EventType = EventType;
	params.AmountDepressed = AmountDepressed;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.UpdateFromURL
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 URL                            (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// class AGameInfo*               Game                           (CPF_Parm)

void USettings::UpdateFromURL(class AGameInfo* Game, struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.UpdateFromURL");

	struct
	{
		struct FString                 URL;
		class AGameInfo*               Game;
	} params;
	params.Game = Game;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;
}


// Function Engine.Settings.BuildURL
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void USettings::BuildURL(struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.BuildURL");

	struct
	{
		struct FString                 URL;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;
}


// Function Engine.Settings.AppendContextsToURL
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void USettings::AppendContextsToURL(struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.AppendContextsToURL");

	struct
	{
		struct FString                 URL;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;
}


// Function Engine.Settings.AppendPropertiesToURL
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void USettings::AppendPropertiesToURL(struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.AppendPropertiesToURL");

	struct
	{
		struct FString                 URL;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;
}


// Function Engine.Settings.AppendDataBindingsToURL
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void USettings::AppendDataBindingsToURL(struct FString* URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.AppendDataBindingsToURL");

	struct
	{
		struct FString                 URL;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (URL != nullptr)
		*URL = params.URL;
}


// Function Engine.Settings.GetQoSAdvertisedStringSettings
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FLocalizedStringSetting> QoSSettings                    (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void USettings::GetQoSAdvertisedStringSettings(TArray<struct FLocalizedStringSetting>* QoSSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetQoSAdvertisedStringSettings");

	struct
	{
		TArray<struct FLocalizedStringSetting> QoSSettings;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (QoSSettings != nullptr)
		*QoSSettings = params.QoSSettings;
}


// Function Engine.Settings.GetQoSAdvertisedProperties
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FSettingsProperty> QoSProps                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void USettings::GetQoSAdvertisedProperties(TArray<struct FSettingsProperty>* QoSProps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetQoSAdvertisedProperties");

	struct
	{
		TArray<struct FSettingsProperty> QoSProps;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (QoSProps != nullptr)
		*QoSProps = params.QoSProps;
}


// Function Engine.Settings.GetRangedPropertyValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// float                          OutValue                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::GetRangedPropertyValue(int PropertyId, float* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetRangedPropertyValue");

	struct
	{
		int                            PropertyId;
		float                          OutValue;
		bool                           ReturnValue;
	} params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.Settings.SetRangedPropertyValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// float                          NewValue                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::SetRangedPropertyValue(int PropertyId, float NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetRangedPropertyValue");

	struct
	{
		int                            PropertyId;
		float                          NewValue;
		bool                           ReturnValue;
	} params;
	params.PropertyId = PropertyId;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyRange
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// float                          OutMinValue                    (CPF_Parm, CPF_OutParm)
// float                          OutMaxValue                    (CPF_Parm, CPF_OutParm)
// float                          RangeIncrement                 (CPF_Parm, CPF_OutParm)
// unsigned char                  bFormatAsInt                   (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::GetPropertyRange(int PropertyId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyRange");

	struct
	{
		int                            PropertyId;
		float                          OutMinValue;
		float                          OutMaxValue;
		float                          RangeIncrement;
		unsigned char                  bFormatAsInt;
		bool                           ReturnValue;
	} params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutMinValue != nullptr)
		*OutMinValue = params.OutMinValue;
	if (OutMaxValue != nullptr)
		*OutMaxValue = params.OutMaxValue;
	if (RangeIncrement != nullptr)
		*RangeIncrement = params.RangeIncrement;
	if (bFormatAsInt != nullptr)
		*bFormatAsInt = params.bFormatAsInt;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyMappingType
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// TEnumAsByte<enum class EPropertyValueMappingType> OutType                        (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::GetPropertyMappingType(int PropertyId, TEnumAsByte<enum class EPropertyValueMappingType>* OutType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyMappingType");

	struct
	{
		int                            PropertyId;
		TEnumAsByte<enum class EPropertyValueMappingType> OutType;
		bool                           ReturnValue;
	} params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutType != nullptr)
		*OutType = params.OutType;

	return params.ReturnValue;
}


// Function Engine.Settings.HasStringSetting
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            SettingId                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::HasStringSetting(int SettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.HasStringSetting");

	struct
	{
		int                            SettingId;
		bool                           ReturnValue;
	} params;
	params.SettingId = SettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.HasProperty
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::HasProperty(int PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.HasProperty");

	struct
	{
		int                            PropertyId;
		bool                           ReturnValue;
	} params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.UpdateProperties
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FSettingsProperty> Props                          (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           bShouldAddIfMissing            (CPF_OptionalParm, CPF_Parm)

void USettings::UpdateProperties(bool bShouldAddIfMissing, TArray<struct FSettingsProperty>* Props)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.UpdateProperties");

	struct
	{
		TArray<struct FSettingsProperty> Props;
		bool                           bShouldAddIfMissing;
	} params;
	params.bShouldAddIfMissing = bShouldAddIfMissing;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Props != nullptr)
		*Props = params.Props;
}


// Function Engine.Settings.UpdateStringSettings
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FLocalizedStringSetting> Settings                       (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           bShouldAddIfMissing            (CPF_OptionalParm, CPF_Parm)

void USettings::UpdateStringSettings(bool bShouldAddIfMissing, TArray<struct FLocalizedStringSetting>* Settings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.UpdateStringSettings");

	struct
	{
		TArray<struct FLocalizedStringSetting> Settings;
		bool                           bShouldAddIfMissing;
	} params;
	params.bShouldAddIfMissing = bShouldAddIfMissing;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Settings != nullptr)
		*Settings = params.Settings;
}


// Function Engine.Settings.GetPropertyType
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// TEnumAsByte<enum class ESettingsDataType> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class ESettingsDataType> USettings::GetPropertyType(int PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyType");

	struct
	{
		int                            PropertyId;
		TEnumAsByte<enum class ESettingsDataType> ReturnValue;
	} params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyValueId
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// int                            ValueId                        (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::GetPropertyValueId(int PropertyId, int* ValueId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyValueId");

	struct
	{
		int                            PropertyId;
		int                            ValueId;
		bool                           ReturnValue;
	} params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueId != nullptr)
		*ValueId = params.ValueId;

	return params.ReturnValue;
}


// Function Engine.Settings.SetPropertyValueId
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// int                            ValueId                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::SetPropertyValueId(int PropertyId, int ValueId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetPropertyValueId");

	struct
	{
		int                            PropertyId;
		int                            ValueId;
		bool                           ReturnValue;
	} params;
	params.PropertyId = PropertyId;
	params.ValueId = ValueId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringProperty
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// struct FString                 Value                          (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::GetStringProperty(int PropertyId, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringProperty");

	struct
	{
		int                            PropertyId;
		struct FString                 Value;
		bool                           ReturnValue;
	} params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.Settings.SetStringProperty
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// struct FString                 Value                          (CPF_Parm, CPF_NeedCtorLink)

void USettings::SetStringProperty(int PropertyId, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringProperty");

	struct
	{
		int                            PropertyId;
		struct FString                 Value;
	} params;
	params.PropertyId = PropertyId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.GetIntProperty
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// int                            Value                          (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::GetIntProperty(int PropertyId, int* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetIntProperty");

	struct
	{
		int                            PropertyId;
		int                            Value;
		bool                           ReturnValue;
	} params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.Settings.SetIntProperty
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// int                            Value                          (CPF_Parm)

void USettings::SetIntProperty(int PropertyId, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetIntProperty");

	struct
	{
		int                            PropertyId;
		int                            Value;
	} params;
	params.PropertyId = PropertyId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.GetFloatProperty
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// float                          Value                          (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::GetFloatProperty(int PropertyId, float* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetFloatProperty");

	struct
	{
		int                            PropertyId;
		float                          Value;
		bool                           ReturnValue;
	} params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.Settings.SetFloatProperty
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// float                          Value                          (CPF_Parm)

void USettings::SetFloatProperty(int PropertyId, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetFloatProperty");

	struct
	{
		int                            PropertyId;
		float                          Value;
	} params;
	params.PropertyId = PropertyId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.SetPropertyFromStringByName
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   PropertyName                   (CPF_Parm)
// struct FString                 NewValue                       (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::SetPropertyFromStringByName(const struct FName& PropertyName, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetPropertyFromStringByName");

	struct
	{
		struct FName                   PropertyName;
		struct FString                 NewValue;
		bool                           ReturnValue;
	} params;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyAsStringByName
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   PropertyName                   (CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString USettings::GetPropertyAsStringByName(const struct FName& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyAsStringByName");

	struct
	{
		struct FName                   PropertyName;
		struct FString                 ReturnValue;
	} params;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyAsString
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString USettings::GetPropertyAsString(int PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyAsString");

	struct
	{
		int                            PropertyId;
		struct FString                 ReturnValue;
	} params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyColumnHeader
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString USettings::GetPropertyColumnHeader(int PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyColumnHeader");

	struct
	{
		int                            PropertyId;
		struct FString                 ReturnValue;
	} params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyName
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            PropertyId                     (CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName USettings::GetPropertyName(int PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyName");

	struct
	{
		int                            PropertyId;
		struct FName                   ReturnValue;
	} params;
	params.PropertyId = PropertyId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetPropertyId
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   PropertyName                   (CPF_Parm)
// int                            PropertyId                     (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::GetPropertyId(const struct FName& PropertyName, int* PropertyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetPropertyId");

	struct
	{
		struct FName                   PropertyName;
		int                            PropertyId;
		bool                           ReturnValue;
	} params;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PropertyId != nullptr)
		*PropertyId = params.PropertyId;

	return params.ReturnValue;
}


// Function Engine.Settings.SetStringSettingValueFromStringByName
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   StringSettingName              (CPF_Parm)
// struct FString                 NewValue                       (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::SetStringSettingValueFromStringByName(const struct FName& StringSettingName, struct FString* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringSettingValueFromStringByName");

	struct
	{
		struct FName                   StringSettingName;
		struct FString                 NewValue;
		bool                           ReturnValue;
	} params;
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewValue != nullptr)
		*NewValue = params.NewValue;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingValueNameByName
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   StringSettingName              (CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName USettings::GetStringSettingValueNameByName(const struct FName& StringSettingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueNameByName");

	struct
	{
		struct FName                   StringSettingName;
		struct FName                   ReturnValue;
	} params;
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingValueName
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            StringSettingId                (CPF_Parm)
// int                            ValueIndex                     (CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName USettings::GetStringSettingValueName(int StringSettingId, int ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueName");

	struct
	{
		int                            StringSettingId;
		int                            ValueIndex;
		struct FName                   ReturnValue;
	} params;
	params.StringSettingId = StringSettingId;
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.IsWildcardStringSetting
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            StringSettingId                (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::IsWildcardStringSetting(int StringSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.IsWildcardStringSetting");

	struct
	{
		int                            StringSettingId;
		bool                           ReturnValue;
	} params;
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingColumnHeader
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            StringSettingId                (CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString USettings::GetStringSettingColumnHeader(int StringSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingColumnHeader");

	struct
	{
		int                            StringSettingId;
		struct FString                 ReturnValue;
	} params;
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingName
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            StringSettingId                (CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName USettings::GetStringSettingName(int StringSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingName");

	struct
	{
		int                            StringSettingId;
		struct FName                   ReturnValue;
	} params;
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingId
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   StringSettingName              (CPF_Parm)
// int                            StringSettingId                (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::GetStringSettingId(const struct FName& StringSettingName, int* StringSettingId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingId");

	struct
	{
		struct FName                   StringSettingName;
		int                            StringSettingId;
		bool                           ReturnValue;
	} params;
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (StringSettingId != nullptr)
		*StringSettingId = params.StringSettingId;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingValueByName
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   StringSettingName              (CPF_Parm)
// int                            ValueIndex                     (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::GetStringSettingValueByName(const struct FName& StringSettingName, int* ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueByName");

	struct
	{
		struct FName                   StringSettingName;
		int                            ValueIndex;
		bool                           ReturnValue;
	} params;
	params.StringSettingName = StringSettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueIndex != nullptr)
		*ValueIndex = params.ValueIndex;

	return params.ReturnValue;
}


// Function Engine.Settings.SetStringSettingValueByName
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   StringSettingName              (CPF_Parm)
// int                            ValueIndex                     (CPF_Parm)
// bool                           bShouldAutoAdd                 (CPF_Parm)

void USettings::SetStringSettingValueByName(const struct FName& StringSettingName, int ValueIndex, bool bShouldAutoAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringSettingValueByName");

	struct
	{
		struct FName                   StringSettingName;
		int                            ValueIndex;
		bool                           bShouldAutoAdd;
	} params;
	params.StringSettingName = StringSettingName;
	params.ValueIndex = ValueIndex;
	params.bShouldAutoAdd = bShouldAutoAdd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.GetStringSettingValueNames
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            StringSettingId                (CPF_Parm)
// TArray<struct FIdToStringMapping> Values                         (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::GetStringSettingValueNames(int StringSettingId, TArray<struct FIdToStringMapping>* Values)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValueNames");

	struct
	{
		int                            StringSettingId;
		TArray<struct FIdToStringMapping> Values;
		bool                           ReturnValue;
	} params;
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Values != nullptr)
		*Values = params.Values;

	return params.ReturnValue;
}


// Function Engine.Settings.IncrementStringSettingValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            StringSettingId                (CPF_Parm)
// int                            Direction                      (CPF_Parm)
// bool                           bShouldWrap                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::IncrementStringSettingValue(int StringSettingId, int Direction, bool bShouldWrap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.IncrementStringSettingValue");

	struct
	{
		int                            StringSettingId;
		int                            Direction;
		bool                           bShouldWrap;
		bool                           ReturnValue;
	} params;
	params.StringSettingId = StringSettingId;
	params.Direction = Direction;
	params.bShouldWrap = bShouldWrap;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Settings.GetStringSettingValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            StringSettingId                (CPF_Parm)
// int                            ValueIndex                     (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USettings::GetStringSettingValue(int StringSettingId, int* ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetStringSettingValue");

	struct
	{
		int                            StringSettingId;
		int                            ValueIndex;
		bool                           ReturnValue;
	} params;
	params.StringSettingId = StringSettingId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ValueIndex != nullptr)
		*ValueIndex = params.ValueIndex;

	return params.ReturnValue;
}


// Function Engine.Settings.SetStringSettingValue
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            StringSettingId                (CPF_Parm)
// int                            ValueIndex                     (CPF_Parm)
// bool                           bShouldAutoAdd                 (CPF_OptionalParm, CPF_Parm)

void USettings::SetStringSettingValue(int StringSettingId, int ValueIndex, bool bShouldAutoAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetStringSettingValue");

	struct
	{
		int                            StringSettingId;
		int                            ValueIndex;
		bool                           bShouldAutoAdd;
	} params;
	params.StringSettingId = StringSettingId;
	params.ValueIndex = ValueIndex;
	params.bShouldAutoAdd = bShouldAutoAdd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Settings.GetSettingsDataDateTime
// (FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (CPF_Parm, CPF_OutParm)
// int                            OutInt1                        (CPF_Parm, CPF_OutParm)
// int                            OutInt2                        (CPF_Parm, CPF_OutParm)

void USettings::STATIC_GetSettingsDataDateTime(struct FSettingsData* Data, int* OutInt1, int* OutInt2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataDateTime");

	struct
	{
		struct FSettingsData           Data;
		int                            OutInt1;
		int                            OutInt2;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (OutInt1 != nullptr)
		*OutInt1 = params.OutInt1;
	if (OutInt2 != nullptr)
		*OutInt2 = params.OutInt2;
}


// Function Engine.Settings.GetSettingsDataBlob
// (FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (CPF_Parm, CPF_OutParm)
// TArray<unsigned char>          OutBlob                        (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void USettings::STATIC_GetSettingsDataBlob(struct FSettingsData* Data, TArray<unsigned char>* OutBlob)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataBlob");

	struct
	{
		struct FSettingsData           Data;
		TArray<unsigned char>          OutBlob;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (OutBlob != nullptr)
		*OutBlob = params.OutBlob;
}


// Function Engine.Settings.GetSettingsDataInt
// (FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (CPF_Parm, CPF_OutParm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USettings::STATIC_GetSettingsDataInt(struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataInt");

	struct
	{
		struct FSettingsData           Data;
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

	return params.ReturnValue;
}


// Function Engine.Settings.GetSettingsDataFloat
// (FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (CPF_Parm, CPF_OutParm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USettings::STATIC_GetSettingsDataFloat(struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.GetSettingsDataFloat");

	struct
	{
		struct FSettingsData           Data;
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;

	return params.ReturnValue;
}


// Function Engine.Settings.EmptySettingsData
// (FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (CPF_Parm, CPF_OutParm)

void USettings::STATIC_EmptySettingsData(struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.EmptySettingsData");

	struct
	{
		struct FSettingsData           Data;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.Settings.SetSettingsData
// (FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (CPF_Parm, CPF_OutParm)
// struct FSettingsData           Data2Copy                      (CPF_Parm, CPF_OutParm)

void USettings::STATIC_SetSettingsData(struct FSettingsData* Data, struct FSettingsData* Data2Copy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsData");

	struct
	{
		struct FSettingsData           Data;
		struct FSettingsData           Data2Copy;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (Data2Copy != nullptr)
		*Data2Copy = params.Data2Copy;
}


// Function Engine.Settings.SetSettingsDataBlob
// (FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (CPF_Parm, CPF_OutParm)
// TArray<unsigned char>          InBlob                         (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void USettings::STATIC_SetSettingsDataBlob(struct FSettingsData* Data, TArray<unsigned char>* InBlob)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataBlob");

	struct
	{
		struct FSettingsData           Data;
		TArray<unsigned char>          InBlob;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
	if (InBlob != nullptr)
		*InBlob = params.InBlob;
}


// Function Engine.Settings.SetSettingsDataDateTime
// (FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (CPF_Parm, CPF_OutParm)
// int                            InInt1                         (CPF_Parm)
// int                            InInt2                         (CPF_Parm)

void USettings::STATIC_SetSettingsDataDateTime(int InInt1, int InInt2, struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataDateTime");

	struct
	{
		struct FSettingsData           Data;
		int                            InInt1;
		int                            InInt2;
	} params;
	params.InInt1 = InInt1;
	params.InInt2 = InInt2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.Settings.SetSettingsDataInt
// (FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (CPF_Parm, CPF_OutParm)
// int                            InInt                          (CPF_Parm)

void USettings::STATIC_SetSettingsDataInt(int InInt, struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataInt");

	struct
	{
		struct FSettingsData           Data;
		int                            InInt;
	} params;
	params.InInt = InInt;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.Settings.SetSettingsDataFloat
// (FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FSettingsData           Data                           (CPF_Parm, CPF_OutParm)
// float                          InFloat                        (CPF_Parm)

void USettings::STATIC_SetSettingsDataFloat(float InFloat, struct FSettingsData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Settings.SetSettingsDataFloat");

	struct
	{
		struct FSettingsData           Data;
		float                          InFloat;
	} params;
	params.InFloat = InFloat;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.OnlineGameSearch.CreateOnlineGameSettings
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UOnlineGameSettings*     ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UOnlineGameSettings* UOnlineGameSearch::CreateOnlineGameSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameSearch.CreateOnlineGameSettings");

	struct
	{
		class UOnlineGameSettings*     ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameSearch.SortSearchResults
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UOnlineGameSearch::SortSearchResults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameSearch.SortSearchResults");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameSearch.SetSkillOverride
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            LeaderboardId                  (CPF_Parm)
// TArray<struct FUniqueNetId>    Players                        (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UOnlineGameSearch::SetSkillOverride(int LeaderboardId, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameSearch.SetSkillOverride");

	struct
	{
		int                            LeaderboardId;
		TArray<struct FUniqueNetId>    Players;
	} params;
	params.LeaderboardId = LeaderboardId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;
}


// Function Engine.Surface.GetSurfaceHeight
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USurface::GetSurfaceHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Surface.GetSurfaceHeight");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Surface.GetSurfaceWidth
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USurface::GetSurfaceWidth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Surface.GetSurfaceWidth");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetOrCreateInstance
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UMaterialInstance*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMaterialInstance* UMaterialInterface::GetOrCreateInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetOrCreateInstance");

	struct
	{
		class UMaterialInstance*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.SetForceMipLevelsToBeResident
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           OverrideForceMiplevelsToBeResident (CPF_Parm)
// bool                           bForceMiplevelsToBeResidentValue (CPF_Parm)
// float                          ForceDuration                  (CPF_Parm)
// int                            CinematicTextureGroups         (CPF_OptionalParm, CPF_Parm)

void UMaterialInterface::SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.SetForceMipLevelsToBeResident");

	struct
	{
		bool                           OverrideForceMiplevelsToBeResident;
		bool                           bForceMiplevelsToBeResidentValue;
		float                          ForceDuration;
		int                            CinematicTextureGroups;
	} params;
	params.OverrideForceMiplevelsToBeResident = OverrideForceMiplevelsToBeResident;
	params.bForceMiplevelsToBeResidentValue = bForceMiplevelsToBeResidentValue;
	params.ForceDuration = ForceDuration;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInterface.GetMobileVectorParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FLinearColor            OutValue                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInterface::GetMobileVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetMobileVectorParameterValue");

	struct
	{
		struct FName                   ParameterName;
		struct FLinearColor            OutValue;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetMobileTextureParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class UTexture*                OutValue                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInterface::GetMobileTextureParameterValue(const struct FName& ParameterName, class UTexture** OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetMobileTextureParameterValue");

	struct
	{
		struct FName                   ParameterName;
		class UTexture*                OutValue;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetMobileScalarParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// float                          OutValue                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInterface::GetMobileScalarParameterValue(const struct FName& ParameterName, float* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetMobileScalarParameterValue");

	struct
	{
		struct FName                   ParameterName;
		float                          OutValue;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetGroupName
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FName                   GroupName                      (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInterface::GetGroupName(const struct FName& ParameterName, struct FName* GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetGroupName");

	struct
	{
		struct FName                   ParameterName;
		struct FName                   GroupName;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (GroupName != nullptr)
		*GroupName = params.GroupName;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetLinearColorCurveParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FInterpCurveLinearColor OutValue                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInterface::GetLinearColorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveLinearColor* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetLinearColorCurveParameterValue");

	struct
	{
		struct FName                   ParameterName;
		struct FInterpCurveLinearColor OutValue;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetLinearColorParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FLinearColor            OutValue                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInterface::GetLinearColorParameterValue(const struct FName& ParameterName, struct FLinearColor* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetLinearColorParameterValue");

	struct
	{
		struct FName                   ParameterName;
		struct FLinearColor            OutValue;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetVectorCurveParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FInterpCurveVector      OutValue                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInterface::GetVectorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveVector* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetVectorCurveParameterValue");

	struct
	{
		struct FName                   ParameterName;
		struct FInterpCurveVector      OutValue;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetVectorParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FLinearColor            OutValue                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInterface::GetVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetVectorParameterValue");

	struct
	{
		struct FName                   ParameterName;
		struct FLinearColor            OutValue;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetTextureParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class UTexture*                OutValue                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInterface::GetTextureParameterValue(const struct FName& ParameterName, class UTexture** OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetTextureParameterValue");

	struct
	{
		struct FName                   ParameterName;
		class UTexture*                OutValue;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetScalarCurveParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FInterpCurveFloat       OutValue                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInterface::GetScalarCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveFloat* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetScalarCurveParameterValue");

	struct
	{
		struct FName                   ParameterName;
		struct FInterpCurveFloat       OutValue;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetScalarParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// float                          OutValue                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInterface::GetScalarParameterValue(const struct FName& ParameterName, float* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetScalarParameterValue");

	struct
	{
		struct FName                   ParameterName;
		float                          OutValue;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetFontParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class UFont*                   OutFontValue                   (CPF_Parm, CPF_OutParm)
// int                            OutFontPage                    (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInterface::GetFontParameterValue(const struct FName& ParameterName, class UFont** OutFontValue, int* OutFontPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetFontParameterValue");

	struct
	{
		struct FName                   ParameterName;
		class UFont*                   OutFontValue;
		int                            OutFontPage;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutFontValue != nullptr)
		*OutFontValue = params.OutFontValue;
	if (OutFontPage != nullptr)
		*OutFontPage = params.OutFontPage;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetParameterDesc
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FString                 OutDesc                        (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInterface::GetParameterDesc(const struct FName& ParameterName, struct FString* OutDesc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetParameterDesc");

	struct
	{
		struct FName                   ParameterName;
		struct FString                 OutDesc;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutDesc != nullptr)
		*OutDesc = params.OutDesc;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetPhysicalMaterial
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UPhysicalMaterial*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UPhysicalMaterial* UMaterialInterface::GetPhysicalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetPhysicalMaterial");

	struct
	{
		class UPhysicalMaterial*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInterface.GetMaterial
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UMaterial*               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMaterial* UMaterialInterface::GetMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInterface.GetMaterial");

	struct
	{
		class UMaterial*               ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.GetMaxLifespan
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          InComponentDelay               (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UParticleSystem::GetMaxLifespan(float InComponentDelay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.GetMaxLifespan");

	struct
	{
		float                          InComponentDelay;
		float                          ReturnValue;
	} params;
	params.InComponentDelay = InComponentDelay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.SetLODDistance
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            LODLevelIndex                  (CPF_Parm)
// float                          InDistance                     (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UParticleSystem::SetLODDistance(int LODLevelIndex, float InDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.SetLODDistance");

	struct
	{
		int                            LODLevelIndex;
		float                          InDistance;
		bool                           ReturnValue;
	} params;
	params.LODLevelIndex = LODLevelIndex;
	params.InDistance = InDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.SetCurrentLODMethod
// (FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ParticleSystemLODMethod> InMethod                       (CPF_Parm)

void UParticleSystem::SetCurrentLODMethod(TEnumAsByte<enum class ParticleSystemLODMethod> InMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.SetCurrentLODMethod");

	struct
	{
		TEnumAsByte<enum class ParticleSystemLODMethod> InMethod;
	} params;
	params.InMethod = InMethod;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystem.GetLODDistance
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            LODLevelIndex                  (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UParticleSystem::GetLODDistance(int LODLevelIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.GetLODDistance");

	struct
	{
		int                            LODLevelIndex;
		float                          ReturnValue;
	} params;
	params.LODLevelIndex = LODLevelIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.GetLODLevelCount
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UParticleSystem::GetLODLevelCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.GetLODLevelCount");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystem.GetCurrentLODMethod
// (FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ParticleSystemLODMethod> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class ParticleSystemLODMethod> UParticleSystem::GetCurrentLODMethod()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystem.GetCurrentLODMethod");

	struct
	{
		TEnumAsByte<enum class ParticleSystemLODMethod> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Texture2D.Create
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            InSizeX                        (CPF_Parm)
// int                            InSizeY                        (CPF_Parm)
// TEnumAsByte<enum class EPixelFormat> InFormat                       (CPF_OptionalParm, CPF_Parm)
// class UTexture2D*              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UTexture2D* UTexture2D::STATIC_Create(int InSizeX, int InSizeY, TEnumAsByte<enum class EPixelFormat> InFormat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.Create");

	struct
	{
		int                            InSizeX;
		int                            InSizeY;
		TEnumAsByte<enum class EPixelFormat> InFormat;
		class UTexture2D*              ReturnValue;
	} params;
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;
	params.InFormat = InFormat;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Texture2D.SetForceMipLevelsToBeResident
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          Seconds                        (CPF_Parm)
// int                            CinematicTextureGroups         (CPF_OptionalParm, CPF_Parm)

void UTexture2D::SetForceMipLevelsToBeResident(float Seconds, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2D.SetForceMipLevelsToBeResident");

	struct
	{
		float                          Seconds;
		int                            CinematicTextureGroups;
	} params;
	params.Seconds = Seconds;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TranslationContext.RegisterTranslatorTag
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UTranslatorTag*          InTagHandler                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UTranslationContext::RegisterTranslatorTag(class UTranslatorTag* InTagHandler)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TranslationContext.RegisterTranslatorTag");

	struct
	{
		class UTranslatorTag*          InTagHandler;
		bool                           ReturnValue;
	} params;
	params.InTagHandler = InTagHandler;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TranslatorTag.Translate
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 InArgument                     (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UTranslatorTag::Translate(const struct FString& InArgument)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TranslatorTag.Translate");

	struct
	{
		struct FString                 InArgument;
		struct FString                 ReturnValue;
	} params;
	params.InArgument = InArgument;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StringsTag.Translate
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 InArgument                     (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UStringsTag::Translate(const struct FString& InArgument)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StringsTag.Translate");

	struct
	{
		struct FString                 InArgument;
		struct FString                 ReturnValue;
	} params;
	params.InArgument = InArgument;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.SafeCaps
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 StringToCap                    (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UUIRoot::STATIC_SafeCaps(const struct FString& StringToCap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.SafeCaps");

	struct
	{
		struct FString                 StringToCap;
		struct FString                 ReturnValue;
	} params;
	params.StringToCap = StringToCap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetOnlinePlayerInterfaceEx
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// TScriptInterface<class UOnlinePlayerInterfaceEx> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TScriptInterface<class UOnlinePlayerInterfaceEx> UUIRoot::STATIC_GetOnlinePlayerInterfaceEx()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetOnlinePlayerInterfaceEx");

	struct
	{
		TScriptInterface<class UOnlinePlayerInterfaceEx> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetOnlinePlayerInterface
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TScriptInterface<class UOnlinePlayerInterface> UUIRoot::STATIC_GetOnlinePlayerInterface()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetOnlinePlayerInterface");

	struct
	{
		TScriptInterface<class UOnlinePlayerInterface> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetOnlineGameInterface
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// TScriptInterface<class UOnlineGameInterface> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TScriptInterface<class UOnlineGameInterface> UUIRoot::STATIC_GetOnlineGameInterface()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetOnlineGameInterface");

	struct
	{
		TScriptInterface<class UOnlineGameInterface> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.StaticResolveDataStore
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   DataStoreTag                   (CPF_Parm)
// class ULocalPlayer*            InPlayerOwner                  (CPF_OptionalParm, CPF_Parm)
// class UUIDataStore*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UUIDataStore* UUIRoot::STATIC_StaticResolveDataStore(const struct FName& DataStoreTag, class ULocalPlayer* InPlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.StaticResolveDataStore");

	struct
	{
		struct FName                   DataStoreTag;
		class ULocalPlayer*            InPlayerOwner;
		class UUIDataStore*            ReturnValue;
	} params;
	params.DataStoreTag = DataStoreTag;
	params.InPlayerOwner = InPlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetSceneClient
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UGameUISceneClient*      ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UGameUISceneClient* UUIRoot::STATIC_GetSceneClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetSceneClient");

	struct
	{
		class UGameUISceneClient*      ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetCurrentUIController
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UUIInteraction*          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UUIInteraction* UUIRoot::STATIC_GetCurrentUIController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetCurrentUIController");

	struct
	{
		class UUIInteraction*          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIRoot.GetInputPlatformType
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class ULocalPlayer*            OwningPlayer                   (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class EInputPlatformType> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EInputPlatformType> UUIRoot::STATIC_GetInputPlatformType(class ULocalPlayer* OwningPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIRoot.GetInputPlatformType");

	struct
	{
		class ULocalPlayer*            OwningPlayer;
		TEnumAsByte<enum class EInputPlatformType> ReturnValue;
	} params;
	params.OwningPlayer = OwningPlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interaction.NotifyPlayerRemoved
// (FUNC_Public)
// Parameters:
// int                            PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            RemovedPlayer                  (CPF_Parm)

void UInteraction::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.NotifyPlayerRemoved");

	struct
	{
		int                            PlayerIndex;
		class ULocalPlayer*            RemovedPlayer;
	} params;
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.NotifyPlayerAdded
// (FUNC_Public)
// Parameters:
// int                            PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            AddedPlayer                    (CPF_Parm)

void UInteraction::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.NotifyPlayerAdded");

	struct
	{
		int                            PlayerIndex;
		class ULocalPlayer*            AddedPlayer;
	} params;
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.NotifyGameSessionEnded
// (FUNC_Public)

void UInteraction::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.NotifyGameSessionEnded");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.Initialized
// (FUNC_Public)

void UInteraction::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Initialized");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.OnInitialize
// (FUNC_Public, FUNC_Delegate)

void UInteraction::OnInitialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnInitialize");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.Init
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UInteraction::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.PostRender
// (FUNC_Event, FUNC_Public)
// Parameters:
// class UCanvas*                 Canvas                         (CPF_Parm)

void UInteraction::PostRender(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.PostRender");

	struct
	{
		class UCanvas*                 Canvas;
	} params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.Tick
// (FUNC_Event, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void UInteraction::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Tick");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.OnReceivedNativeInputChar
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// struct FString                 Unicode                        (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UInteraction::OnReceivedNativeInputChar(int ControllerId, const struct FString& Unicode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnReceivedNativeInputChar");

	struct
	{
		int                            ControllerId;
		struct FString                 Unicode;
		bool                           ReturnValue;
	} params;
	params.ControllerId = ControllerId;
	params.Unicode = Unicode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interaction.OnReceivedNativeInputAxis
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_Delegate)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// struct FName                   Key                            (CPF_Parm)
// float                          Delta                          (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)
// bool                           bGamepad                       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UInteraction::OnReceivedNativeInputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnReceivedNativeInputAxis");

	struct
	{
		int                            ControllerId;
		struct FName                   Key;
		float                          Delta;
		float                          DeltaTime;
		bool                           bGamepad;
		bool                           ReturnValue;
	} params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.Delta = Delta;
	params.DeltaTime = DeltaTime;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interaction.OnReceivedNativeInputKey
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_Delegate)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// struct FName                   Key                            (CPF_Parm)
// TEnumAsByte<enum class EInputEvent> EventType                      (CPF_Parm)
// float                          AmountDepressed                (CPF_OptionalParm, CPF_Parm)
// bool                           bGamepad                       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UInteraction::OnReceivedNativeInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<enum class EInputEvent> EventType, float AmountDepressed, bool bGamepad)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnReceivedNativeInputKey");

	struct
	{
		int                            ControllerId;
		struct FName                   Key;
		TEnumAsByte<enum class EInputEvent> EventType;
		float                          AmountDepressed;
		bool                           bGamepad;
		bool                           ReturnValue;
	} params;
	params.ControllerId = ControllerId;
	params.Key = Key;
	params.EventType = EventType;
	params.AmountDepressed = AmountDepressed;
	params.bGamepad = bGamepad;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.NotifyGameSessionEnded
// (FUNC_Defined, FUNC_Public)

void UUIInteraction::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.NotifyGameSessionEnded");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIInteraction.GetNATType
// (FUNC_Final, FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ENATType> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class ENATType> UUIInteraction::STATIC_GetNATType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetNATType");

	struct
	{
		TEnumAsByte<enum class ENATType> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetConnectedGamepadCount
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// TArray<unsigned long>          ControllerConnectionStatusOverrides (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UUIInteraction::STATIC_GetConnectedGamepadCount(TArray<unsigned long> ControllerConnectionStatusOverrides)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetConnectedGamepadCount");

	struct
	{
		TArray<unsigned long>          ControllerConnectionStatusOverrides;
		int                            ReturnValue;
	} params;
	params.ControllerConnectionStatusOverrides = ControllerConnectionStatusOverrides;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.IsGamepadConnected
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIInteraction::STATIC_IsGamepadConnected(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.IsGamepadConnected");

	struct
	{
		int                            ControllerId;
		bool                           ReturnValue;
	} params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetNumGuestsLoggedIn
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UUIInteraction::STATIC_GetNumGuestsLoggedIn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetNumGuestsLoggedIn");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetLoggedInPlayerCount
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bRequireOnlineLogin            (CPF_OptionalParm, CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UUIInteraction::STATIC_GetLoggedInPlayerCount(bool bRequireOnlineLogin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetLoggedInPlayerCount");

	struct
	{
		bool                           bRequireOnlineLogin;
		int                            ReturnValue;
	} params;
	params.bRequireOnlineLogin = bRequireOnlineLogin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.IsLoggedIn
// (FUNC_Final, FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// bool                           bRequireOnlineLogin            (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIInteraction::STATIC_IsLoggedIn(int ControllerId, bool bRequireOnlineLogin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.IsLoggedIn");

	struct
	{
		int                            ControllerId;
		bool                           bRequireOnlineLogin;
		bool                           ReturnValue;
	} params;
	params.ControllerId = ControllerId;
	params.bRequireOnlineLogin = bRequireOnlineLogin;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.HasLinkConnection
// (FUNC_Final, FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIInteraction::STATIC_HasLinkConnection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.HasLinkConnection");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetLowestLoginStatusOfControllers
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ELoginStatus> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class ELoginStatus> UUIInteraction::GetLowestLoginStatusOfControllers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetLowestLoginStatusOfControllers");

	struct
	{
		TEnumAsByte<enum class ELoginStatus> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetLoginStatus
// (FUNC_Final, FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// TEnumAsByte<enum class ELoginStatus> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class ELoginStatus> UUIInteraction::STATIC_GetLoginStatus(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetLoginStatus");

	struct
	{
		int                            ControllerId;
		TEnumAsByte<enum class ELoginStatus> ReturnValue;
	} params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.NotifyPlayerRemoved
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// int                            PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            RemovedPlayer                  (CPF_Parm)

void UUIInteraction::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.NotifyPlayerRemoved");

	struct
	{
		int                            PlayerIndex;
		class ULocalPlayer*            RemovedPlayer;
	} params;
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIInteraction.NotifyPlayerAdded
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// int                            PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            AddedPlayer                    (CPF_Parm)

void UUIInteraction::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.NotifyPlayerAdded");

	struct
	{
		int                            PlayerIndex;
		class ULocalPlayer*            AddedPlayer;
	} params;
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIInteraction.GetLocalPlayer
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// int                            PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ULocalPlayer* UUIInteraction::STATIC_GetLocalPlayer(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetLocalPlayer");

	struct
	{
		int                            PlayerIndex;
		class ULocalPlayer*            ReturnValue;
	} params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetDataStoreClient
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UDataStoreClient*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UDataStoreClient* UUIInteraction::STATIC_GetDataStoreClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetDataStoreClient");

	struct
	{
		class UDataStoreClient*        ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetPlayerControllerId
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// int                            PlayerIndex                    (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UUIInteraction::STATIC_GetPlayerControllerId(int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetPlayerControllerId");

	struct
	{
		int                            PlayerIndex;
		int                            ReturnValue;
	} params;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetPlayerIndex
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UUIInteraction::STATIC_GetPlayerIndex(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetPlayerIndex");

	struct
	{
		int                            ControllerId;
		int                            ReturnValue;
	} params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIInteraction.GetPlayerCount
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UUIInteraction::STATIC_GetPlayerCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIInteraction.GetPlayerCount");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIManager.FindLocalPlayerIndex
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UPlayer*                 P                              (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UUIManager::FindLocalPlayerIndex(class UPlayer* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIManager.FindLocalPlayerIndex");

	struct
	{
		class UPlayer*                 P;
		int                            ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIManager.NotifyPlayerRemoved
// (FUNC_Public)
// Parameters:
// int                            PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            RemovedPlayer                  (CPF_Parm)

void UUIManager::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIManager.NotifyPlayerRemoved");

	struct
	{
		int                            PlayerIndex;
		class ULocalPlayer*            RemovedPlayer;
	} params;
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIManager.NotifyPlayerAdded
// (FUNC_Public)
// Parameters:
// int                            PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            AddedPlayer                    (CPF_Parm)

void UUIManager::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIManager.NotifyPlayerAdded");

	struct
	{
		int                            PlayerIndex;
		class ULocalPlayer*            AddedPlayer;
	} params;
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIManager.PauseGame
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bDesiredPauseState             (CPF_Parm)
// int                            PlayerIndex                    (CPF_OptionalParm, CPF_Parm)

void UUIManager::PauseGame(bool bDesiredPauseState, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIManager.PauseGame");

	struct
	{
		bool                           bDesiredPauseState;
		int                            PlayerIndex;
	} params;
	params.bDesiredPauseState = bDesiredPauseState;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIManager.CanUnpauseInternalUI
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIManager::CanUnpauseInternalUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIManager.CanUnpauseInternalUI");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIManager.GetUIManager
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UUIManager*              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UUIManager* UUIManager::STATIC_GetUIManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIManager.GetUIManager");

	struct
	{
		class UUIManager*              ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.EnvironmentVolume.SetSplitNavMesh
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewValue                      (CPF_Parm)

void AEnvironmentVolume::SetSplitNavMesh(bool bNewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EnvironmentVolume.SetSplitNavMesh");

	struct
	{
		bool                           bNewValue;
	} params;
	params.bNewValue = bNewValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.CanFireWeapon
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AWeapon*                 Wpn                            (CPF_Parm)
// unsigned char                  FireModeNum                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AAIController::CanFireWeapon(class AWeapon* Wpn, unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.CanFireWeapon");

	struct
	{
		class AWeapon*                 Wpn;
		unsigned char                  FireModeNum;
		bool                           ReturnValue;
	} params;
	params.Wpn = Wpn;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.NotifyWeaponFinishedFiring
// (FUNC_Public)
// Parameters:
// class AWeapon*                 W                              (CPF_Parm)
// unsigned char                  FireMode                       (CPF_Parm)

void AAIController::NotifyWeaponFinishedFiring(class AWeapon* W, unsigned char FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.NotifyWeaponFinishedFiring");

	struct
	{
		class AWeapon*                 W;
		unsigned char                  FireMode;
	} params;
	params.W = W;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.NotifyWeaponFired
// (FUNC_Public)
// Parameters:
// class AWeapon*                 W                              (CPF_Parm)
// unsigned char                  FireMode                       (CPF_Parm)

void AAIController::NotifyWeaponFired(class AWeapon* W, unsigned char FireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.NotifyWeaponFired");

	struct
	{
		class AWeapon*                 W;
		unsigned char                  FireMode;
	} params;
	params.W = W;
	params.FireMode = FireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.OnAIMoveToActor
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_AIMoveToActor*   Action                         (CPF_Parm)

void AAIController::OnAIMoveToActor(class USeqAct_AIMoveToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.OnAIMoveToActor");

	struct
	{
		class USeqAct_AIMoveToActor*   Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.SetTeam
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            inTeamIdx                      (CPF_Parm)

void AAIController::SetTeam(int inTeamIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.SetTeam");

	struct
	{
		int                            inTeamIdx;
	} params;
	params.inTeamIdx = inTeamIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.DisplayDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm, CPF_OutParm)
// float                          out_YPos                       (CPF_Parm, CPF_OutParm)

void AAIController::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.DisplayDebug");

	struct
	{
		class AHUD*                    HUD;
		float                          out_YL;
		float                          out_YPos;
	} params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.AIController.Reset
// (FUNC_Defined, FUNC_Public)

void AAIController::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.PreBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AAIController::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.PreBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CrowdAgentBase.NotifyPathChanged
// (FUNC_Event, FUNC_Public)

void ACrowdAgentBase::NotifyPathChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CrowdAgentBase.NotifyPathChanged");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PathTargetPoint.ShouldBeHiddenBySHOW_NavigationNodes
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APathTargetPoint::ShouldBeHiddenBySHOW_NavigationNodes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PathTargetPoint.ShouldBeHiddenBySHOW_NavigationNodes");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshObstacle.ApplyCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ANavMeshObstacle_FCheckpointRecord Record                         (CPF_Const, CPF_Parm, CPF_OutParm)

void ANavMeshObstacle::ApplyCheckpointRecord(struct ANavMeshObstacle_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.ApplyCheckpointRecord");

	struct
	{
		struct ANavMeshObstacle_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.NavMeshObstacle.CreateCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ANavMeshObstacle_FCheckpointRecord Record                         (CPF_Parm, CPF_OutParm)

void ANavMeshObstacle::CreateCheckpointRecord(struct ANavMeshObstacle_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.CreateCheckpointRecord");

	struct
	{
		struct ANavMeshObstacle_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.NavMeshObstacle.SetEnabled
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bInEnabled                     (CPF_Parm)

void ANavMeshObstacle::SetEnabled(bool bInEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.SetEnabled");

	struct
	{
		bool                           bInEnabled;
	} params;
	params.bInEnabled = bInEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshObstacle.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ANavMeshObstacle::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshObstacle.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void ANavMeshObstacle::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshObstacle.UnRegisterObstacle
// (FUNC_Native, FUNC_Public)

void ANavMeshObstacle::UnRegisterObstacle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.UnRegisterObstacle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshObstacle.RegisterObstacle
// (FUNC_Native, FUNC_Public)

void ANavMeshObstacle::RegisterObstacle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.RegisterObstacle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshObstacle.GetObstacleBoudingShape
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// TArray<struct FVector>         Shape                          (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ANavMeshObstacle::GetObstacleBoudingShape(TArray<struct FVector>* Shape)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshObstacle.GetObstacleBoudingShape");

	struct
	{
		TArray<struct FVector>         Shape;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Shape != nullptr)
		*Shape = params.Shape;

	return params.ReturnValue;
}


// Function Engine.MeshComponent.ForceMipLevelsToBeResident
// (FUNC_Defined, FUNC_Public)

void UMeshComponent::ForceMipLevelsToBeResident()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.ForceMipLevelsToBeResident");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MeshComponent.SetLinearColorParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   Key                            (CPF_Parm)
// struct FLinearColor            Value                          (CPF_Parm)

void UMeshComponent::SetLinearColorParameter(const struct FName& Key, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.SetLinearColorParameter");

	struct
	{
		struct FName                   Key;
		struct FLinearColor            Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MeshComponent.SetVectorParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   Key                            (CPF_Parm)
// struct FVector                 Value                          (CPF_Parm)

void UMeshComponent::SetVectorParameter(const struct FName& Key, const struct FVector& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.SetVectorParameter");

	struct
	{
		struct FName                   Key;
		struct FVector                 Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MeshComponent.SetFloatParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   Key                            (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UMeshComponent::SetFloatParameter(const struct FName& Key, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.SetFloatParameter");

	struct
	{
		struct FName                   Key;
		float                          Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MeshComponent.SetNameParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   Key                            (CPF_Parm)
// struct FName                   Value                          (CPF_Parm)

void UMeshComponent::SetNameParameter(const struct FName& Key, const struct FName& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.SetNameParameter");

	struct
	{
		struct FName                   Key;
		struct FName                   Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MeshComponent.ConditionalCreateMIC
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            ElementIndex                   (CPF_Parm)
// class UMaterialInstanceConstant* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMaterialInstanceConstant* UMeshComponent::ConditionalCreateMIC(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.ConditionalCreateMIC");

	struct
	{
		int                            ElementIndex;
		class UMaterialInstanceConstant* ReturnValue;
	} params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MeshComponent.CreateAndSetMaterialInstanceTimeVarying
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            ElementIndex                   (CPF_Parm)
// class UMaterialInstanceTimeVarying* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMaterialInstanceTimeVarying* UMeshComponent::CreateAndSetMaterialInstanceTimeVarying(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.CreateAndSetMaterialInstanceTimeVarying");

	struct
	{
		int                            ElementIndex;
		class UMaterialInstanceTimeVarying* ReturnValue;
	} params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MeshComponent.CreateAndSetMaterialInstanceConstant
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            ElementIndex                   (CPF_Parm)
// class UMaterialInstanceConstant* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMaterialInstanceConstant* UMeshComponent::CreateAndSetMaterialInstanceConstant(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.CreateAndSetMaterialInstanceConstant");

	struct
	{
		int                            ElementIndex;
		class UMaterialInstanceConstant* ReturnValue;
	} params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MeshComponent.PrestreamTextures
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          Seconds                        (CPF_Parm)
// bool                           bPrioritizeCharacterTextures   (CPF_Parm)
// int                            CinematicTextureGroups         (CPF_OptionalParm, CPF_Parm)

void UMeshComponent::PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.PrestreamTextures");

	struct
	{
		float                          Seconds;
		bool                           bPrioritizeCharacterTextures;
		int                            CinematicTextureGroups;
	} params;
	params.Seconds = Seconds;
	params.bPrioritizeCharacterTextures = bPrioritizeCharacterTextures;
	params.CinematicTextureGroups = CinematicTextureGroups;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MeshComponent.GetNumElements
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UMeshComponent::GetNumElements()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetNumElements");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MeshComponent.SetMaterial
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ElementIndex                   (CPF_Parm)
// class UMaterialInterface*      Material                       (CPF_Parm)

void UMeshComponent::SetMaterial(int ElementIndex, class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.SetMaterial");

	struct
	{
		int                            ElementIndex;
		class UMaterialInterface*      Material;
	} params;
	params.ElementIndex = ElementIndex;
	params.Material = Material;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MeshComponent.GetDefaultMaterial
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ElementIndex                   (CPF_Parm)
// class UMaterialInterface*      ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMaterialInterface* UMeshComponent::GetDefaultMaterial(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetDefaultMaterial");

	struct
	{
		int                            ElementIndex;
		class UMaterialInterface*      ReturnValue;
	} params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MeshComponent.GetMaterial
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ElementIndex                   (CPF_Parm)
// class UMaterialInterface*      ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMaterialInterface* UMeshComponent::GetMaterial(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MeshComponent.GetMaterial");

	struct
	{
		int                            ElementIndex;
		class UMaterialInterface*      ReturnValue;
	} params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StaticMeshComponent.LineCheckUVs
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 TraceEnd                       (CPF_Parm)
// struct FVector                 TraceStart                     (CPF_Parm)
// struct FVector2D               OutUVs                         (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UStaticMeshComponent::LineCheckUVs(const struct FVector& TraceEnd, const struct FVector& TraceStart, struct FVector2D* OutUVs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.LineCheckUVs");

	struct
	{
		struct FVector                 TraceEnd;
		struct FVector                 TraceStart;
		struct FVector2D               OutUVs;
		bool                           ReturnValue;
	} params;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutUVs != nullptr)
		*OutUVs = params.OutUVs;

	return params.ReturnValue;
}


// Function Engine.StaticMeshComponent.CanBecomeDynamic
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UStaticMeshComponent::CanBecomeDynamic()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.CanBecomeDynamic");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StaticMeshComponent.SetForceStaticDecals
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bInForceStaticDecals           (CPF_Parm)

void UStaticMeshComponent::SetForceStaticDecals(bool bInForceStaticDecals)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetForceStaticDecals");

	struct
	{
		bool                           bInForceStaticDecals;
	} params;
	params.bInForceStaticDecals = bInForceStaticDecals;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshComponent.DisableRBCollisionWithSMC
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// class UPrimitiveComponent*     OtherSMC                       (CPF_Parm, CPF_EditInline)
// bool                           bDisabled                      (CPF_Parm)

void UStaticMeshComponent::DisableRBCollisionWithSMC(class UPrimitiveComponent* OtherSMC, bool bDisabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.DisableRBCollisionWithSMC");

	struct
	{
		class UPrimitiveComponent*     OtherSMC;
		bool                           bDisabled;
	} params;
	params.OtherSMC = OtherSMC;
	params.bDisabled = bDisabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshComponent.SetStaticMesh
// (FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UStaticMesh*             NewMesh                        (CPF_Parm)
// bool                           bForce                         (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UStaticMeshComponent::SetStaticMesh(class UStaticMesh* NewMesh, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshComponent.SetStaticMesh");

	struct
	{
		class UStaticMesh*             NewMesh;
		bool                           bForce;
		bool                           ReturnValue;
	} params;
	params.NewMesh = NewMesh;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AICommandBase.GetUtility
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// class AAIController*           InAI                           (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UAICommandBase::STATIC_GetUtility(class AAIController* InAI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AICommandBase.GetUtility");

	struct
	{
		class AAIController*           InAI;
		int                            ReturnValue;
	} params;
	params.InAI = InAI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interface_NavMeshPathSwitch.AIActivateSwitch
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AAIController*           AI                             (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UInterface_NavMeshPathSwitch::AIActivateSwitch(class AAIController* AI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interface_NavMeshPathSwitch.AIActivateSwitch");

	struct
	{
		class AAIController*           AI;
		bool                           ReturnValue;
	} params;
	params.AI = AI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetClosestPointOnMesh
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 SearchPoint                    (CPF_Parm, CPF_OutParm)
// float                          SearchRadius                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::STATIC_GetClosestPointOnMesh(float SearchRadius, struct FVector* SearchPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetClosestPointOnMesh");

	struct
	{
		struct FVector                 SearchPoint;
		float                          SearchRadius;
		bool                           ReturnValue;
	} params;
	params.SearchRadius = SearchRadius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SearchPoint != nullptr)
		*SearchPoint = params.SearchPoint;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.DrawBreadCrumbs
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bPersistent                    (CPF_OptionalParm, CPF_Parm)

void UNavigationHandle::DrawBreadCrumbs(bool bPersistent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.DrawBreadCrumbs");

	struct
	{
		bool                           bPersistent;
	} params;
	params.bPersistent = bPersistent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationHandle.StaticGetValidatedAnchorPosition
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 out_NewAnchorLoc               (CPF_Parm, CPF_OutParm)
// struct FVector                 StartCheckBaseLocation         (CPF_Parm)
// struct FVector                 Extent                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::STATIC_StaticGetValidatedAnchorPosition(const struct FVector& StartCheckBaseLocation, const struct FVector& Extent, struct FVector* out_NewAnchorLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.StaticGetValidatedAnchorPosition");

	struct
	{
		struct FVector                 out_NewAnchorLoc;
		struct FVector                 StartCheckBaseLocation;
		struct FVector                 Extent;
		bool                           ReturnValue;
	} params;
	params.StartCheckBaseLocation = StartCheckBaseLocation;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_NewAnchorLoc != nullptr)
		*out_NewAnchorLoc = params.out_NewAnchorLoc;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetValidatedAnchorPosition
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 out_NewAnchorLoc               (CPF_Parm, CPF_OutParm)
// struct FVector                 OverrideStartLoc               (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::GetValidatedAnchorPosition(const struct FVector& OverrideStartLoc, struct FVector* out_NewAnchorLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetValidatedAnchorPosition");

	struct
	{
		struct FVector                 out_NewAnchorLoc;
		struct FVector                 OverrideStartLoc;
		bool                           ReturnValue;
	} params;
	params.OverrideStartLoc = OverrideStartLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_NewAnchorLoc != nullptr)
		*out_NewAnchorLoc = params.out_NewAnchorLoc;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetAllCoverSlotsInRadius
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 FromLoc                        (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// TArray<struct FCoverInfo>      out_CoverList                  (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::STATIC_GetAllCoverSlotsInRadius(const struct FVector& FromLoc, float Radius, TArray<struct FCoverInfo>* out_CoverList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetAllCoverSlotsInRadius");

	struct
	{
		struct FVector                 FromLoc;
		float                          Radius;
		TArray<struct FCoverInfo>      out_CoverList;
		bool                           ReturnValue;
	} params;
	params.FromLoc = FromLoc;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CoverList != nullptr)
		*out_CoverList = params.out_CoverList;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.PopulatePathfindingParamCache
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::PopulatePathfindingParamCache()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PopulatePathfindingParamCache");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.MoveToDesiredHeightAboveMesh
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FVector                 Point                          (CPF_Parm)
// float                          Height                         (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector UNavigationHandle::STATIC_MoveToDesiredHeightAboveMesh(const struct FVector& Point, float Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.MoveToDesiredHeightAboveMesh");

	struct
	{
		struct FVector                 Point;
		float                          Height;
		struct FVector                 ReturnValue;
	} params;
	params.Point = Point;
	params.Height = Height;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.CopyMovePointsFromPathCache
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 FinalDest                      (CPF_Parm)
// TArray<struct FVector>         out_MovePoints                 (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UNavigationHandle::CopyMovePointsFromPathCache(const struct FVector& FinalDest, TArray<struct FVector>* out_MovePoints)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.CopyMovePointsFromPathCache");

	struct
	{
		struct FVector                 FinalDest;
		TArray<struct FVector>         out_MovePoints;
	} params;
	params.FinalDest = FinalDest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_MovePoints != nullptr)
		*out_MovePoints = params.out_MovePoints;
}


// Function Engine.NavigationHandle.CalculatePathDistance
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 FinalDest                      (CPF_OptionalParm, CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UNavigationHandle::CalculatePathDistance(const struct FVector& FinalDest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.CalculatePathDistance");

	struct
	{
		struct FVector                 FinalDest;
		float                          ReturnValue;
	} params;
	params.FinalDest = FinalDest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetFirstMoveLocation
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector UNavigationHandle::GetFirstMoveLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetFirstMoveLocation");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.IsAnchorInescapable
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::IsAnchorInescapable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.IsAnchorInescapable");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.LimitPathCacheDistance
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          MaxDist                        (CPF_Parm)

void UNavigationHandle::LimitPathCacheDistance(float MaxDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.LimitPathCacheDistance");

	struct
	{
		float                          MaxDist;
	} params;
	params.MaxDist = MaxDist;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationHandle.GetValidPositionsForBox
// (FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 pos                            (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// struct FVector                 Extent                         (CPF_Parm)
// bool                           bMustBeReachableFromStartPos   (CPF_Parm)
// TArray<struct FVector>         out_ValidPositions             (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            MaxPositions                   (CPF_OptionalParm, CPF_Parm)
// float                          MinRadius                      (CPF_OptionalParm, CPF_Parm)
// struct FVector                 ValidBoxAroundStartPos         (CPF_OptionalParm, CPF_Parm)

void UNavigationHandle::STATIC_GetValidPositionsForBox(const struct FVector& pos, float Radius, const struct FVector& Extent, bool bMustBeReachableFromStartPos, int MaxPositions, float MinRadius, const struct FVector& ValidBoxAroundStartPos, TArray<struct FVector>* out_ValidPositions)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetValidPositionsForBox");

	struct
	{
		struct FVector                 pos;
		float                          Radius;
		struct FVector                 Extent;
		bool                           bMustBeReachableFromStartPos;
		TArray<struct FVector>         out_ValidPositions;
		int                            MaxPositions;
		float                          MinRadius;
		struct FVector                 ValidBoxAroundStartPos;
	} params;
	params.pos = pos;
	params.Radius = Radius;
	params.Extent = Extent;
	params.bMustBeReachableFromStartPos = bMustBeReachableFromStartPos;
	params.MaxPositions = MaxPositions;
	params.MinRadius = MinRadius;
	params.ValidBoxAroundStartPos = ValidBoxAroundStartPos;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ValidPositions != nullptr)
		*out_ValidPositions = params.out_ValidPositions;
}


// Function Engine.NavigationHandle.GetAllPolyCentersWithinBounds
// (FUNC_Native, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 pos                            (CPF_Parm)
// struct FVector                 Extent                         (CPF_Parm)
// TArray<struct FVector>         out_PolyCtrs                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UNavigationHandle::STATIC_GetAllPolyCentersWithinBounds(const struct FVector& pos, const struct FVector& Extent, TArray<struct FVector>* out_PolyCtrs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetAllPolyCentersWithinBounds");

	struct
	{
		struct FVector                 pos;
		struct FVector                 Extent;
		TArray<struct FVector>         out_PolyCtrs;
	} params;
	params.pos = pos;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_PolyCtrs != nullptr)
		*out_PolyCtrs = params.out_PolyCtrs;
}


// Function Engine.NavigationHandle.GetCurrentEdgeType
// (FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ENavMeshEdgeType> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class ENavMeshEdgeType> UNavigationHandle::GetCurrentEdgeType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetCurrentEdgeType");

	struct
	{
		TEnumAsByte<enum class ENavMeshEdgeType> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.ClearCurrentEdge
// (FUNC_Native, FUNC_Public)

void UNavigationHandle::ClearCurrentEdge()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ClearCurrentEdge");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationHandle.GetCurrentEdgeDebugText
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UNavigationHandle::GetCurrentEdgeDebugText()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetCurrentEdgeDebugText");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.PrintPathCacheDebugText
// (FUNC_Native, FUNC_Public)

void UNavigationHandle::PrintPathCacheDebugText()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PrintPathCacheDebugText");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationHandle.DrawPathCache
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 DrawOffset                     (CPF_OptionalParm, CPF_Parm)
// bool                           bPersistent                    (CPF_OptionalParm, CPF_Parm)
// struct FColor                  DrawColor                      (CPF_OptionalParm, CPF_Parm)

void UNavigationHandle::DrawPathCache(const struct FVector& DrawOffset, bool bPersistent, const struct FColor& DrawColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.DrawPathCache");

	struct
	{
		struct FVector                 DrawOffset;
		bool                           bPersistent;
		struct FColor                  DrawColor;
	} params;
	params.DrawOffset = DrawOffset;
	params.bPersistent = bPersistent;
	params.DrawColor = DrawColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationHandle.ActorReachable
// (FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  A                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::ActorReachable(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ActorReachable");

	struct
	{
		class AActor*                  A;
		bool                           ReturnValue;
	} params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.PointReachable
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Point                          (CPF_Parm)
// struct FVector                 OverrideStartPoint             (CPF_OptionalParm, CPF_Parm)
// bool                           bAllowHitsInEndCollisionBox    (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::PointReachable(const struct FVector& Point, const struct FVector& OverrideStartPoint, bool bAllowHitsInEndCollisionBox)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PointReachable");

	struct
	{
		struct FVector                 Point;
		struct FVector                 OverrideStartPoint;
		bool                           bAllowHitsInEndCollisionBox;
		bool                           ReturnValue;
	} params;
	params.Point = Point;
	params.OverrideStartPoint = OverrideStartPoint;
	params.bAllowHitsInEndCollisionBox = bAllowHitsInEndCollisionBox;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.PointCheck
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 Pt                             (CPF_Parm)
// struct FVector                 Extent                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::PointCheck(const struct FVector& Pt, const struct FVector& Extent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PointCheck");

	struct
	{
		struct FVector                 Pt;
		struct FVector                 Extent;
		bool                           ReturnValue;
	} params;
	params.Pt = Pt;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.LineCheck
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 Start                          (CPF_Parm)
// struct FVector                 End                            (CPF_Parm)
// struct FVector                 Extent                         (CPF_Parm)
// struct FVector                 out_HitLocation                (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// struct FVector                 out_HitNormal                  (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::LineCheck(const struct FVector& Start, const struct FVector& End, const struct FVector& Extent, struct FVector* out_HitLocation, struct FVector* out_HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.LineCheck");

	struct
	{
		struct FVector                 Start;
		struct FVector                 End;
		struct FVector                 Extent;
		struct FVector                 out_HitLocation;
		struct FVector                 out_HitNormal;
		bool                           ReturnValue;
	} params;
	params.Start = Start;
	params.End = End;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_HitLocation != nullptr)
		*out_HitLocation = params.out_HitLocation;
	if (out_HitNormal != nullptr)
		*out_HitNormal = params.out_HitNormal;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.ObstaclePointCheck
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FVector                 Pt                             (CPF_Parm)
// struct FVector                 Extent                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::STATIC_ObstaclePointCheck(const struct FVector& Pt, const struct FVector& Extent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ObstaclePointCheck");

	struct
	{
		struct FVector                 Pt;
		struct FVector                 Extent;
		bool                           ReturnValue;
	} params;
	params.Pt = Pt;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.ObstacleLineCheck
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 Start                          (CPF_Parm)
// struct FVector                 End                            (CPF_Parm)
// struct FVector                 Extent                         (CPF_Parm)
// struct FVector                 out_HitLoc                     (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// struct FVector                 out_HitNorm                    (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// bool                           bIgnoreNormalMesh              (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::STATIC_ObstacleLineCheck(const struct FVector& Start, const struct FVector& End, const struct FVector& Extent, bool bIgnoreNormalMesh, struct FVector* out_HitLoc, struct FVector* out_HitNorm)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ObstacleLineCheck");

	struct
	{
		struct FVector                 Start;
		struct FVector                 End;
		struct FVector                 Extent;
		struct FVector                 out_HitLoc;
		struct FVector                 out_HitNorm;
		bool                           bIgnoreNormalMesh;
		bool                           ReturnValue;
	} params;
	params.Start = Start;
	params.End = End;
	params.Extent = Extent;
	params.bIgnoreNormalMesh = bIgnoreNormalMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_HitLoc != nullptr)
		*out_HitLoc = params.out_HitLoc;
	if (out_HitNorm != nullptr)
		*out_HitNorm = params.out_HitNorm;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.SuggestMovePreparation
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 MovePt                         (CPF_Parm, CPF_OutParm)
// class AController*             C                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::SuggestMovePreparation(class AController* C, struct FVector* MovePt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.SuggestMovePreparation");

	struct
	{
		struct FVector                 MovePt;
		class AController*             C;
		bool                           ReturnValue;
	} params;
	params.C = C;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MovePt != nullptr)
		*MovePt = params.MovePt;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.FindPath
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AActor*                  out_DestActor                  (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// int                            out_DestItem                   (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::FindPath(class AActor** out_DestActor, int* out_DestItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.FindPath");

	struct
	{
		class AActor*                  out_DestActor;
		int                            out_DestItem;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_DestActor != nullptr)
		*out_DestActor = params.out_DestActor;
	if (out_DestItem != nullptr)
		*out_DestItem = params.out_DestItem;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.ComputeValidFinalDestination
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 out_ComputedPosition           (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::ComputeValidFinalDestination(struct FVector* out_ComputedPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ComputeValidFinalDestination");

	struct
	{
		struct FVector                 out_ComputedPosition;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ComputedPosition != nullptr)
		*out_ComputedPosition = params.out_ComputedPosition;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.SetFinalDestination
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 FinalDest                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::SetFinalDestination(const struct FVector& FinalDest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.SetFinalDestination");

	struct
	{
		struct FVector                 FinalDest;
		bool                           ReturnValue;
	} params;
	params.FinalDest = FinalDest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetNextMoveLocation
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 out_MoveDest                   (CPF_Parm, CPF_OutParm)
// float                          ArrivalDistance                (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::GetNextMoveLocation(float ArrivalDistance, struct FVector* out_MoveDest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetNextMoveLocation");

	struct
	{
		struct FVector                 out_MoveDest;
		float                          ArrivalDistance;
		bool                           ReturnValue;
	} params;
	params.ArrivalDistance = ArrivalDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_MoveDest != nullptr)
		*out_MoveDest = params.out_MoveDest;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetPylonFromPos
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// struct FVector                 Position                       (CPF_Parm)
// class APylon*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APylon* UNavigationHandle::STATIC_GetPylonFromPos(const struct FVector& Position)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetPylonFromPos");

	struct
	{
		struct FVector                 Position;
		class APylon*                  ReturnValue;
	} params;
	params.Position = Position;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.FindPylon
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::FindPylon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.FindPylon");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetBestUnfinishedPathPoint
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector UNavigationHandle::GetBestUnfinishedPathPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetBestUnfinishedPathPoint");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.PathCache_RemoveIndex
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            InIdx                          (CPF_Parm)
// int                            Count                          (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::PathCache_RemoveIndex(int InIdx, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PathCache_RemoveIndex");

	struct
	{
		int                            InIdx;
		int                            Count;
		bool                           ReturnValue;
	} params;
	params.InIdx = InIdx;
	params.Count = Count;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.PathCache_GetGoalPoint
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector UNavigationHandle::PathCache_GetGoalPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PathCache_GetGoalPoint");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.PathCache_Empty
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::PathCache_Empty()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.PathCache_Empty");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.GetPathCacheLength
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UNavigationHandle::GetPathCacheLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetPathCacheLength");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.CreatePathGoalEvaluator
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UClass*                  GoalEvalClass                  (CPF_Parm)
// class UNavMeshPathGoalEvaluator* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UNavMeshPathGoalEvaluator* UNavigationHandle::CreatePathGoalEvaluator(class UClass* GoalEvalClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.CreatePathGoalEvaluator");

	struct
	{
		class UClass*                  GoalEvalClass;
		class UNavMeshPathGoalEvaluator* ReturnValue;
	} params;
	params.GoalEvalClass = GoalEvalClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.CreatePathConstraint
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UClass*                  ConstraintClass                (CPF_Parm)
// class UNavMeshPathConstraint*  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UNavMeshPathConstraint* UNavigationHandle::CreatePathConstraint(class UClass* ConstraintClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.CreatePathConstraint");

	struct
	{
		class UClass*                  ConstraintClass;
		class UNavMeshPathConstraint*  ReturnValue;
	} params;
	params.ConstraintClass = ConstraintClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.DoesPylonAHaveAPathToPylonB
// (FUNC_Native, FUNC_Public)
// Parameters:
// class APylon*                  A                              (CPF_Parm)
// class APylon*                  B                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::DoesPylonAHaveAPathToPylonB(class APylon* A, class APylon* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.DoesPylonAHaveAPathToPylonB");

	struct
	{
		class APylon*                  A;
		class APylon*                  B;
		bool                           ReturnValue;
	} params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.BuildFromPylonAToPylonB
// (FUNC_Native, FUNC_Public)
// Parameters:
// class APylon*                  A                              (CPF_Parm)
// class APylon*                  B                              (CPF_Parm)
// class APylon*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APylon* UNavigationHandle::BuildFromPylonAToPylonB(class APylon* A, class APylon* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.BuildFromPylonAToPylonB");

	struct
	{
		class APylon*                  A;
		class APylon*                  B;
		class APylon*                  ReturnValue;
	} params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.AddGoalEvaluator
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UNavMeshPathGoalEvaluator* Evaluator                      (CPF_Parm)

void UNavigationHandle::AddGoalEvaluator(class UNavMeshPathGoalEvaluator* Evaluator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.AddGoalEvaluator");

	struct
	{
		class UNavMeshPathGoalEvaluator* Evaluator;
	} params;
	params.Evaluator = Evaluator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationHandle.AddPathConstraint
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UNavMeshPathConstraint*  Constraint                     (CPF_Parm)

void UNavigationHandle::AddPathConstraint(class UNavMeshPathConstraint* Constraint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.AddPathConstraint");

	struct
	{
		class UNavMeshPathConstraint*  Constraint;
	} params;
	params.Constraint = Constraint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationHandle.ClearConstraints
// (FUNC_Native, FUNC_Public)

void UNavigationHandle::ClearConstraints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.ClearConstraints");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationHandle.GetNextBreadCrumb
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 out_BreadCrumbLoc              (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavigationHandle::GetNextBreadCrumb(struct FVector* out_BreadCrumbLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.GetNextBreadCrumb");

	struct
	{
		struct FVector                 out_BreadCrumbLoc;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BreadCrumbLoc != nullptr)
		*out_BreadCrumbLoc = params.out_BreadCrumbLoc;

	return params.ReturnValue;
}


// Function Engine.NavigationHandle.UpdateBreadCrumbs
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 InLocation                     (CPF_Parm)

void UNavigationHandle::UpdateBreadCrumbs(const struct FVector& InLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.UpdateBreadCrumbs");

	struct
	{
		struct FVector                 InLocation;
	} params;
	params.InLocation = InLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationHandle.CopyPathStoreToPathCache
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FPathStore              InStore                        (CPF_Const, CPF_Parm, CPF_OutParm)

void UNavigationHandle::CopyPathStoreToPathCache(struct FPathStore* InStore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationHandle.CopyPathStoreToPathCache");

	struct
	{
		struct FPathStore              InStore;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InStore != nullptr)
		*InStore = params.InStore;
}


// Function Engine.NavMeshGoal_Filter.GetDumpString
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UNavMeshGoal_Filter::GetDumpString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Filter.GetDumpString");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoalFilter_MinPathDistance.MustBeLongerPathThan
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                (CPF_Parm)
// int                            InMinDistancePathShouldBe      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshGoalFilter_MinPathDistance::STATIC_MustBeLongerPathThan(class UNavMeshGoal_GenericFilterContainer* FilterContainer, int InMinDistancePathShouldBe)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoalFilter_MinPathDistance.MustBeLongerPathThan");

	struct
	{
		class UNavMeshGoal_GenericFilterContainer* FilterContainer;
		int                            InMinDistancePathShouldBe;
		bool                           ReturnValue;
	} params;
	params.FilterContainer = FilterContainer;
	params.InMinDistancePathShouldBe = InMinDistancePathShouldBe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoalFilter_NotNearOtherAI.NotNearOtherAI
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                (CPF_Parm)
// float                          InDistanceToCheck              (CPF_Const, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshGoalFilter_NotNearOtherAI::STATIC_NotNearOtherAI(class UNavMeshGoal_GenericFilterContainer* FilterContainer, float InDistanceToCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoalFilter_NotNearOtherAI.NotNearOtherAI");

	struct
	{
		class UNavMeshGoal_GenericFilterContainer* FilterContainer;
		float                          InDistanceToCheck;
		bool                           ReturnValue;
	} params;
	params.FilterContainer = FilterContainer;
	params.InDistanceToCheck = InDistanceToCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoalFilter_OutOfViewFrom.MustBeHiddenFromThisPoint
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                (CPF_Parm)
// struct FVector                 InOutOfViewLocation            (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshGoalFilter_OutOfViewFrom::STATIC_MustBeHiddenFromThisPoint(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InOutOfViewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoalFilter_OutOfViewFrom.MustBeHiddenFromThisPoint");

	struct
	{
		class UNavMeshGoal_GenericFilterContainer* FilterContainer;
		struct FVector                 InOutOfViewLocation;
		bool                           ReturnValue;
	} params;
	params.FilterContainer = FilterContainer;
	params.InOutOfViewLocation = InOutOfViewLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoalFilter_OutSideOfDotProductWedge.OutsideOfDotProductWedge
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                (CPF_Parm)
// struct FVector                 InLocation                     (CPF_Parm)
// struct FRotator                InRotation                     (CPF_Parm)
// float                          InEpsilon                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshGoalFilter_OutSideOfDotProductWedge::STATIC_OutsideOfDotProductWedge(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InLocation, const struct FRotator& InRotation, float InEpsilon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoalFilter_OutSideOfDotProductWedge.OutsideOfDotProductWedge");

	struct
	{
		class UNavMeshGoal_GenericFilterContainer* FilterContainer;
		struct FVector                 InLocation;
		struct FRotator                InRotation;
		float                          InEpsilon;
		bool                           ReturnValue;
	} params;
	params.FilterContainer = FilterContainer;
	params.InLocation = InLocation;
	params.InRotation = InRotation;
	params.InEpsilon = InEpsilon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoalFilter_PolyEncompassesAI.MakeSureAIFits
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UNavMeshGoal_GenericFilterContainer* FilterContainer                (CPF_Parm)
// struct FVector                 InOverrideExtentToCheck        (CPF_Const, CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshGoalFilter_PolyEncompassesAI::STATIC_MakeSureAIFits(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InOverrideExtentToCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoalFilter_PolyEncompassesAI.MakeSureAIFits");

	struct
	{
		class UNavMeshGoal_GenericFilterContainer* FilterContainer;
		struct FVector                 InOverrideExtentToCheck;
		bool                           ReturnValue;
	} params;
	params.FilterContainer = FilterContainer;
	params.InOverrideExtentToCheck = InOverrideExtentToCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPathConstraint.GetDumpString
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UNavMeshPathConstraint::GetDumpString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPathConstraint.GetDumpString");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPathConstraint.Recycle
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UNavMeshPathConstraint::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPathConstraint.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_AlongLine.Recycle
// (FUNC_Defined, FUNC_Public)

void UNavMeshPath_AlongLine::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_AlongLine.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_AlongLine.AlongLine
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// struct FVector                 Dir                            (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshPath_AlongLine::STATIC_AlongLine(class UNavigationHandle* NavHandle, const struct FVector& Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_AlongLine.AlongLine");

	struct
	{
		class UNavigationHandle*       NavHandle;
		struct FVector                 Dir;
		bool                           ReturnValue;
	} params;
	params.NavHandle = NavHandle;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPath_EnforceTwoWayEdges.EnforceTwoWayEdges
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshPath_EnforceTwoWayEdges::STATIC_EnforceTwoWayEdges(class UNavigationHandle* NavHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_EnforceTwoWayEdges.EnforceTwoWayEdges");

	struct
	{
		class UNavigationHandle*       NavHandle;
		bool                           ReturnValue;
	} params;
	params.NavHandle = NavHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.Recycle
// (FUNC_Defined, FUNC_Public)

void UNavMeshPath_MinDistBetweenSpecsOfType::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.EnforceMinDist
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// float                          InMinDist                      (CPF_Parm)
// TEnumAsByte<enum class ENavMeshEdgeType> InEdgeType                     (CPF_Parm)
// struct FVector                 LastLocation                   (CPF_OptionalParm, CPF_Parm)
// float                          InPenalty                      (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshPath_MinDistBetweenSpecsOfType::STATIC_EnforceMinDist(class UNavigationHandle* NavHandle, float InMinDist, TEnumAsByte<enum class ENavMeshEdgeType> InEdgeType, const struct FVector& LastLocation, float InPenalty)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_MinDistBetweenSpecsOfType.EnforceMinDist");

	struct
	{
		class UNavigationHandle*       NavHandle;
		float                          InMinDist;
		TEnumAsByte<enum class ENavMeshEdgeType> InEdgeType;
		struct FVector                 LastLocation;
		float                          InPenalty;
		bool                           ReturnValue;
	} params;
	params.NavHandle = NavHandle;
	params.InMinDist = InMinDist;
	params.InEdgeType = InEdgeType;
	params.LastLocation = LastLocation;
	params.InPenalty = InPenalty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPath_SameCoverLink.Recycle
// (FUNC_Defined, FUNC_Public)

void UNavMeshPath_SameCoverLink::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_SameCoverLink.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_SameCoverLink.SameCoverLink
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// class ACoverLink*              InLink                         (CPF_Parm)

void UNavMeshPath_SameCoverLink::STATIC_SameCoverLink(class UNavigationHandle* NavHandle, class ACoverLink* InLink)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_SameCoverLink.SameCoverLink");

	struct
	{
		class UNavigationHandle*       NavHandle;
		class ACoverLink*              InLink;
	} params;
	params.NavHandle = NavHandle;
	params.InLink = InLink;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_Toward.Recycle
// (FUNC_Defined, FUNC_Public)

void UNavMeshPath_Toward::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_Toward.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_Toward.TowardPoint
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// struct FVector                 Point                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshPath_Toward::STATIC_TowardPoint(class UNavigationHandle* NavHandle, const struct FVector& Point)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_Toward.TowardPoint");

	struct
	{
		class UNavigationHandle*       NavHandle;
		struct FVector                 Point;
		bool                           ReturnValue;
	} params;
	params.NavHandle = NavHandle;
	params.Point = Point;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPath_Toward.TowardGoal
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// class AActor*                  Goal                           (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshPath_Toward::STATIC_TowardGoal(class UNavigationHandle* NavHandle, class AActor* Goal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_Toward.TowardGoal");

	struct
	{
		class UNavigationHandle*       NavHandle;
		class AActor*                  Goal;
		bool                           ReturnValue;
	} params;
	params.NavHandle = NavHandle;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPath_WithinDistanceEnvelope.Recycle
// (FUNC_Defined, FUNC_Public)

void UNavMeshPath_WithinDistanceEnvelope::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_WithinDistanceEnvelope.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_WithinDistanceEnvelope.StayWithinEnvelopeToLoc
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// struct FVector                 InEnvelopeTestPoint            (CPF_Parm)
// float                          InMaxDistance                  (CPF_Parm)
// float                          InMinDistance                  (CPF_Parm)
// bool                           bInSoft                        (CPF_OptionalParm, CPF_Parm)
// float                          InSoftStartPenalty             (CPF_OptionalParm, CPF_Parm)
// bool                           bOnlyTossOutSpecsThatLeave     (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshPath_WithinDistanceEnvelope::STATIC_StayWithinEnvelopeToLoc(class UNavigationHandle* NavHandle, const struct FVector& InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, bool bInSoft, float InSoftStartPenalty, bool bOnlyTossOutSpecsThatLeave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_WithinDistanceEnvelope.StayWithinEnvelopeToLoc");

	struct
	{
		class UNavigationHandle*       NavHandle;
		struct FVector                 InEnvelopeTestPoint;
		float                          InMaxDistance;
		float                          InMinDistance;
		bool                           bInSoft;
		float                          InSoftStartPenalty;
		bool                           bOnlyTossOutSpecsThatLeave;
		bool                           ReturnValue;
	} params;
	params.NavHandle = NavHandle;
	params.InEnvelopeTestPoint = InEnvelopeTestPoint;
	params.InMaxDistance = InMaxDistance;
	params.InMinDistance = InMinDistance;
	params.bInSoft = bInSoft;
	params.InSoftStartPenalty = InSoftStartPenalty;
	params.bOnlyTossOutSpecsThatLeave = bOnlyTossOutSpecsThatLeave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPath_WithinTraversalDist.Recycle
// (FUNC_Defined, FUNC_Public)

void UNavMeshPath_WithinTraversalDist::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_WithinTraversalDist.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshPath_WithinTraversalDist.DontExceedMaxDist
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// float                          InMaxTraversalDist             (CPF_Parm)
// bool                           bInSoft                        (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshPath_WithinTraversalDist::STATIC_DontExceedMaxDist(class UNavigationHandle* NavHandle, float InMaxTraversalDist, bool bInSoft)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPath_WithinTraversalDist.DontExceedMaxDist");

	struct
	{
		class UNavigationHandle*       NavHandle;
		float                          InMaxTraversalDist;
		bool                           bInSoft;
		bool                           ReturnValue;
	} params;
	params.NavHandle = NavHandle;
	params.InMaxTraversalDist = InMaxTraversalDist;
	params.bInSoft = bInSoft;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPathGoalEvaluator.GetDumpString
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UNavMeshPathGoalEvaluator::GetDumpString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPathGoalEvaluator.GetDumpString");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshPathGoalEvaluator.Recycle
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UNavMeshPathGoalEvaluator::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshPathGoalEvaluator.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_At.Recycle
// (FUNC_Defined, FUNC_Public)

void UNavMeshGoal_At::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_At.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_At.AtLocation
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// struct FVector                 GoalLocation                   (CPF_Parm)
// float                          Dist                           (CPF_OptionalParm, CPF_Parm)
// bool                           bReturnPartial                 (CPF_OptionalParm, CPF_Parm)
// bool                           bInWeightPartialByDist         (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshGoal_At::STATIC_AtLocation(class UNavigationHandle* NavHandle, const struct FVector& GoalLocation, float Dist, bool bReturnPartial, bool bInWeightPartialByDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_At.AtLocation");

	struct
	{
		class UNavigationHandle*       NavHandle;
		struct FVector                 GoalLocation;
		float                          Dist;
		bool                           bReturnPartial;
		bool                           bInWeightPartialByDist;
		bool                           ReturnValue;
	} params;
	params.NavHandle = NavHandle;
	params.GoalLocation = GoalLocation;
	params.Dist = Dist;
	params.bReturnPartial = bReturnPartial;
	params.bInWeightPartialByDist = bInWeightPartialByDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_At.AtActor
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// class AActor*                  GoalActor                      (CPF_Parm)
// float                          Dist                           (CPF_OptionalParm, CPF_Parm)
// bool                           bReturnPartial                 (CPF_OptionalParm, CPF_Parm)
// bool                           bInWeightPartialByDist         (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshGoal_At::STATIC_AtActor(class UNavigationHandle* NavHandle, class AActor* GoalActor, float Dist, bool bReturnPartial, bool bInWeightPartialByDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_At.AtActor");

	struct
	{
		class UNavigationHandle*       NavHandle;
		class AActor*                  GoalActor;
		float                          Dist;
		bool                           bReturnPartial;
		bool                           bInWeightPartialByDist;
		bool                           ReturnValue;
	} params;
	params.NavHandle = NavHandle;
	params.GoalActor = GoalActor;
	params.Dist = Dist;
	params.bReturnPartial = bReturnPartial;
	params.bInWeightPartialByDist = bInWeightPartialByDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_At.RecycleNative
// (FUNC_Native, FUNC_Public)

void UNavMeshGoal_At::RecycleNative()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_At.RecycleNative");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_ClosestActorInList.RecycleInternal
// (FUNC_Native, FUNC_Public)

void UNavMeshGoal_ClosestActorInList::RecycleInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_ClosestActorInList.RecycleInternal");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_ClosestActorInList.Recycle
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UNavMeshGoal_ClosestActorInList::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_ClosestActorInList.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_ClosestActorInList.ClosestActorInList
// (FUNC_Defined, FUNC_Static, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// TArray<struct FBiasedGoalActor> InGoalList                     (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// class UNavMeshGoal_ClosestActorInList* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UNavMeshGoal_ClosestActorInList* UNavMeshGoal_ClosestActorInList::STATIC_ClosestActorInList(class UNavigationHandle* NavHandle, TArray<struct FBiasedGoalActor>* InGoalList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_ClosestActorInList.ClosestActorInList");

	struct
	{
		class UNavigationHandle*       NavHandle;
		TArray<struct FBiasedGoalActor> InGoalList;
		class UNavMeshGoal_ClosestActorInList* ReturnValue;
	} params;
	params.NavHandle = NavHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InGoalList != nullptr)
		*InGoalList = params.InGoalList;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_GenericFilterContainer.Recycle
// (FUNC_Defined, FUNC_Public)

void UNavMeshGoal_GenericFilterContainer::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_GenericFilterContainer.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_GenericFilterContainer.GetGoalPoint
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector UNavMeshGoal_GenericFilterContainer::GetGoalPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_GenericFilterContainer.GetGoalPoint");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_GenericFilterContainer.GetFilterOfType
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UClass*                  Filter_Class                   (CPF_Parm)
// class UNavMeshGoal_Filter*     ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UNavMeshGoal_Filter* UNavMeshGoal_GenericFilterContainer::GetFilterOfType(class UClass* Filter_Class)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_GenericFilterContainer.GetFilterOfType");

	struct
	{
		class UClass*                  Filter_Class;
		class UNavMeshGoal_Filter*     ReturnValue;
	} params;
	params.Filter_Class = Filter_Class;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_GenericFilterContainer.CreateAndAddFilterToNavHandleFromSeedList
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// TArray<struct FVector>         InSearchSeeds                  (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            InMaxPathVisits                (CPF_OptionalParm, CPF_Parm)
// class UNavMeshGoal_GenericFilterContainer* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UNavMeshGoal_GenericFilterContainer* UNavMeshGoal_GenericFilterContainer::STATIC_CreateAndAddFilterToNavHandleFromSeedList(class UNavigationHandle* NavHandle, int InMaxPathVisits, TArray<struct FVector>* InSearchSeeds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_GenericFilterContainer.CreateAndAddFilterToNavHandleFromSeedList");

	struct
	{
		class UNavigationHandle*       NavHandle;
		TArray<struct FVector>         InSearchSeeds;
		int                            InMaxPathVisits;
		class UNavMeshGoal_GenericFilterContainer* ReturnValue;
	} params;
	params.NavHandle = NavHandle;
	params.InMaxPathVisits = InMaxPathVisits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InSearchSeeds != nullptr)
		*InSearchSeeds = params.InSearchSeeds;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_GenericFilterContainer.CreateAndAddFilterToNavHandle
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// int                            InMaxPathVisits                (CPF_OptionalParm, CPF_Parm)
// class UNavMeshGoal_GenericFilterContainer* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UNavMeshGoal_GenericFilterContainer* UNavMeshGoal_GenericFilterContainer::STATIC_CreateAndAddFilterToNavHandle(class UNavigationHandle* NavHandle, int InMaxPathVisits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_GenericFilterContainer.CreateAndAddFilterToNavHandle");

	struct
	{
		class UNavigationHandle*       NavHandle;
		int                            InMaxPathVisits;
		class UNavMeshGoal_GenericFilterContainer* ReturnValue;
	} params;
	params.NavHandle = NavHandle;
	params.InMaxPathVisits = InMaxPathVisits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_Null.Recycle
// (FUNC_Defined, FUNC_Public)

void UNavMeshGoal_Null::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Null.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_Null.RecycleNative
// (FUNC_Native, FUNC_Public)

void UNavMeshGoal_Null::RecycleNative()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Null.RecycleNative");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_Null.GoUntilBust
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// int                            InMaxPathVisits                (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshGoal_Null::STATIC_GoUntilBust(class UNavigationHandle* NavHandle, int InMaxPathVisits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Null.GoUntilBust");

	struct
	{
		class UNavigationHandle*       NavHandle;
		int                            InMaxPathVisits;
		bool                           ReturnValue;
	} params;
	params.NavHandle = NavHandle;
	params.InMaxPathVisits = InMaxPathVisits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_PolyEncompassesAI.Recycle
// (FUNC_Defined, FUNC_Public)

void UNavMeshGoal_PolyEncompassesAI::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_PolyEncompassesAI.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_PolyEncompassesAI.MakeSureAIFits
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// struct FVector                 InOverrideExtentToCheck        (CPF_Const, CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshGoal_PolyEncompassesAI::STATIC_MakeSureAIFits(class UNavigationHandle* NavHandle, const struct FVector& InOverrideExtentToCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_PolyEncompassesAI.MakeSureAIFits");

	struct
	{
		class UNavigationHandle*       NavHandle;
		struct FVector                 InOverrideExtentToCheck;
		bool                           ReturnValue;
	} params;
	params.NavHandle = NavHandle;
	params.InOverrideExtentToCheck = InOverrideExtentToCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_Random.Recycle
// (FUNC_Defined, FUNC_Public)

void UNavMeshGoal_Random::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Random.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_Random.RecycleNative
// (FUNC_Native, FUNC_Public)

void UNavMeshGoal_Random::RecycleNative()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Random.RecycleNative");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_Random.FindRandom
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// int                            InMinDist                      (CPF_OptionalParm, CPF_Parm)
// int                            InMaxPathVisits                (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshGoal_Random::STATIC_FindRandom(class UNavigationHandle* NavHandle, int InMinDist, int InMaxPathVisits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_Random.FindRandom");

	struct
	{
		class UNavigationHandle*       NavHandle;
		int                            InMinDist;
		int                            InMaxPathVisits;
		bool                           ReturnValue;
	} params;
	params.NavHandle = NavHandle;
	params.InMinDist = InMinDist;
	params.InMaxPathVisits = InMaxPathVisits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavMeshGoal_WithinDistanceEnvelope.Recycle
// (FUNC_Defined, FUNC_Public)

void UNavMeshGoal_WithinDistanceEnvelope::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_WithinDistanceEnvelope.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavMeshGoal_WithinDistanceEnvelope.GoalWithinEnvelopeToLoc
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UNavigationHandle*       NavHandle                      (CPF_Parm)
// struct FVector                 InEnvelopeTestPoint            (CPF_Parm)
// float                          InMaxDistance                  (CPF_Parm)
// float                          InMinDistance                  (CPF_Parm)
// float                          InMinTraversalDist             (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UNavMeshGoal_WithinDistanceEnvelope::STATIC_GoalWithinEnvelopeToLoc(class UNavigationHandle* NavHandle, const struct FVector& InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, float InMinTraversalDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavMeshGoal_WithinDistanceEnvelope.GoalWithinEnvelopeToLoc");

	struct
	{
		class UNavigationHandle*       NavHandle;
		struct FVector                 InEnvelopeTestPoint;
		float                          InMaxDistance;
		float                          InMinDistance;
		float                          InMinTraversalDist;
		bool                           ReturnValue;
	} params;
	params.NavHandle = NavHandle;
	params.InEnvelopeTestPoint = InEnvelopeTestPoint;
	params.InMaxDistance = InMaxDistance;
	params.InMinDistance = InMinDistance;
	params.InMinTraversalDist = InMinTraversalDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PathConstraint.GetDumpString
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UPathConstraint::GetDumpString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PathConstraint.GetDumpString");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PathConstraint.Recycle
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UPathConstraint::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PathConstraint.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_AlongLine.Recycle
// (FUNC_Defined, FUNC_Public)

void UPath_AlongLine::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_AlongLine.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_AlongLine.AlongLine
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// struct FVector                 Dir                            (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UPath_AlongLine::STATIC_AlongLine(class APawn* P, const struct FVector& Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_AlongLine.AlongLine");

	struct
	{
		class APawn*                   P;
		struct FVector                 Dir;
		bool                           ReturnValue;
	} params;
	params.P = P;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Path_AvoidInEscapableNodes.Recycle
// (FUNC_Defined, FUNC_Public)

void UPath_AvoidInEscapableNodes::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_AvoidInEscapableNodes.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_AvoidInEscapableNodes.DontGetStuck
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UPath_AvoidInEscapableNodes::STATIC_DontGetStuck(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_AvoidInEscapableNodes.DontGetStuck");

	struct
	{
		class APawn*                   P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Path_AvoidInEscapableNodes.CachePawnReacFlags
// (FUNC_Final, FUNC_Native, FUNC_Private)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void UPath_AvoidInEscapableNodes::CachePawnReacFlags(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_AvoidInEscapableNodes.CachePawnReacFlags");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_MinDistBetweenSpecsOfType.Recycle
// (FUNC_Defined, FUNC_Public)

void UPath_MinDistBetweenSpecsOfType::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_MinDistBetweenSpecsOfType.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_MinDistBetweenSpecsOfType.EnforceMinDist
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// float                          InMinDist                      (CPF_Parm)
// class UClass*                  InSpecClass                    (CPF_Parm)
// struct FVector                 LastLocation                   (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UPath_MinDistBetweenSpecsOfType::STATIC_EnforceMinDist(class APawn* P, float InMinDist, class UClass* InSpecClass, const struct FVector& LastLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_MinDistBetweenSpecsOfType.EnforceMinDist");

	struct
	{
		class APawn*                   P;
		float                          InMinDist;
		class UClass*                  InSpecClass;
		struct FVector                 LastLocation;
		bool                           ReturnValue;
	} params;
	params.P = P;
	params.InMinDist = InMinDist;
	params.InSpecClass = InSpecClass;
	params.LastLocation = LastLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Path_TowardGoal.Recycle
// (FUNC_Defined, FUNC_Public)

void UPath_TowardGoal::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_TowardGoal.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_TowardGoal.TowardGoal
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// class AActor*                  Goal                           (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UPath_TowardGoal::STATIC_TowardGoal(class APawn* P, class AActor* Goal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_TowardGoal.TowardGoal");

	struct
	{
		class APawn*                   P;
		class AActor*                  Goal;
		bool                           ReturnValue;
	} params;
	params.P = P;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Path_TowardPoint.Recycle
// (FUNC_Defined, FUNC_Public)

void UPath_TowardPoint::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_TowardPoint.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_TowardPoint.TowardPoint
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// struct FVector                 Point                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UPath_TowardPoint::STATIC_TowardPoint(class APawn* P, const struct FVector& Point)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_TowardPoint.TowardPoint");

	struct
	{
		class APawn*                   P;
		struct FVector                 Point;
		bool                           ReturnValue;
	} params;
	params.P = P;
	params.Point = Point;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Path_WithinDistanceEnvelope.Recycle
// (FUNC_Defined, FUNC_Public)

void UPath_WithinDistanceEnvelope::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_WithinDistanceEnvelope.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_WithinDistanceEnvelope.StayWithinEnvelopeToLoc
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// struct FVector                 InEnvelopeTestPoint            (CPF_Parm)
// float                          InMaxDistance                  (CPF_Parm)
// float                          InMinDistance                  (CPF_Parm)
// bool                           bInSoft                        (CPF_OptionalParm, CPF_Parm)
// float                          InSoftStartPenalty             (CPF_OptionalParm, CPF_Parm)
// bool                           bOnlyTossOutSpecsThatLeave     (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UPath_WithinDistanceEnvelope::STATIC_StayWithinEnvelopeToLoc(class APawn* P, const struct FVector& InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, bool bInSoft, float InSoftStartPenalty, bool bOnlyTossOutSpecsThatLeave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_WithinDistanceEnvelope.StayWithinEnvelopeToLoc");

	struct
	{
		class APawn*                   P;
		struct FVector                 InEnvelopeTestPoint;
		float                          InMaxDistance;
		float                          InMinDistance;
		bool                           bInSoft;
		float                          InSoftStartPenalty;
		bool                           bOnlyTossOutSpecsThatLeave;
		bool                           ReturnValue;
	} params;
	params.P = P;
	params.InEnvelopeTestPoint = InEnvelopeTestPoint;
	params.InMaxDistance = InMaxDistance;
	params.InMinDistance = InMinDistance;
	params.bInSoft = bInSoft;
	params.InSoftStartPenalty = InSoftStartPenalty;
	params.bOnlyTossOutSpecsThatLeave = bOnlyTossOutSpecsThatLeave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Path_WithinTraversalDist.Recycle
// (FUNC_Defined, FUNC_Public)

void UPath_WithinTraversalDist::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_WithinTraversalDist.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Path_WithinTraversalDist.DontExceedMaxDist
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// float                          InMaxTraversalDist             (CPF_Parm)
// bool                           bInSoft                        (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UPath_WithinTraversalDist::STATIC_DontExceedMaxDist(class APawn* P, float InMaxTraversalDist, bool bInSoft)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Path_WithinTraversalDist.DontExceedMaxDist");

	struct
	{
		class APawn*                   P;
		float                          InMaxTraversalDist;
		bool                           bInSoft;
		bool                           ReturnValue;
	} params;
	params.P = P;
	params.InMaxTraversalDist = InMaxTraversalDist;
	params.bInSoft = bInSoft;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PathGoalEvaluator.GetDumpString
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UPathGoalEvaluator::GetDumpString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PathGoalEvaluator.GetDumpString");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PathGoalEvaluator.Recycle
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UPathGoalEvaluator::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PathGoalEvaluator.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Goal_AtActor.Recycle
// (FUNC_Defined, FUNC_Public)

void UGoal_AtActor::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Goal_AtActor.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Goal_AtActor.AtActor
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// class AActor*                  Goal                           (CPF_Parm)
// float                          Dist                           (CPF_OptionalParm, CPF_Parm)
// bool                           bReturnPartial                 (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGoal_AtActor::STATIC_AtActor(class APawn* P, class AActor* Goal, float Dist, bool bReturnPartial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Goal_AtActor.AtActor");

	struct
	{
		class APawn*                   P;
		class AActor*                  Goal;
		float                          Dist;
		bool                           bReturnPartial;
		bool                           ReturnValue;
	} params;
	params.P = P;
	params.Goal = Goal;
	params.Dist = Dist;
	params.bReturnPartial = bReturnPartial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Goal_Null.Recycle
// (FUNC_Defined, FUNC_Public)

void UGoal_Null::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Goal_Null.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Goal_Null.GoUntilBust
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// int                            InMaxPathVisits                (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGoal_Null::STATIC_GoUntilBust(class APawn* P, int InMaxPathVisits)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Goal_Null.GoUntilBust");

	struct
	{
		class APawn*                   P;
		int                            InMaxPathVisits;
		bool                           ReturnValue;
	} params;
	params.P = P;
	params.InMaxPathVisits = InMaxPathVisits;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.CreateForceField
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UAnimNotify_ForceField*  AnimNotifyData                 (CPF_Const, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ASkeletalMeshActor::CreateForceField(class UAnimNotify_ForceField* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.CreateForceField");

	struct
	{
		class UAnimNotify_ForceField*  AnimNotifyData;
		bool                           ReturnValue;
	} params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.SkelMeshActorOnParticleSystemFinished
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class UParticleSystemComponent* PSC                            (CPF_Parm, CPF_EditInline)

void ASkeletalMeshActor::SkelMeshActorOnParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.SkelMeshActorOnParticleSystemFinished");

	struct
	{
		class UParticleSystemComponent* PSC;
	} params;
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.PlayParticleEffect
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 (CPF_Const, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ASkeletalMeshActor::PlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.PlayParticleEffect");

	struct
	{
		class UAnimNotify_PlayParticleEffect* AnimNotifyData;
		bool                           ReturnValue;
	} params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.ApplyCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ASkeletalMeshActor_FCheckpointRecord Record                         (CPF_Const, CPF_Parm, CPF_OutParm)

void ASkeletalMeshActor::ApplyCheckpointRecord(struct ASkeletalMeshActor_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.ApplyCheckpointRecord");

	struct
	{
		struct ASkeletalMeshActor_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.SkeletalMeshActor.CreateCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ASkeletalMeshActor_FCheckpointRecord Record                         (CPF_Parm, CPF_OutParm)

void ASkeletalMeshActor::CreateCheckpointRecord(struct ASkeletalMeshActor_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.CreateCheckpointRecord");

	struct
	{
		struct ASkeletalMeshActor_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.SkeletalMeshActor.ShouldSaveForCheckpoint
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ASkeletalMeshActor::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.ShouldSaveForCheckpoint");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.TakeDamage
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// int                            Damage                         (CPF_Parm)
// class AController*             EventInstigator                (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm, CPF_Parm)

void ASkeletalMeshActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.TakeDamage");

	struct
	{
		int                            Damage;
		class AController*             EventInstigator;
		struct FVector                 HitLocation;
		struct FVector                 Momentum;
		class UClass*                  DamageType;
		struct FTraceHitInfo           HitInfo;
		class AActor*                  DamageCauser;
	} params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.DoKismetAttachment
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Attachment                     (CPF_Parm)
// class USeqAct_AttachToActor*   Action                         (CPF_Parm)

void ASkeletalMeshActor::DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.DoKismetAttachment");

	struct
	{
		class AActor*                  Attachment;
		class USeqAct_AttachToActor*   Action;
	} params;
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnSetSkelControlTarget
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USeqAct_SetSkelControlTarget* Action                         (CPF_Parm)

void ASkeletalMeshActor::OnSetSkelControlTarget(class USeqAct_SetSkelControlTarget* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnSetSkelControlTarget");

	struct
	{
		class USeqAct_SetSkelControlTarget* Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnUpdatePhysBonesFromAnim
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USeqAct_UpdatePhysBonesFromAnim* Action                         (CPF_Parm)

void ASkeletalMeshActor::OnUpdatePhysBonesFromAnim(class USeqAct_UpdatePhysBonesFromAnim* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnUpdatePhysBonesFromAnim");

	struct
	{
		class USeqAct_UpdatePhysBonesFromAnim* Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnSetMesh
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class USeqAct_SetMesh*         Action                         (CPF_Parm)

void ASkeletalMeshActor::OnSetMesh(class USeqAct_SetMesh* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnSetMesh");

	struct
	{
		class USeqAct_SetMesh*         Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ASkeletalMeshActor::IsActorPlayingFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.IsActorPlayingFaceFXAnim");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.GetActorFaceFXAsset
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UFaceFXAsset*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UFaceFXAsset* ASkeletalMeshActor::GetActorFaceFXAsset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.GetActorFaceFXAsset");

	struct
	{
		class UFaceFXAsset*            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.OnPlayFaceFXAnim
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_PlayFaceFXAnim*  inAction                       (CPF_Parm)

void ASkeletalMeshActor::OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnPlayFaceFXAnim");

	struct
	{
		class USeqAct_PlayFaceFXAnim*  inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.GetFaceFXAudioComponent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UAudioComponent*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UAudioComponent* ASkeletalMeshActor::GetFaceFXAudioComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.GetFaceFXAudioComponent");

	struct
	{
		class UAudioComponent*         ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.StopActorFaceFXAnim
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ASkeletalMeshActor::StopActorFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.StopActorFaceFXAnim");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.PlayActorFaceFXAnim
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (CPF_Parm)
// struct FString                 GroupName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SeqName                        (CPF_Parm, CPF_NeedCtorLink)
// class USoundCue*               SoundCueToPlay                 (CPF_Parm)
// class UAkEvent*                AkEventToPlay                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ASkeletalMeshActor::PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.PlayActorFaceFXAnim");

	struct
	{
		class UFaceFXAnimSet*          AnimSet;
		struct FString                 GroupName;
		struct FString                 SeqName;
		class USoundCue*               SoundCueToPlay;
		class UAkEvent*                AkEventToPlay;
		bool                           ReturnValue;
	} params;
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;
	params.SoundCueToPlay = SoundCueToPlay;
	params.AkEventToPlay = AkEventToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshActor.MAT_FinishAnimControl
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void ASkeletalMeshActor::MAT_FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.MAT_FinishAnimControl");

	struct
	{
		class UInterpGroup*            InInterpGroup;
	} params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.FinishAnimControl
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void ASkeletalMeshActor::FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.FinishAnimControl");

	struct
	{
		class UInterpGroup*            InInterpGroup;
	} params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.SetAnimPosition
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   SlotName                       (CPF_Parm)
// int                            ChannelIndex                   (CPF_Parm)
// struct FName                   InAnimSeqName                  (CPF_Parm)
// float                          InPosition                     (CPF_Parm)
// bool                           bFireNotifies                  (CPF_Parm)
// bool                           bLooping                       (CPF_Parm)
// bool                           bEnableRootMotion              (CPF_Parm)

void ASkeletalMeshActor::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.SetAnimPosition");

	struct
	{
		struct FName                   SlotName;
		int                            ChannelIndex;
		struct FName                   InAnimSeqName;
		float                          InPosition;
		bool                           bFireNotifies;
		bool                           bLooping;
		bool                           bEnableRootMotion;
	} params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.MAT_BeginAnimControl
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void ASkeletalMeshActor::MAT_BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.MAT_BeginAnimControl");

	struct
	{
		class UInterpGroup*            InInterpGroup;
	} params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.BeginAnimControl
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void ASkeletalMeshActor::BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.BeginAnimControl");

	struct
	{
		class UInterpGroup*            InInterpGroup;
	} params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnSetMaterial
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_SetMaterial*     Action                         (CPF_Parm)

void ASkeletalMeshActor::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnSetMaterial");

	struct
	{
		class USeqAct_SetMaterial*     Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ASkeletalMeshActor::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void ASkeletalMeshActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.UpdateAnimSetList
// (FUNC_Simulated, FUNC_Native, FUNC_Public)

void ASkeletalMeshActor::UpdateAnimSetList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.UpdateAnimSetList");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.Destroyed
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ASkeletalMeshActor::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActor.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ASkeletalMeshActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActor.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void ASkeletalMeshActorBasedOnExtremeContent::SetMaterialBasedOnExtremeContent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorBasedOnExtremeContent.SetMaterialBasedOnExtremeContent");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorBasedOnExtremeContent.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ASkeletalMeshActorBasedOnExtremeContent::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorBasedOnExtremeContent.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.SetSkelControlScale
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   SkelControlName                (CPF_Parm)
// float                          Scale                          (CPF_Parm)

void ASkeletalMeshActorMAT::SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.SetSkelControlScale");

	struct
	{
		struct FName                   SkelControlName;
		float                          Scale;
	} params;
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.SetMorphWeight
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   MorphNodeName                  (CPF_Parm)
// float                          MorphWeight                    (CPF_Parm)

void ASkeletalMeshActorMAT::SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.SetMorphWeight");

	struct
	{
		struct FName                   MorphNodeName;
		float                          MorphWeight;
	} params;
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.FinishAnimControl
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void ASkeletalMeshActorMAT::FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.FinishAnimControl");

	struct
	{
		class UInterpGroup*            InInterpGroup;
	} params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.MAT_SetAnimPosition
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   SlotName                       (CPF_Parm)
// int                            ChannelIndex                   (CPF_Parm)
// struct FName                   InAnimSeqName                  (CPF_Parm)
// float                          InPosition                     (CPF_Parm)
// bool                           bFireNotifies                  (CPF_Parm)
// bool                           bLooping                       (CPF_Parm)
// bool                           bEnableRootMotion              (CPF_Parm)

void ASkeletalMeshActorMAT::MAT_SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetAnimPosition");

	struct
	{
		struct FName                   SlotName;
		int                            ChannelIndex;
		struct FName                   InAnimSeqName;
		float                          InPosition;
		bool                           bFireNotifies;
		bool                           bLooping;
		bool                           bEnableRootMotion;
	} params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.SetAnimPosition
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   SlotName                       (CPF_Parm)
// int                            ChannelIndex                   (CPF_Parm)
// struct FName                   InAnimSeqName                  (CPF_Parm)
// float                          InPosition                     (CPF_Parm)
// bool                           bFireNotifies                  (CPF_Parm)
// bool                           bLooping                       (CPF_Parm)
// bool                           bEnableRootMotion              (CPF_Parm)

void ASkeletalMeshActorMAT::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.SetAnimPosition");

	struct
	{
		struct FName                   SlotName;
		int                            ChannelIndex;
		struct FName                   InAnimSeqName;
		float                          InPosition;
		bool                           bFireNotifies;
		bool                           bLooping;
		bool                           bEnableRootMotion;
	} params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.ClearAnimNodes
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void ASkeletalMeshActorMAT::ClearAnimNodes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.ClearAnimNodes");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.CacheAnimNodes
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void ASkeletalMeshActorMAT::CacheAnimNodes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.CacheAnimNodes");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.PostInitAnimTree
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm, CPF_EditInline)

void ASkeletalMeshActorMAT::PostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.PostInitAnimTree");

	struct
	{
		class USkeletalMeshComponent*  SkelComp;
	} params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.Destroyed
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ASkeletalMeshActorMAT::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlStrength
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   SkelControlName                (CPF_Parm)
// float                          ControlStrength                (CPF_Parm)

void ASkeletalMeshActorMAT::MAT_SetSkelControlStrength(const struct FName& SkelControlName, float ControlStrength)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlStrength");

	struct
	{
		struct FName                   SkelControlName;
		float                          ControlStrength;
	} params;
	params.SkelControlName = SkelControlName;
	params.ControlStrength = ControlStrength;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlScale
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   SkelControlName                (CPF_Parm)
// float                          Scale                          (CPF_Parm)

void ASkeletalMeshActorMAT::MAT_SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetSkelControlScale");

	struct
	{
		struct FName                   SkelControlName;
		float                          Scale;
	} params;
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.MAT_SetMorphWeight
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   MorphNodeName                  (CPF_Parm)
// float                          MorphWeight                    (CPF_Parm)

void ASkeletalMeshActorMAT::MAT_SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetMorphWeight");

	struct
	{
		struct FName                   MorphNodeName;
		float                          MorphWeight;
	} params;
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshActorMAT.MAT_SetAnimWeights
// (FUNC_Native, FUNC_Public)
// Parameters:
// TArray<struct FAnimSlotInfo>   SlotInfos                      (CPF_Parm, CPF_NeedCtorLink)

void ASkeletalMeshActorMAT::MAT_SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshActorMAT.MAT_SetAnimWeights");

	struct
	{
		TArray<struct FAnimSlotInfo>   SlotInfos;
	} params;
	params.SlotInfos = SlotInfos;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNotify.FindNextNotifyOfClass
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UAnimNodeSequence*       AnimSeqInstigator              (CPF_Parm)
// class UClass*                  NotifyClass                    (CPF_Parm)
// struct FAnimNotifyEvent        OutEvent                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UAnimNotify::FindNextNotifyOfClass(class UAnimNodeSequence* AnimSeqInstigator, class UClass* NotifyClass, struct FAnimNotifyEvent* OutEvent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify.FindNextNotifyOfClass");

	struct
	{
		class UAnimNodeSequence*       AnimSeqInstigator;
		class UClass*                  NotifyClass;
		struct FAnimNotifyEvent        OutEvent;
		bool                           ReturnValue;
	} params;
	params.AnimSeqInstigator = AnimSeqInstigator;
	params.NotifyClass = NotifyClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutEvent != nullptr)
		*OutEvent = params.OutEvent;

	return params.ReturnValue;
}


// Function Engine.AnimNotify_Scripted.NotifyEnd
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Owner                          (CPF_Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (CPF_Parm)

void UAnimNotify_Scripted::NotifyEnd(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_Scripted.NotifyEnd");

	struct
	{
		class AActor*                  Owner;
		class UAnimNodeSequence*       AnimSeqInstigator;
	} params;
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNotify_Scripted.Notify
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Owner                          (CPF_Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (CPF_Parm)

void UAnimNotify_Scripted::Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_Scripted.Notify");

	struct
	{
		class AActor*                  Owner;
		class UAnimNodeSequence*       AnimSeqInstigator;
	} params;
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNotify_PawnMaterialParam.Notify
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AActor*                  Owner                          (CPF_Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (CPF_Parm)

void UAnimNotify_PawnMaterialParam::Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_PawnMaterialParam.Notify");

	struct
	{
		class AActor*                  Owner;
		class UAnimNodeSequence*       AnimSeqInstigator;
	} params;
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNotify_ViewShake.Notify
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AActor*                  Owner                          (CPF_Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (CPF_Parm)

void UAnimNotify_ViewShake::Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_ViewShake.Notify");

	struct
	{
		class AActor*                  Owner;
		class UAnimNodeSequence*       AnimSeqInstigator;
	} params;
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNotify_Trails.GetNumSteps
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            InLastTrailIndex               (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UAnimNotify_Trails::GetNumSteps(int InLastTrailIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_Trails.GetNumSteps");

	struct
	{
		int                            InLastTrailIndex;
		int                            ReturnValue;
	} params;
	params.InLastTrailIndex = InLastTrailIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNode.ReplayAnim
// (FUNC_Native, FUNC_Public)

void UAnimNode::ReplayAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.ReplayAnim");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode.StopAnim
// (FUNC_Native, FUNC_Public)

void UAnimNode::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.StopAnim");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode.PlayAnim
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bLoop                          (CPF_OptionalParm, CPF_Parm)
// float                          Rate                           (CPF_OptionalParm, CPF_Parm)
// float                          StartTime                      (CPF_OptionalParm, CPF_Parm)

void UAnimNode::PlayAnim(bool bLoop, float Rate, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.PlayAnim");

	struct
	{
		bool                           bLoop;
		float                          Rate;
		float                          StartTime;
	} params;
	params.bLoop = bLoop;
	params.Rate = Rate;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode.FindAnimNode
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InNodeName                     (CPF_Parm)
// class UAnimNode*               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UAnimNode* UAnimNode::FindAnimNode(const struct FName& InNodeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.FindAnimNode");

	struct
	{
		struct FName                   InNodeName;
		class UAnimNode*               ReturnValue;
	} params;
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNode.OnCeaseRelevant
// (FUNC_Event, FUNC_Public)

void UAnimNode::OnCeaseRelevant()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.OnCeaseRelevant");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode.OnBecomeRelevant
// (FUNC_Event, FUNC_Public)

void UAnimNode::OnBecomeRelevant()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.OnBecomeRelevant");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode.OnInit
// (FUNC_Event, FUNC_Public)

void UAnimNode::OnInit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode.OnInit");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlendBase.ReplayAnim
// (FUNC_Native, FUNC_Public)

void UAnimNodeBlendBase::ReplayAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendBase.ReplayAnim");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlendBase.StopAnim
// (FUNC_Native, FUNC_Public)

void UAnimNodeBlendBase::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendBase.StopAnim");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlendBase.PlayAnim
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bLoop                          (CPF_OptionalParm, CPF_Parm)
// float                          Rate                           (CPF_OptionalParm, CPF_Parm)
// float                          StartTime                      (CPF_OptionalParm, CPF_Parm)

void UAnimNodeBlendBase::PlayAnim(bool bLoop, float Rate, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendBase.PlayAnim");

	struct
	{
		bool                           bLoop;
		float                          Rate;
		float                          StartTime;
	} params;
	params.bLoop = bLoop;
	params.Rate = Rate;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNode_MultiBlendPerBone.SetMaskWeight
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            MaskIndex                      (CPF_Parm)
// float                          DesiredWeight                  (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)

void UAnimNode_MultiBlendPerBone::SetMaskWeight(int MaskIndex, float DesiredWeight, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNode_MultiBlendPerBone.SetMaskWeight");

	struct
	{
		int                            MaskIndex;
		float                          DesiredWeight;
		float                          BlendTime;
	} params;
	params.MaskIndex = MaskIndex;
	params.DesiredWeight = DesiredWeight;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeAimOffset.SetActiveProfileByIndex
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ProfileIndex                   (CPF_Parm)

void UAnimNodeAimOffset::SetActiveProfileByIndex(int ProfileIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeAimOffset.SetActiveProfileByIndex");

	struct
	{
		int                            ProfileIndex;
	} params;
	params.ProfileIndex = ProfileIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeAimOffset.SetActiveProfileByName
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ProfileName                    (CPF_Parm)

void UAnimNodeAimOffset::SetActiveProfileByName(const struct FName& ProfileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeAimOffset.SetActiveProfileByName");

	struct
	{
		struct FName                   ProfileName;
	} params;
	params.ProfileName = ProfileName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlend.SetBlendTarget
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          BlendTarget                    (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)

void UAnimNodeBlend::SetBlendTarget(float BlendTarget, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlend.SetBlendTarget");

	struct
	{
		float                          BlendTarget;
		float                          BlendTime;
	} params;
	params.BlendTarget = BlendTarget;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeAdditiveBlending.SetBlendTarget
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          BlendTarget                    (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)

void UAnimNodeAdditiveBlending::SetBlendTarget(float BlendTarget, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeAdditiveBlending.SetBlendTarget");

	struct
	{
		float                          BlendTarget;
		float                          BlendTime;
	} params;
	params.BlendTarget = BlendTarget;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlendPerBone.SetBlendTarget
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          BlendTarget                    (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)

void UAnimNodeBlendPerBone::SetBlendTarget(float BlendTarget, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendPerBone.SetBlendTarget");

	struct
	{
		float                          BlendTarget;
		float                          BlendTime;
	} params;
	params.BlendTarget = BlendTarget;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeCrossfader.GetActiveChild
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UAnimNodeSequence*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UAnimNodeSequence* UAnimNodeCrossfader::GetActiveChild()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.GetActiveChild");

	struct
	{
		class UAnimNodeSequence*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeCrossfader.GetAnimName
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName UAnimNodeCrossfader::GetAnimName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.GetAnimName");

	struct
	{
		struct FName                   ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeCrossfader.BlendToLoopingAnim
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   AnimSeqName                    (CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm, CPF_Parm)
// float                          Rate                           (CPF_OptionalParm, CPF_Parm)

void UAnimNodeCrossfader::BlendToLoopingAnim(const struct FName& AnimSeqName, float BlendInTime, float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.BlendToLoopingAnim");

	struct
	{
		struct FName                   AnimSeqName;
		float                          BlendInTime;
		float                          Rate;
	} params;
	params.AnimSeqName = AnimSeqName;
	params.BlendInTime = BlendInTime;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeCrossfader.PlayOneShotAnim
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   AnimSeqName                    (CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm, CPF_Parm)
// float                          BlendOutTime                   (CPF_OptionalParm, CPF_Parm)
// bool                           bDontBlendOut                  (CPF_OptionalParm, CPF_Parm)
// float                          Rate                           (CPF_OptionalParm, CPF_Parm)

void UAnimNodeCrossfader::PlayOneShotAnim(const struct FName& AnimSeqName, float BlendInTime, float BlendOutTime, bool bDontBlendOut, float Rate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeCrossfader.PlayOneShotAnim");

	struct
	{
		struct FName                   AnimSeqName;
		float                          BlendInTime;
		float                          BlendOutTime;
		bool                           bDontBlendOut;
		float                          Rate;
	} params;
	params.AnimSeqName = AnimSeqName;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bDontBlendOut = bDontBlendOut;
	params.Rate = Rate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption
// (FUNC_Final, FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ERootBoneAxis> AxisX                          (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class ERootBoneAxis> AxisY                          (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class ERootBoneAxis> AxisZ                          (CPF_OptionalParm, CPF_Parm)

void UAnimNodePlayCustomAnim::SetRootBoneAxisOption(TEnumAsByte<enum class ERootBoneAxis> AxisX, TEnumAsByte<enum class ERootBoneAxis> AxisY, TEnumAsByte<enum class ERootBoneAxis> AxisZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.SetRootBoneAxisOption");

	struct
	{
		TEnumAsByte<enum class ERootBoneAxis> AxisX;
		TEnumAsByte<enum class ERootBoneAxis> AxisY;
		TEnumAsByte<enum class ERootBoneAxis> AxisZ;
	} params;
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// class UAnimNodeSequence*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UAnimNodeSequence* UAnimNodePlayCustomAnim::GetCustomAnimNodeSeq()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.GetCustomAnimNodeSeq");

	struct
	{
		class UAnimNodeSequence*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bNewStatus                     (CPF_Parm)

void UAnimNodePlayCustomAnim::SetActorAnimEndNotification(bool bNewStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.SetActorAnimEndNotification");

	struct
	{
		bool                           bNewStatus;
	} params;
	params.bNewStatus = bNewStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.SetCustomAnim
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   AnimName                       (CPF_Parm)

void UAnimNodePlayCustomAnim::SetCustomAnim(const struct FName& AnimName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.SetCustomAnim");

	struct
	{
		struct FName                   AnimName;
	} params;
	params.AnimName = AnimName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.StopCustomAnim
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          BlendOutTime                   (CPF_Parm)

void UAnimNodePlayCustomAnim::StopCustomAnim(float BlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.StopCustomAnim");

	struct
	{
		float                          BlendOutTime;
	} params;
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   AnimName                       (CPF_Parm)
// float                          Duration                       (CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm, CPF_Parm)
// float                          BlendOutTime                   (CPF_OptionalParm, CPF_Parm)
// bool                           bLooping                       (CPF_OptionalParm, CPF_Parm)
// bool                           bOverride                      (CPF_OptionalParm, CPF_Parm)

void UAnimNodePlayCustomAnim::PlayCustomAnimByDuration(const struct FName& AnimName, float Duration, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.PlayCustomAnimByDuration");

	struct
	{
		struct FName                   AnimName;
		float                          Duration;
		float                          BlendInTime;
		float                          BlendOutTime;
		bool                           bLooping;
		bool                           bOverride;
	} params;
	params.AnimName = AnimName;
	params.Duration = Duration;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodePlayCustomAnim.PlayCustomAnim
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   AnimName                       (CPF_Parm)
// float                          Rate                           (CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm, CPF_Parm)
// float                          BlendOutTime                   (CPF_OptionalParm, CPF_Parm)
// bool                           bLooping                       (CPF_OptionalParm, CPF_Parm)
// bool                           bOverride                      (CPF_OptionalParm, CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UAnimNodePlayCustomAnim::PlayCustomAnim(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodePlayCustomAnim.PlayCustomAnim");

	struct
	{
		struct FName                   AnimName;
		float                          Rate;
		float                          BlendInTime;
		float                          BlendOutTime;
		bool                           bLooping;
		bool                           bOverride;
		float                          ReturnValue;
	} params;
	params.AnimName = AnimName;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeBlendList.SetActiveChild
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ChildIndex                     (CPF_Parm)
// float                          BlendTime                      (CPF_Parm)

void UAnimNodeBlendList::SetActiveChild(int ChildIndex, float BlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendList.SetActiveChild");

	struct
	{
		int                            ChildIndex;
		float                          BlendTime;
	} params;
	params.ChildIndex = ChildIndex;
	params.BlendTime = BlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeBlendMultiBone.SetTargetStartBone
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            TargetIdx                      (CPF_Parm)
// struct FName                   StartBoneName                  (CPF_Parm)
// float                          PerBoneIncrease                (CPF_OptionalParm, CPF_Parm)

void UAnimNodeBlendMultiBone::SetTargetStartBone(int TargetIdx, const struct FName& StartBoneName, float PerBoneIncrease)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeBlendMultiBone.SetTargetStartBone");

	struct
	{
		int                            TargetIdx;
		struct FName                   StartBoneName;
		float                          PerBoneIncrease;
	} params;
	params.TargetIdx = TargetIdx;
	params.StartBoneName = StartBoneName;
	params.PerBoneIncrease = PerBoneIncrease;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.TickChildWeights
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          DeltaSeconds                   (CPF_Parm)

void UAnimNodeSlot::TickChildWeights(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.TickChildWeights");

	struct
	{
		float                          DeltaSeconds;
	} params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.SetRootBoneRotationOption
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ERootRotationOption> AxisX                          (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class ERootRotationOption> AxisY                          (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class ERootRotationOption> AxisZ                          (CPF_OptionalParm, CPF_Parm)

void UAnimNodeSlot::SetRootBoneRotationOption(TEnumAsByte<enum class ERootRotationOption> AxisX, TEnumAsByte<enum class ERootRotationOption> AxisY, TEnumAsByte<enum class ERootRotationOption> AxisZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetRootBoneRotationOption");

	struct
	{
		TEnumAsByte<enum class ERootRotationOption> AxisX;
		TEnumAsByte<enum class ERootRotationOption> AxisY;
		TEnumAsByte<enum class ERootRotationOption> AxisZ;
	} params;
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.SetRootBoneAxisOption
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ERootBoneAxis> AxisX                          (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class ERootBoneAxis> AxisY                          (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class ERootBoneAxis> AxisZ                          (CPF_OptionalParm, CPF_Parm)

void UAnimNodeSlot::SetRootBoneAxisOption(TEnumAsByte<enum class ERootBoneAxis> AxisX, TEnumAsByte<enum class ERootBoneAxis> AxisY, TEnumAsByte<enum class ERootBoneAxis> AxisZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetRootBoneAxisOption");

	struct
	{
		TEnumAsByte<enum class ERootBoneAxis> AxisX;
		TEnumAsByte<enum class ERootBoneAxis> AxisY;
		TEnumAsByte<enum class ERootBoneAxis> AxisZ;
	} params;
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.GetCustomAnimNodeSeq
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UAnimNodeSequence*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UAnimNodeSequence* UAnimNodeSlot::GetCustomAnimNodeSeq()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.GetCustomAnimNodeSeq");

	struct
	{
		class UAnimNodeSequence*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSlot.SetActorAnimEndNotification
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewStatus                     (CPF_Parm)

void UAnimNodeSlot::SetActorAnimEndNotification(bool bNewStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetActorAnimEndNotification");

	struct
	{
		bool                           bNewStatus;
	} params;
	params.bNewStatus = bNewStatus;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.SetCustomAnim
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   AnimName                       (CPF_Parm)

void UAnimNodeSlot::SetCustomAnim(const struct FName& AnimName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetCustomAnim");

	struct
	{
		struct FName                   AnimName;
	} params;
	params.AnimName = AnimName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.SetAllowPauseAnims
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bSet                           (CPF_Parm)

void UAnimNodeSlot::SetAllowPauseAnims(bool bSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.SetAllowPauseAnims");

	struct
	{
		bool                           bSet;
	} params;
	params.bSet = bSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.StopCustomAnim
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          BlendOutTime                   (CPF_Parm)

void UAnimNodeSlot::StopCustomAnim(float BlendOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.StopCustomAnim");

	struct
	{
		float                          BlendOutTime;
	} params;
	params.BlendOutTime = BlendOutTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSlot.GetPlayedAnimation
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName UAnimNodeSlot::GetPlayedAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.GetPlayedAnimation");

	struct
	{
		struct FName                   ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSlot.PlayCustomAnimByDuration
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   AnimName                       (CPF_Parm)
// float                          Duration                       (CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm, CPF_Parm)
// float                          BlendOutTime                   (CPF_OptionalParm, CPF_Parm)
// bool                           bLooping                       (CPF_OptionalParm, CPF_Parm)
// bool                           bOverride                      (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UAnimNodeSlot::PlayCustomAnimByDuration(const struct FName& AnimName, float Duration, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.PlayCustomAnimByDuration");

	struct
	{
		struct FName                   AnimName;
		float                          Duration;
		float                          BlendInTime;
		float                          BlendOutTime;
		bool                           bLooping;
		bool                           bOverride;
		bool                           ReturnValue;
	} params;
	params.AnimName = AnimName;
	params.Duration = Duration;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSlot.PlayCustomAnim
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   AnimName                       (CPF_Parm)
// float                          Rate                           (CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm, CPF_Parm)
// float                          BlendOutTime                   (CPF_OptionalParm, CPF_Parm)
// bool                           bLooping                       (CPF_OptionalParm, CPF_Parm)
// bool                           bOverride                      (CPF_OptionalParm, CPF_Parm)
// float                          StartTime                      (CPF_OptionalParm, CPF_Parm)
// float                          EndTime                        (CPF_OptionalParm, CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UAnimNodeSlot::PlayCustomAnim(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride, float StartTime, float EndTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSlot.PlayCustomAnim");

	struct
	{
		struct FName                   AnimName;
		float                          Rate;
		float                          BlendInTime;
		float                          BlendOutTime;
		bool                           bLooping;
		bool                           bOverride;
		float                          StartTime;
		float                          EndTime;
		float                          ReturnValue;
	} params;
	params.AnimName = AnimName;
	params.Rate = Rate;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLooping = bLooping;
	params.bOverride = bOverride;
	params.StartTime = StartTime;
	params.EndTime = EndTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSynch.SetGroupRateScale
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   GroupName                      (CPF_Parm)
// float                          NewRateScale                   (CPF_Parm)

void UAnimNodeSynch::SetGroupRateScale(const struct FName& GroupName, float NewRateScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.SetGroupRateScale");

	struct
	{
		struct FName                   GroupName;
		float                          NewRateScale;
	} params;
	params.GroupName = GroupName;
	params.NewRateScale = NewRateScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSynch.GetRelativePosition
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   GroupName                      (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UAnimNodeSynch::GetRelativePosition(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.GetRelativePosition");

	struct
	{
		struct FName                   GroupName;
		float                          ReturnValue;
	} params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSynch.ForceRelativePosition
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   GroupName                      (CPF_Parm)
// float                          RelativePosition               (CPF_Parm)

void UAnimNodeSynch::ForceRelativePosition(const struct FName& GroupName, float RelativePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.ForceRelativePosition");

	struct
	{
		struct FName                   GroupName;
		float                          RelativePosition;
	} params;
	params.GroupName = GroupName;
	params.RelativePosition = RelativePosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSynch.GetMasterNodeOfGroup
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   GroupName                      (CPF_Parm)
// class UAnimNodeSequence*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UAnimNodeSequence* UAnimNodeSynch::GetMasterNodeOfGroup(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.GetMasterNodeOfGroup");

	struct
	{
		struct FName                   GroupName;
		class UAnimNodeSequence*       ReturnValue;
	} params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSynch.RemoveNodeFromGroup
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)
// struct FName                   GroupName                      (CPF_Parm)

void UAnimNodeSynch::RemoveNodeFromGroup(class UAnimNodeSequence* SeqNode, const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.RemoveNodeFromGroup");

	struct
	{
		class UAnimNodeSequence*       SeqNode;
		struct FName                   GroupName;
	} params;
	params.SeqNode = SeqNode;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSynch.AddNodeToGroup
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)
// struct FName                   GroupName                      (CPF_Parm)

void UAnimNodeSynch::AddNodeToGroup(class UAnimNodeSequence* SeqNode, const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSynch.AddNodeToGroup");

	struct
	{
		class UAnimNodeSequence*       SeqNode;
		struct FName                   GroupName;
	} params;
	params.SeqNode = SeqNode;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimTree.GetGroupIndex
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   GroupName                      (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UAnimTree::GetGroupIndex(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupIndex");

	struct
	{
		struct FName                   GroupName;
		int                            ReturnValue;
	} params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.GetGroupRateScale
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   GroupName                      (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UAnimTree::GetGroupRateScale(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupRateScale");

	struct
	{
		struct FName                   GroupName;
		float                          ReturnValue;
	} params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.SetGroupRateScale
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   GroupName                      (CPF_Parm)
// float                          NewRateScale                   (CPF_Parm)

void UAnimTree::SetGroupRateScale(const struct FName& GroupName, float NewRateScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.SetGroupRateScale");

	struct
	{
		struct FName                   GroupName;
		float                          NewRateScale;
	} params;
	params.GroupName = GroupName;
	params.NewRateScale = NewRateScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimTree.GetGroupRelativePosition
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   GroupName                      (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UAnimTree::GetGroupRelativePosition(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupRelativePosition");

	struct
	{
		struct FName                   GroupName;
		float                          ReturnValue;
	} params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.ForceGroupRelativePosition
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   GroupName                      (CPF_Parm)
// float                          RelativePosition               (CPF_Parm)

void UAnimTree::ForceGroupRelativePosition(const struct FName& GroupName, float RelativePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.ForceGroupRelativePosition");

	struct
	{
		struct FName                   GroupName;
		float                          RelativePosition;
	} params;
	params.GroupName = GroupName;
	params.RelativePosition = RelativePosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimTree.GetGroupNotifyMaster
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   GroupName                      (CPF_Parm)
// class UAnimNodeSequence*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UAnimNodeSequence* UAnimTree::GetGroupNotifyMaster(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupNotifyMaster");

	struct
	{
		struct FName                   GroupName;
		class UAnimNodeSequence*       ReturnValue;
	} params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.GetGroupSynchMaster
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   GroupName                      (CPF_Parm)
// class UAnimNodeSequence*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UAnimNodeSequence* UAnimTree::GetGroupSynchMaster(const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.GetGroupSynchMaster");

	struct
	{
		struct FName                   GroupName;
		class UAnimNodeSequence*       ReturnValue;
	} params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.SetAnimGroupForNode
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UAnimNodeSequence*       SeqNode                        (CPF_Parm)
// struct FName                   GroupName                      (CPF_Parm)
// bool                           bCreateIfNotFound              (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UAnimTree::SetAnimGroupForNode(class UAnimNodeSequence* SeqNode, const struct FName& GroupName, bool bCreateIfNotFound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.SetAnimGroupForNode");

	struct
	{
		class UAnimNodeSequence*       SeqNode;
		struct FName                   GroupName;
		bool                           bCreateIfNotFound;
		bool                           ReturnValue;
	} params;
	params.SeqNode = SeqNode;
	params.GroupName = GroupName;
	params.bCreateIfNotFound = bCreateIfNotFound;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.SetUseSavedPose
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bUseSaved                      (CPF_Parm)

void UAnimTree::SetUseSavedPose(bool bUseSaved)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.SetUseSavedPose");

	struct
	{
		bool                           bUseSaved;
	} params;
	params.bUseSaved = bUseSaved;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimTree.FindMorphNode
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InNodeName                     (CPF_Parm)
// class UMorphNodeBase*          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMorphNodeBase* UAnimTree::FindMorphNode(const struct FName& InNodeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.FindMorphNode");

	struct
	{
		struct FName                   InNodeName;
		class UMorphNodeBase*          ReturnValue;
	} params;
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimTree.AllSkelControlsNamed
// (FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  SkelClass                      (CPF_Parm)
// struct FName                   ControlName                    (CPF_Parm)
// class USkelControlBase*        OutControl                     (CPF_Parm, CPF_OutParm)

void UAnimTree::AllSkelControlsNamed(class UClass* SkelClass, const struct FName& ControlName, class USkelControlBase** OutControl)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.AllSkelControlsNamed");

	struct
	{
		class UClass*                  SkelClass;
		struct FName                   ControlName;
		class USkelControlBase*        OutControl;
	} params;
	params.SkelClass = SkelClass;
	params.ControlName = ControlName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutControl != nullptr)
		*OutControl = params.OutControl;
}


// Function Engine.AnimTree.FindSkelControl
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InControlName                  (CPF_Parm)
// class USkelControlBase*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class USkelControlBase* UAnimTree::FindSkelControl(const struct FName& InControlName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimTree.FindSkelControl");

	struct
	{
		struct FName                   InControlName;
		class USkelControlBase*        ReturnValue;
	} params;
	params.InControlName = InControlName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.SetRootBoneRotationOption
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ERootRotationOption> AxisX                          (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class ERootRotationOption> AxisY                          (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class ERootRotationOption> AxisZ                          (CPF_OptionalParm, CPF_Parm)

void UAnimNodeSequence::SetRootBoneRotationOption(TEnumAsByte<enum class ERootRotationOption> AxisX, TEnumAsByte<enum class ERootRotationOption> AxisY, TEnumAsByte<enum class ERootRotationOption> AxisZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.SetRootBoneRotationOption");

	struct
	{
		TEnumAsByte<enum class ERootRotationOption> AxisX;
		TEnumAsByte<enum class ERootRotationOption> AxisY;
		TEnumAsByte<enum class ERootRotationOption> AxisZ;
	} params;
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequence.SetRootBoneAxisOption
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ERootBoneAxis> AxisX                          (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class ERootBoneAxis> AxisY                          (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class ERootBoneAxis> AxisZ                          (CPF_OptionalParm, CPF_Parm)

void UAnimNodeSequence::SetRootBoneAxisOption(TEnumAsByte<enum class ERootBoneAxis> AxisX, TEnumAsByte<enum class ERootBoneAxis> AxisY, TEnumAsByte<enum class ERootBoneAxis> AxisZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.SetRootBoneAxisOption");

	struct
	{
		TEnumAsByte<enum class ERootBoneAxis> AxisX;
		TEnumAsByte<enum class ERootBoneAxis> AxisY;
		TEnumAsByte<enum class ERootBoneAxis> AxisZ;
	} params;
	params.AxisX = AxisX;
	params.AxisY = AxisY;
	params.AxisZ = AxisZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequence.GetTimeLeft
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UAnimNodeSequence::GetTimeLeft()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetTimeLeft");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.GetAnimPlaybackLength
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UAnimNodeSequence::GetAnimPlaybackLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetAnimPlaybackLength");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.GetGlobalPlayRate
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UAnimNodeSequence::GetGlobalPlayRate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetGlobalPlayRate");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.GetGroupRelativePosition
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UAnimNodeSequence::GetGroupRelativePosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetGroupRelativePosition");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.FindGroupPosition
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          GroupRelativePosition          (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UAnimNodeSequence::FindGroupPosition(float GroupRelativePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.FindGroupPosition");

	struct
	{
		float                          GroupRelativePosition;
		float                          ReturnValue;
	} params;
	params.GroupRelativePosition = GroupRelativePosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.FindGroupRelativePosition
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          GroupRelativePosition          (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UAnimNodeSequence::FindGroupRelativePosition(float GroupRelativePosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.FindGroupRelativePosition");

	struct
	{
		float                          GroupRelativePosition;
		float                          ReturnValue;
	} params;
	params.GroupRelativePosition = GroupRelativePosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.GetNormalizedPosition
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UAnimNodeSequence::GetNormalizedPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.GetNormalizedPosition");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnimNodeSequence.SetPosition
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          NewTime                        (CPF_Parm)
// bool                           bFireNotifies                  (CPF_Parm)

void UAnimNodeSequence::SetPosition(float NewTime, bool bFireNotifies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.SetPosition");

	struct
	{
		float                          NewTime;
		bool                           bFireNotifies;
	} params;
	params.NewTime = NewTime;
	params.bFireNotifies = bFireNotifies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequence.ReplayAnim
// (FUNC_Native, FUNC_Public)

void UAnimNodeSequence::ReplayAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.ReplayAnim");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequence.StopAnim
// (FUNC_Native, FUNC_Public)

void UAnimNodeSequence::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.StopAnim");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequence.PlayAnim
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bLoop                          (CPF_OptionalParm, CPF_Parm)
// float                          InRate                         (CPF_OptionalParm, CPF_Parm)
// float                          StartTime                      (CPF_OptionalParm, CPF_Parm)

void UAnimNodeSequence::PlayAnim(bool bLoop, float InRate, float StartTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.PlayAnim");

	struct
	{
		bool                           bLoop;
		float                          InRate;
		float                          StartTime;
	} params;
	params.bLoop = bLoop;
	params.InRate = InRate;
	params.StartTime = StartTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequence.SetAnim
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   Sequence                       (CPF_Parm)

void UAnimNodeSequence::SetAnim(const struct FName& Sequence)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequence.SetAnim");

	struct
	{
		struct FName                   Sequence;
	} params;
	params.Sequence = Sequence;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNodeSequenceBlendByAim.CheckAnimsUpToDate
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UAnimNodeSequenceBlendByAim::CheckAnimsUpToDate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNodeSequenceBlendByAim.CheckAnimsUpToDate");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MorphNodeMultiPose.UpdateMorphTarget
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UMorphTarget*            Target                         (CPF_Parm)
// float                          InWeight                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMorphNodeMultiPose::UpdateMorphTarget(class UMorphTarget* Target, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MorphNodeMultiPose.UpdateMorphTarget");

	struct
	{
		class UMorphTarget*            Target;
		float                          InWeight;
		bool                           ReturnValue;
	} params;
	params.Target = Target;
	params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MorphNodeMultiPose.RemoveMorphTarget
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   MorphTargetName                (CPF_Parm)

void UMorphNodeMultiPose::RemoveMorphTarget(const struct FName& MorphTargetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MorphNodeMultiPose.RemoveMorphTarget");

	struct
	{
		struct FName                   MorphTargetName;
	} params;
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MorphNodeMultiPose.AddMorphTarget
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   MorphTargetName                (CPF_Parm)
// float                          InWeight                       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMorphNodeMultiPose::AddMorphTarget(const struct FName& MorphTargetName, float InWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MorphNodeMultiPose.AddMorphTarget");

	struct
	{
		struct FName                   MorphTargetName;
		float                          InWeight;
		bool                           ReturnValue;
	} params;
	params.MorphTargetName = MorphTargetName;
	params.InWeight = InWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MorphNodePose.SetMorphTarget
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   MorphTargetName                (CPF_Parm)

void UMorphNodePose::SetMorphTarget(const struct FName& MorphTargetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MorphNodePose.SetMorphTarget");

	struct
	{
		struct FName                   MorphTargetName;
	} params;
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MorphNodeWeight.SetNodeWeight
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          NewWeight                      (CPF_Parm)

void UMorphNodeWeight::SetNodeWeight(float NewWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MorphNodeWeight.SetNodeWeight");

	struct
	{
		float                          NewWeight;
	} params;
	params.NewWeight = NewWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlBase.GetControlMetadataWeight
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USkelControlBase::GetControlMetadataWeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlBase.GetControlMetadataWeight");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkelControlBase.TickSkelControl
// (FUNC_Event, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm, CPF_EditInline)

void USkelControlBase::TickSkelControl(float DeltaTime, class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlBase.TickSkelControl");

	struct
	{
		float                          DeltaTime;
		class USkeletalMeshComponent*  SkelComp;
	} params;
	params.DeltaTime = DeltaTime;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlBase.SetSkelControlStrength
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          NewStrength                    (CPF_Parm)
// float                          InBlendTime                    (CPF_Parm)

void USkelControlBase::SetSkelControlStrength(float NewStrength, float InBlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlBase.SetSkelControlStrength");

	struct
	{
		float                          NewStrength;
		float                          InBlendTime;
	} params;
	params.NewStrength = NewStrength;
	params.InBlendTime = InBlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlBase.SetSkelControlActive
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bInActive                      (CPF_Parm)

void USkelControlBase::SetSkelControlActive(bool bInActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlBase.SetSkelControlActive");

	struct
	{
		bool                           bInActive;
	} params;
	params.bInActive = bInActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlLookAt.CanLookAtPoint
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 PointLoc                       (CPF_Parm)
// bool                           bDrawDebugInfo                 (CPF_OptionalParm, CPF_Parm)
// bool                           bDebugUsePersistentLines       (CPF_OptionalParm, CPF_Parm)
// bool                           bDebugFlushLinesFirst          (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USkelControlLookAt::CanLookAtPoint(const struct FVector& PointLoc, bool bDrawDebugInfo, bool bDebugUsePersistentLines, bool bDebugFlushLinesFirst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.CanLookAtPoint");

	struct
	{
		struct FVector                 PointLoc;
		bool                           bDrawDebugInfo;
		bool                           bDebugUsePersistentLines;
		bool                           bDebugFlushLinesFirst;
		bool                           ReturnValue;
	} params;
	params.PointLoc = PointLoc;
	params.bDrawDebugInfo = bDrawDebugInfo;
	params.bDebugUsePersistentLines = bDebugUsePersistentLines;
	params.bDebugFlushLinesFirst = bDebugFlushLinesFirst;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkelControlLookAt.SetLookAtAlpha
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          DesiredAlpha                   (CPF_Parm)
// float                          DesiredBlendTime               (CPF_Parm)

void USkelControlLookAt::SetLookAtAlpha(float DesiredAlpha, float DesiredBlendTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.SetLookAtAlpha");

	struct
	{
		float                          DesiredAlpha;
		float                          DesiredBlendTime;
	} params;
	params.DesiredAlpha = DesiredAlpha;
	params.DesiredBlendTime = DesiredBlendTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlLookAt.InterpolateTargetLocation
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void USkelControlLookAt::InterpolateTargetLocation(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.InterpolateTargetLocation");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkelControlLookAt.SetTargetLocation
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 NewTargetLocation              (CPF_Parm)

void USkelControlLookAt::SetTargetLocation(const struct FVector& NewTargetLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkelControlLookAt.SetTargetLocation");

	struct
	{
		struct FVector                 NewTargetLocation;
	} params;
	params.NewTargetLocation = NewTargetLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimSequence.GetNotifyTimeByClass
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  NotifyClass                    (CPF_Parm)
// float                          PlayRate                       (CPF_OptionalParm, CPF_Parm)
// float                          StartPosition                  (CPF_OptionalParm, CPF_Parm)
// class UAnimNotify*             out_Notify                     (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// float                          out_Duration                   (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UAnimSequence::GetNotifyTimeByClass(class UClass* NotifyClass, float PlayRate, float StartPosition, class UAnimNotify** out_Notify, float* out_Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimSequence.GetNotifyTimeByClass");

	struct
	{
		class UClass*                  NotifyClass;
		float                          PlayRate;
		float                          StartPosition;
		class UAnimNotify*             out_Notify;
		float                          out_Duration;
		float                          ReturnValue;
	} params;
	params.NotifyClass = NotifyClass;
	params.PlayRate = PlayRate;
	params.StartPosition = StartPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Notify != nullptr)
		*out_Notify = params.out_Notify;
	if (out_Duration != nullptr)
		*out_Duration = params.out_Duration;

	return params.ReturnValue;
}


// Function Engine.MorphTargetSet.FindMorphTarget
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   MorphTargetName                (CPF_Parm)
// class UMorphTarget*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMorphTarget* UMorphTargetSet::FindMorphTarget(const struct FName& MorphTargetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MorphTargetSet.FindMorphTarget");

	struct
	{
		struct FName                   MorphTargetName;
		class UMorphTarget*            ReturnValue;
	} params;
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalManager.SpawnDecal
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class UMaterialInterface*      DecalMaterial                  (CPF_Parm)
// struct FVector                 DecalLocation                  (CPF_Parm)
// struct FRotator                DecalOrientation               (CPF_Parm)
// float                          Width                          (CPF_Parm)
// float                          Height                         (CPF_Parm)
// float                          Thickness                      (CPF_Parm)
// bool                           bNoClip                        (CPF_Parm)
// float                          DecalRotation                  (CPF_OptionalParm, CPF_Parm)
// class UPrimitiveComponent*     HitComponent                   (CPF_OptionalParm, CPF_Parm, CPF_EditInline)
// bool                           bProjectOnTerrain              (CPF_OptionalParm, CPF_Parm)
// bool                           bProjectOnSkeletalMeshes       (CPF_OptionalParm, CPF_Parm)
// struct FName                   HitBone                        (CPF_OptionalParm, CPF_Parm)
// int                            HitNodeIndex                   (CPF_OptionalParm, CPF_Parm)
// int                            HitLevelIndex                  (CPF_OptionalParm, CPF_Parm)
// float                          InDecalLifeSpan                (CPF_OptionalParm, CPF_Parm)
// int                            InFracturedStaticMeshComponentIndex (CPF_OptionalParm, CPF_Parm)
// float                          InDepthBias                    (CPF_OptionalParm, CPF_Parm)
// struct FVector2D               InBlendRange                   (CPF_OptionalParm, CPF_Parm)
// class UDecalComponent*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UDecalComponent* ADecalManager::SpawnDecal(class UMaterialInterface* DecalMaterial, const struct FVector& DecalLocation, const struct FRotator& DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, bool bProjectOnTerrain, bool bProjectOnSkeletalMeshes, const struct FName& HitBone, int HitNodeIndex, int HitLevelIndex, float InDecalLifeSpan, int InFracturedStaticMeshComponentIndex, float InDepthBias, const struct FVector2D& InBlendRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.SpawnDecal");

	struct
	{
		class UMaterialInterface*      DecalMaterial;
		struct FVector                 DecalLocation;
		struct FRotator                DecalOrientation;
		float                          Width;
		float                          Height;
		float                          Thickness;
		bool                           bNoClip;
		float                          DecalRotation;
		class UPrimitiveComponent*     HitComponent;
		bool                           bProjectOnTerrain;
		bool                           bProjectOnSkeletalMeshes;
		struct FName                   HitBone;
		int                            HitNodeIndex;
		int                            HitLevelIndex;
		float                          InDecalLifeSpan;
		int                            InFracturedStaticMeshComponentIndex;
		float                          InDepthBias;
		struct FVector2D               InBlendRange;
		class UDecalComponent*         ReturnValue;
	} params;
	params.DecalMaterial = DecalMaterial;
	params.DecalLocation = DecalLocation;
	params.DecalOrientation = DecalOrientation;
	params.Width = Width;
	params.Height = Height;
	params.Thickness = Thickness;
	params.bNoClip = bNoClip;
	params.DecalRotation = DecalRotation;
	params.HitComponent = HitComponent;
	params.bProjectOnTerrain = bProjectOnTerrain;
	params.bProjectOnSkeletalMeshes = bProjectOnSkeletalMeshes;
	params.HitBone = HitBone;
	params.HitNodeIndex = HitNodeIndex;
	params.HitLevelIndex = HitLevelIndex;
	params.InDecalLifeSpan = InDecalLifeSpan;
	params.InFracturedStaticMeshComponentIndex = InFracturedStaticMeshComponentIndex;
	params.InDepthBias = InDepthBias;
	params.InBlendRange = InBlendRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalManager.GetPooledComponent
// (FUNC_Defined, FUNC_Protected)
// Parameters:
// class UDecalComponent*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UDecalComponent* ADecalManager::GetPooledComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.GetPooledComponent");

	struct
	{
		class UDecalComponent*         ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalManager.SetDecalParameters
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class UDecalComponent*         TheDecal                       (CPF_Parm, CPF_EditInline)
// class UMaterialInterface*      DecalMaterial                  (CPF_Parm)
// struct FVector                 DecalLocation                  (CPF_Parm)
// struct FRotator                DecalOrientation               (CPF_Parm)
// float                          Width                          (CPF_Parm)
// float                          Height                         (CPF_Parm)
// float                          Thickness                      (CPF_Parm)
// bool                           bNoClip                        (CPF_Parm)
// float                          DecalRotation                  (CPF_Parm)
// class UPrimitiveComponent*     HitComponent                   (CPF_Parm, CPF_EditInline)
// bool                           bProjectOnTerrain              (CPF_Parm)
// bool                           bProjectOnSkeletalMeshes       (CPF_Parm)
// struct FName                   HitBone                        (CPF_Parm)
// int                            HitNodeIndex                   (CPF_Parm)
// int                            HitLevelIndex                  (CPF_Parm)
// int                            InFracturedStaticMeshComponentIndex (CPF_Parm)
// float                          DepthBias                      (CPF_Parm)
// struct FVector2D               BlendRange                     (CPF_Parm)

void ADecalManager::STATIC_SetDecalParameters(class UDecalComponent* TheDecal, class UMaterialInterface* DecalMaterial, const struct FVector& DecalLocation, const struct FRotator& DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, bool bProjectOnTerrain, bool bProjectOnSkeletalMeshes, const struct FName& HitBone, int HitNodeIndex, int HitLevelIndex, int InFracturedStaticMeshComponentIndex, float DepthBias, const struct FVector2D& BlendRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.SetDecalParameters");

	struct
	{
		class UDecalComponent*         TheDecal;
		class UMaterialInterface*      DecalMaterial;
		struct FVector                 DecalLocation;
		struct FRotator                DecalOrientation;
		float                          Width;
		float                          Height;
		float                          Thickness;
		bool                           bNoClip;
		float                          DecalRotation;
		class UPrimitiveComponent*     HitComponent;
		bool                           bProjectOnTerrain;
		bool                           bProjectOnSkeletalMeshes;
		struct FName                   HitBone;
		int                            HitNodeIndex;
		int                            HitLevelIndex;
		int                            InFracturedStaticMeshComponentIndex;
		float                          DepthBias;
		struct FVector2D               BlendRange;
	} params;
	params.TheDecal = TheDecal;
	params.DecalMaterial = DecalMaterial;
	params.DecalLocation = DecalLocation;
	params.DecalOrientation = DecalOrientation;
	params.Width = Width;
	params.Height = Height;
	params.Thickness = Thickness;
	params.bNoClip = bNoClip;
	params.DecalRotation = DecalRotation;
	params.HitComponent = HitComponent;
	params.bProjectOnTerrain = bProjectOnTerrain;
	params.bProjectOnSkeletalMeshes = bProjectOnSkeletalMeshes;
	params.HitBone = HitBone;
	params.HitNodeIndex = HitNodeIndex;
	params.HitLevelIndex = HitLevelIndex;
	params.InFracturedStaticMeshComponentIndex = InFracturedStaticMeshComponentIndex;
	params.DepthBias = DepthBias;
	params.BlendRange = BlendRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalManager.CanSpawnDecals
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ADecalManager::CanSpawnDecals()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.CanSpawnDecals");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalManager.SpawnDecalOnParticleCollision
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UMaterialInterface*      DecalMaterial                  (CPF_Parm)
// struct FVector                 DecalLocation                  (CPF_Parm)
// struct FRotator                DecalOrientation               (CPF_Parm)
// float                          Width                          (CPF_Parm)
// float                          Height                         (CPF_Parm)
// float                          Thickness                      (CPF_Parm)
// bool                           bNoClip                        (CPF_Parm)
// float                          DecalLifetime                  (CPF_Parm)
// float                          InDepthBias                    (CPF_Parm)
// struct FVector2D               InBlendRange                   (CPF_Parm)

void ADecalManager::SpawnDecalOnParticleCollision(class UMaterialInterface* DecalMaterial, const struct FVector& DecalLocation, const struct FRotator& DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float DecalLifetime, float InDepthBias, const struct FVector2D& InBlendRange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.SpawnDecalOnParticleCollision");

	struct
	{
		class UMaterialInterface*      DecalMaterial;
		struct FVector                 DecalLocation;
		struct FRotator                DecalOrientation;
		float                          Width;
		float                          Height;
		float                          Thickness;
		bool                           bNoClip;
		float                          DecalLifetime;
		float                          InDepthBias;
		struct FVector2D               InBlendRange;
	} params;
	params.DecalMaterial = DecalMaterial;
	params.DecalLocation = DecalLocation;
	params.DecalOrientation = DecalOrientation;
	params.Width = Width;
	params.Height = Height;
	params.Thickness = Thickness;
	params.bNoClip = bNoClip;
	params.DecalLifetime = DecalLifetime;
	params.InDepthBias = InDepthBias;
	params.InBlendRange = InBlendRange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalManager.DecalFinished
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UDecalComponent*         Decal                          (CPF_Parm, CPF_EditInline)

void ADecalManager::DecalFinished(class UDecalComponent* Decal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.DecalFinished");

	struct
	{
		class UDecalComponent*         Decal;
	} params;
	params.Decal = Decal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalManager.AreDynamicDecalsEnabled
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ADecalManager::STATIC_AreDynamicDecalsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalManager.AreDynamicDecalsEnabled");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalComponent.GetOrCreateDecalMaterialInstance
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UMaterialInstance*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMaterialInstance* UDecalComponent::GetOrCreateDecalMaterialInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetOrCreateDecalMaterialInstance");

	struct
	{
		class UMaterialInstance*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalComponent.SetLinearColorParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   Key                            (CPF_Parm)
// struct FLinearColor            Value                          (CPF_Parm)

void UDecalComponent::SetLinearColorParameter(const struct FName& Key, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetLinearColorParameter");

	struct
	{
		struct FName                   Key;
		struct FLinearColor            Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalComponent.SetVectorParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   Key                            (CPF_Parm)
// struct FVector                 Value                          (CPF_Parm)

void UDecalComponent::SetVectorParameter(const struct FName& Key, const struct FVector& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetVectorParameter");

	struct
	{
		struct FName                   Key;
		struct FVector                 Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalComponent.SetFloatParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   Key                            (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UDecalComponent::SetFloatParameter(const struct FName& Key, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetFloatParameter");

	struct
	{
		struct FName                   Key;
		float                          Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalComponent.SetNameParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   Key                            (CPF_Parm)
// struct FName                   Value                          (CPF_Parm)

void UDecalComponent::SetNameParameter(const struct FName& Key, const struct FName& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetNameParameter");

	struct
	{
		struct FName                   Key;
		struct FName                   Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalComponent.IsWaitingForResetToDefaultsToComplete
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UDecalComponent::IsWaitingForResetToDefaultsToComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.IsWaitingForResetToDefaultsToComplete");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalComponent.GetDecalMaterial
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UMaterialInterface*      ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMaterialInterface* UDecalComponent::GetDecalMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.GetDecalMaterial");

	struct
	{
		class UMaterialInterface*      ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DecalComponent.SetDecalMaterial
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UMaterialInterface*      NewDecalMaterial               (CPF_Parm)

void UDecalComponent::SetDecalMaterial(class UMaterialInterface* NewDecalMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.SetDecalMaterial");

	struct
	{
		class UMaterialInterface*      NewDecalMaterial;
	} params;
	params.NewDecalMaterial = NewDecalMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalComponent.ResetToDefaults
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UDecalComponent::ResetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalComponent.ResetToDefaults");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FogVolumeDensityInfo.ApplyCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct AFogVolumeDensityInfo_FCheckpointRecord Record                         (CPF_Const, CPF_Parm, CPF_OutParm)

void AFogVolumeDensityInfo::ApplyCheckpointRecord(struct AFogVolumeDensityInfo_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.ApplyCheckpointRecord");

	struct
	{
		struct AFogVolumeDensityInfo_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.FogVolumeDensityInfo.CreateCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct AFogVolumeDensityInfo_FCheckpointRecord Record                         (CPF_Parm, CPF_OutParm)

void AFogVolumeDensityInfo::CreateCheckpointRecord(struct AFogVolumeDensityInfo_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.CreateCheckpointRecord");

	struct
	{
		struct AFogVolumeDensityInfo_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.FogVolumeDensityInfo.ShouldSaveForCheckpoint
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AFogVolumeDensityInfo::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.ShouldSaveForCheckpoint");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FogVolumeDensityInfo.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AFogVolumeDensityInfo::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FogVolumeDensityInfo.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AFogVolumeDensityInfo::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FogVolumeDensityInfo.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AFogVolumeDensityInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityInfo.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFogComponent.SetEnabled
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bSetEnabled                    (CPF_Parm)

void UExponentialHeightFogComponent::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFogComponent.SetEnabled");

	struct
	{
		bool                           bSetEnabled;
	} params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FogVolumeDensityComponent.SetEnabled
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bSetEnabled                    (CPF_Parm)

void UFogVolumeDensityComponent::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FogVolumeDensityComponent.SetEnabled");

	struct
	{
		bool                           bSetEnabled;
	} params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ApexDestructibleActor.OnSetMaterial
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_SetMaterial*     Action                         (CPF_Parm)

void AApexDestructibleActor::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.OnSetMaterial");

	struct
	{
		class USeqAct_SetMaterial*     Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ApexDestructibleActor.TakeRadiusDamage
// (FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AController*             InstigatedBy                   (CPF_Parm)
// float                          BaseDamage                     (CPF_Parm)
// float                          DamageRadius                   (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HurtOrigin                     (CPF_Parm)
// bool                           bFullDamage                    (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// float                          DamageFalloffExponent          (CPF_OptionalParm, CPF_Parm)

void AApexDestructibleActor::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.TakeRadiusDamage");

	struct
	{
		class AController*             InstigatedBy;
		float                          BaseDamage;
		float                          DamageRadius;
		class UClass*                  DamageType;
		float                          Momentum;
		struct FVector                 HurtOrigin;
		bool                           bFullDamage;
		class AActor*                  DamageCauser;
		float                          DamageFalloffExponent;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ApexDestructibleActor.TakeDamage
// (FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Damage                         (CPF_Parm)
// class AController*             EventInstigator                (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm, CPF_Parm)

void AApexDestructibleActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.TakeDamage");

	struct
	{
		int                            Damage;
		class AController*             EventInstigator;
		struct FVector                 HitLocation;
		struct FVector                 Momentum;
		class UClass*                  DamageType;
		struct FTraceHitInfo           HitInfo;
		class AActor*                  DamageCauser;
	} params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ApexDestructibleActor.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AApexDestructibleActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ApexDestructibleActor.CacheFractureEffects
// (FUNC_Native, FUNC_Public)

void AApexDestructibleActor::CacheFractureEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.CacheFractureEffects");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ApexDestructibleActor.SpawnFractureEmitter
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class UParticleSystem*         EmitterTemplate                (CPF_Parm)
// struct FVector                 SpawnLocation                  (CPF_Parm)
// struct FVector                 SpawnDirection                 (CPF_Parm)

void AApexDestructibleActor::SpawnFractureEmitter(class UParticleSystem* EmitterTemplate, const struct FVector& SpawnLocation, const struct FVector& SpawnDirection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ApexDestructibleActor.SpawnFractureEmitter");

	struct
	{
		class UParticleSystem*         EmitterTemplate;
		struct FVector                 SpawnLocation;
		struct FVector                 SpawnDirection;
	} params;
	params.EmitterTemplate = EmitterTemplate;
	params.SpawnLocation = SpawnLocation;
	params.SpawnDirection = SpawnDirection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.NotifyHitByExplosion
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AController*             InstigatorController           (CPF_Parm)
// float                          DamageAmount                   (CPF_Parm)
// class UClass*                  dmgType                        (CPF_Parm)

void AFracturedStaticMeshActor::NotifyHitByExplosion(class AController* InstigatorController, float DamageAmount, class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.NotifyHitByExplosion");

	struct
	{
		class AController*             InstigatorController;
		float                          DamageAmount;
		class UClass*                  dmgType;
	} params;
	params.InstigatorController = InstigatorController;
	params.DamageAmount = DamageAmount;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.SetLoseChunkReplacementMaterial
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AFracturedStaticMeshActor::SetLoseChunkReplacementMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.SetLoseChunkReplacementMaterial");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.HideFragmentsToMaximizeMemoryUsage
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AFracturedStaticMeshActor::HideFragmentsToMaximizeMemoryUsage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.HideFragmentsToMaximizeMemoryUsage");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.HideOneFragment
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AFracturedStaticMeshActor::HideOneFragment()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.HideOneFragment");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.ResetVisibility
// (FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_Public)

void AFracturedStaticMeshActor::ResetVisibility()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.ResetVisibility");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.BreakOffPartsInRadius
// (FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 Origin                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// float                          RBStrength                     (CPF_Parm)
// bool                           bWantPhysChunksAndParticles    (CPF_Parm)

void AFracturedStaticMeshActor::BreakOffPartsInRadius(const struct FVector& Origin, float Radius, float RBStrength, bool bWantPhysChunksAndParticles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.BreakOffPartsInRadius");

	struct
	{
		struct FVector                 Origin;
		float                          Radius;
		float                          RBStrength;
		bool                           bWantPhysChunksAndParticles;
	} params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.RBStrength = RBStrength;
	params.bWantPhysChunksAndParticles = bWantPhysChunksAndParticles;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.Explode
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasDefaults)

void AFracturedStaticMeshActor::Explode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.Explode");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.TakeDamage
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// int                            Damage                         (CPF_Parm)
// class AController*             EventInstigator                (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm, CPF_Parm)

void AFracturedStaticMeshActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.TakeDamage");

	struct
	{
		int                            Damage;
		class AController*             EventInstigator;
		struct FVector                 HitLocation;
		struct FVector                 Momentum;
		class UClass*                  DamageType;
		struct FTraceHitInfo           HitInfo;
		class AActor*                  DamageCauser;
	} params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.RemoveDecals
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Protected)
// Parameters:
// int                            IndexToRemoveDecalsFrom        (CPF_Parm)

void AFracturedStaticMeshActor::RemoveDecals(int IndexToRemoveDecalsFrom)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.RemoveDecals");

	struct
	{
		int                            IndexToRemoveDecalsFrom;
	} params;
	params.IndexToRemoveDecalsFrom = IndexToRemoveDecalsFrom;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.FractureEffectIsRelevant
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// bool                           bForceDedicated                (CPF_Parm)
// class APawn*                   EffectInstigator               (CPF_Parm)
// unsigned char                  bWantPhysChunksAndParticles    (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AFracturedStaticMeshActor::FractureEffectIsRelevant(bool bForceDedicated, class APawn* EffectInstigator, unsigned char* bWantPhysChunksAndParticles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.FractureEffectIsRelevant");

	struct
	{
		bool                           bForceDedicated;
		class APawn*                   EffectInstigator;
		unsigned char                  bWantPhysChunksAndParticles;
		bool                           ReturnValue;
	} params;
	params.bForceDedicated = bForceDedicated;
	params.EffectInstigator = EffectInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bWantPhysChunksAndParticles != nullptr)
		*bWantPhysChunksAndParticles = params.bWantPhysChunksAndParticles;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshActor.IsFracturedByDamageType
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class UClass*                  dmgType                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AFracturedStaticMeshActor::IsFracturedByDamageType(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.IsFracturedByDamageType");

	struct
	{
		class UClass*                  dmgType;
		bool                           ReturnValue;
	} params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshActor.SpawnDeferredParts
// (FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AFracturedStaticMeshActor::SpawnDeferredParts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.SpawnDeferredParts");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshActor.BreakOffIsolatedIslands
// (FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<unsigned char>          FragmentVis                    (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// TArray<int>                    IgnoreFrags                    (CPF_Parm, CPF_NeedCtorLink)
// struct FVector                 ChunkDir                       (CPF_Parm)
// TArray<class AFracturedStaticMeshPart*> DisableCollWithPart            (CPF_Parm, CPF_NeedCtorLink)
// bool                           bWantPhysChunks                (CPF_Parm)

void AFracturedStaticMeshActor::BreakOffIsolatedIslands(TArray<int> IgnoreFrags, const struct FVector& ChunkDir, TArray<class AFracturedStaticMeshPart*> DisableCollWithPart, bool bWantPhysChunks, TArray<unsigned char>* FragmentVis)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.BreakOffIsolatedIslands");

	struct
	{
		TArray<unsigned char>          FragmentVis;
		TArray<int>                    IgnoreFrags;
		struct FVector                 ChunkDir;
		TArray<class AFracturedStaticMeshPart*> DisableCollWithPart;
		bool                           bWantPhysChunks;
	} params;
	params.IgnoreFrags = IgnoreFrags;
	params.ChunkDir = ChunkDir;
	params.DisableCollWithPart = DisableCollWithPart;
	params.bWantPhysChunks = bWantPhysChunks;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FragmentVis != nullptr)
		*FragmentVis = params.FragmentVis;
}


// Function Engine.FracturedStaticMeshActor.ApplyCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct AFracturedStaticMeshActor_FCheckpointRecord Record                         (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AFracturedStaticMeshActor::ApplyCheckpointRecord(struct AFracturedStaticMeshActor_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.ApplyCheckpointRecord");

	struct
	{
		struct AFracturedStaticMeshActor_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.FracturedStaticMeshActor.CreateCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct AFracturedStaticMeshActor_FCheckpointRecord Record                         (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AFracturedStaticMeshActor::CreateCheckpointRecord(struct AFracturedStaticMeshActor_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.CreateCheckpointRecord");

	struct
	{
		struct AFracturedStaticMeshActor_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.FracturedStaticMeshActor.ShouldSaveForCheckpoint
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AFracturedStaticMeshActor::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.ShouldSaveForCheckpoint");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshActor.ResetHealth
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)

void AFracturedStaticMeshActor::ResetHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.ResetHealth");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AFracturedStaticMeshActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshActor.SpawnPartMulti
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// TArray<int>                    ChunkIndices                   (CPF_Parm, CPF_NeedCtorLink)
// struct FVector                 InitialVel                     (CPF_Parm)
// struct FVector                 InitialAngVel                  (CPF_Parm)
// float                          RelativeScale                  (CPF_Parm)
// bool                           bExplosion                     (CPF_Parm)
// class AFracturedStaticMeshPart* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AFracturedStaticMeshPart* AFracturedStaticMeshActor::SpawnPartMulti(TArray<int> ChunkIndices, const struct FVector& InitialVel, const struct FVector& InitialAngVel, float RelativeScale, bool bExplosion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.SpawnPartMulti");

	struct
	{
		TArray<int>                    ChunkIndices;
		struct FVector                 InitialVel;
		struct FVector                 InitialAngVel;
		float                          RelativeScale;
		bool                           bExplosion;
		class AFracturedStaticMeshPart* ReturnValue;
	} params;
	params.ChunkIndices = ChunkIndices;
	params.InitialVel = InitialVel;
	params.InitialAngVel = InitialAngVel;
	params.RelativeScale = RelativeScale;
	params.bExplosion = bExplosion;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshActor.SpawnPart
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// int                            ChunkIndex                     (CPF_Parm)
// struct FVector                 InitialVel                     (CPF_Parm)
// struct FVector                 InitialAngVel                  (CPF_Parm)
// float                          RelativeScale                  (CPF_Parm)
// bool                           bExplosion                     (CPF_Parm)
// class AFracturedStaticMeshPart* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AFracturedStaticMeshPart* AFracturedStaticMeshActor::SpawnPart(int ChunkIndex, const struct FVector& InitialVel, const struct FVector& InitialAngVel, float RelativeScale, bool bExplosion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshActor.SpawnPart");

	struct
	{
		int                            ChunkIndex;
		struct FVector                 InitialVel;
		struct FVector                 InitialAngVel;
		float                          RelativeScale;
		bool                           bExplosion;
		class AFracturedStaticMeshPart* ReturnValue;
	} params;
	params.ChunkIndex = ChunkIndex;
	params.InitialVel = InitialVel;
	params.InitialAngVel = InitialAngVel;
	params.RelativeScale = RelativeScale;
	params.bExplosion = bExplosion;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshPart.BreakOffPartsInRadius
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 Origin                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// float                          RBStrength                     (CPF_Parm)
// bool                           bWantPhysChunksAndParticles    (CPF_Parm)

void AFracturedStaticMeshPart::BreakOffPartsInRadius(const struct FVector& Origin, float Radius, float RBStrength, bool bWantPhysChunksAndParticles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.BreakOffPartsInRadius");

	struct
	{
		struct FVector                 Origin;
		float                          Radius;
		float                          RBStrength;
		bool                           bWantPhysChunksAndParticles;
	} params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.RBStrength = RBStrength;
	params.bWantPhysChunksAndParticles = bWantPhysChunksAndParticles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshPart.Explode
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AFracturedStaticMeshPart::Explode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.Explode");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshPart.FellOutOfWorld
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UClass*                  dmgType                        (CPF_Parm)

void AFracturedStaticMeshPart::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.FellOutOfWorld");

	struct
	{
		class UClass*                  dmgType;
	} params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshPart.TryToCleanUp
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AFracturedStaticMeshPart::TryToCleanUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.TryToCleanUp");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshPart.TakeDamage
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Damage                         (CPF_Parm)
// class AController*             EventInstigator                (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm, CPF_Parm)

void AFracturedStaticMeshPart::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.TakeDamage");

	struct
	{
		int                            Damage;
		class AController*             EventInstigator;
		struct FVector                 HitLocation;
		struct FVector                 Momentum;
		class UClass*                  DamageType;
		struct FTraceHitInfo           HitInfo;
		class AActor*                  DamageCauser;
	} params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshPart.RecyclePart
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bAddToFreePool                 (CPF_Parm)

void AFracturedStaticMeshPart::RecyclePart(bool bAddToFreePool)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.RecyclePart");

	struct
	{
		bool                           bAddToFreePool;
	} params;
	params.bAddToFreePool = bAddToFreePool;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshPart.Initialize
// (FUNC_Simulated, FUNC_Native, FUNC_Public)

void AFracturedStaticMeshPart::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshPart.Initialize");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.Tick
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void AFractureManager::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.Tick");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.ReturnPartActor
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class AFracturedStaticMeshPart* Part                           (CPF_Parm)

void AFractureManager::ReturnPartActor(class AFracturedStaticMeshPart* Part)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.ReturnPartActor");

	struct
	{
		class AFracturedStaticMeshPart* Part;
	} params;
	params.Part = Part;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.SpawnPartActor
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class AFracturedStaticMeshActor* Parent                         (CPF_Parm)
// struct FVector                 SpawnLocation                  (CPF_Parm)
// struct FRotator                SpawnRotation                  (CPF_Parm)
// class AFracturedStaticMeshPart* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AFracturedStaticMeshPart* AFractureManager::SpawnPartActor(class AFracturedStaticMeshActor* Parent, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.SpawnPartActor");

	struct
	{
		class AFracturedStaticMeshActor* Parent;
		struct FVector                 SpawnLocation;
		struct FRotator                SpawnRotation;
		class AFracturedStaticMeshPart* ReturnValue;
	} params;
	params.Parent = Parent;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FractureManager.GetFSMPart
// (FUNC_Native, FUNC_Public)
// Parameters:
// class AFracturedStaticMeshActor* Parent                         (CPF_Parm)
// struct FVector                 SpawnLocation                  (CPF_Parm)
// struct FRotator                SpawnRotation                  (CPF_Parm)
// class AFracturedStaticMeshPart* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AFracturedStaticMeshPart* AFractureManager::GetFSMPart(class AFracturedStaticMeshActor* Parent, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.GetFSMPart");

	struct
	{
		class AFracturedStaticMeshActor* Parent;
		struct FVector                 SpawnLocation;
		struct FRotator                SpawnRotation;
		class AFracturedStaticMeshPart* ReturnValue;
	} params;
	params.Parent = Parent;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FractureManager.ResetPoolVisibility
// (FUNC_Simulated, FUNC_Native, FUNC_Public)

void AFractureManager::ResetPoolVisibility()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.ResetPoolVisibility");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.CreateFSMParts
// (FUNC_Native, FUNC_Public)

void AFractureManager::CreateFSMParts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.CreateFSMParts");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.CleanUpFSMParts
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AFractureManager::CleanUpFSMParts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.CleanUpFSMParts");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.Destroyed
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AFractureManager::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.PreBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AFractureManager::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.PreBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FractureManager.GetFSMFractureCullDistanceScale
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AFractureManager::GetFSMFractureCullDistanceScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.GetFSMFractureCullDistanceScale");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FractureManager.GetFSMRadialSpawnChanceScale
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AFractureManager::GetFSMRadialSpawnChanceScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.GetFSMRadialSpawnChanceScale");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FractureManager.GetFSMDirectSpawnChanceScale
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AFractureManager::GetFSMDirectSpawnChanceScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.GetFSMDirectSpawnChanceScale");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FractureManager.GetNumFSMPartsScale
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AFractureManager::GetNumFSMPartsScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.GetNumFSMPartsScale");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FractureManager.SpawnChunkDestroyEffect
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class UParticleSystem*         Effect                         (CPF_Parm)
// struct FBox                    ChunkBox                       (CPF_Parm)
// struct FVector                 ChunkDir                       (CPF_Parm)
// float                          Scale                          (CPF_Parm)

void AFractureManager::SpawnChunkDestroyEffect(class UParticleSystem* Effect, const struct FBox& ChunkBox, const struct FVector& ChunkDir, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FractureManager.SpawnChunkDestroyEffect");

	struct
	{
		class UParticleSystem*         Effect;
		struct FBox                    ChunkBox;
		struct FVector                 ChunkDir;
		float                          Scale;
	} params;
	params.Effect = Effect;
	params.ChunkBox = ChunkBox;
	params.ChunkDir = ChunkDir;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageReflection.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AImageReflection::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageReflection.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageReflection.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AImageReflection::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageReflection.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageReflection.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AImageReflection::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageReflection.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageReflectionShadowPlane.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AImageReflectionShadowPlane::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageReflectionShadowPlane.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageReflectionShadowPlane.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AImageReflectionShadowPlane::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageReflectionShadowPlane.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageReflectionShadowPlane.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AImageReflectionShadowPlane::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageReflectionShadowPlane.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageReflectionShadowPlaneComponent.SetEnabled
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bSetEnabled                    (CPF_Parm)

void UImageReflectionShadowPlaneComponent::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageReflectionShadowPlaneComponent.SetEnabled");

	struct
	{
		bool                           bSetEnabled;
	} params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedBaseComponent.GetNumVisibleFragments
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UFracturedBaseComponent::GetNumVisibleFragments()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedBaseComponent.GetNumVisibleFragments");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedBaseComponent.GetNumFragments
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UFracturedBaseComponent::GetNumFragments()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedBaseComponent.GetNumFragments");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedBaseComponent.IsFragmentVisible
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// int                            FragmentIndex                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UFracturedBaseComponent::IsFragmentVisible(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedBaseComponent.IsFragmentVisible");

	struct
	{
		int                            FragmentIndex;
		bool                           ReturnValue;
	} params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedBaseComponent.GetVisibleFragments
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// TArray<unsigned char>          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

TArray<unsigned char> UFracturedBaseComponent::GetVisibleFragments()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedBaseComponent.GetVisibleFragments");

	struct
	{
		TArray<unsigned char>          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedBaseComponent.SetStaticMesh
// (FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UStaticMesh*             NewMesh                        (CPF_Parm)
// bool                           bForce                         (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UFracturedBaseComponent::SetStaticMesh(class UStaticMesh* NewMesh, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedBaseComponent.SetStaticMesh");

	struct
	{
		class UStaticMesh*             NewMesh;
		bool                           bForce;
		bool                           ReturnValue;
	} params;
	params.NewMesh = NewMesh;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.GetFracturedMeshPhysMaterial
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UPhysicalMaterial*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UPhysicalMaterial* UFracturedStaticMeshComponent::GetFracturedMeshPhysMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetFracturedMeshPhysMaterial");

	struct
	{
		class UPhysicalMaterial*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.RecreatePhysState
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UFracturedStaticMeshComponent::RecreatePhysState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.RecreatePhysState");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FracturedStaticMeshComponent.GetBoundaryHiddenFragments
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// TArray<int>                    AdditionalVisibleFragments     (CPF_Parm, CPF_NeedCtorLink)
// TArray<int>                    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

TArray<int> UFracturedStaticMeshComponent::GetBoundaryHiddenFragments(TArray<int> AdditionalVisibleFragments)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetBoundaryHiddenFragments");

	struct
	{
		TArray<int>                    AdditionalVisibleFragments;
		TArray<int>                    ReturnValue;
	} params;
	params.AdditionalVisibleFragments = AdditionalVisibleFragments;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.GetFragmentGroups
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// TArray<int>                    IgnoreFragments                (CPF_Parm, CPF_NeedCtorLink)
// float                          MinConnectionArea              (CPF_Parm)
// TArray<struct FFragmentGroup>  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

TArray<struct FFragmentGroup> UFracturedStaticMeshComponent::GetFragmentGroups(TArray<int> IgnoreFragments, float MinConnectionArea)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetFragmentGroups");

	struct
	{
		TArray<int>                    IgnoreFragments;
		float                          MinConnectionArea;
		TArray<struct FFragmentGroup>  ReturnValue;
	} params;
	params.IgnoreFragments = IgnoreFragments;
	params.MinConnectionArea = MinConnectionArea;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.GetCoreFragmentIndex
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UFracturedStaticMeshComponent::GetCoreFragmentIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetCoreFragmentIndex");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.GetFragmentAverageExteriorNormal
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            FragmentIndex                  (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector UFracturedStaticMeshComponent::GetFragmentAverageExteriorNormal(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetFragmentAverageExteriorNormal");

	struct
	{
		int                            FragmentIndex;
		struct FVector                 ReturnValue;
	} params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.GetFragmentBox
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            FragmentIndex                  (CPF_Parm)
// struct FBox                    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FBox UFracturedStaticMeshComponent::GetFragmentBox(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.GetFragmentBox");

	struct
	{
		int                            FragmentIndex;
		struct FBox                    ReturnValue;
	} params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.IsNoPhysFragment
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            FragmentIndex                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UFracturedStaticMeshComponent::IsNoPhysFragment(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.IsNoPhysFragment");

	struct
	{
		int                            FragmentIndex;
		bool                           ReturnValue;
	} params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.IsRootFragment
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            FragmentIndex                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UFracturedStaticMeshComponent::IsRootFragment(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.IsRootFragment");

	struct
	{
		int                            FragmentIndex;
		bool                           ReturnValue;
	} params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.IsFragmentDestroyable
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            FragmentIndex                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UFracturedStaticMeshComponent::IsFragmentDestroyable(int FragmentIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.IsFragmentDestroyable");

	struct
	{
		int                            FragmentIndex;
		bool                           ReturnValue;
	} params;
	params.FragmentIndex = FragmentIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FracturedStaticMeshComponent.SetVisibleFragments
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// TArray<unsigned char>          VisibilityFactors              (CPF_Parm, CPF_NeedCtorLink)

void UFracturedStaticMeshComponent::SetVisibleFragments(TArray<unsigned char> VisibilityFactors)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FracturedStaticMeshComponent.SetVisibleFragments");

	struct
	{
		TArray<unsigned char>          VisibilityFactors;
	} params;
	params.VisibilityFactors = VisibilityFactors;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageBasedReflectionComponent.OnUpdatePropertyReflectionColor
// (FUNC_Defined, FUNC_Public)

void UImageBasedReflectionComponent::OnUpdatePropertyReflectionColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageBasedReflectionComponent.OnUpdatePropertyReflectionColor");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageBasedReflectionComponent.UpdateImageReflectionParameters
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UImageBasedReflectionComponent::UpdateImageReflectionParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageBasedReflectionComponent.UpdateImageReflectionParameters");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ImageBasedReflectionComponent.SetEnabled
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bSetEnabled                    (CPF_Parm)

void UImageBasedReflectionComponent::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ImageBasedReflectionComponent.SetEnabled");

	struct
	{
		bool                           bSetEnabled;
	} params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.IsInMapOrTransientPackage
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInstance::IsInMapOrTransientPackage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.IsInMapOrTransientPackage");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInstance.ClearParameterValues
// (FUNC_Native, FUNC_Public)

void UMaterialInstance::ClearParameterValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.ClearParameterValues");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.SetFontParameterValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class UFont*                   FontValue                      (CPF_Parm)
// int                            FontPage                       (CPF_Parm)

void UMaterialInstance::SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetFontParameterValue");

	struct
	{
		struct FName                   ParameterName;
		class UFont*                   FontValue;
		int                            FontPage;
	} params;
	params.ParameterName = ParameterName;
	params.FontValue = FontValue;
	params.FontPage = FontPage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.GetTextureParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class UTexture*                Value                          (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInstance::GetTextureParameterValue(const struct FName& ParameterName, class UTexture** Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.GetTextureParameterValue");

	struct
	{
		struct FName                   ParameterName;
		class UTexture*                Value;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.MaterialInstance.SetTextureParameterValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class UTexture*                Value                          (CPF_Parm)

void UMaterialInstance::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetTextureParameterValue");

	struct
	{
		struct FName                   ParameterName;
		class UTexture*                Value;
	} params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.SetScalarCurveParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FInterpCurveFloat       Value                          (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UMaterialInstance::SetScalarCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveFloat* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetScalarCurveParameterValue");

	struct
	{
		struct FName                   ParameterName;
		struct FInterpCurveFloat       Value;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.MaterialInstance.SetScalarParameterValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UMaterialInstance::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetScalarParameterValue");

	struct
	{
		struct FName                   ParameterName;
		float                          Value;
	} params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.SetVectorParameterValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FLinearColor            Value                          (CPF_Parm)

void UMaterialInstance::SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetVectorParameterValue");

	struct
	{
		struct FName                   ParameterName;
		struct FLinearColor            Value;
	} params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstance.SetParent
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UMaterialInterface*      NewParent                      (CPF_Parm)

void UMaterialInstance::SetParent(class UMaterialInterface* NewParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstance.SetParent");

	struct
	{
		class UMaterialInterface*      NewParent;
	} params;
	params.NewParent = NewParent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.ClearParameterValues
// (FUNC_Native, FUNC_Public)

void UMaterialInstanceConstant::ClearParameterValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.ClearParameterValues");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.GetMobileVectorParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FLinearColor            OutValue                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInstanceConstant::GetMobileVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.GetMobileVectorParameterValue");

	struct
	{
		struct FName                   ParameterName;
		struct FLinearColor            OutValue;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceConstant.GetMobileTextureParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class UTexture*                OutValue                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInstanceConstant::GetMobileTextureParameterValue(const struct FName& ParameterName, class UTexture** OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.GetMobileTextureParameterValue");

	struct
	{
		struct FName                   ParameterName;
		class UTexture*                OutValue;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceConstant.GetMobileScalarParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// float                          OutValue                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInstanceConstant::GetMobileScalarParameterValue(const struct FName& ParameterName, float* OutValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.GetMobileScalarParameterValue");

	struct
	{
		struct FName                   ParameterName;
		float                          OutValue;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutValue != nullptr)
		*OutValue = params.OutValue;

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceConstant.SetFontParameterValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class UFont*                   FontValue                      (CPF_Parm)
// int                            FontPage                       (CPF_Parm)

void UMaterialInstanceConstant::SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetFontParameterValue");

	struct
	{
		struct FName                   ParameterName;
		class UFont*                   FontValue;
		int                            FontPage;
	} params;
	params.ParameterName = ParameterName;
	params.FontValue = FontValue;
	params.FontPage = FontPage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.SetVectorParameterValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FLinearColor            Value                          (CPF_Parm)

void UMaterialInstanceConstant::SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetVectorParameterValue");

	struct
	{
		struct FName                   ParameterName;
		struct FLinearColor            Value;
	} params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.SetTextureParameterValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class UTexture*                Value                          (CPF_Parm)

void UMaterialInstanceConstant::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetTextureParameterValue");

	struct
	{
		struct FName                   ParameterName;
		class UTexture*                Value;
	} params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.SetScalarParameterValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UMaterialInstanceConstant::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetScalarParameterValue");

	struct
	{
		struct FName                   ParameterName;
		float                          Value;
	} params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceConstant.SetParent
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UMaterialInterface*      NewParent                      (CPF_Parm)

void UMaterialInstanceConstant::SetParent(class UMaterialInterface* NewParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceConstant.SetParent");

	struct
	{
		class UMaterialInterface*      NewParent;
	} params;
	params.NewParent = NewParent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.CheckForVectorParameterConflicts
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UMaterialInstanceTimeVarying::CheckForVectorParameterConflicts(const struct FName& ParameterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.CheckForVectorParameterConflicts");

	struct
	{
		struct FName                   ParameterName;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceTimeVarying.GetMaxDurationFromAllParameters
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UMaterialInstanceTimeVarying::GetMaxDurationFromAllParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.GetMaxDurationFromAllParameters");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaterialInstanceTimeVarying.ClearParameterValues
// (FUNC_Native, FUNC_Public)

void UMaterialInstanceTimeVarying::ClearParameterValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.ClearParameterValues");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetFontParameterValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class UFont*                   FontValue                      (CPF_Parm)
// int                            FontPage                       (CPF_Parm)

void UMaterialInstanceTimeVarying::SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetFontParameterValue");

	struct
	{
		struct FName                   ParameterName;
		class UFont*                   FontValue;
		int                            FontPage;
	} params;
	params.ParameterName = ParameterName;
	params.FontValue = FontValue;
	params.FontPage = FontPage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetVectorStartTime
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UMaterialInstanceTimeVarying::SetVectorStartTime(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetVectorStartTime");

	struct
	{
		struct FName                   ParameterName;
		float                          Value;
	} params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetLinearColorCurveParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FInterpCurveLinearColor Value                          (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UMaterialInstanceTimeVarying::SetLinearColorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveLinearColor* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetLinearColorCurveParameterValue");

	struct
	{
		struct FName                   ParameterName;
		struct FInterpCurveLinearColor Value;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.MaterialInstanceTimeVarying.SetLinearColorParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FLinearColor            Value                          (CPF_Const, CPF_Parm, CPF_OutParm)

void UMaterialInstanceTimeVarying::SetLinearColorParameterValue(const struct FName& ParameterName, struct FLinearColor* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetLinearColorParameterValue");

	struct
	{
		struct FName                   ParameterName;
		struct FLinearColor            Value;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FInterpCurveVector      Value                          (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UMaterialInstanceTimeVarying::SetVectorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveVector* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetVectorCurveParameterValue");

	struct
	{
		struct FName                   ParameterName;
		struct FInterpCurveVector      Value;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.MaterialInstanceTimeVarying.SetVectorParameterValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FLinearColor            Value                          (CPF_Parm)

void UMaterialInstanceTimeVarying::SetVectorParameterValue(const struct FName& ParameterName, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetVectorParameterValue");

	struct
	{
		struct FName                   ParameterName;
		struct FLinearColor            Value;
	} params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetTextureParameterValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class UTexture*                Value                          (CPF_Parm)

void UMaterialInstanceTimeVarying::SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetTextureParameterValue");

	struct
	{
		struct FName                   ParameterName;
		class UTexture*                Value;
	} params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetDuration
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          Value                          (CPF_Parm)

void UMaterialInstanceTimeVarying::SetDuration(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetDuration");

	struct
	{
		float                          Value;
	} params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetScalarStartTime
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UMaterialInstanceTimeVarying::SetScalarStartTime(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetScalarStartTime");

	struct
	{
		struct FName                   ParameterName;
		float                          Value;
	} params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FInterpCurveFloat       Value                          (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UMaterialInstanceTimeVarying::SetScalarCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveFloat* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetScalarCurveParameterValue");

	struct
	{
		struct FName                   ParameterName;
		struct FInterpCurveFloat       Value;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.MaterialInstanceTimeVarying.SetScalarParameterValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// float                          Value                          (CPF_Parm)

void UMaterialInstanceTimeVarying::SetScalarParameterValue(const struct FName& ParameterName, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetScalarParameterValue");

	struct
	{
		struct FName                   ParameterName;
		float                          Value;
	} params;
	params.ParameterName = ParameterName;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialInstanceTimeVarying.SetParent
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UMaterialInterface*      NewParent                      (CPF_Parm)

void UMaterialInstanceTimeVarying::SetParent(class UMaterialInterface* NewParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialInstanceTimeVarying.SetParent");

	struct
	{
		class UMaterialInterface*      NewParent;
	} params;
	params.NewParent = NewParent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterCameraLensEffectBase.UpdateLocation
// (FUNC_Simulated, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 CamLoc                         (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FRotator                CamRot                         (CPF_Const, CPF_Parm, CPF_OutParm)
// float                          CamFOVDeg                      (CPF_Parm)

void AEmitterCameraLensEffectBase::UpdateLocation(float CamFOVDeg, struct FVector* CamLoc, struct FRotator* CamRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.UpdateLocation");

	struct
	{
		struct FVector                 CamLoc;
		struct FRotator                CamRot;
		float                          CamFOVDeg;
	} params;
	params.CamFOVDeg = CamFOVDeg;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CamLoc != nullptr)
		*CamLoc = params.CamLoc;
	if (CamRot != nullptr)
		*CamRot = params.CamRot;
}


// Function Engine.EmitterCameraLensEffectBase.ActivateLensEffect
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AEmitterCameraLensEffectBase::ActivateLensEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.ActivateLensEffect");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterCameraLensEffectBase.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AEmitterCameraLensEffectBase::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterCameraLensEffectBase.NotifyRetriggered
// (FUNC_Public)

void AEmitterCameraLensEffectBase::NotifyRetriggered()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.NotifyRetriggered");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterCameraLensEffectBase.RegisterCamera
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class ACamera*                 C                              (CPF_Parm)

void AEmitterCameraLensEffectBase::RegisterCamera(class ACamera* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.RegisterCamera");

	struct
	{
		class ACamera*                 C;
	} params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterCameraLensEffectBase.Destroyed
// (FUNC_Defined, FUNC_Public)

void AEmitterCameraLensEffectBase::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterCameraLensEffectBase.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleEventManager.HandleParticleModuleEventSendToGame
// (FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UParticleModuleEventSendToGame* InEvent                        (CPF_Parm)
// struct FVector                 InCollideDirection             (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FVector                 InHitLocation                  (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FVector                 InHitNormal                    (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FName                   InBoneName                     (CPF_Const, CPF_Parm, CPF_OutParm)

void AParticleEventManager::HandleParticleModuleEventSendToGame(class UParticleModuleEventSendToGame* InEvent, struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleEventManager.HandleParticleModuleEventSendToGame");

	struct
	{
		class UParticleModuleEventSendToGame* InEvent;
		struct FVector                 InCollideDirection;
		struct FVector                 InHitLocation;
		struct FVector                 InHitNormal;
		struct FName                   InBoneName;
	} params;
	params.InEvent = InEvent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InCollideDirection != nullptr)
		*InCollideDirection = params.InCollideDirection;
	if (InHitLocation != nullptr)
		*InHitLocation = params.InHitLocation;
	if (InHitNormal != nullptr)
		*InHitNormal = params.InHitNormal;
	if (InBoneName != nullptr)
		*InBoneName = params.InBoneName;
}


// Function Engine.ParticleSystemComponent.DoThumbnailWarmup
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UParticleSystemComponent::DoThumbnailWarmup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.DoThumbnailWarmup");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetParameters
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// TArray<struct FParticleSysParam> Params                         (CPF_Parm, CPF_NeedCtorLink)

void UParticleSystemComponent::SetParameters(TArray<struct FParticleSysParam> Params)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetParameters");

	struct
	{
		TArray<struct FParticleSysParam> Params;
	} params;
	params.Params = Params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetLinearColorParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   Key                            (CPF_Parm)
// struct FLinearColor            Value                          (CPF_Parm)

void UParticleSystemComponent::SetLinearColorParameter(const struct FName& Key, const struct FLinearColor& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetLinearColorParameter");

	struct
	{
		struct FName                   Key;
		struct FLinearColor            Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetNameParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   Key                            (CPF_Parm)
// struct FName                   Value                          (CPF_Parm)

void UParticleSystemComponent::SetNameParameter(const struct FName& Key, const struct FName& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetNameParameter");

	struct
	{
		struct FName                   Key;
		struct FName                   Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetStopSpawning
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            InEmitterIndex                 (CPF_Parm)
// bool                           bInStopSpawning                (CPF_Parm)

void UParticleSystemComponent::SetStopSpawning(int InEmitterIndex, bool bInStopSpawning)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetStopSpawning");

	struct
	{
		int                            InEmitterIndex;
		bool                           bInStopSpawning;
	} params;
	params.InEmitterIndex = InEmitterIndex;
	params.bInStopSpawning = bInStopSpawning;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.ResetToDefaults
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UParticleSystemComponent::ResetToDefaults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.ResetToDefaults");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetActive
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bNowActive                     (CPF_Parm)
// bool                           bFlagAsJustAttached            (CPF_OptionalParm, CPF_Parm)

void UParticleSystemComponent::SetActive(bool bNowActive, bool bFlagAsJustAttached)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetActive");

	struct
	{
		bool                           bNowActive;
		bool                           bFlagAsJustAttached;
	} params;
	params.bNowActive = bNowActive;
	params.bFlagAsJustAttached = bFlagAsJustAttached;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.ClearAllParameters
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UParticleSystemComponent::ClearAllParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.ClearAllParameters");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.ClearParameter
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// TEnumAsByte<enum class EParticleSysParamType> ParameterType                  (CPF_OptionalParm, CPF_Parm)

void UParticleSystemComponent::ClearParameter(const struct FName& ParameterName, TEnumAsByte<enum class EParticleSysParamType> ParameterType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.ClearParameter");

	struct
	{
		struct FName                   ParameterName;
		TEnumAsByte<enum class EParticleSysParamType> ParameterType;
	} params;
	params.ParameterName = ParameterName;
	params.ParameterType = ParameterType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.GetMaterialParameter
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   InName                         (CPF_Const, CPF_Parm)
// class UMaterialInterface*      OutMaterial                    (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UParticleSystemComponent::GetMaterialParameter(const struct FName& InName, class UMaterialInterface** OutMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetMaterialParameter");

	struct
	{
		struct FName                   InName;
		class UMaterialInterface*      OutMaterial;
		bool                           ReturnValue;
	} params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutMaterial != nullptr)
		*OutMaterial = params.OutMaterial;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetActorParameter
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   InName                         (CPF_Const, CPF_Parm)
// class AActor*                  OutActor                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UParticleSystemComponent::GetActorParameter(const struct FName& InName, class AActor** OutActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetActorParameter");

	struct
	{
		struct FName                   InName;
		class AActor*                  OutActor;
		bool                           ReturnValue;
	} params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutActor != nullptr)
		*OutActor = params.OutActor;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetColorParameter
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   InName                         (CPF_Const, CPF_Parm)
// struct FColor                  OutColor                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UParticleSystemComponent::GetColorParameter(const struct FName& InName, struct FColor* OutColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetColorParameter");

	struct
	{
		struct FName                   InName;
		struct FColor                  OutColor;
		bool                           ReturnValue;
	} params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutColor != nullptr)
		*OutColor = params.OutColor;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetVectorParameter
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   InName                         (CPF_Const, CPF_Parm)
// struct FVector                 OutVector                      (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UParticleSystemComponent::GetVectorParameter(const struct FName& InName, struct FVector* OutVector)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetVectorParameter");

	struct
	{
		struct FName                   InName;
		struct FVector                 OutVector;
		bool                           ReturnValue;
	} params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutVector != nullptr)
		*OutVector = params.OutVector;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetFloatParameter
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   InName                         (CPF_Const, CPF_Parm)
// float                          OutFloat                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UParticleSystemComponent::GetFloatParameter(const struct FName& InName, float* OutFloat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetFloatParameter");

	struct
	{
		struct FName                   InName;
		float                          OutFloat;
		bool                           ReturnValue;
	} params;
	params.InName = InName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutFloat != nullptr)
		*OutFloat = params.OutFloat;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetMeshParameter
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class UStaticMesh*             Param                          (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UParticleSystemComponent::GetMeshParameter(const struct FName& ParameterName, class UStaticMesh** Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetMeshParameter");

	struct
	{
		struct FName                   ParameterName;
		class UStaticMesh*             Param;
		bool                           ReturnValue;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Param != nullptr)
		*Param = params.Param;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.SetMeshParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class UStaticMesh*             Param                          (CPF_Parm)

void UParticleSystemComponent::SetMeshParameter(const struct FName& ParameterName, class UStaticMesh* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetMeshParameter");

	struct
	{
		struct FName                   ParameterName;
		class UStaticMesh*             Param;
	} params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetMaterialParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class UMaterialInterface*      Param                          (CPF_Parm)

void UParticleSystemComponent::SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetMaterialParameter");

	struct
	{
		struct FName                   ParameterName;
		class UMaterialInterface*      Param;
	} params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetActorParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class AActor*                  Param                          (CPF_Parm)

void UParticleSystemComponent::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetActorParameter");

	struct
	{
		struct FName                   ParameterName;
		class AActor*                  Param;
	} params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetColorParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FColor                  Param                          (CPF_Parm)

void UParticleSystemComponent::SetColorParameter(const struct FName& ParameterName, const struct FColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetColorParameter");

	struct
	{
		struct FName                   ParameterName;
		struct FColor                  Param;
	} params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetVectorRandParameter
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FVector                 Param                          (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FVector                 ParamLow                       (CPF_Const, CPF_Parm, CPF_OutParm)

void UParticleSystemComponent::SetVectorRandParameter(const struct FName& ParameterName, struct FVector* Param, struct FVector* ParamLow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetVectorRandParameter");

	struct
	{
		struct FName                   ParameterName;
		struct FVector                 Param;
		struct FVector                 ParamLow;
	} params;
	params.ParameterName = ParameterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Param != nullptr)
		*Param = params.Param;
	if (ParamLow != nullptr)
		*ParamLow = params.ParamLow;
}


// Function Engine.ParticleSystemComponent.SetVectorParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FVector                 Param                          (CPF_Parm)

void UParticleSystemComponent::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetVectorParameter");

	struct
	{
		struct FName                   ParameterName;
		struct FVector                 Param;
	} params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetFloatRandParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// float                          Param                          (CPF_Parm)
// float                          ParamLow                       (CPF_Parm)

void UParticleSystemComponent::SetFloatRandParameter(const struct FName& ParameterName, float Param, float ParamLow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetFloatRandParameter");

	struct
	{
		struct FName                   ParameterName;
		float                          Param;
		float                          ParamLow;
	} params;
	params.ParameterName = ParameterName;
	params.Param = Param;
	params.ParamLow = ParamLow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetFloatParameter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// float                          Param                          (CPF_Parm)

void UParticleSystemComponent::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetFloatParameter");

	struct
	{
		struct FName                   ParameterName;
		float                          Param;
	} params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.GetEditorLODLevel
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UParticleSystemComponent::GetEditorLODLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetEditorLODLevel");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetLODLevel
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UParticleSystemComponent::GetLODLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetLODLevel");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.SetEditorLODLevel
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            InLODLevel                     (CPF_Parm)

void UParticleSystemComponent::SetEditorLODLevel(int InLODLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetEditorLODLevel");

	struct
	{
		int                            InLODLevel;
	} params;
	params.InLODLevel = InLODLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetLODLevel
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            InLODLevel                     (CPF_Parm)

void UParticleSystemComponent::SetLODLevel(int InLODLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetLODLevel");

	struct
	{
		int                            InLODLevel;
	} params;
	params.InLODLevel = InLODLevel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SystemHasCompleted
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UParticleSystemComponent::SystemHasCompleted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SystemHasCompleted");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.GetMaxLifespan
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UParticleSystemComponent::GetMaxLifespan()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetMaxLifespan");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.DetermineLODLevelForLocation
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 EffectLocation                 (CPF_Const, CPF_Parm, CPF_OutParm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UParticleSystemComponent::DetermineLODLevelForLocation(struct FVector* EffectLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.DetermineLODLevelForLocation");

	struct
	{
		struct FVector                 EffectLocation;
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (EffectLocation != nullptr)
		*EffectLocation = params.EffectLocation;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.SetBeamTargetStrength
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EmitterIndex                   (CPF_Parm)
// float                          NewTargetStrength              (CPF_Parm)
// int                            TargetIndex                    (CPF_Parm)

void UParticleSystemComponent::SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetStrength");

	struct
	{
		int                            EmitterIndex;
		float                          NewTargetStrength;
		int                            TargetIndex;
	} params;
	params.EmitterIndex = EmitterIndex;
	params.NewTargetStrength = NewTargetStrength;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamTargetTangent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EmitterIndex                   (CPF_Parm)
// struct FVector                 NewTangentPoint                (CPF_Parm)
// int                            TargetIndex                    (CPF_Parm)

void UParticleSystemComponent::SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetTangent");

	struct
	{
		int                            EmitterIndex;
		struct FVector                 NewTangentPoint;
		int                            TargetIndex;
	} params;
	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamTargetPoint
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EmitterIndex                   (CPF_Parm)
// struct FVector                 NewTargetPoint                 (CPF_Parm)
// int                            TargetIndex                    (CPF_Parm)

void UParticleSystemComponent::SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTargetPoint");

	struct
	{
		int                            EmitterIndex;
		struct FVector                 NewTargetPoint;
		int                            TargetIndex;
	} params;
	params.EmitterIndex = EmitterIndex;
	params.NewTargetPoint = NewTargetPoint;
	params.TargetIndex = TargetIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamSourceStrength
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EmitterIndex                   (CPF_Parm)
// float                          NewSourceStrength              (CPF_Parm)
// int                            SourceIndex                    (CPF_Parm)

void UParticleSystemComponent::SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceStrength");

	struct
	{
		int                            EmitterIndex;
		float                          NewSourceStrength;
		int                            SourceIndex;
	} params;
	params.EmitterIndex = EmitterIndex;
	params.NewSourceStrength = NewSourceStrength;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamSourceTangent
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EmitterIndex                   (CPF_Parm)
// struct FVector                 NewTangentPoint                (CPF_Parm)
// int                            SourceIndex                    (CPF_Parm)

void UParticleSystemComponent::SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourceTangent");

	struct
	{
		int                            EmitterIndex;
		struct FVector                 NewTangentPoint;
		int                            SourceIndex;
	} params;
	params.EmitterIndex = EmitterIndex;
	params.NewTangentPoint = NewTangentPoint;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamSourcePoint
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EmitterIndex                   (CPF_Parm)
// struct FVector                 NewSourcePoint                 (CPF_Parm)
// int                            SourceIndex                    (CPF_Parm)

void UParticleSystemComponent::SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamSourcePoint");

	struct
	{
		int                            EmitterIndex;
		struct FVector                 NewSourcePoint;
		int                            SourceIndex;
	} params;
	params.EmitterIndex = EmitterIndex;
	params.NewSourcePoint = NewSourcePoint;
	params.SourceIndex = SourceIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamDistance
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EmitterIndex                   (CPF_Parm)
// float                          Distance                       (CPF_Parm)

void UParticleSystemComponent::SetBeamDistance(int EmitterIndex, float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamDistance");

	struct
	{
		int                            EmitterIndex;
		float                          Distance;
	} params;
	params.EmitterIndex = EmitterIndex;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamEndPoint
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EmitterIndex                   (CPF_Parm)
// struct FVector                 NewEndPoint                    (CPF_Parm)

void UParticleSystemComponent::SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamEndPoint");

	struct
	{
		int                            EmitterIndex;
		struct FVector                 NewEndPoint;
	} params;
	params.EmitterIndex = EmitterIndex;
	params.NewEndPoint = NewEndPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamTessellationFactor
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EmitterIndex                   (CPF_Parm)
// float                          NewFactor                      (CPF_Parm)

void UParticleSystemComponent::SetBeamTessellationFactor(int EmitterIndex, float NewFactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamTessellationFactor");

	struct
	{
		int                            EmitterIndex;
		float                          NewFactor;
	} params;
	params.EmitterIndex = EmitterIndex;
	params.NewFactor = NewFactor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetBeamType
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EmitterIndex                   (CPF_Parm)
// int                            NewMethod                      (CPF_Parm)

void UParticleSystemComponent::SetBeamType(int EmitterIndex, int NewMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetBeamType");

	struct
	{
		int                            EmitterIndex;
		int                            NewMethod;
	} params;
	params.EmitterIndex = EmitterIndex;
	params.NewMethod = NewMethod;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.RewindEmitterInstances
// (FUNC_Native, FUNC_Public)

void UParticleSystemComponent::RewindEmitterInstances()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.RewindEmitterInstances");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.RewindEmitterInstance
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EmitterIndex                   (CPF_Parm)

void UParticleSystemComponent::RewindEmitterInstance(int EmitterIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.RewindEmitterInstance");

	struct
	{
		int                            EmitterIndex;
	} params;
	params.EmitterIndex = EmitterIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetKillOnCompleted
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EmitterIndex                   (CPF_Parm)
// bool                           bKill                          (CPF_Parm)

void UParticleSystemComponent::SetKillOnCompleted(int EmitterIndex, bool bKill)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetKillOnCompleted");

	struct
	{
		int                            EmitterIndex;
		bool                           bKill;
	} params;
	params.EmitterIndex = EmitterIndex;
	params.bKill = bKill;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetKillOnDeactivate
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            EmitterIndex                   (CPF_Parm)
// bool                           bKill                          (CPF_Parm)

void UParticleSystemComponent::SetKillOnDeactivate(int EmitterIndex, bool bKill)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetKillOnDeactivate");

	struct
	{
		int                            EmitterIndex;
		bool                           bKill;
	} params;
	params.EmitterIndex = EmitterIndex;
	params.bKill = bKill;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.GetSkipBoundsUpdate
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UParticleSystemComponent::GetSkipBoundsUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetSkipBoundsUpdate");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.SetSkipBoundsUpdate
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bInSkipBoundsUpdate            (CPF_Parm)

void UParticleSystemComponent::SetSkipBoundsUpdate(bool bInSkipBoundsUpdate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetSkipBoundsUpdate");

	struct
	{
		bool                           bInSkipBoundsUpdate;
	} params;
	params.bInSkipBoundsUpdate = bInSkipBoundsUpdate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UParticleSystemComponent::GetSkipUpdateDynamicDataDuringTick()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.GetSkipUpdateDynamicDataDuringTick");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bInSkipUpdateDynamicDataDuringTick (CPF_Parm)

void UParticleSystemComponent::SetSkipUpdateDynamicDataDuringTick(bool bInSkipUpdateDynamicDataDuringTick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetSkipUpdateDynamicDataDuringTick");

	struct
	{
		bool                           bInSkipUpdateDynamicDataDuringTick;
	} params;
	params.bInSkipUpdateDynamicDataDuringTick = bInSkipUpdateDynamicDataDuringTick;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.KillParticlesInEmitter
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InEmitterName                  (CPF_Parm)

void UParticleSystemComponent::KillParticlesInEmitter(const struct FName& InEmitterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.KillParticlesInEmitter");

	struct
	{
		struct FName                   InEmitterName;
	} params;
	params.InEmitterName = InEmitterName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.KillParticlesForced
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UParticleSystemComponent::KillParticlesForced()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.KillParticlesForced");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.DeactivateSystem
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UParticleSystemComponent::DeactivateSystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.DeactivateSystem");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.ActivateSystem
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bFlagAsJustAttached            (CPF_OptionalParm, CPF_Parm)

void UParticleSystemComponent::ActivateSystem(bool bFlagAsJustAttached)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.ActivateSystem");

	struct
	{
		bool                           bFlagAsJustAttached;
	} params;
	params.bFlagAsJustAttached = bFlagAsJustAttached;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.SetTemplate
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UParticleSystem*         NewTemplate                    (CPF_Parm)

void UParticleSystemComponent::SetTemplate(class UParticleSystem* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.SetTemplate");

	struct
	{
		class UParticleSystem*         NewTemplate;
	} params;
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleSystemComponent.OnSystemFinished
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// class UParticleSystemComponent* PSystem                        (CPF_Parm, CPF_EditInline)

void UParticleSystemComponent::OnSystemFinished(class UParticleSystemComponent* PSystem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleSystemComponent.OnSystemFinished");

	struct
	{
		class UParticleSystemComponent* PSystem;
	} params;
	params.PSystem = PSystem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleEmitter.GetMaxLifespan
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          InComponentDelay               (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UParticleEmitter::GetMaxLifespan(float InComponentDelay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleEmitter.GetMaxLifespan");

	struct
	{
		float                          InComponentDelay;
		float                          ReturnValue;
	} params;
	params.InComponentDelay = InComponentDelay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ParticleModuleEventSendToGame.DoEvent
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 InCollideDirection             (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FVector                 InHitLocation                  (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FVector                 InHitNormal                    (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FName                   InBoneName                     (CPF_Const, CPF_Parm, CPF_OutParm)

void UParticleModuleEventSendToGame::DoEvent(struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleModuleEventSendToGame.DoEvent");

	struct
	{
		struct FVector                 InCollideDirection;
		struct FVector                 InHitLocation;
		struct FVector                 InHitNormal;
		struct FName                   InBoneName;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InCollideDirection != nullptr)
		*InCollideDirection = params.InCollideDirection;
	if (InHitLocation != nullptr)
		*InHitLocation = params.InHitLocation;
	if (InHitNormal != nullptr)
		*InHitNormal = params.InHitNormal;
	if (InBoneName != nullptr)
		*InBoneName = params.InBoneName;
}


// Function Engine.KActor.Reset
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AKActor::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.OnTeleport
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Teleport*        inAction                       (CPF_Parm)

void AKActor::OnTeleport(class USeqAct_Teleport* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.OnTeleport");

	struct
	{
		class USeqAct_Teleport*        inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AKActor::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.TakeRadiusDamage
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AController*             InstigatedBy                   (CPF_Parm)
// float                          BaseDamage                     (CPF_Parm)
// float                          DamageRadius                   (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HurtOrigin                     (CPF_Parm)
// bool                           bFullDamage                    (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// float                          DamageFalloffExponent          (CPF_OptionalParm, CPF_Parm)

void AKActor::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.TakeRadiusDamage");

	struct
	{
		class AController*             InstigatedBy;
		float                          BaseDamage;
		float                          DamageRadius;
		class UClass*                  DamageType;
		float                          Momentum;
		struct FVector                 HurtOrigin;
		bool                           bFullDamage;
		class AActor*                  DamageCauser;
		float                          DamageFalloffExponent;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.TakeDamage
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Damage                         (CPF_Parm)
// class AController*             EventInstigator                (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm, CPF_Parm)

void AKActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.TakeDamage");

	struct
	{
		int                            Damage;
		class AController*             EventInstigator;
		struct FVector                 HitLocation;
		struct FVector                 Momentum;
		class UClass*                  DamageType;
		struct FTraceHitInfo           HitInfo;
		class AActor*                  DamageCauser;
	} params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.ApplyImpulse
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FVector                 ImpulseDir                     (CPF_Parm)
// float                          ImpulseMag                     (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)
// class UClass*                  DamageType                     (CPF_OptionalParm, CPF_Parm)

void AKActor::ApplyImpulse(const struct FVector& ImpulseDir, float ImpulseMag, const struct FVector& HitLocation, const struct FTraceHitInfo& HitInfo, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.ApplyImpulse");

	struct
	{
		struct FVector                 ImpulseDir;
		float                          ImpulseMag;
		struct FVector                 HitLocation;
		struct FTraceHitInfo           HitInfo;
		class UClass*                  DamageType;
	} params;
	params.ImpulseDir = ImpulseDir;
	params.ImpulseMag = ImpulseMag;
	params.HitLocation = HitLocation;
	params.HitInfo = HitInfo;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AKActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.SpawnedByKismet
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AKActor::SpawnedByKismet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.SpawnedByKismet");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.SetPhysicalCollisionProperties
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AKActor::SetPhysicalCollisionProperties()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.SetPhysicalCollisionProperties");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.Destroyed
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AKActor::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.FellOutOfWorld
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UClass*                  dmgType                        (CPF_Parm)

void AKActor::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.FellOutOfWorld");

	struct
	{
		class UClass*                  dmgType;
	} params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AKActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.ResolveRBState
// (FUNC_Final, FUNC_Native, FUNC_Public)

void AKActor::ResolveRBState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.ResolveRBState");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.GetKActorPhysMaterial
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UPhysicalMaterial*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UPhysicalMaterial* AKActor::GetKActorPhysMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.GetKActorPhysMaterial");

	struct
	{
		class UPhysicalMaterial*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KActorFromStatic.TakeRadiusDamage
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AController*             InstigatedBy                   (CPF_Parm)
// float                          BaseDamage                     (CPF_Parm)
// float                          DamageRadius                   (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HurtOrigin                     (CPF_Parm)
// bool                           bFullDamage                    (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// float                          DamageFalloffExponent          (CPF_OptionalParm, CPF_Parm)

void AKActorFromStatic::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.TakeRadiusDamage");

	struct
	{
		class AController*             InstigatedBy;
		float                          BaseDamage;
		float                          DamageRadius;
		class UClass*                  DamageType;
		float                          Momentum;
		struct FVector                 HurtOrigin;
		bool                           bFullDamage;
		class AActor*                  DamageCauser;
		float                          DamageFalloffExponent;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.Touch
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm, CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AKActorFromStatic::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.Touch");

	struct
	{
		class AActor*                  Other;
		class UPrimitiveComponent*     OtherComp;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
	} params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.Bump
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm, CPF_EditInline)
// struct FVector                 HitNormal                      (CPF_Parm)

void AKActorFromStatic::Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.Bump");

	struct
	{
		class AActor*                  Other;
		class UPrimitiveComponent*     OtherComp;
		struct FVector                 HitNormal;
	} params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.ReceiveImpulse
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AKActorFromStatic::ReceiveImpulse(class APawn* Other, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.ReceiveImpulse");

	struct
	{
		class APawn*                   Other;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
	} params;
	params.Other = Other;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.ApplyImpulse
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 ImpulseDir                     (CPF_Parm)
// float                          ImpulseMag                     (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)
// class UClass*                  DamageType                     (CPF_OptionalParm, CPF_Parm)

void AKActorFromStatic::ApplyImpulse(const struct FVector& ImpulseDir, float ImpulseMag, const struct FVector& HitLocation, const struct FTraceHitInfo& HitInfo, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.ApplyImpulse");

	struct
	{
		struct FVector                 ImpulseDir;
		float                          ImpulseMag;
		struct FVector                 HitLocation;
		struct FTraceHitInfo           HitInfo;
		class UClass*                  DamageType;
	} params;
	params.ImpulseDir = ImpulseDir;
	params.ImpulseMag = ImpulseMag;
	params.HitLocation = HitLocation;
	params.HitInfo = HitInfo;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.MakeDynamic
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UStaticMeshComponent*    MovableMesh                    (CPF_Parm, CPF_EditInline)
// class AKActorFromStatic*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AKActorFromStatic* AKActorFromStatic::STATIC_MakeDynamic(class UStaticMeshComponent* MovableMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.MakeDynamic");

	struct
	{
		class UStaticMeshComponent*    MovableMesh;
		class AKActorFromStatic*       ReturnValue;
	} params;
	params.MovableMesh = MovableMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KActorFromStatic.MakeStatic
// (FUNC_Native, FUNC_Static, FUNC_Public)

void AKActorFromStatic::STATIC_MakeStatic()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.MakeStatic");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.BecomeStatic
// (FUNC_Defined, FUNC_Public)

void AKActorFromStatic::BecomeStatic()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.BecomeStatic");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.OnWakeRBPhysics
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AKActorFromStatic::OnWakeRBPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.OnWakeRBPhysics");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.OnSleepRBPhysics
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AKActorFromStatic::OnSleepRBPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.OnSleepRBPhysics");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorFromStatic.DisablePrecomputedLighting
// (FUNC_Final, FUNC_Native, FUNC_Public)

void AKActorFromStatic::DisablePrecomputedLighting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorFromStatic.DisablePrecomputedLighting");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorSpawnable.ResetComponents
// (FUNC_Final, FUNC_Native, FUNC_Public)

void AKActorSpawnable::ResetComponents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorSpawnable.ResetComponents");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorSpawnable.RecycleInternal
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AKActorSpawnable::RecycleInternal()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorSpawnable.RecycleInternal");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorSpawnable.Recycle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AKActorSpawnable::Recycle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorSpawnable.Recycle");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActorSpawnable.Initialize
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AKActorSpawnable::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActorSpawnable.Initialize");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.DoKismetAttachment
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Attachment                     (CPF_Parm)
// class USeqAct_AttachToActor*   Action                         (CPF_Parm)

void AKAsset::DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.DoKismetAttachment");

	struct
	{
		class AActor*                  Attachment;
		class USeqAct_AttachToActor*   Action;
	} params;
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.OnTeleport
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Teleport*        inAction                       (CPF_Parm)

void AKAsset::OnTeleport(class USeqAct_Teleport* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.OnTeleport");

	struct
	{
		class USeqAct_Teleport*        inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AKAsset::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.TakeRadiusDamage
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AController*             InstigatedBy                   (CPF_Parm)
// float                          BaseDamage                     (CPF_Parm)
// float                          DamageRadius                   (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HurtOrigin                     (CPF_Parm)
// bool                           bFullDamage                    (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// float                          DamageFalloffExponent          (CPF_OptionalParm, CPF_Parm)

void AKAsset::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.TakeRadiusDamage");

	struct
	{
		class AController*             InstigatedBy;
		float                          BaseDamage;
		float                          DamageRadius;
		class UClass*                  DamageType;
		float                          Momentum;
		struct FVector                 HurtOrigin;
		bool                           bFullDamage;
		class AActor*                  DamageCauser;
		float                          DamageFalloffExponent;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.TakeDamage
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// int                            Damage                         (CPF_Parm)
// class AController*             EventInstigator                (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm, CPF_Parm)

void AKAsset::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.TakeDamage");

	struct
	{
		int                            Damage;
		class AController*             EventInstigator;
		struct FVector                 HitLocation;
		struct FVector                 Momentum;
		class UClass*                  DamageType;
		struct FTraceHitInfo           HitInfo;
		class AActor*                  DamageCauser;
	} params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AKAsset::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.SetMeshAndPhysAsset
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// class USkeletalMesh*           NewMesh                        (CPF_Parm)
// class UPhysicsAsset*           NewPhysAsset                   (CPF_Parm)

void AKAsset::SetMeshAndPhysAsset(class USkeletalMesh* NewMesh, class UPhysicsAsset* NewPhysAsset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.SetMeshAndPhysAsset");

	struct
	{
		class USkeletalMesh*           NewMesh;
		class UPhysicsAsset*           NewPhysAsset;
	} params;
	params.NewMesh = NewMesh;
	params.NewPhysAsset = NewPhysAsset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KAsset.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AKAsset::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KAsset.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnSetVelocity
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_SetVelocity*     Action                         (CPF_Parm)

void APawn::OnSetVelocity(class USeqAct_SetVelocity* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnSetVelocity");

	struct
	{
		class USeqAct_SetVelocity*     Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Speak
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USoundCue*               Cue                            (CPF_Parm)

void APawn::Speak(class USoundCue* Cue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Speak");

	struct
	{
		class USoundCue*               Cue;
	} params;
	params.Cue = Cue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetScalarParameterInterp
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FScalarParameterInterpStruct ScalarParameterInterp          (CPF_Const, CPF_Parm, CPF_OutParm)

void APawn::SetScalarParameterInterp(struct FScalarParameterInterpStruct* ScalarParameterInterp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetScalarParameterInterp");

	struct
	{
		struct FScalarParameterInterpStruct ScalarParameterInterp;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ScalarParameterInterp != nullptr)
		*ScalarParameterInterp = params.ScalarParameterInterp;
}


// Function Engine.Pawn.SetRootMotionInterpCurrentTime
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          inTime                         (CPF_Parm)
// float                          DeltaTime                      (CPF_OptionalParm, CPF_Parm)
// bool                           bUpdateSkelPose                (CPF_OptionalParm, CPF_Parm)

void APawn::SetRootMotionInterpCurrentTime(float inTime, float DeltaTime, bool bUpdateSkelPose)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetRootMotionInterpCurrentTime");

	struct
	{
		float                          inTime;
		float                          DeltaTime;
		bool                           bUpdateSkelPose;
	} params;
	params.inTime = inTime;
	params.DeltaTime = DeltaTime;
	params.bUpdateSkelPose = bUpdateSkelPose;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetCinematicMode
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           bInCinematicMode               (CPF_Parm)

void APawn::SetCinematicMode(bool bInCinematicMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetCinematicMode");

	struct
	{
		bool                           bInCinematicMode;
	} params;
	params.bInCinematicMode = bInCinematicMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ZeroMovementVariables
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void APawn::ZeroMovementVariables()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ZeroMovementVariables");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClearPathStep
// (FUNC_Native, FUNC_Public)

void APawn::ClearPathStep()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearPathStep");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DrawPathStep
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UCanvas*                 C                              (CPF_Parm)

void APawn::DrawPathStep(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DrawPathStep");

	struct
	{
		class UCanvas*                 C;
	} params;
	params.C = C;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IncrementPathChild
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            Cnt                            (CPF_Parm)
// class UCanvas*                 C                              (CPF_Parm)

void APawn::IncrementPathChild(int Cnt, class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IncrementPathChild");

	struct
	{
		int                            Cnt;
		class UCanvas*                 C;
	} params;
	params.Cnt = Cnt;
	params.C = C;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IncrementPathStep
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            Cnt                            (CPF_Parm)
// class UCanvas*                 C                              (CPF_Parm)

void APawn::IncrementPathStep(int Cnt, class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IncrementPathStep");

	struct
	{
		int                            Cnt;
		class UCanvas*                 C;
	} params;
	params.Cnt = Cnt;
	params.C = C;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CreatePathGoalEvaluator
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UClass*                  GoalEvalClass                  (CPF_Parm)
// class UPathGoalEvaluator*      ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UPathGoalEvaluator* APawn::CreatePathGoalEvaluator(class UClass* GoalEvalClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CreatePathGoalEvaluator");

	struct
	{
		class UClass*                  GoalEvalClass;
		class UPathGoalEvaluator*      ReturnValue;
	} params;
	params.GoalEvalClass = GoalEvalClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CreatePathConstraint
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UClass*                  ConstraintClass                (CPF_Parm)
// class UPathConstraint*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UPathConstraint* APawn::CreatePathConstraint(class UClass* ConstraintClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CreatePathConstraint");

	struct
	{
		class UClass*                  ConstraintClass;
		class UPathConstraint*         ReturnValue;
	} params;
	params.ConstraintClass = ConstraintClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AddGoalEvaluator
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UPathGoalEvaluator*      Evaluator                      (CPF_Parm)

void APawn::AddGoalEvaluator(class UPathGoalEvaluator* Evaluator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddGoalEvaluator");

	struct
	{
		class UPathGoalEvaluator*      Evaluator;
	} params;
	params.Evaluator = Evaluator;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddPathConstraint
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UPathConstraint*         Constraint                     (CPF_Parm)

void APawn::AddPathConstraint(class UPathConstraint* Constraint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddPathConstraint");

	struct
	{
		class UPathConstraint*         Constraint;
	} params;
	params.Constraint = Constraint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClearConstraints
// (FUNC_Native, FUNC_Public)

void APawn::ClearConstraints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearConstraints");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SoakPause
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APawn::SoakPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SoakPause");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.BecomeViewTarget
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)

void APawn::BecomeViewTarget(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BecomeViewTarget");

	struct
	{
		class APlayerController*       PC;
	} params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MessagePlayer
// (FUNC_Final, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 msg                            (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)

void APawn::MessagePlayer(const struct FString& msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MessagePlayer");

	struct
	{
		struct FString                 msg;
	} params;
	params.msg = msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.HandleTeleport
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// TArray<class UObject*>         DestList                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           bUpdateRotation                (CPF_Parm)
// bool                           bCheckOverlap                  (CPF_Parm)
// float                          TeleportDistance               (CPF_OptionalParm, CPF_Parm)
// TArray<class AVolume*>         TeleportVolumes                (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// int                            PreferredDestIndex             (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::HandleTeleport(TArray<class UObject*> DestList, bool bUpdateRotation, bool bCheckOverlap, float TeleportDistance, TArray<class AVolume*> TeleportVolumes, int PreferredDestIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HandleTeleport");

	struct
	{
		TArray<class UObject*>         DestList;
		bool                           bUpdateRotation;
		bool                           bCheckOverlap;
		float                          TeleportDistance;
		TArray<class AVolume*>         TeleportVolumes;
		int                            PreferredDestIndex;
		bool                           ReturnValue;
	} params;
	params.DestList = DestList;
	params.bUpdateRotation = bUpdateRotation;
	params.bCheckOverlap = bCheckOverlap;
	params.TeleportDistance = TeleportDistance;
	params.TeleportVolumes = TeleportVolumes;
	params.PreferredDestIndex = PreferredDestIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.OnTeleport
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Teleport*        Action                         (CPF_Parm)

void APawn::OnTeleport(class USeqAct_Teleport* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnTeleport");

	struct
	{
		class USeqAct_Teleport*        Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnSetMaterial
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_SetMaterial*     Action                         (CPF_Parm)

void APawn::OnSetMaterial(class USeqAct_SetMaterial* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnSetMaterial");

	struct
	{
		class USeqAct_SetMaterial*     Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetDamageScaling
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float APawn::GetDamageScaling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetDamageScaling");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DoKismetAttachment
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Attachment                     (CPF_Parm)
// class USeqAct_AttachToActor*   Action                         (CPF_Parm)

void APawn::DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DoKismetAttachment");

	struct
	{
		class AActor*                  Attachment;
		class USeqAct_AttachToActor*   Action;
	} params;
	params.Attachment = Attachment;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SpawnedByKismet
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APawn::SpawnedByKismet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpawnedByKismet");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IsStationary
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::IsStationary()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsStationary");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetCollisionExtent
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector APawn::GetCollisionExtent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetCollisionExtent");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetCollisionHeight
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float APawn::GetCollisionHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetCollisionHeight");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetCollisionRadius
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float APawn::GetCollisionRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetCollisionRadius");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheatFly
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::CheatFly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheatFly");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheatGhost
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::CheatGhost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheatGhost");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheatWalk
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::CheatWalk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheatWalk");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PlayWeaponSwitch
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 OldWeapon                      (CPF_Parm)
// class AWeapon*                 NewWeapon                      (CPF_Parm)

void APawn::PlayWeaponSwitch(class AWeapon* OldWeapon, class AWeapon* NewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayWeaponSwitch");

	struct
	{
		class AWeapon*                 OldWeapon;
		class AWeapon*                 NewWeapon;
	} params;
	params.OldWeapon = OldWeapon;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetActiveWeapon
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 NewWeapon                      (CPF_Parm)

void APawn::SetActiveWeapon(class AWeapon* NewWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetActiveWeapon");

	struct
	{
		class AWeapon*                 NewWeapon;
	} params;
	params.NewWeapon = NewWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TossInventory
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AInventory*              Inv                            (CPF_Parm)
// struct FVector                 ForceVelocity                  (CPF_OptionalParm, CPF_Parm)

void APawn::TossInventory(class AInventory* Inv, const struct FVector& ForceVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TossInventory");

	struct
	{
		class AInventory*              Inv;
		struct FVector                 ForceVelocity;
	} params;
	params.Inv = Inv;
	params.ForceVelocity = ForceVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ThrowActiveWeapon
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bDestroyWeap                   (CPF_OptionalParm, CPF_Parm)

void APawn::ThrowActiveWeapon(bool bDestroyWeap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ThrowActiveWeapon");

	struct
	{
		bool                           bDestroyWeap;
	} params;
	params.bDestroyWeap = bDestroyWeap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DrawHUD
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AHUD*                    H                              (CPF_Parm)

void APawn::DrawHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DrawHUD");

	struct
	{
		class AHUD*                    H;
	} params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FindInventoryType
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UClass*                  DesiredClass                   (CPF_Parm)
// bool                           bAllowSubclass                 (CPF_OptionalParm, CPF_Parm)
// class AInventory*              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AInventory* APawn::FindInventoryType(class UClass* DesiredClass, bool bAllowSubclass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FindInventoryType");

	struct
	{
		class UClass*                  DesiredClass;
		bool                           bAllowSubclass;
		class AInventory*              ReturnValue;
	} params;
	params.DesiredClass = DesiredClass;
	params.bAllowSubclass = bAllowSubclass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CreateInventory
// (FUNC_Final, FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UClass*                  NewInvClass                    (CPF_Parm)
// bool                           bDoNotActivate                 (CPF_OptionalParm, CPF_Parm)
// class AInventory*              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AInventory* APawn::CreateInventory(class UClass* NewInvClass, bool bDoNotActivate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CreateInventory");

	struct
	{
		class UClass*                  NewInvClass;
		bool                           bDoNotActivate;
		class AInventory*              ReturnValue;
	} params;
	params.NewInvClass = NewInvClass;
	params.bDoNotActivate = bDoNotActivate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AddDefaultInventory
// (FUNC_Public)

void APawn::AddDefaultInventory()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddDefaultInventory");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StopDriving
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class AVehicle*                V                              (CPF_Parm)

void APawn::StopDriving(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopDriving");

	struct
	{
		class AVehicle*                V;
	} params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StartDriving
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class AVehicle*                V                              (CPF_Parm)

void APawn::StartDriving(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StartDriving");

	struct
	{
		class AVehicle*                V;
	} params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanThrowWeapon
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::CanThrowWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanThrowWeapon");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.Suicide
// (FUNC_Defined, FUNC_Public)

void APawn::Suicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Suicide");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetVehicleBase
// (FUNC_Native, FUNC_Public)
// Parameters:
// class AVehicle*                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AVehicle* APawn::GetVehicleBase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetVehicleBase");

	struct
	{
		class AVehicle*                ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PlayLanded
// (FUNC_Public)
// Parameters:
// float                          ImpactVel                      (CPF_Parm)

void APawn::PlayLanded(float ImpactVel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayLanded");

	struct
	{
		float                          ImpactVel;
	} params;
	params.ImpactVel = ImpactVel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CannotJumpNow
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::CannotJumpNow()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CannotJumpNow");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PlayFootStepSound
// (FUNC_Event, FUNC_Public)
// Parameters:
// int                            FootDown                       (CPF_Parm)

void APawn::PlayFootStepSound(int FootDown)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayFootStepSound");

	struct
	{
		int                            FootDown;
	} params;
	params.FootDown = FootDown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TornOff
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void APawn::TornOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TornOff");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayDying
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class UClass*                  DamageType                     (CPF_Parm)
// struct FVector                 HitLoc                         (CPF_Parm)

void APawn::PlayDying(class UClass* DamageType, const struct FVector& HitLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayDying");

	struct
	{
		class UClass*                  DamageType;
		struct FVector                 HitLoc;
	} params;
	params.DamageType = DamageType;
	params.HitLoc = HitLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetDyingPhysics
// (FUNC_Defined, FUNC_Public)

void APawn::SetDyingPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetDyingPhysics");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TurnOff
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void APawn::TurnOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TurnOff");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayHit
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          Damage                         (CPF_Parm)
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_Parm)

void APawn::PlayHit(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayHit");

	struct
	{
		float                          Damage;
		class AController*             InstigatedBy;
		struct FVector                 HitLocation;
		class UClass*                  DamageType;
		struct FVector                 Momentum;
		struct FTraceHitInfo           HitInfo;
	} params;
	params.Damage = Damage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayDyingSound
// (FUNC_Public)

void APawn::PlayDyingSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayDyingSound");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DoJump
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bUpdating                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::DoJump(bool bUpdating)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DoJump");

	struct
	{
		bool                           bUpdating;
		bool                           ReturnValue;
	} params;
	params.bUpdating = bUpdating;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheckWaterJump
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// struct FVector                 WallNormal                     (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::CheckWaterJump(struct FVector* WallNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheckWaterJump");

	struct
	{
		struct FVector                 WallNormal;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WallNormal != nullptr)
		*WallNormal = params.WallNormal;

	return params.ReturnValue;
}


// Function Engine.Pawn.TakeDrowningDamage
// (FUNC_Public)

void APawn::TakeDrowningDamage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeDrowningDamage");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.BreathTimer
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APawn::BreathTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BreathTimer");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TouchingWaterVolume
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::TouchingWaterVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TouchingWaterVolume");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.HeadVolumeChange
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APhysicsVolume*          newHeadVolume                  (CPF_Parm)

void APawn::HeadVolumeChange(class APhysicsVolume* newHeadVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HeadVolumeChange");

	struct
	{
		class APhysicsVolume*          newHeadVolume;
	} params;
	params.newHeadVolume = newHeadVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TickSpecial
// (FUNC_Event, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void APawn::TickSpecial(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TickSpecial");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Landed
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 HitNormal                      (CPF_Parm)
// class AActor*                  FloorActor                     (CPF_Parm)

void APawn::Landed(const struct FVector& HitNormal, class AActor* FloorActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Landed");

	struct
	{
		struct FVector                 HitNormal;
		class AActor*                  FloorActor;
	} params;
	params.HitNormal = HitNormal;
	params.FloorActor = FloorActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Falling
// (FUNC_Event, FUNC_Public)

void APawn::Falling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Falling");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DelayTriggerDeath
// (FUNC_Defined, FUNC_Public)

void APawn::DelayTriggerDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DelayTriggerDeath");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Died
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Killer                         (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Died");

	struct
	{
		class AController*             Killer;
		class UClass*                  DamageType;
		struct FVector                 HitLocation;
		bool                           ReturnValue;
	} params;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ThrowWeaponOnDeath
// (FUNC_Defined, FUNC_Public)

void APawn::ThrowWeaponOnDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ThrowWeaponOnDeath");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IsSameTeam
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::IsSameTeam(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsSameTeam");

	struct
	{
		class APawn*                   Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetTeam
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class ATeamInfo*               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ATeamInfo* APawn::GetTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetTeam");

	struct
	{
		class ATeamInfo*               ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetTeamNum
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

unsigned char APawn::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetTeamNum");

	struct
	{
		unsigned char                  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.TakeDamage
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Damage                         (CPF_Parm)
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm, CPF_Parm)

void APawn::TakeDamage(int Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeDamage");

	struct
	{
		int                            Damage;
		class AController*             InstigatedBy;
		struct FVector                 HitLocation;
		struct FVector                 Momentum;
		class UClass*                  DamageType;
		struct FTraceHitInfo           HitInfo;
		class AActor*                  DamageCauser;
	} params;
	params.Damage = Damage;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetKillInstigator
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             InstigatedBy                   (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// class AController*             ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AController* APawn::SetKillInstigator(class AController* InstigatedBy, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetKillInstigator");

	struct
	{
		class AController*             InstigatedBy;
		class UClass*                  DamageType;
		class AController*             ReturnValue;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.NotifyTakeHit
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// int                            Damage                         (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)

void APawn::NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NotifyTakeHit");

	struct
	{
		class AController*             InstigatedBy;
		struct FVector                 HitLocation;
		int                            Damage;
		class UClass*                  DamageType;
		struct FVector                 Momentum;
		class AActor*                  DamageCauser;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TakeRadiusDamageOnBones
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AController*             InstigatedBy                   (CPF_Parm)
// float                          BaseDamage                     (CPF_Parm)
// float                          DamageRadius                   (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HurtOrigin                     (CPF_Parm)
// bool                           bFullDamage                    (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// TArray<struct FName>           Bones                          (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::TakeRadiusDamageOnBones(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, TArray<struct FName> Bones)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeRadiusDamageOnBones");

	struct
	{
		class AController*             InstigatedBy;
		float                          BaseDamage;
		float                          DamageRadius;
		class UClass*                  DamageType;
		float                          Momentum;
		struct FVector                 HurtOrigin;
		bool                           bFullDamage;
		class AActor*                  DamageCauser;
		TArray<struct FName>           Bones;
		bool                           ReturnValue;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.Bones = Bones;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PruneDamagedBoneList
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FName>           Bones                          (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void APawn::PruneDamagedBoneList(TArray<struct FName>* Bones)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PruneDamagedBoneList");

	struct
	{
		TArray<struct FName>           Bones;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Bones != nullptr)
		*Bones = params.Bones;
}


// Function Engine.Pawn.HealDamage
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            Amount                         (CPF_Parm)
// class AController*             Healer                         (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::HealDamage(int Amount, class AController* Healer, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HealDamage");

	struct
	{
		int                            Amount;
		class AController*             Healer;
		class UClass*                  DamageType;
		bool                           ReturnValue;
	} params;
	params.Amount = Amount;
	params.Healer = Healer;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AdjustDamage
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            InDamage                       (CPF_Parm, CPF_OutParm)
// struct FVector                 Momentum                       (CPF_Parm, CPF_OutParm)
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)

void APawn::AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, int* InDamage, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AdjustDamage");

	struct
	{
		int                            InDamage;
		struct FVector                 Momentum;
		class AController*             InstigatedBy;
		struct FVector                 HitLocation;
		class UClass*                  DamageType;
		struct FTraceHitInfo           HitInfo;
		class AActor*                  DamageCauser;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InDamage != nullptr)
		*InDamage = params.InDamage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
}


// Function Engine.Pawn.SetMovementPhysics
// (FUNC_Defined, FUNC_Public)

void APawn::SetMovementPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetMovementPhysics");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Gasp
// (FUNC_Public)

void APawn::Gasp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Gasp");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnGiveInventory
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_GiveInventory*   inAction                       (CPF_Parm)

void APawn::OnGiveInventory(class USeqAct_GiveInventory* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnGiveInventory");

	struct
	{
		class USeqAct_GiveInventory*   inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnAssignController
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_AssignController* inAction                       (CPF_Parm)

void APawn::OnAssignController(class USeqAct_AssignController* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnAssignController");

	struct
	{
		class USeqAct_AssignController* inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ReceivedNewEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USequenceEvent*          Evt                            (CPF_Parm)

void APawn::ReceivedNewEvent(class USequenceEvent* Evt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReceivedNewEvent");

	struct
	{
		class USequenceEvent*          Evt;
	} params;
	params.Evt = Evt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SpawnDefaultController
// (FUNC_Defined, FUNC_Public)

void APawn::SpawnDefaultController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpawnDefaultController");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APawn::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PreBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void APawn::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PreBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Destroyed
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void APawn::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DetachFromController
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bDestroyController             (CPF_OptionalParm, CPF_Parm)

void APawn::DetachFromController(bool bDestroyController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DetachFromController");

	struct
	{
		bool                           bDestroyController;
	} params;
	params.bDestroyController = bDestroyController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CrushedBy
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   OtherPawn                      (CPF_Parm)

void APawn::CrushedBy(class APawn* OtherPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CrushedBy");

	struct
	{
		class APawn*                   OtherPawn;
	} params;
	params.OtherPawn = OtherPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanBeBaseForPawn
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class APawn*                   aPawn                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::CanBeBaseForPawn(class APawn* aPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanBeBaseForPawn");

	struct
	{
		class APawn*                   aPawn;
		bool                           ReturnValue;
	} params;
	params.aPawn = aPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.BaseChange
// (FUNC_Defined, FUNC_Singular, FUNC_Event, FUNC_Public)

void APawn::BaseChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BaseChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StuckOnPawn
// (FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   OtherPawn                      (CPF_Parm)

void APawn::StuckOnPawn(class APawn* OtherPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StuckOnPawn");

	struct
	{
		class APawn*                   OtherPawn;
	} params;
	params.OtherPawn = OtherPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.JumpOffPawn
// (FUNC_Defined, FUNC_Public)

void APawn::JumpOffPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.JumpOffPawn");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.gibbedBy
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void APawn::gibbedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.gibbedBy");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EncroachedBy
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void APawn::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EncroachedBy");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EncroachingOn
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EncroachingOn");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.FaceRotation
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FRotator                NewRotation                    (CPF_Parm)
// float                          DeltaTime                      (CPF_OptionalParm, CPF_Parm)

void APawn::FaceRotation(const struct FRotator& NewRotation, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FaceRotation");

	struct
	{
		struct FRotator                NewRotation;
		float                          DeltaTime;
	} params;
	params.NewRotation = NewRotation;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UpdatePawnRotation
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FRotator                NewRotation                    (CPF_Parm)

void APawn::UpdatePawnRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdatePawnRotation");

	struct
	{
		struct FRotator                NewRotation;
	} params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientSetRotation
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FRotator                NewRotation                    (CPF_Parm)

void APawn::ClientSetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientSetRotation");

	struct
	{
		struct FRotator                NewRotation;
	} params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientRestart
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void APawn::ClientRestart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientRestart");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Restart
// (FUNC_Public)

void APawn::Restart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Restart");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TakeFallingDamage
// (FUNC_Defined, FUNC_Public)

void APawn::TakeFallingDamage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeFallingDamage");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.KilledBy
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   EventInstigator                (CPF_Parm)

void APawn::KilledBy(class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.KilledBy");

	struct
	{
		class APawn*                   EventInstigator;
	} params;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddVelocity
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 NewVelocity                    (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)

void APawn::AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddVelocity");

	struct
	{
		struct FVector                 NewVelocity;
		struct FVector                 HitLocation;
		class UClass*                  DamageType;
		struct FTraceHitInfo           HitInfo;
	} params;
	params.NewVelocity = NewVelocity;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.HandleMomentum
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Momentum                       (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)

void APawn::HandleMomentum(const struct FVector& Momentum, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HandleMomentum");

	struct
	{
		struct FVector                 Momentum;
		struct FVector                 HitLocation;
		class UClass*                  DamageType;
		struct FTraceHitInfo           HitInfo;
	} params;
	params.Momentum = Momentum;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StartCrouch
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// float                          HeightAdjust                   (CPF_Parm)

void APawn::StartCrouch(float HeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StartCrouch");

	struct
	{
		float                          HeightAdjust;
	} params;
	params.HeightAdjust = HeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EndCrouch
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// float                          HeightAdjust                   (CPF_Parm)

void APawn::EndCrouch(float HeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EndCrouch");

	struct
	{
		float                          HeightAdjust;
	} params;
	params.HeightAdjust = HeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ShouldCrouch
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bCrouch                        (CPF_Parm)

void APawn::ShouldCrouch(bool bCrouch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ShouldCrouch");

	struct
	{
		bool                           bCrouch;
	} params;
	params.bCrouch = bCrouch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UnCrouch
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void APawn::UnCrouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UnCrouch");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OutsideWorldBounds
// (FUNC_Defined, FUNC_Singular, FUNC_Simulated, FUNC_Event, FUNC_Public)

void APawn::OutsideWorldBounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OutsideWorldBounds");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FellOutOfWorld
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UClass*                  dmgType                        (CPF_Parm)

void APawn::FellOutOfWorld(class UClass* dmgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FellOutOfWorld");

	struct
	{
		class UClass*                  dmgType;
	} params;
	params.dmgType = dmgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientMessage
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 S                              (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// struct FName                   Type                           (CPF_OptionalParm, CPF_Parm)

void APawn::ClientMessage(const struct FString& S, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientMessage");

	struct
	{
		struct FString                 S;
		struct FName                   Type;
	} params;
	params.S = S;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.HandlePickup
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AInventory*              Inv                            (CPF_Parm)

void APawn::HandlePickup(class AInventory* Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HandlePickup");

	struct
	{
		class AInventory*              Inv;
	} params;
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.LineOfSightTo
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::LineOfSightTo(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.LineOfSightTo");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetMoveTarget
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  NewTarget                      (CPF_Parm)

void APawn::SetMoveTarget(class AActor* NewTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetMoveTarget");

	struct
	{
		class AActor*                  NewTarget;
	} params;
	params.NewTarget = NewTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.InGodMode
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::InGodMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InGodMode");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetViewRotation
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FRotator                NewRotation                    (CPF_Parm)

void APawn::SetViewRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetViewRotation");

	struct
	{
		struct FRotator                NewRotation;
	} params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetAdjustedAimFor
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 W                              (CPF_Parm)
// struct FVector                 StartFireLoc                   (CPF_Parm)
// struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FRotator APawn::GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetAdjustedAimFor");

	struct
	{
		class AWeapon*                 W;
		struct FVector                 StartFireLoc;
		struct FRotator                ReturnValue;
	} params;
	params.W = W;
	params.StartFireLoc = StartFireLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.InFreeCam
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::InFreeCam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InFreeCam");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetBaseAimRotation
// (FUNC_Defined, FUNC_Singular, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FRotator APawn::GetBaseAimRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBaseAimRotation");

	struct
	{
		struct FRotator                ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetWeaponStartTraceLocation
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AWeapon*                 CurrentWeapon                  (CPF_OptionalParm, CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector APawn::GetWeaponStartTraceLocation(class AWeapon* CurrentWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetWeaponStartTraceLocation");

	struct
	{
		class AWeapon*                 CurrentWeapon;
		struct FVector                 ReturnValue;
	} params;
	params.CurrentWeapon = CurrentWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetPawnViewLocation
// (FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector APawn::GetPawnViewLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetPawnViewLocation");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetViewRotation
// (FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FRotator APawn::GetViewRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetViewRotation");

	struct
	{
		struct FRotator                ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetActorEyesViewPoint
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 out_Location                   (CPF_Parm, CPF_OutParm)
// struct FRotator                out_Rotation                   (CPF_Parm, CPF_OutParm)

void APawn::GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetActorEyesViewPoint");

	struct
	{
		struct FVector                 out_Location;
		struct FRotator                out_Rotation;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Location != nullptr)
		*out_Location = params.out_Location;
	if (out_Rotation != nullptr)
		*out_Rotation = params.out_Rotation;
}


// Function Engine.Pawn.ProcessViewRotation
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// struct FRotator                out_ViewRotation               (CPF_Parm, CPF_OutParm)
// struct FRotator                out_DeltaRot                   (CPF_Parm, CPF_OutParm)

void APawn::ProcessViewRotation(float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ProcessViewRotation");

	struct
	{
		float                          DeltaTime;
		struct FRotator                out_ViewRotation;
		struct FRotator                out_DeltaRot;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewRotation != nullptr)
		*out_ViewRotation = params.out_ViewRotation;
	if (out_DeltaRot != nullptr)
		*out_DeltaRot = params.out_DeltaRot;
}


// Function Engine.Pawn.IsFirstPerson
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::IsFirstPerson()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsFirstPerson");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsLocalHuman
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::IsLocalHuman()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsLocalHuman");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsPlayerPawn
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::IsPlayerPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsPlayerPawn");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsLocallyControlled
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::IsLocallyControlled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsLocallyControlled");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsHumanControlled
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AController*             PawnController                 (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::IsHumanControlled(class AController* PawnController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsHumanControlled");

	struct
	{
		class AController*             PawnController;
		bool                           ReturnValue;
	} params;
	params.PawnController = PawnController;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DisplayDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm, CPF_OutParm)
// float                          out_YPos                       (CPF_Parm, CPF_OutParm)

void APawn::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DisplayDebug");

	struct
	{
		class AHUD*                    HUD;
		float                          out_YL;
		float                          out_YPos;
	} params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Pawn.ClimbLadder
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class ALadderVolume*           L                              (CPF_Parm)

void APawn::ClimbLadder(class ALadderVolume* L)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClimbLadder");

	struct
	{
		class ALadderVolume*           L;
	} params;
	params.L = L;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EndClimbLadder
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class ALadderVolume*           OldLadder                      (CPF_Parm)

void APawn::EndClimbLadder(class ALadderVolume* OldLadder)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EndClimbLadder");

	struct
	{
		class ALadderVolume*           OldLadder;
	} params;
	params.OldLadder = OldLadder;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanSplash
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::CanSplash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanSplash");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetWalking
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           bNewIsWalking                  (CPF_Parm)

void APawn::SetWalking(bool bNewIsWalking)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetWalking");

	struct
	{
		bool                           bNewIsWalking;
	} params;
	params.bNewIsWalking = bNewIsWalking;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.RangedAttackTime
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float APawn::RangedAttackTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RangedAttackTime");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.RecommendLongRangedAttack
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::RecommendLongRangedAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RecommendLongRangedAttack");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CanGrabLadder
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::CanGrabLadder()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanGrabLadder");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DropToGround
// (FUNC_Defined, FUNC_Public)

void APawn::DropToGround()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DropToGround");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetDefaultCameraMode
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class APlayerController*       RequestedBy                    (CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName APawn::GetDefaultCameraMode(class APlayerController* RequestedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetDefaultCameraMode");

	struct
	{
		class APlayerController*       RequestedBy;
		struct FName                   ReturnValue;
	} params;
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.UnPossessed
// (FUNC_Defined, FUNC_Public)

void APawn::UnPossessed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UnPossessed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UpdateControllerOnPossess
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bVehicleTransition             (CPF_Parm)

void APawn::UpdateControllerOnPossess(bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdateControllerOnPossess");

	struct
	{
		bool                           bVehicleTransition;
	} params;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PossessedBy
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             C                              (CPF_Parm)
// bool                           bVehicleTransition             (CPF_Parm)

void APawn::PossessedBy(class AController* C, bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PossessedBy");

	struct
	{
		class AController*             C;
		bool                           bVehicleTransition;
	} params;
	params.C = C;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayTeleportEffect
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bOut                           (CPF_Parm)
// bool                           bSound                         (CPF_Parm)

void APawn::PlayTeleportEffect(bool bOut, bool bSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayTeleportEffect");

	struct
	{
		bool                           bOut;
		bool                           bSound;
	} params;
	params.bOut = bOut;
	params.bSound = bSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetHumanReadableName
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString APawn::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetHumanReadableName");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.NeedToTurn
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FVector                 targ                           (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::NeedToTurn(const struct FVector& targ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NeedToTurn");

	struct
	{
		struct FVector                 targ;
		bool                           ReturnValue;
	} params;
	params.targ = targ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsFiring
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::IsFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsFiring");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.HasRangedAttack
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::HasRangedAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HasRangedAttack");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.FireOnRelease
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::FireOnRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FireOnRelease");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.TooCloseToAttack
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::TooCloseToAttack(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TooCloseToAttack");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CanAttack
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::CanAttack(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanAttack");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.BotFire
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bFinished                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::BotFire(bool bFinished)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BotFire");

	struct
	{
		bool                           bFinished;
		bool                           ReturnValue;
	} params;
	params.bFinished = bFinished;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.WeaponStoppedFiring
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)
// bool                           bViaReplication                (CPF_Parm)

void APawn::WeaponStoppedFiring(class AWeapon* InWeapon, bool bViaReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.WeaponStoppedFiring");

	struct
	{
		class AWeapon*                 InWeapon;
		bool                           bViaReplication;
	} params;
	params.InWeapon = InWeapon;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.WeaponFired
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)
// bool                           bViaReplication                (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_OptionalParm, CPF_Parm)

void APawn::WeaponFired(class AWeapon* InWeapon, bool bViaReplication, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.WeaponFired");

	struct
	{
		class AWeapon*                 InWeapon;
		bool                           bViaReplication;
		struct FVector                 HitLocation;
	} params;
	params.InWeapon = InWeapon;
	params.bViaReplication = bViaReplication;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FlashLocationUpdated
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)
// struct FVector                 InFlashLocation                (CPF_Parm)
// bool                           bViaReplication                (CPF_Parm)

void APawn::FlashLocationUpdated(class AWeapon* InWeapon, const struct FVector& InFlashLocation, bool bViaReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FlashLocationUpdated");

	struct
	{
		class AWeapon*                 InWeapon;
		struct FVector                 InFlashLocation;
		bool                           bViaReplication;
	} params;
	params.InWeapon = InWeapon;
	params.InFlashLocation = InFlashLocation;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClearFlashLocation
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)

void APawn::ClearFlashLocation(class AWeapon* InWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearFlashLocation");

	struct
	{
		class AWeapon*                 InWeapon;
	} params;
	params.InWeapon = InWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetFlashLocation
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)
// unsigned char                  InFiringMode                   (CPF_Parm)
// struct FVector                 NewLoc                         (CPF_Parm)

void APawn::SetFlashLocation(class AWeapon* InWeapon, unsigned char InFiringMode, const struct FVector& NewLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetFlashLocation");

	struct
	{
		class AWeapon*                 InWeapon;
		unsigned char                  InFiringMode;
		struct FVector                 NewLoc;
	} params;
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;
	params.NewLoc = NewLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClearFlashCount
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)

void APawn::ClearFlashCount(class AWeapon* InWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearFlashCount");

	struct
	{
		class AWeapon*                 InWeapon;
	} params;
	params.InWeapon = InWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FlashCountUpdated
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)
// unsigned char                  InFlashCount                   (CPF_Parm)
// bool                           bViaReplication                (CPF_Parm)

void APawn::FlashCountUpdated(class AWeapon* InWeapon, unsigned char InFlashCount, bool bViaReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FlashCountUpdated");

	struct
	{
		class AWeapon*                 InWeapon;
		unsigned char                  InFlashCount;
		bool                           bViaReplication;
	} params;
	params.InWeapon = InWeapon;
	params.InFlashCount = InFlashCount;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IncrementFlashCount
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)
// unsigned char                  InFiringMode                   (CPF_Parm)

void APawn::IncrementFlashCount(class AWeapon* InWeapon, unsigned char InFiringMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IncrementFlashCount");

	struct
	{
		class AWeapon*                 InWeapon;
		unsigned char                  InFiringMode;
	} params;
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FiringModeUpdated
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)
// unsigned char                  InFiringMode                   (CPF_Parm)
// bool                           bViaReplication                (CPF_Parm)

void APawn::FiringModeUpdated(class AWeapon* InWeapon, unsigned char InFiringMode, bool bViaReplication)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FiringModeUpdated");

	struct
	{
		class AWeapon*                 InWeapon;
		unsigned char                  InFiringMode;
		bool                           bViaReplication;
	} params;
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;
	params.bViaReplication = bViaReplication;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetFiringMode
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)
// unsigned char                  InFiringMode                   (CPF_Parm)

void APawn::SetFiringMode(class AWeapon* InWeapon, unsigned char InFiringMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetFiringMode");

	struct
	{
		class AWeapon*                 InWeapon;
		unsigned char                  InFiringMode;
	} params;
	params.InWeapon = InWeapon;
	params.InFiringMode = InFiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetWeaponFiringMode
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AWeapon*                 InWeapon                       (CPF_Parm)
// unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

unsigned char APawn::GetWeaponFiringMode(class AWeapon* InWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetWeaponFiringMode");

	struct
	{
		class AWeapon*                 InWeapon;
		unsigned char                  ReturnValue;
	} params;
	params.InWeapon = InWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.StopFire
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_Parm)

void APawn::StopFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopFire");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StartFire
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// unsigned char                  FireModeNum                    (CPF_Parm)

void APawn::StartFire(unsigned char FireModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StartFire");

	struct
	{
		unsigned char                  FireModeNum;
	} params;
	params.FireModeNum = FireModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StopFiring
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::StopFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopFiring");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.Reset
// (FUNC_Defined, FUNC_Public)

void APawn::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayerChangedTeam
// (FUNC_Defined, FUNC_Public)

void APawn::PlayerChangedTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayerChangedTeam");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetBaseEyeheight
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void APawn::SetBaseEyeheight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetBaseEyeheight");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SpecialMoveThruEdge
// (FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ENavMeshEdgeType> EdgeType                       (CPF_Parm)
// int                            Dir                            (CPF_Parm)
// struct FVector                 MoveStart                      (CPF_Parm)
// struct FVector                 MoveDest                       (CPF_Parm)
// class AActor*                  RelActor                       (CPF_OptionalParm, CPF_Parm)
// int                            RelItem                        (CPF_OptionalParm, CPF_Parm)
// class UNavigationHandle*       NavHandle                      (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::SpecialMoveThruEdge(TEnumAsByte<enum class ENavMeshEdgeType> EdgeType, int Dir, const struct FVector& MoveStart, const struct FVector& MoveDest, class AActor* RelActor, int RelItem, class UNavigationHandle* NavHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpecialMoveThruEdge");

	struct
	{
		TEnumAsByte<enum class ENavMeshEdgeType> EdgeType;
		int                            Dir;
		struct FVector                 MoveStart;
		struct FVector                 MoveDest;
		class AActor*                  RelActor;
		int                            RelItem;
		class UNavigationHandle*       NavHandle;
		bool                           ReturnValue;
	} params;
	params.EdgeType = EdgeType;
	params.Dir = Dir;
	params.MoveStart = MoveStart;
	params.MoveDest = MoveDest;
	params.RelActor = RelActor;
	params.RelItem = RelItem;
	params.NavHandle = NavHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SpecialMoveTo
// (FUNC_Public)
// Parameters:
// class ANavigationPoint*        Start                          (CPF_Parm)
// class ANavigationPoint*        End                            (CPF_Parm)
// class AActor*                  Next                           (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::SpecialMoveTo(class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpecialMoveTo");

	struct
	{
		class ANavigationPoint*        Start;
		class ANavigationPoint*        End;
		class AActor*                  Next;
		bool                           ReturnValue;
	} params;
	params.Start = Start;
	params.End = End;
	params.Next = Next;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.TermRagdoll
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::TermRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TermRagdoll");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.InitRagdoll
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::InitRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InitRagdoll");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetBoundingCylinder
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          CollisionRadius                (CPF_Parm, CPF_OutParm)
// float                          CollisionHeight                (CPF_Parm, CPF_OutParm)

void APawn::GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBoundingCylinder");

	struct
	{
		float                          CollisionRadius;
		float                          CollisionHeight;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CollisionRadius != nullptr)
		*CollisionRadius = params.CollisionRadius;
	if (CollisionHeight != nullptr)
		*CollisionHeight = params.CollisionHeight;
}


// Function Engine.Pawn.ReachedDesiredRotation
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::ReachedDesiredRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReachedDesiredRotation");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetPushesRigidBodies
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           NewPush                        (CPF_Parm)

void APawn::SetPushesRigidBodies(bool NewPush)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetPushesRigidBodies");

	struct
	{
		bool                           NewPush;
	} params;
	params.NewPush = NewPush;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ForceCrouch
// (FUNC_Native, FUNC_Public)

void APawn::ForceCrouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ForceCrouch");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ReachedPoint
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 Point                          (CPF_Parm)
// class AActor*                  NewAnchor                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::ReachedPoint(const struct FVector& Point, class AActor* NewAnchor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReachedPoint");

	struct
	{
		struct FVector                 Point;
		class AActor*                  NewAnchor;
		bool                           ReturnValue;
	} params;
	params.Point = Point;
	params.NewAnchor = NewAnchor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ReachedDestination
// (FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  Goal                           (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::ReachedDestination(class AActor* Goal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReachedDestination");

	struct
	{
		class AActor*                  Goal;
		bool                           ReturnValue;
	} params;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetBestAnchor
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AActor*                  TestActor                      (CPF_Parm)
// struct FVector                 TestLocation                   (CPF_Parm)
// bool                           bStartPoint                    (CPF_Parm)
// bool                           bOnlyCheckVisible              (CPF_Parm)
// float                          out_Dist                       (CPF_Parm, CPF_OutParm)
// class ANavigationPoint*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ANavigationPoint* APawn::GetBestAnchor(class AActor* TestActor, const struct FVector& TestLocation, bool bStartPoint, bool bOnlyCheckVisible, float* out_Dist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBestAnchor");

	struct
	{
		class AActor*                  TestActor;
		struct FVector                 TestLocation;
		bool                           bStartPoint;
		bool                           bOnlyCheckVisible;
		float                          out_Dist;
		class ANavigationPoint*        ReturnValue;
	} params;
	params.TestActor = TestActor;
	params.TestLocation = TestLocation;
	params.bStartPoint = bStartPoint;
	params.bOnlyCheckVisible = bOnlyCheckVisible;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Dist != nullptr)
		*out_Dist = params.out_Dist;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetAnchor
// (FUNC_Native, FUNC_Public)
// Parameters:
// class ANavigationPoint*        NewAnchor                      (CPF_Parm)

void APawn::SetAnchor(class ANavigationPoint* NewAnchor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetAnchor");

	struct
	{
		class ANavigationPoint*        NewAnchor;
	} params;
	params.NewAnchor = NewAnchor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetRemoteViewPitch
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            NewRemoteViewPitch             (CPF_Parm)

void APawn::SetRemoteViewPitch(int NewRemoteViewPitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetRemoteViewPitch");

	struct
	{
		int                            NewRemoteViewPitch;
	} params;
	params.NewRemoteViewPitch = NewRemoteViewPitch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IsInvisible
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::IsInvisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsInvisible");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsValidEnemyTargetFor
// (FUNC_Native, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (CPF_Const, CPF_Parm)
// bool                           bNoPRIisEnemy                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::IsValidEnemyTargetFor(class APlayerReplicationInfo* PRI, bool bNoPRIisEnemy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsValidEnemyTargetFor");

	struct
	{
		class APlayerReplicationInfo*  PRI;
		bool                           bNoPRIisEnemy;
		bool                           ReturnValue;
	} params;
	params.PRI = PRI;
	params.bNoPRIisEnemy = bNoPRIisEnemy;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetFallDuration
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float APawn::GetFallDuration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetFallDuration");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SuggestJumpVelocity
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 JumpVelocity                   (CPF_Parm, CPF_OutParm)
// struct FVector                 Destination                    (CPF_Parm)
// struct FVector                 Start                          (CPF_Parm)
// bool                           bRequireFallLanding            (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::SuggestJumpVelocity(const struct FVector& Destination, const struct FVector& Start, bool bRequireFallLanding, struct FVector* JumpVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SuggestJumpVelocity");

	struct
	{
		struct FVector                 JumpVelocity;
		struct FVector                 Destination;
		struct FVector                 Start;
		bool                           bRequireFallLanding;
		bool                           ReturnValue;
	} params;
	params.Destination = Destination;
	params.Start = Start;
	params.bRequireFallLanding = bRequireFallLanding;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (JumpVelocity != nullptr)
		*JumpVelocity = params.JumpVelocity;

	return params.ReturnValue;
}


// Function Engine.Pawn.ValidAnchor
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::ValidAnchor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ValidAnchor");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AdjustDestination
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  GoalActor                      (CPF_Parm)
// struct FVector                 Dest                           (CPF_OptionalParm, CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector APawn::AdjustDestination(class AActor* GoalActor, const struct FVector& Dest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AdjustDestination");

	struct
	{
		class AActor*                  GoalActor;
		struct FVector                 Dest;
		struct FVector                 ReturnValue;
	} params;
	params.GoalActor = GoalActor;
	params.Dest = Dest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsAliveAndWell
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::IsAliveAndWell()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsAliveAndWell");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void APawn::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetSkelControlScale
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   SkelControlName                (CPF_Parm)
// float                          Scale                          (CPF_Parm)

void APawn::SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetSkelControlScale");

	struct
	{
		struct FName                   SkelControlName;
		float                          Scale;
	} params;
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetMorphWeight
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   MorphNodeName                  (CPF_Parm)
// float                          MorphWeight                    (CPF_Parm)

void APawn::SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetMorphWeight");

	struct
	{
		struct FName                   MorphNodeName;
		float                          MorphWeight;
	} params;
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetActorFaceFXAsset
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UFaceFXAsset*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UFaceFXAsset* APawn::GetActorFaceFXAsset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetActorFaceFXAsset");

	struct
	{
		class UFaceFXAsset*            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.FaceFXAudioFinished
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// class UAudioComponent*         AC                             (CPF_Parm, CPF_EditInline)

void APawn::FaceFXAudioFinished(class UAudioComponent* AC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FaceFXAudioFinished");

	struct
	{
		class UAudioComponent*         AC;
	} params;
	params.AC = AC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnPlayFaceFXAnim
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_PlayFaceFXAnim*  inAction                       (CPF_Parm)

void APawn::OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnPlayFaceFXAnim");

	struct
	{
		class USeqAct_PlayFaceFXAnim*  inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanActorPlayFaceFXAnim
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::CanActorPlayFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanActorPlayFaceFXAnim");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsActorPlayingFaceFXAnim
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::IsActorPlayingFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsActorPlayingFaceFXAnim");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetFaceFXAudioComponent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UAudioComponent*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UAudioComponent* APawn::GetFaceFXAudioComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetFaceFXAudioComponent");

	struct
	{
		class UAudioComponent*         ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.StopActorFaceFXAnim
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APawn::StopActorFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopActorFaceFXAnim");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayActorFaceFXAnim
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UFaceFXAnimSet*          AnimSet                        (CPF_Parm)
// struct FString                 GroupName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SeqName                        (CPF_Parm, CPF_NeedCtorLink)
// class USoundCue*               SoundCueToPlay                 (CPF_Parm)
// class UAkEvent*                AkEventToPlay                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayActorFaceFXAnim");

	struct
	{
		class UFaceFXAnimSet*          AnimSet;
		struct FString                 GroupName;
		struct FString                 SeqName;
		class USoundCue*               SoundCueToPlay;
		class UAkEvent*                AkEventToPlay;
		bool                           ReturnValue;
	} params;
	params.AnimSet = AnimSet;
	params.GroupName = GroupName;
	params.SeqName = SeqName;
	params.SoundCueToPlay = SoundCueToPlay;
	params.AkEventToPlay = AkEventToPlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.MAT_FinishAIGroup
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void APawn::MAT_FinishAIGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_FinishAIGroup");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MAT_BeginAIGroup
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 StartLoc                       (CPF_Parm)
// struct FRotator                StartRot                       (CPF_Parm)

void APawn::MAT_BeginAIGroup(const struct FVector& StartLoc, const struct FRotator& StartRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_BeginAIGroup");

	struct
	{
		struct FVector                 StartLoc;
		struct FRotator                StartRot;
	} params;
	params.StartLoc = StartLoc;
	params.StartRot = StartRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FinishAIGroup
// (FUNC_Simulated, FUNC_Public)

void APawn::FinishAIGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FinishAIGroup");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.BeginAIGroup
// (FUNC_Simulated, FUNC_Public)

void APawn::BeginAIGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BeginAIGroup");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.InterpolationFinished
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (CPF_Parm)

void APawn::InterpolationFinished(class USeqAct_Interp* InterpAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InterpolationFinished");

	struct
	{
		class USeqAct_Interp*          InterpAction;
	} params;
	params.InterpAction = InterpAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.InterpolationStarted
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USeqAct_Interp*          InterpAction                   (CPF_Parm)
// class UInterpGroupInst*        GroupInst                      (CPF_Parm)

void APawn::InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InterpolationStarted");

	struct
	{
		class USeqAct_Interp*          InterpAction;
		class UInterpGroupInst*        GroupInst;
	} params;
	params.InterpAction = InterpAction;
	params.GroupInst = GroupInst;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MAT_SetSkelControlStrength
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   SkelControlName                (CPF_Parm)
// float                          ControlStrength                (CPF_Parm)

void APawn::MAT_SetSkelControlStrength(const struct FName& SkelControlName, float ControlStrength)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_SetSkelControlStrength");

	struct
	{
		struct FName                   SkelControlName;
		float                          ControlStrength;
	} params;
	params.SkelControlName = SkelControlName;
	params.ControlStrength = ControlStrength;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MAT_SetSkelControlScale
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   SkelControlName                (CPF_Parm)
// float                          Scale                          (CPF_Parm)

void APawn::MAT_SetSkelControlScale(const struct FName& SkelControlName, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_SetSkelControlScale");

	struct
	{
		struct FName                   SkelControlName;
		float                          Scale;
	} params;
	params.SkelControlName = SkelControlName;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MAT_SetMorphWeight
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   MorphNodeName                  (CPF_Parm)
// float                          MorphWeight                    (CPF_Parm)

void APawn::MAT_SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_SetMorphWeight");

	struct
	{
		struct FName                   MorphNodeName;
		float                          MorphWeight;
	} params;
	params.MorphNodeName = MorphNodeName;
	params.MorphWeight = MorphWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MAT_SetAnimWeights
// (FUNC_Native, FUNC_Public)
// Parameters:
// TArray<struct FAnimSlotInfo>   SlotInfos                      (CPF_Parm, CPF_NeedCtorLink)

void APawn::MAT_SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_SetAnimWeights");

	struct
	{
		TArray<struct FAnimSlotInfo>   SlotInfos;
	} params;
	params.SlotInfos = SlotInfos;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MAT_SetAnimPosition
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   SlotName                       (CPF_Parm)
// int                            ChannelIndex                   (CPF_Parm)
// struct FName                   InAnimSeqName                  (CPF_Parm)
// float                          InPosition                     (CPF_Parm)
// bool                           bFireNotifies                  (CPF_Parm)
// bool                           bLooping                       (CPF_Parm)
// bool                           bEnableRootMotion              (CPF_Parm)

void APawn::MAT_SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_SetAnimPosition");

	struct
	{
		struct FName                   SlotName;
		int                            ChannelIndex;
		struct FName                   InAnimSeqName;
		float                          InPosition;
		bool                           bFireNotifies;
		bool                           bLooping;
		bool                           bEnableRootMotion;
	} params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetAnimPosition
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   SlotName                       (CPF_Parm)
// int                            ChannelIndex                   (CPF_Parm)
// struct FName                   InAnimSeqName                  (CPF_Parm)
// float                          InPosition                     (CPF_Parm)
// bool                           bFireNotifies                  (CPF_Parm)
// bool                           bLooping                       (CPF_Parm)
// bool                           bEnableRootMotion              (CPF_Parm)

void APawn::SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetAnimPosition");

	struct
	{
		struct FName                   SlotName;
		int                            ChannelIndex;
		struct FName                   InAnimSeqName;
		float                          InPosition;
		bool                           bFireNotifies;
		bool                           bLooping;
		bool                           bEnableRootMotion;
	} params;
	params.SlotName = SlotName;
	params.ChannelIndex = ChannelIndex;
	params.InAnimSeqName = InAnimSeqName;
	params.InPosition = InPosition;
	params.bFireNotifies = bFireNotifies;
	params.bLooping = bLooping;
	params.bEnableRootMotion = bEnableRootMotion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MAT_FinishAnimControl
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void APawn::MAT_FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_FinishAnimControl");

	struct
	{
		class UInterpGroup*            InInterpGroup;
	} params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FinishAnimControl
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void APawn::FinishAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FinishAnimControl");

	struct
	{
		class UInterpGroup*            InInterpGroup;
	} params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MAT_BeginAnimControl
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void APawn::MAT_BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MAT_BeginAnimControl");

	struct
	{
		class UInterpGroup*            InInterpGroup;
	} params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.BeginAnimControl
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class UInterpGroup*            InInterpGroup                  (CPF_Parm)

void APawn::BeginAnimControl(class UInterpGroup* InInterpGroup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BeginAnimControl");

	struct
	{
		class UInterpGroup*            InInterpGroup;
	} params;
	params.InInterpGroup = InInterpGroup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.RestoreAnimSetsToDefault
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::RestoreAnimSetsToDefault()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RestoreAnimSetsToDefault");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AnimSetListUpdated
// (FUNC_Simulated, FUNC_Event, FUNC_Public)

void APawn::AnimSetListUpdated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AnimSetListUpdated");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddAnimSets
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<class UAnimSet*>        CustomAnimSets                 (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void APawn::AddAnimSets(TArray<class UAnimSet*>* CustomAnimSets)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddAnimSets");

	struct
	{
		TArray<class UAnimSet*>        CustomAnimSets;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CustomAnimSets != nullptr)
		*CustomAnimSets = params.CustomAnimSets;
}


// Function Engine.Pawn.BuildScriptAnimSetList
// (FUNC_Simulated, FUNC_Event, FUNC_Public)

void APawn::BuildScriptAnimSetList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BuildScriptAnimSetList");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UpdateAnimSetList
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)

void APawn::UpdateAnimSetList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdateAnimSetList");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClearAnimNodes
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void APawn::ClearAnimNodes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClearAnimNodes");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CacheAnimNodes
// (FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_Public)

void APawn::CacheAnimNodes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CacheAnimNodes");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PostInitAnimTree
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm, CPF_EditInline)

void APawn::PostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PostInitAnimTree");

	struct
	{
		class USkeletalMeshComponent*  SkelComp;
	} params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IsDesiredRotationLocked
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::IsDesiredRotationLocked()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsDesiredRotationLocked");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsDesiredRotationInUse
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::IsDesiredRotationInUse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsDesiredRotationInUse");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheckDesiredRotation
// (FUNC_Final, FUNC_Native, FUNC_Public)

void APawn::CheckDesiredRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheckDesiredRotation");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ResetDesiredRotation
// (FUNC_Final, FUNC_Native, FUNC_Public)

void APawn::ResetDesiredRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ResetDesiredRotation");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.LockDesiredRotation
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           Lock                           (CPF_Parm)
// bool                           InUnlockWhenReached            (CPF_OptionalParm, CPF_Parm)

void APawn::LockDesiredRotation(bool Lock, bool InUnlockWhenReached)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.LockDesiredRotation");

	struct
	{
		bool                           Lock;
		bool                           InUnlockWhenReached;
	} params;
	params.Lock = Lock;
	params.InUnlockWhenReached = InUnlockWhenReached;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetDesiredRotation
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FRotator                TargetDesiredRotation          (CPF_Parm)
// bool                           InLockDesiredRotation          (CPF_OptionalParm, CPF_Parm)
// bool                           InUnlockWhenReached            (CPF_OptionalParm, CPF_Parm)
// float                          InterpolationTime              (CPF_OptionalParm, CPF_Parm)
// bool                           bResetRotationRate             (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::SetDesiredRotation(const struct FRotator& TargetDesiredRotation, bool InLockDesiredRotation, bool InUnlockWhenReached, float InterpolationTime, bool bResetRotationRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetDesiredRotation");

	struct
	{
		struct FRotator                TargetDesiredRotation;
		bool                           InLockDesiredRotation;
		bool                           InUnlockWhenReached;
		float                          InterpolationTime;
		bool                           bResetRotationRate;
		bool                           ReturnValue;
	} params;
	params.TargetDesiredRotation = TargetDesiredRotation;
	params.InLockDesiredRotation = InLockDesiredRotation;
	params.InUnlockWhenReached = InUnlockWhenReached;
	params.InterpolationTime = InterpolationTime;
	params.bResetRotationRate = bResetRotationRate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PickWallAdjust
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 WallHitNormal                  (CPF_Parm)
// class AActor*                  HitActor                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APawn::PickWallAdjust(const struct FVector& WallHitNormal, class AActor* HitActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PickWallAdjust");

	struct
	{
		struct FVector                 WallHitNormal;
		class AActor*                  HitActor;
		bool                           ReturnValue;
	} params;
	params.WallHitNormal = WallHitNormal;
	params.HitActor = HitActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.ZeroMovementVariables
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AVehicle::ZeroMovementVariables()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ZeroMovementVariables");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.NotifyDriverTakeHit
// (FUNC_Public)
// Parameters:
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// int                            Damage                         (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)

void AVehicle::NotifyDriverTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.NotifyDriverTakeHit");

	struct
	{
		class AController*             InstigatedBy;
		struct FVector                 HitLocation;
		int                            Damage;
		class UClass*                  DamageType;
		struct FVector                 Momentum;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AVehicle::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DrivingStatusChanged
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AVehicle::DrivingStatusChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DrivingStatusChanged");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SetDriving
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           B                              (CPF_Parm)

void AVehicle::SetDriving(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetDriving");

	struct
	{
		bool                           B;
	} params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.GetEntryLocation
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AVehicle::GetEntryLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetEntryLocation");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CrushedBy
// (FUNC_Public)
// Parameters:
// class APawn*                   OtherPawn                      (CPF_Parm)

void AVehicle::CrushedBy(class APawn* OtherPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CrushedBy");

	struct
	{
		class APawn*                   OtherPawn;
	} params;
	params.OtherPawn = OtherPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.PancakeOther
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)

void AVehicle::PancakeOther(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PancakeOther");

	struct
	{
		class APawn*                   Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.EncroachingOn
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVehicle::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.EncroachingOn");

	struct
	{
		class AActor*                  Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.GetCollisionDamageInstigator
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AController* AVehicle::GetCollisionDamageInstigator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetCollisionDamageInstigator");

	struct
	{
		class AController*             ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.EncroachedBy
// (FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AVehicle::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.EncroachedBy");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.FaceRotation
// (FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FRotator                NewRotation                    (CPF_Parm)
// float                          DeltaTime                      (CPF_OptionalParm, CPF_Parm)

void AVehicle::FaceRotation(const struct FRotator& NewRotation, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.FaceRotation");

	struct
	{
		struct FRotator                NewRotation;
		float                          DeltaTime;
	} params;
	params.NewRotation = NewRotation;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.GetDefaultCameraMode
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class APlayerController*       RequestedBy                    (CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName AVehicle::GetDefaultCameraMode(class APlayerController* RequestedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetDefaultCameraMode");

	struct
	{
		class APlayerController*       RequestedBy;
		struct FName                   ReturnValue;
	} params;
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.PlayDying
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// class UClass*                  DamageType                     (CPF_Parm)
// struct FVector                 HitLoc                         (CPF_Parm)

void AVehicle::PlayDying(class UClass* DamageType, const struct FVector& HitLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlayDying");

	struct
	{
		class UClass*                  DamageType;
		struct FVector                 HitLoc;
	} params;
	params.DamageType = DamageType;
	params.HitLoc = HitLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DriverDied
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UClass*                  DamageType                     (CPF_Parm)

void AVehicle::DriverDied(class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverDied");

	struct
	{
		class UClass*                  DamageType;
	} params;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.Died
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Killer                         (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVehicle::Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Died");

	struct
	{
		class AController*             Killer;
		class UClass*                  DamageType;
		struct FVector                 HitLocation;
		bool                           ReturnValue;
	} params;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.ThrowActiveWeapon
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bDestroyWeap                   (CPF_OptionalParm, CPF_Parm)

void AVehicle::ThrowActiveWeapon(bool bDestroyWeap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ThrowActiveWeapon");

	struct
	{
		bool                           bDestroyWeap;
	} params;
	params.bDestroyWeap = bDestroyWeap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.AdjustDriverDamage
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            Damage                         (CPF_Parm, CPF_OutParm)
// class AController*             InstigatedBy                   (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm, CPF_OutParm)
// class UClass*                  DamageType                     (CPF_Parm)

void AVehicle::AdjustDriverDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AdjustDriverDamage");

	struct
	{
		int                            Damage;
		class AController*             InstigatedBy;
		struct FVector                 HitLocation;
		struct FVector                 Momentum;
		class UClass*                  DamageType;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
}


// Function Engine.Vehicle.TakeDamage
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Damage                         (CPF_Parm)
// class AController*             EventInstigator                (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm, CPF_Parm)

void AVehicle::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TakeDamage");

	struct
	{
		int                            Damage;
		class AController*             EventInstigator;
		struct FVector                 HitLocation;
		struct FVector                 Momentum;
		class UClass*                  DamageType;
		struct FTraceHitInfo           HitInfo;
		class AActor*                  DamageCauser;
	} params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SetKillInstigator
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             InstigatedBy                   (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// class AController*             ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AController* AVehicle::SetKillInstigator(class AController* InstigatedBy, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetKillInstigator");

	struct
	{
		class AController*             InstigatedBy;
		class UClass*                  DamageType;
		class AController*             ReturnValue;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.UnPossessed
// (FUNC_Defined, FUNC_Public)

void AVehicle::UnPossessed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.UnPossessed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.TryExitPos
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class APawn*                   ExitingDriver                  (CPF_Parm)
// struct FVector                 ExitPos                        (CPF_Parm)
// bool                           bMustFindGround                (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVehicle::TryExitPos(class APawn* ExitingDriver, const struct FVector& ExitPos, bool bMustFindGround)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TryExitPos");

	struct
	{
		class APawn*                   ExitingDriver;
		struct FVector                 ExitPos;
		bool                           bMustFindGround;
		bool                           ReturnValue;
	} params;
	params.ExitingDriver = ExitingDriver;
	params.ExitPos = ExitPos;
	params.bMustFindGround = bMustFindGround;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.FindAutoExit
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class APawn*                   ExitingDriver                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVehicle::FindAutoExit(class APawn* ExitingDriver)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.FindAutoExit");

	struct
	{
		class APawn*                   ExitingDriver;
		bool                           ReturnValue;
	} params;
	params.ExitingDriver = ExitingDriver;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.PlaceExitingDriver
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class APawn*                   ExitingDriver                  (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVehicle::PlaceExitingDriver(class APawn* ExitingDriver)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlaceExitingDriver");

	struct
	{
		class APawn*                   ExitingDriver;
		bool                           ReturnValue;
	} params;
	params.ExitingDriver = ExitingDriver;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.DriverLeft
// (FUNC_Defined, FUNC_Public)

void AVehicle::DriverLeft()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverLeft");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SetInputs
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// float                          InForward                      (CPF_Parm)
// float                          InStrafe                       (CPF_Parm)
// float                          InUp                           (CPF_Parm)

void AVehicle::SetInputs(float InForward, float InStrafe, float InUp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetInputs");

	struct
	{
		float                          InForward;
		float                          InStrafe;
		float                          InUp;
	} params;
	params.InForward = InForward;
	params.InStrafe = InStrafe;
	params.InUp = InUp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DriverLeave
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// bool                           bForceLeave                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVehicle::DriverLeave(bool bForceLeave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverLeave");

	struct
	{
		bool                           bForceLeave;
		bool                           ReturnValue;
	} params;
	params.bForceLeave = bForceLeave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.GetExitRotation
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AController*             C                              (CPF_Parm)
// struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FRotator AVehicle::GetExitRotation(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetExitRotation");

	struct
	{
		class AController*             C;
		struct FRotator                ReturnValue;
	} params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.ContinueOnFoot
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVehicle::ContinueOnFoot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ContinueOnFoot");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.DetachDriver
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void AVehicle::DetachDriver(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DetachDriver");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.AttachDriver
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void AVehicle::AttachDriver(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AttachDriver");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.EntryAnnouncement
// (FUNC_Public)
// Parameters:
// class AController*             C                              (CPF_Parm)

void AVehicle::EntryAnnouncement(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.EntryAnnouncement");

	struct
	{
		class AController*             C;
	} params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.PossessedBy
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             C                              (CPF_Parm)
// bool                           bVehicleTransition             (CPF_Parm)

void AVehicle::PossessedBy(class AController* C, bool bVehicleTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PossessedBy");

	struct
	{
		class AController*             C;
		bool                           bVehicleTransition;
	} params;
	params.C = C;
	params.bVehicleTransition = bVehicleTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DriverEnter
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVehicle::DriverEnter(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverEnter");

	struct
	{
		class APawn*                   P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.TryToDrive
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVehicle::TryToDrive(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TryToDrive");

	struct
	{
		class APawn*                   P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.AnySeatAvailable
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVehicle::AnySeatAvailable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AnySeatAvailable");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CanEnterVehicle
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVehicle::CanEnterVehicle(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CanEnterVehicle");

	struct
	{
		class APawn*                   P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.Destroyed_HandleDriver
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AVehicle::Destroyed_HandleDriver()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Destroyed_HandleDriver");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.Destroyed
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AVehicle::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.CheatFly
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVehicle::CheatFly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheatFly");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CheatGhost
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVehicle::CheatGhost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheatGhost");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CheatWalk
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AVehicle::CheatWalk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheatWalk");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AVehicle::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SetBaseEyeheight
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AVehicle::SetBaseEyeheight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetBaseEyeheight");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.PlayerChangedTeam
// (FUNC_Defined, FUNC_Public)

void AVehicle::PlayerChangedTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlayerChangedTeam");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DriverRadiusDamage
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          DamageAmount                   (CPF_Parm)
// float                          DamageRadius                   (CPF_Parm)
// class AController*             EventInstigator                (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// float                          DamageFalloffExponent          (CPF_OptionalParm, CPF_Parm)

void AVehicle::DriverRadiusDamage(float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, const struct FVector& HitLocation, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverRadiusDamage");

	struct
	{
		float                          DamageAmount;
		float                          DamageRadius;
		class AController*             EventInstigator;
		class UClass*                  DamageType;
		float                          Momentum;
		struct FVector                 HitLocation;
		class AActor*                  DamageCauser;
		float                          DamageFalloffExponent;
	} params;
	params.DamageAmount = DamageAmount;
	params.DamageRadius = DamageRadius;
	params.EventInstigator = EventInstigator;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HitLocation = HitLocation;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.TakeRadiusDamage
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AController*             InstigatedBy                   (CPF_Parm)
// float                          BaseDamage                     (CPF_Parm)
// float                          DamageRadius                   (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HurtOrigin                     (CPF_Parm)
// bool                           bFullDamage                    (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// float                          DamageFalloffExponent          (CPF_OptionalParm, CPF_Parm)

void AVehicle::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TakeRadiusDamage");

	struct
	{
		class AController*             InstigatedBy;
		float                          BaseDamage;
		float                          DamageRadius;
		class UClass*                  DamageType;
		float                          Momentum;
		struct FVector                 HurtOrigin;
		bool                           bFullDamage;
		class AActor*                  DamageCauser;
		float                          DamageFalloffExponent;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.GetTargetLocation
// (FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  RequestedBy                    (CPF_OptionalParm, CPF_Parm)
// bool                           bRequestAlternateLoc           (CPF_OptionalParm, CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector AVehicle::GetTargetLocation(class AActor* RequestedBy, bool bRequestAlternateLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetTargetLocation");

	struct
	{
		class AActor*                  RequestedBy;
		bool                           bRequestAlternateLoc;
		struct FVector                 ReturnValue;
	} params;
	params.RequestedBy = RequestedBy;
	params.bRequestAlternateLoc = bRequestAlternateLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.GetMaxRiseForce
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float AVehicle::GetMaxRiseForce()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetMaxRiseForce");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.Suicide
// (FUNC_Defined, FUNC_Public)

void AVehicle::Suicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Suicide");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DisplayDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm, CPF_OutParm)
// float                          out_YPos                       (CPF_Parm, CPF_OutParm)

void AVehicle::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DisplayDebug");

	struct
	{
		class AHUD*                    HUD;
		float                          out_YL;
		float                          out_YPos;
	} params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.SVehicle.GetSVehicleDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FString>         DebugInfo                      (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void ASVehicle::GetSVehicleDebug(TArray<struct FString>* DebugInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.GetSVehicleDebug");

	struct
	{
		TArray<struct FString>         DebugInfo;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DebugInfo != nullptr)
		*DebugInfo = params.DebugInfo;
}


// Function Engine.SVehicle.HermiteEval
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// float                          Slip                           (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float ASVehicle::HermiteEval(float Slip)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.HermiteEval");

	struct
	{
		float                          Slip;
		float                          ReturnValue;
	} params;
	params.Slip = Slip;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.DisplayWheelsDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          YL                             (CPF_Parm)

void ASVehicle::DisplayWheelsDebug(class AHUD* HUD, float YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.DisplayWheelsDebug");

	struct
	{
		class AHUD*                    HUD;
		float                          YL;
	} params;
	params.HUD = HUD;
	params.YL = YL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.DisplayDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm, CPF_OutParm)
// float                          out_YPos                       (CPF_Parm, CPF_OutParm)

void ASVehicle::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.DisplayDebug");

	struct
	{
		class AHUD*                    HUD;
		float                          out_YL;
		float                          out_YPos;
	} params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.SVehicle.PostTeleport
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class ATeleporter*             OutTeleporter                  (CPF_Parm)

void ASVehicle::PostTeleport(class ATeleporter* OutTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.PostTeleport");

	struct
	{
		class ATeleporter*             OutTeleporter;
	} params;
	params.OutTeleporter = OutTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.SuspensionHeavyShift
// (FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// float                          Delta                          (CPF_Parm)

void ASVehicle::SuspensionHeavyShift(float Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.SuspensionHeavyShift");

	struct
	{
		float                          Delta;
	} params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.RigidBodyCollision
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UPrimitiveComponent*     HitComponent                   (CPF_Parm, CPF_EditInline)
// class UPrimitiveComponent*     OtherComponent                 (CPF_Parm, CPF_EditInline)
// struct FCollisionImpactData    RigidCollisionData             (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            ContactIndex                   (CPF_Parm)

void ASVehicle::RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.RigidBodyCollision");

	struct
	{
		class UPrimitiveComponent*     HitComponent;
		class UPrimitiveComponent*     OtherComponent;
		struct FCollisionImpactData    RigidCollisionData;
		int                            ContactIndex;
	} params;
	params.HitComponent = HitComponent;
	params.OtherComponent = OtherComponent;
	params.ContactIndex = ContactIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RigidCollisionData != nullptr)
		*RigidCollisionData = params.RigidCollisionData;
}


// Function Engine.SVehicle.DrivingStatusChanged
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void ASVehicle::DrivingStatusChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.DrivingStatusChanged");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.VehiclePlayExitSound
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void ASVehicle::VehiclePlayExitSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.VehiclePlayExitSound");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.VehiclePlayEnterSound
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void ASVehicle::VehiclePlayEnterSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.VehiclePlayEnterSound");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.StopEngineSoundTimed
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void ASVehicle::StopEngineSoundTimed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StopEngineSoundTimed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.StopEngineSound
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void ASVehicle::StopEngineSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StopEngineSound");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.StartEngineSoundTimed
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void ASVehicle::StartEngineSoundTimed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StartEngineSoundTimed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.StartEngineSound
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void ASVehicle::StartEngineSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StartEngineSound");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.HasWheelsOnGround
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ASVehicle::HasWheelsOnGround()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.HasWheelsOnGround");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.TryToDrive
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ASVehicle::TryToDrive(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.TryToDrive");

	struct
	{
		class APawn*                   P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.GetDefaultCameraMode
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class APlayerController*       RequestedBy                    (CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName ASVehicle::GetDefaultCameraMode(class APlayerController* RequestedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.GetDefaultCameraMode");

	struct
	{
		class APlayerController*       RequestedBy;
		struct FName                   ReturnValue;
	} params;
	params.RequestedBy = RequestedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.CalcCamera
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// float                          fDeltaTime                     (CPF_Parm)
// struct FVector                 out_CamLoc                     (CPF_Parm, CPF_OutParm)
// struct FRotator                out_CamRot                     (CPF_Parm, CPF_OutParm)
// float                          out_FOV                        (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ASVehicle::CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.CalcCamera");

	struct
	{
		float                          fDeltaTime;
		struct FVector                 out_CamLoc;
		struct FRotator                out_CamRot;
		float                          out_FOV;
		bool                           ReturnValue;
	} params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_CamLoc != nullptr)
		*out_CamLoc = params.out_CamLoc;
	if (out_CamRot != nullptr)
		*out_CamRot = params.out_CamRot;
	if (out_FOV != nullptr)
		*out_FOV = params.out_FOV;

	return params.ReturnValue;
}


// Function Engine.SVehicle.Died
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Killer                         (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ASVehicle::Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.Died");

	struct
	{
		class AController*             Killer;
		class UClass*                  DamageType;
		struct FVector                 HitLocation;
		bool                           ReturnValue;
	} params;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.AddVelocity
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 NewVelocity                    (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)

void ASVehicle::AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.AddVelocity");

	struct
	{
		struct FVector                 NewVelocity;
		struct FVector                 HitLocation;
		class UClass*                  DamageType;
		struct FTraceHitInfo           HitInfo;
	} params;
	params.NewVelocity = NewVelocity;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.InitVehicleRagdoll
// (FUNC_Native, FUNC_Public)
// Parameters:
// class USkeletalMesh*           RagdollMesh                    (CPF_Parm)
// class UPhysicsAsset*           RagdollPhysAsset               (CPF_Parm)
// struct FVector                 ActorMove                      (CPF_Parm)
// bool                           bClearAnimTree                 (CPF_Parm)

void ASVehicle::InitVehicleRagdoll(class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, const struct FVector& ActorMove, bool bClearAnimTree)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.InitVehicleRagdoll");

	struct
	{
		class USkeletalMesh*           RagdollMesh;
		class UPhysicsAsset*           RagdollPhysAsset;
		struct FVector                 ActorMove;
		bool                           bClearAnimTree;
	} params;
	params.RagdollMesh = RagdollMesh;
	params.RagdollPhysAsset = RagdollPhysAsset;
	params.ActorMove = ActorMove;
	params.bClearAnimTree = bClearAnimTree;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.TakeRadiusDamage
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AController*             InstigatedBy                   (CPF_Parm)
// float                          BaseDamage                     (CPF_Parm)
// float                          DamageRadius                   (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// float                          Momentum                       (CPF_Parm)
// struct FVector                 HurtOrigin                     (CPF_Parm)
// bool                           bFullDamage                    (CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_Parm)
// float                          DamageFalloffExponent          (CPF_OptionalParm, CPF_Parm)

void ASVehicle::TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.TakeRadiusDamage");

	struct
	{
		class AController*             InstigatedBy;
		float                          BaseDamage;
		float                          DamageRadius;
		class UClass*                  DamageType;
		float                          Momentum;
		struct FVector                 HurtOrigin;
		bool                           bFullDamage;
		class AActor*                  DamageCauser;
		float                          DamageFalloffExponent;
	} params;
	params.InstigatedBy = InstigatedBy;
	params.BaseDamage = BaseDamage;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HurtOrigin = HurtOrigin;
	params.bFullDamage = bFullDamage;
	params.DamageCauser = DamageCauser;
	params.DamageFalloffExponent = DamageFalloffExponent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.StopVehicleSounds
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void ASVehicle::StopVehicleSounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.StopVehicleSounds");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.TurnOff
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void ASVehicle::TurnOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.TurnOff");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.Destroyed
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ASVehicle::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.PostInitAnimTree
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class USkeletalMeshComponent*  SkelComp                       (CPF_Parm, CPF_EditInline)

void ASVehicle::PostInitAnimTree(class USkeletalMeshComponent* SkelComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.PostInitAnimTree");

	struct
	{
		class USkeletalMeshComponent*  SkelComp;
	} params;
	params.SkelComp = SkelComp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ASVehicle::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.SetWheelCollision
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            WheelNum                       (CPF_Parm)
// bool                           bCollision                     (CPF_Parm)

void ASVehicle::SetWheelCollision(int WheelNum, bool bCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.SetWheelCollision");

	struct
	{
		int                            WheelNum;
		bool                           bCollision;
	} params;
	params.WheelNum = WheelNum;
	params.bCollision = bCollision;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.IsSleeping
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ASVehicle::IsSleeping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.IsSleeping");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SVehicle.AddTorque
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 Torque                         (CPF_Parm)

void ASVehicle::AddTorque(const struct FVector& Torque)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.AddTorque");

	struct
	{
		struct FVector                 Torque;
	} params;
	params.Torque = Torque;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.AddImpulse
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 Impulse                        (CPF_Parm)

void ASVehicle::AddImpulse(const struct FVector& Impulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.AddImpulse");

	struct
	{
		struct FVector                 Impulse;
	} params;
	params.Impulse = Impulse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.AddForce
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 Force                          (CPF_Parm)

void ASVehicle::AddForce(const struct FVector& Force)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.AddForce");

	struct
	{
		struct FVector                 Force;
	} params;
	params.Force = Force;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.OnToggleConstraintDrive
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_ToggleConstraintDrive* Action                         (CPF_Parm)

void ARB_ConstraintActor::OnToggleConstraintDrive(class USeqAct_ToggleConstraintDrive* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.OnToggleConstraintDrive");

	struct
	{
		class USeqAct_ToggleConstraintDrive* Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ARB_ConstraintActor::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.OnDestroy
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Destroy*         Action                         (CPF_Parm)

void ARB_ConstraintActor::OnDestroy(class USeqAct_Destroy* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.OnDestroy");

	struct
	{
		class USeqAct_Destroy*         Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.TermConstraint
// (FUNC_Final, FUNC_Native, FUNC_Public)

void ARB_ConstraintActor::TermConstraint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.TermConstraint");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.InitConstraint
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  Actor1                         (CPF_Parm)
// class AActor*                  Actor2                         (CPF_Parm)
// struct FName                   Actor1Bone                     (CPF_OptionalParm, CPF_Parm)
// struct FName                   Actor2Bone                     (CPF_OptionalParm, CPF_Parm)
// float                          BreakThreshold                 (CPF_OptionalParm, CPF_Parm)

void ARB_ConstraintActor::InitConstraint(class AActor* Actor1, class AActor* Actor2, const struct FName& Actor1Bone, const struct FName& Actor2Bone, float BreakThreshold)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.InitConstraint");

	struct
	{
		class AActor*                  Actor1;
		class AActor*                  Actor2;
		struct FName                   Actor1Bone;
		struct FName                   Actor2Bone;
		float                          BreakThreshold;
	} params;
	params.Actor1 = Actor1;
	params.Actor2 = Actor2;
	params.Actor1Bone = Actor1Bone;
	params.Actor2Bone = Actor2Bone;
	params.BreakThreshold = BreakThreshold;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintActor.SetDisableCollision
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           NewDisableCollision            (CPF_Parm)

void ARB_ConstraintActor::SetDisableCollision(bool NewDisableCollision)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintActor.SetDisableCollision");

	struct
	{
		bool                           NewDisableCollision;
	} params;
	params.NewDisableCollision = NewDisableCollision;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_LineImpulseActor.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void ARB_LineImpulseActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_LineImpulseActor.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_LineImpulseActor.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ARB_LineImpulseActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_LineImpulseActor.OnToggle");

	struct
	{
		class USeqAct_Toggle*          inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_LineImpulseActor.FireLineImpulse
// (FUNC_Final, FUNC_Native, FUNC_Public)

void ARB_LineImpulseActor::FireLineImpulse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_LineImpulseActor.FireLineImpulse");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_RadialImpulseActor.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void ARB_RadialImpulseActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialImpulseActor.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_RadialImpulseActor.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ARB_RadialImpulseActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialImpulseActor.OnToggle");

	struct
	{
		class USeqAct_Toggle*          inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Thruster.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ARB_Thruster::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Thruster.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WorldAttractor.OnSetWorldAttractorParam
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_SetWorldAttractorParam* Action                         (CPF_Parm)

void AWorldAttractor::OnSetWorldAttractorParam(class USeqAct_SetWorldAttractorParam* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WorldAttractor.OnSetWorldAttractorParam");

	struct
	{
		class USeqAct_SetWorldAttractorParam* Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_RadialImpulseComponent.FireImpulse
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 Origin                         (CPF_Parm)

void URB_RadialImpulseComponent::FireImpulse(const struct FVector& Origin)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialImpulseComponent.FireImpulse");

	struct
	{
		struct FVector                 Origin;
	} params;
	params.Origin = Origin;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Handle.GetOrientation
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FQuat                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FQuat URB_Handle::GetOrientation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.GetOrientation");

	struct
	{
		struct FQuat                   ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_Handle.SetOrientation
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FQuat                   NewOrientation                 (CPF_Const, CPF_Parm, CPF_OutParm)

void URB_Handle::SetOrientation(struct FQuat* NewOrientation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.SetOrientation");

	struct
	{
		struct FQuat                   NewOrientation;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewOrientation != nullptr)
		*NewOrientation = params.NewOrientation;
}


// Function Engine.RB_Handle.UpdateSmoothLocation
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 NewLocation                    (CPF_Const, CPF_Parm, CPF_OutParm)

void URB_Handle::UpdateSmoothLocation(struct FVector* NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.UpdateSmoothLocation");

	struct
	{
		struct FVector                 NewLocation;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewLocation != nullptr)
		*NewLocation = params.NewLocation;
}


// Function Engine.RB_Handle.SetSmoothLocation
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 NewLocation                    (CPF_Parm)
// float                          MoveTime                       (CPF_Parm)

void URB_Handle::SetSmoothLocation(const struct FVector& NewLocation, float MoveTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.SetSmoothLocation");

	struct
	{
		struct FVector                 NewLocation;
		float                          MoveTime;
	} params;
	params.NewLocation = NewLocation;
	params.MoveTime = MoveTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Handle.SetLocation
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 NewLocation                    (CPF_Parm)

void URB_Handle::SetLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.SetLocation");

	struct
	{
		struct FVector                 NewLocation;
	} params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Handle.ReleaseComponent
// (FUNC_Native, FUNC_Public)

void URB_Handle::ReleaseComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.ReleaseComponent");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Handle.GrabComponent
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UPrimitiveComponent*     Component                      (CPF_Parm, CPF_EditInline)
// struct FName                   InBoneName                     (CPF_Parm)
// struct FVector                 GrabLocation                   (CPF_Parm)
// bool                           bConstrainRotation             (CPF_Parm)

void URB_Handle::GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Handle.GrabComponent");

	struct
	{
		class UPrimitiveComponent*     Component;
		struct FName                   InBoneName;
		struct FVector                 GrabLocation;
		bool                           bConstrainRotation;
	} params;
	params.Component = Component;
	params.InBoneName = InBoneName;
	params.GrabLocation = GrabLocation;
	params.bConstrainRotation = bConstrainRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Spring.Clear
// (FUNC_Native, FUNC_Public)

void URB_Spring::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Spring.Clear");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_Spring.SetComponents
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UPrimitiveComponent*     InComponent1                   (CPF_Parm, CPF_EditInline)
// struct FName                   InBoneName1                    (CPF_Parm)
// struct FVector                 Position1                      (CPF_Parm)
// class UPrimitiveComponent*     InComponent2                   (CPF_Parm, CPF_EditInline)
// struct FName                   InBoneName2                    (CPF_Parm)
// struct FVector                 Position2                      (CPF_Parm)

void URB_Spring::SetComponents(class UPrimitiveComponent* InComponent1, const struct FName& InBoneName1, const struct FVector& Position1, class UPrimitiveComponent* InComponent2, const struct FName& InBoneName2, const struct FVector& Position2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_Spring.SetComponents");

	struct
	{
		class UPrimitiveComponent*     InComponent1;
		struct FName                   InBoneName1;
		struct FVector                 Position1;
		class UPrimitiveComponent*     InComponent2;
		struct FName                   InBoneName2;
		struct FVector                 Position2;
	} params;
	params.InComponent1 = InComponent1;
	params.InBoneName1 = InBoneName1;
	params.Position1 = Position1;
	params.InComponent2 = InComponent2;
	params.InBoneName2 = InBoneName2;
	params.Position2 = Position2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicalMaterial.GetPhysicalMaterialProperty
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UClass*                  DesiredClass                   (CPF_Parm)
// class UPhysicalMaterialPropertyBase* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_CoerceParm)

class UPhysicalMaterialPropertyBase* UPhysicalMaterial::GetPhysicalMaterialProperty(class UClass* DesiredClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalMaterial.GetPhysicalMaterialProperty");

	struct
	{
		class UClass*                  DesiredClass;
		class UPhysicalMaterialPropertyBase* ReturnValue;
	} params;
	params.DesiredClass = DesiredClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicalMaterial.FindFractureSounds
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class USoundCue*               OutSoundExplosion              (CPF_Parm, CPF_OutParm)
// class USoundCue*               OutSoundSingle                 (CPF_Parm, CPF_OutParm)

void UPhysicalMaterial::FindFractureSounds(class USoundCue** OutSoundExplosion, class USoundCue** OutSoundSingle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalMaterial.FindFractureSounds");

	struct
	{
		class USoundCue*               OutSoundExplosion;
		class USoundCue*               OutSoundSingle;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSoundExplosion != nullptr)
		*OutSoundExplosion = params.OutSoundExplosion;
	if (OutSoundSingle != nullptr)
		*OutSoundSingle = params.OutSoundSingle;
}


// Function Engine.PhysicalMaterial.FindPhysEffectInfo
// (FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class EPhysEffectType> Type                           (CPF_Parm)
// struct FPhysEffectInfo         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FPhysEffectInfo UPhysicalMaterial::FindPhysEffectInfo(TEnumAsByte<enum class EPhysEffectType> Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicalMaterial.FindPhysEffectInfo");

	struct
	{
		TEnumAsByte<enum class EPhysEffectType> Type;
		struct FPhysEffectInfo         ReturnValue;
	} params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsAsset.FindBodyIndex
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   BodyName                       (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UPhysicsAsset::FindBodyIndex(const struct FName& BodyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAsset.FindBodyIndex");

	struct
	{
		struct FName                   BodyName;
		int                            ReturnValue;
	} params;
	params.BodyName = BodyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsAssetInstance.FindConstraintInstance
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ConName                        (CPF_Parm)
// class UPhysicsAsset*           InAsset                        (CPF_Parm)
// class URB_ConstraintInstance*  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class URB_ConstraintInstance* UPhysicsAssetInstance::FindConstraintInstance(const struct FName& ConName, class UPhysicsAsset* InAsset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.FindConstraintInstance");

	struct
	{
		struct FName                   ConName;
		class UPhysicsAsset*           InAsset;
		class URB_ConstraintInstance*  ReturnValue;
	} params;
	params.ConName = ConName;
	params.InAsset = InAsset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsAssetInstance.FindBodyInstance
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   BodyName                       (CPF_Parm)
// class UPhysicsAsset*           InAsset                        (CPF_Parm)
// class URB_BodyInstance*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class URB_BodyInstance* UPhysicsAssetInstance::FindBodyInstance(const struct FName& BodyName, class UPhysicsAsset* InAsset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.FindBodyInstance");

	struct
	{
		struct FName                   BodyName;
		class UPhysicsAsset*           InAsset;
		class URB_BodyInstance*        ReturnValue;
	} params;
	params.BodyName = BodyName;
	params.InAsset = InAsset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewFixed                      (CPF_Parm)
// class USkeletalMeshComponent*  SkelMesh                       (CPF_Parm, CPF_EditInline)

void UPhysicsAssetInstance::SetFullAnimWeightBonesFixed(bool bNewFixed, class USkeletalMeshComponent* SkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetFullAnimWeightBonesFixed");

	struct
	{
		bool                           bNewFixed;
		class USkeletalMeshComponent*  SkelMesh;
	} params;
	params.bNewFixed = bNewFixed;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetFullAnimWeightBlockRigidBody
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewBlockRigidBody             (CPF_Parm)
// class USkeletalMeshComponent*  SkelMesh                       (CPF_Parm, CPF_EditInline)

void UPhysicsAssetInstance::SetFullAnimWeightBlockRigidBody(bool bNewBlockRigidBody, class USkeletalMeshComponent* SkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetFullAnimWeightBlockRigidBody");

	struct
	{
		bool                           bNewBlockRigidBody;
		class USkeletalMeshComponent*  SkelMesh;
	} params;
	params.bNewBlockRigidBody = bNewBlockRigidBody;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewBlockRigidBody             (CPF_Parm)
// TArray<struct FName>           BoneNames                      (CPF_Parm, CPF_NeedCtorLink)
// class USkeletalMeshComponent*  SkelMesh                       (CPF_Parm, CPF_EditInline)

void UPhysicsAssetInstance::SetNamedBodiesBlockRigidBody(bool bNewBlockRigidBody, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedBodiesBlockRigidBody");

	struct
	{
		bool                           bNewBlockRigidBody;
		TArray<struct FName>           BoneNames;
		class USkeletalMeshComponent*  SkelMesh;
	} params;
	params.bNewBlockRigidBody = bNewBlockRigidBody;
	params.BoneNames = BoneNames;
	params.SkelMesh = SkelMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetNamedRBBoneSprings
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bEnable                        (CPF_Parm)
// TArray<struct FName>           BoneNames                      (CPF_Parm, CPF_NeedCtorLink)
// float                          InBoneLinearSpring             (CPF_Parm)
// float                          InBoneAngularSpring            (CPF_Parm)
// class USkeletalMeshComponent*  SkelMeshComp                   (CPF_Parm, CPF_EditInline)

void UPhysicsAssetInstance::SetNamedRBBoneSprings(bool bEnable, TArray<struct FName> BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedRBBoneSprings");

	struct
	{
		bool                           bEnable;
		TArray<struct FName>           BoneNames;
		float                          InBoneLinearSpring;
		float                          InBoneAngularSpring;
		class USkeletalMeshComponent*  SkelMeshComp;
	} params;
	params.bEnable = bEnable;
	params.BoneNames = BoneNames;
	params.InBoneLinearSpring = InBoneLinearSpring;
	params.InBoneAngularSpring = InBoneAngularSpring;
	params.SkelMeshComp = SkelMeshComp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularVelocityDrive
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bEnableSwingDrive              (CPF_Parm)
// bool                           bEnableTwistDrive              (CPF_Parm)
// TArray<struct FName>           BoneNames                      (CPF_Parm, CPF_NeedCtorLink)
// class USkeletalMeshComponent*  SkelMeshComp                   (CPF_Parm, CPF_EditInline)
// bool                           bSetOtherBodiesToComplement    (CPF_OptionalParm, CPF_Parm)

void UPhysicsAssetInstance::SetNamedMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMeshComp, bool bSetOtherBodiesToComplement)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularVelocityDrive");

	struct
	{
		bool                           bEnableSwingDrive;
		bool                           bEnableTwistDrive;
		TArray<struct FName>           BoneNames;
		class USkeletalMeshComponent*  SkelMeshComp;
		bool                           bSetOtherBodiesToComplement;
	} params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.BoneNames = BoneNames;
	params.SkelMeshComp = SkelMeshComp;
	params.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bEnableSwingDrive              (CPF_Parm)
// bool                           bEnableTwistDrive              (CPF_Parm)
// TArray<struct FName>           BoneNames                      (CPF_Parm, CPF_NeedCtorLink)
// class USkeletalMeshComponent*  SkelMeshComp                   (CPF_Parm, CPF_EditInline)
// bool                           bSetOtherBodiesToComplement    (CPF_OptionalParm, CPF_Parm)

void UPhysicsAssetInstance::SetNamedMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMeshComp, bool bSetOtherBodiesToComplement)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedMotorsAngularPositionDrive");

	struct
	{
		bool                           bEnableSwingDrive;
		bool                           bEnableTwistDrive;
		TArray<struct FName>           BoneNames;
		class USkeletalMeshComponent*  SkelMeshComp;
		bool                           bSetOtherBodiesToComplement;
	} params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.BoneNames = BoneNames;
	params.SkelMeshComp = SkelMeshComp;
	params.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          InSpring                       (CPF_Parm)
// float                          InDamping                      (CPF_Parm)
// float                          InForceLimit                   (CPF_Parm)
// class USkeletalMeshComponent*  SkelMesh                       (CPF_OptionalParm, CPF_Parm, CPF_EditInline)
// bool                           bSkipFullAnimWeightBodies      (CPF_OptionalParm, CPF_Parm)

void UPhysicsAssetInstance::SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, class USkeletalMeshComponent* SkelMesh, bool bSkipFullAnimWeightBodies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllMotorsAngularDriveParams");

	struct
	{
		float                          InSpring;
		float                          InDamping;
		float                          InForceLimit;
		class USkeletalMeshComponent*  SkelMesh;
		bool                           bSkipFullAnimWeightBodies;
	} params;
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;
	params.SkelMesh = SkelMesh;
	params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularVelocityDrive
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bEnableSwingDrive              (CPF_Parm)
// bool                           bEnableTwistDrive              (CPF_Parm)
// class USkeletalMeshComponent*  SkelMeshComp                   (CPF_Parm, CPF_EditInline)
// bool                           bSkipFullAnimWeightBodies      (CPF_OptionalParm, CPF_Parm)

void UPhysicsAssetInstance::SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, class USkeletalMeshComponent* SkelMeshComp, bool bSkipFullAnimWeightBodies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllMotorsAngularVelocityDrive");

	struct
	{
		bool                           bEnableSwingDrive;
		bool                           bEnableTwistDrive;
		class USkeletalMeshComponent*  SkelMeshComp;
		bool                           bSkipFullAnimWeightBodies;
	} params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.SkelMeshComp = SkelMeshComp;
	params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bEnableSwingDrive              (CPF_Parm)
// bool                           bEnableTwistDrive              (CPF_Parm)
// class USkeletalMeshComponent*  SkelMesh                       (CPF_OptionalParm, CPF_Parm, CPF_EditInline)
// bool                           bSkipFullAnimWeightBodies      (CPF_OptionalParm, CPF_Parm)

void UPhysicsAssetInstance::SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, class USkeletalMeshComponent* SkelMesh, bool bSkipFullAnimWeightBodies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllMotorsAngularPositionDrive");

	struct
	{
		bool                           bEnableSwingDrive;
		bool                           bEnableTwistDrive;
		class USkeletalMeshComponent*  SkelMesh;
		bool                           bSkipFullAnimWeightBodies;
	} params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;
	params.SkelMesh = SkelMesh;
	params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.ForceAllBodiesBelowUnfixed
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   InBoneName                     (CPF_Const, CPF_Parm, CPF_OutParm)
// class UPhysicsAsset*           InAsset                        (CPF_Parm)
// class USkeletalMeshComponent*  InSkelMesh                     (CPF_Parm, CPF_EditInline)
// bool                           InbInstanceAlwaysFullAnimWeight (CPF_Parm)

void UPhysicsAssetInstance::ForceAllBodiesBelowUnfixed(class UPhysicsAsset* InAsset, class USkeletalMeshComponent* InSkelMesh, bool InbInstanceAlwaysFullAnimWeight, struct FName* InBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.ForceAllBodiesBelowUnfixed");

	struct
	{
		struct FName                   InBoneName;
		class UPhysicsAsset*           InAsset;
		class USkeletalMeshComponent*  InSkelMesh;
		bool                           InbInstanceAlwaysFullAnimWeight;
	} params;
	params.InAsset = InAsset;
	params.InSkelMesh = InSkelMesh;
	params.InbInstanceAlwaysFullAnimWeight = InbInstanceAlwaysFullAnimWeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InBoneName != nullptr)
		*InBoneName = params.InBoneName;
}


// Function Engine.PhysicsAssetInstance.SetNamedBodiesFixed
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bNewFixed                      (CPF_Parm)
// TArray<struct FName>           BoneNames                      (CPF_Parm, CPF_NeedCtorLink)
// class USkeletalMeshComponent*  SkelMesh                       (CPF_Parm, CPF_EditInline)
// bool                           bSetOtherBodiesToComplement    (CPF_OptionalParm, CPF_Parm)
// bool                           bSkipFullAnimWeightBodies      (CPF_OptionalParm, CPF_Parm)

void UPhysicsAssetInstance::SetNamedBodiesFixed(bool bNewFixed, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh, bool bSetOtherBodiesToComplement, bool bSkipFullAnimWeightBodies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetNamedBodiesFixed");

	struct
	{
		bool                           bNewFixed;
		TArray<struct FName>           BoneNames;
		class USkeletalMeshComponent*  SkelMesh;
		bool                           bSetOtherBodiesToComplement;
		bool                           bSkipFullAnimWeightBodies;
	} params;
	params.bNewFixed = bNewFixed;
	params.BoneNames = BoneNames;
	params.SkelMesh = SkelMesh;
	params.bSetOtherBodiesToComplement = bSetOtherBodiesToComplement;
	params.bSkipFullAnimWeightBodies = bSkipFullAnimWeightBodies;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetAllBodiesFixed
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewFixed                      (CPF_Parm)

void UPhysicsAssetInstance::SetAllBodiesFixed(bool bNewFixed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAllBodiesFixed");

	struct
	{
		bool                           bNewFixed;
	} params;
	params.bNewFixed = bNewFixed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.GetTotalMassBelowBone
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InBoneName                     (CPF_Parm)
// class UPhysicsAsset*           InAsset                        (CPF_Parm)
// class USkeletalMesh*           InSkelMesh                     (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UPhysicsAssetInstance::GetTotalMassBelowBone(const struct FName& InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.GetTotalMassBelowBone");

	struct
	{
		struct FName                   InBoneName;
		class UPhysicsAsset*           InAsset;
		class USkeletalMesh*           InSkelMesh;
		float                          ReturnValue;
	} params;
	params.InBoneName = InBoneName;
	params.InAsset = InAsset;
	params.InSkelMesh = InSkelMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PhysicsAssetInstance.SetAngularDriveScale
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          InAngularSpringScale           (CPF_Parm)
// float                          InAngularDampingScale          (CPF_Parm)
// float                          InAngularForceLimitScale       (CPF_Parm)

void UPhysicsAssetInstance::SetAngularDriveScale(float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetAngularDriveScale");

	struct
	{
		float                          InAngularSpringScale;
		float                          InAngularDampingScale;
		float                          InAngularForceLimitScale;
	} params;
	params.InAngularSpringScale = InAngularSpringScale;
	params.InAngularDampingScale = InAngularDampingScale;
	params.InAngularForceLimitScale = InAngularForceLimitScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsAssetInstance.SetLinearDriveScale
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          InLinearSpringScale            (CPF_Parm)
// float                          InLinearDampingScale           (CPF_Parm)
// float                          InLinearForceLimitScale        (CPF_Parm)

void UPhysicsAssetInstance::SetLinearDriveScale(float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsAssetInstance.SetLinearDriveScale");

	struct
	{
		float                          InLinearSpringScale;
		float                          InLinearDampingScale;
		float                          InLinearForceLimitScale;
	} params;
	params.InLinearSpringScale = InLinearSpringScale;
	params.InLinearDampingScale = InLinearDampingScale;
	params.InLinearForceLimitScale = InLinearForceLimitScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.UpdateDampingProperties
// (FUNC_Final, FUNC_Native, FUNC_Public)

void URB_BodyInstance::UpdateDampingProperties()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.UpdateDampingProperties");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.UpdateMassProperties
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class URB_BodySetup*           Setup                          (CPF_Parm)

void URB_BodyInstance::UpdateMassProperties(class URB_BodySetup* Setup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.UpdateMassProperties");

	struct
	{
		class URB_BodySetup*           Setup;
	} params;
	params.Setup = Setup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.SetContactReportForceThreshold
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          Threshold                      (CPF_Parm)

void URB_BodyInstance::SetContactReportForceThreshold(float Threshold)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetContactReportForceThreshold");

	struct
	{
		float                          Threshold;
	} params;
	params.Threshold = Threshold;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.EnableCollisionResponse
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bEnableResponse                (CPF_Parm)

void URB_BodyInstance::EnableCollisionResponse(bool bEnableResponse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.EnableCollisionResponse");

	struct
	{
		bool                           bEnableResponse;
	} params;
	params.bEnableResponse = bEnableResponse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.SetPhysMaterialOverride
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UPhysicalMaterial*       NewPhysMaterial                (CPF_Parm)

void URB_BodyInstance::SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetPhysMaterialOverride");

	struct
	{
		class UPhysicalMaterial*       NewPhysMaterial;
	} params;
	params.NewPhysMaterial = NewPhysMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.SetBlockRigidBody
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewBlockRigidBody             (CPF_Parm)

void URB_BodyInstance::SetBlockRigidBody(bool bNewBlockRigidBody)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetBlockRigidBody");

	struct
	{
		bool                           bNewBlockRigidBody;
	} params;
	params.bNewBlockRigidBody = bNewBlockRigidBody;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.SetBoneSpringTarget
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FMatrix                 InBoneTarget                   (CPF_Const, CPF_Parm, CPF_OutParm)
// bool                           bTeleport                      (CPF_Parm)

void URB_BodyInstance::SetBoneSpringTarget(bool bTeleport, struct FMatrix* InBoneTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetBoneSpringTarget");

	struct
	{
		struct FMatrix                 InBoneTarget;
		bool                           bTeleport;
	} params;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InBoneTarget != nullptr)
		*InBoneTarget = params.InBoneTarget;
}


// Function Engine.RB_BodyInstance.SetBoneSpringParams
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          InLinearSpring                 (CPF_Parm)
// float                          InLinearDamping                (CPF_Parm)
// float                          InAngularSpring                (CPF_Parm)
// float                          InAngularDamping               (CPF_Parm)

void URB_BodyInstance::SetBoneSpringParams(float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetBoneSpringParams");

	struct
	{
		float                          InLinearSpring;
		float                          InLinearDamping;
		float                          InAngularSpring;
		float                          InAngularDamping;
	} params;
	params.InLinearSpring = InLinearSpring;
	params.InLinearDamping = InLinearDamping;
	params.InAngularSpring = InAngularSpring;
	params.InAngularDamping = InAngularDamping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.EnableBoneSpring
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// bool                           bInEnableLinear                (CPF_Parm)
// bool                           bInEnableAngular               (CPF_Parm)
// struct FMatrix                 InBoneTarget                   (CPF_Const, CPF_Parm, CPF_OutParm)

void URB_BodyInstance::EnableBoneSpring(bool bInEnableLinear, bool bInEnableAngular, struct FMatrix* InBoneTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.EnableBoneSpring");

	struct
	{
		bool                           bInEnableLinear;
		bool                           bInEnableAngular;
		struct FMatrix                 InBoneTarget;
	} params;
	params.bInEnableLinear = bInEnableLinear;
	params.bInEnableAngular = bInEnableAngular;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InBoneTarget != nullptr)
		*InBoneTarget = params.InBoneTarget;
}


// Function Engine.RB_BodyInstance.GetUnrealWorldVelocityAtPoint
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 Point                          (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector URB_BodyInstance::GetUnrealWorldVelocityAtPoint(const struct FVector& Point)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetUnrealWorldVelocityAtPoint");

	struct
	{
		struct FVector                 Point;
		struct FVector                 ReturnValue;
	} params;
	params.Point = Point;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector URB_BodyInstance::GetUnrealWorldAngularVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetUnrealWorldAngularVelocity");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.GetUnrealWorldVelocity
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector URB_BodyInstance::GetUnrealWorldVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetUnrealWorldVelocity");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.GetUnrealWorldTM
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FMatrix                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FMatrix URB_BodyInstance::GetUnrealWorldTM()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetUnrealWorldTM");

	struct
	{
		struct FMatrix                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.GetPhysicsAssetInstance
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UPhysicsAssetInstance*   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UPhysicsAssetInstance* URB_BodyInstance::GetPhysicsAssetInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetPhysicsAssetInstance");

	struct
	{
		class UPhysicsAssetInstance*   ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.IsValidBodyInstance
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool URB_BodyInstance::IsValidBodyInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.IsValidBodyInstance");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.IsFixed
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool URB_BodyInstance::IsFixed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.IsFixed");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_BodyInstance.SetFixed
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewFixed                      (CPF_Parm)

void URB_BodyInstance::SetFixed(bool bNewFixed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.SetFixed");

	struct
	{
		bool                           bNewFixed;
	} params;
	params.bNewFixed = bNewFixed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_BodyInstance.GetBodyMass
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float URB_BodyInstance::GetBodyMass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_BodyInstance.GetBodyMass");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_ConstraintInstance.MoveKinActorTransform
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FMatrix                 NewTM                          (CPF_Parm, CPF_OutParm)

void URB_ConstraintInstance::MoveKinActorTransform(struct FMatrix* NewTM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.MoveKinActorTransform");

	struct
	{
		struct FMatrix                 NewTM;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewTM != nullptr)
		*NewTM = params.NewTM;
}


// Function Engine.RB_ConstraintInstance.SetLinearLimitSize
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          NewLimitSize                   (CPF_Parm)

void URB_ConstraintInstance::SetLinearLimitSize(float NewLimitSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearLimitSize");

	struct
	{
		float                          NewLimitSize;
	} params;
	params.NewLimitSize = NewLimitSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularDOFLimitScale
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          InSwing1LimitScale             (CPF_Parm)
// float                          InSwing2LimitScale             (CPF_Parm)
// float                          InTwistLimitScale              (CPF_Parm)
// class URB_ConstraintSetup*     InSetup                        (CPF_Parm)

void URB_ConstraintInstance::SetAngularDOFLimitScale(float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularDOFLimitScale");

	struct
	{
		float                          InSwing1LimitScale;
		float                          InSwing2LimitScale;
		float                          InTwistLimitScale;
		class URB_ConstraintSetup*     InSetup;
	} params;
	params.InSwing1LimitScale = InSwing1LimitScale;
	params.InSwing2LimitScale = InSwing2LimitScale;
	params.InTwistLimitScale = InTwistLimitScale;
	params.InSetup = InSetup;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularDriveParams
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          InSpring                       (CPF_Parm)
// float                          InDamping                      (CPF_Parm)
// float                          InForceLimit                   (CPF_Parm)

void URB_ConstraintInstance::SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularDriveParams");

	struct
	{
		float                          InSpring;
		float                          InDamping;
		float                          InForceLimit;
	} params;
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularVelocityTarget
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 InVelTarget                    (CPF_Parm)

void URB_ConstraintInstance::SetAngularVelocityTarget(const struct FVector& InVelTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularVelocityTarget");

	struct
	{
		struct FVector                 InVelTarget;
	} params;
	params.InVelTarget = InVelTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularPositionTarget
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FQuat                   InPosTarget                    (CPF_Const, CPF_Parm, CPF_OutParm)

void URB_ConstraintInstance::SetAngularPositionTarget(struct FQuat* InPosTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularPositionTarget");

	struct
	{
		struct FQuat                   InPosTarget;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InPosTarget != nullptr)
		*InPosTarget = params.InPosTarget;
}


// Function Engine.RB_ConstraintInstance.SetLinearDriveParams
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          InSpring                       (CPF_Parm)
// float                          InDamping                      (CPF_Parm)
// float                          InForceLimit                   (CPF_Parm)

void URB_ConstraintInstance::SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearDriveParams");

	struct
	{
		float                          InSpring;
		float                          InDamping;
		float                          InForceLimit;
	} params;
	params.InSpring = InSpring;
	params.InDamping = InDamping;
	params.InForceLimit = InForceLimit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetLinearVelocityTarget
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 InVelTarget                    (CPF_Parm)

void URB_ConstraintInstance::SetLinearVelocityTarget(const struct FVector& InVelTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearVelocityTarget");

	struct
	{
		struct FVector                 InVelTarget;
	} params;
	params.InVelTarget = InVelTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetLinearPositionTarget
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 InPosTarget                    (CPF_Parm)

void URB_ConstraintInstance::SetLinearPositionTarget(const struct FVector& InPosTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearPositionTarget");

	struct
	{
		struct FVector                 InPosTarget;
	} params;
	params.InPosTarget = InPosTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularVelocityDrive
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bEnableSwingDrive              (CPF_Parm)
// bool                           bEnableTwistDrive              (CPF_Parm)

void URB_ConstraintInstance::SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularVelocityDrive");

	struct
	{
		bool                           bEnableSwingDrive;
		bool                           bEnableTwistDrive;
	} params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetAngularPositionDrive
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bEnableSwingDrive              (CPF_Parm)
// bool                           bEnableTwistDrive              (CPF_Parm)

void URB_ConstraintInstance::SetAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetAngularPositionDrive");

	struct
	{
		bool                           bEnableSwingDrive;
		bool                           bEnableTwistDrive;
	} params;
	params.bEnableSwingDrive = bEnableSwingDrive;
	params.bEnableTwistDrive = bEnableTwistDrive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetLinearVelocityDrive
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bEnableXDrive                  (CPF_Parm)
// bool                           bEnableYDrive                  (CPF_Parm)
// bool                           bEnableZDrive                  (CPF_Parm)

void URB_ConstraintInstance::SetLinearVelocityDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearVelocityDrive");

	struct
	{
		bool                           bEnableXDrive;
		bool                           bEnableYDrive;
		bool                           bEnableZDrive;
	} params;
	params.bEnableXDrive = bEnableXDrive;
	params.bEnableYDrive = bEnableYDrive;
	params.bEnableZDrive = bEnableZDrive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.SetLinearPositionDrive
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bEnableXDrive                  (CPF_Parm)
// bool                           bEnableYDrive                  (CPF_Parm)
// bool                           bEnableZDrive                  (CPF_Parm)

void URB_ConstraintInstance::SetLinearPositionDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.SetLinearPositionDrive");

	struct
	{
		bool                           bEnableXDrive;
		bool                           bEnableYDrive;
		bool                           bEnableZDrive;
	} params;
	params.bEnableXDrive = bEnableXDrive;
	params.bEnableYDrive = bEnableYDrive;
	params.bEnableZDrive = bEnableZDrive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.GetConstraintLocation
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector URB_ConstraintInstance::GetConstraintLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.GetConstraintLocation");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_ConstraintInstance.GetPhysicsAssetInstance
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UPhysicsAssetInstance*   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UPhysicsAssetInstance* URB_ConstraintInstance::GetPhysicsAssetInstance()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.GetPhysicsAssetInstance");

	struct
	{
		class UPhysicsAssetInstance*   ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RB_ConstraintInstance.TermConstraint
// (FUNC_Final, FUNC_Native, FUNC_Public)

void URB_ConstraintInstance::TermConstraint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.TermConstraint");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_ConstraintInstance.InitConstraint
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UPrimitiveComponent*     PrimComp1                      (CPF_Parm, CPF_EditInline)
// class UPrimitiveComponent*     PrimComp2                      (CPF_Parm, CPF_EditInline)
// class URB_ConstraintSetup*     Setup                          (CPF_Parm)
// float                          Scale                          (CPF_Parm)
// class AActor*                  InOwner                        (CPF_Parm)
// class UPrimitiveComponent*     InPrimComp                     (CPF_Parm, CPF_EditInline)
// bool                           bMakeKinForBody1               (CPF_Parm)

void URB_ConstraintInstance::InitConstraint(class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* InOwner, class UPrimitiveComponent* InPrimComp, bool bMakeKinForBody1)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_ConstraintInstance.InitConstraint");

	struct
	{
		class UPrimitiveComponent*     PrimComp1;
		class UPrimitiveComponent*     PrimComp2;
		class URB_ConstraintSetup*     Setup;
		float                          Scale;
		class AActor*                  InOwner;
		class UPrimitiveComponent*     InPrimComp;
		bool                           bMakeKinForBody1;
	} params;
	params.PrimComp1 = PrimComp1;
	params.PrimComp2 = PrimComp2;
	params.Setup = Setup;
	params.Scale = Scale;
	params.InOwner = InOwner;
	params.InPrimComp = InPrimComp;
	params.bMakeKinForBody1 = bMakeKinForBody1;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxGenericForceFieldBrush.StopsProjectile
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AActor*                  P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ANxGenericForceFieldBrush::StopsProjectile(class AActor* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxGenericForceFieldBrush.StopsProjectile");

	struct
	{
		class AActor*                  P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NxGenericForceFieldBrush.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ANxGenericForceFieldBrush::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxGenericForceFieldBrush.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxForceField.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ANxForceField::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxForceField.OnToggle");

	struct
	{
		class USeqAct_Toggle*          inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxForceField.DoInitRBPhys
// (FUNC_Native, FUNC_Public)

void ANxForceField::DoInitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxForceField.DoInitRBPhys");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxCylindricalForceFieldCapsule.DoInitRBPhys
// (FUNC_Native, FUNC_Public)

void ANxCylindricalForceFieldCapsule::DoInitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxCylindricalForceFieldCapsule.DoInitRBPhys");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxForceFieldGeneric.DoInitRBPhys
// (FUNC_Native, FUNC_Public)

void ANxForceFieldGeneric::DoInitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldGeneric.DoInitRBPhys");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxForceFieldRadial.DoInitRBPhys
// (FUNC_Native, FUNC_Public)

void ANxForceFieldRadial::DoInitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldRadial.DoInitRBPhys");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxForceFieldTornado.DoInitRBPhys
// (FUNC_Native, FUNC_Public)

void ANxForceFieldTornado::DoInitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldTornado.DoInitRBPhys");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxGenericForceFieldBox.DoInitRBPhys
// (FUNC_Native, FUNC_Public)

void ANxGenericForceFieldBox::DoInitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxGenericForceFieldBox.DoInitRBPhys");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxForceFieldSpawnable.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ANxForceFieldSpawnable::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldSpawnable.OnToggle");

	struct
	{
		class USeqAct_Toggle*          inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_CylindricalForceActor.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ARB_CylindricalForceActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_CylindricalForceActor.OnToggle");

	struct
	{
		class USeqAct_Toggle*          inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.RB_RadialForceActor.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ARB_RadialForceActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RB_RadialForceActor.OnToggle");

	struct
	{
		class USeqAct_Toggle*          inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NxForceFieldComponent.DoInitRBPhys
// (FUNC_Native, FUNC_Public)

void UNxForceFieldComponent::DoInitRBPhys()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NxForceFieldComponent.DoInitRBPhys");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShape.GetDrawComponent
// (FUNC_Event, FUNC_Public)
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UPrimitiveComponent* UForceFieldShape::GetDrawComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShape.GetDrawComponent");

	struct
	{
		class UPrimitiveComponent*     ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFieldShape.FillByCylinder
// (FUNC_Event, FUNC_Public)
// Parameters:
// float                          BottomRadius                   (CPF_Parm)
// float                          TopRadius                      (CPF_Parm)
// float                          Height                         (CPF_Parm)
// float                          HeightOffset                   (CPF_Parm)

void UForceFieldShape::FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShape.FillByCylinder");

	struct
	{
		float                          BottomRadius;
		float                          TopRadius;
		float                          Height;
		float                          HeightOffset;
	} params;
	params.BottomRadius = BottomRadius;
	params.TopRadius = TopRadius;
	params.Height = Height;
	params.HeightOffset = HeightOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShape.FillByCapsule
// (FUNC_Event, FUNC_Public)
// Parameters:
// float                          Height                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)

void UForceFieldShape::FillByCapsule(float Height, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShape.FillByCapsule");

	struct
	{
		float                          Height;
		float                          Radius;
	} params;
	params.Height = Height;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShape.FillByBox
// (FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 Dimension                      (CPF_Parm)

void UForceFieldShape::FillByBox(const struct FVector& Dimension)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShape.FillByBox");

	struct
	{
		struct FVector                 Dimension;
	} params;
	params.Dimension = Dimension;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShape.FillBySphere
// (FUNC_Event, FUNC_Public)
// Parameters:
// float                          Radius                         (CPF_Parm)

void UForceFieldShape::FillBySphere(float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShape.FillBySphere");

	struct
	{
		float                          Radius;
	} params;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeBox.GetDrawComponent
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UPrimitiveComponent* UForceFieldShapeBox::GetDrawComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.GetDrawComponent");

	struct
	{
		class UPrimitiveComponent*     ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFieldShapeBox.FillByCylinder
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          BottomRadius                   (CPF_Parm)
// float                          TopRadius                      (CPF_Parm)
// float                          Height                         (CPF_Parm)
// float                          HeightOffset                   (CPF_Parm)

void UForceFieldShapeBox::FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.FillByCylinder");

	struct
	{
		float                          BottomRadius;
		float                          TopRadius;
		float                          Height;
		float                          HeightOffset;
	} params;
	params.BottomRadius = BottomRadius;
	params.TopRadius = TopRadius;
	params.Height = Height;
	params.HeightOffset = HeightOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeBox.FillByCapsule
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          Height                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)

void UForceFieldShapeBox::FillByCapsule(float Height, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.FillByCapsule");

	struct
	{
		float                          Height;
		float                          Radius;
	} params;
	params.Height = Height;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeBox.FillByBox
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 Extent                         (CPF_Parm)

void UForceFieldShapeBox::FillByBox(const struct FVector& Extent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.FillByBox");

	struct
	{
		struct FVector                 Extent;
	} params;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeBox.FillBySphere
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          Radius                         (CPF_Parm)

void UForceFieldShapeBox::FillBySphere(float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.FillBySphere");

	struct
	{
		float                          Radius;
	} params;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeBox.GetRadii
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector UForceFieldShapeBox::GetRadii()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeBox.GetRadii");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFieldShapeCapsule.GetDrawComponent
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UPrimitiveComponent* UForceFieldShapeCapsule::GetDrawComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.GetDrawComponent");

	struct
	{
		class UPrimitiveComponent*     ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFieldShapeCapsule.FillByCylinder
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          BottomRadius                   (CPF_Parm)
// float                          TopRadius                      (CPF_Parm)
// float                          Height                         (CPF_Parm)
// float                          HeightOffset                   (CPF_Parm)

void UForceFieldShapeCapsule::FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.FillByCylinder");

	struct
	{
		float                          BottomRadius;
		float                          TopRadius;
		float                          Height;
		float                          HeightOffset;
	} params;
	params.BottomRadius = BottomRadius;
	params.TopRadius = TopRadius;
	params.Height = Height;
	params.HeightOffset = HeightOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeCapsule.FillByCapsule
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          Height                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)

void UForceFieldShapeCapsule::FillByCapsule(float Height, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.FillByCapsule");

	struct
	{
		float                          Height;
		float                          Radius;
	} params;
	params.Height = Height;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeCapsule.FillByBox
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 Extent                         (CPF_Parm)

void UForceFieldShapeCapsule::FillByBox(const struct FVector& Extent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.FillByBox");

	struct
	{
		struct FVector                 Extent;
	} params;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeCapsule.FillBySphere
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          Radius                         (CPF_Parm)

void UForceFieldShapeCapsule::FillBySphere(float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.FillBySphere");

	struct
	{
		float                          Radius;
	} params;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeCapsule.GetRadius
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UForceFieldShapeCapsule::GetRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.GetRadius");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFieldShapeCapsule.GetHeight
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UForceFieldShapeCapsule::GetHeight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeCapsule.GetHeight");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFieldShapeSphere.GetDrawComponent
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UPrimitiveComponent*     ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UPrimitiveComponent* UForceFieldShapeSphere::GetDrawComponent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.GetDrawComponent");

	struct
	{
		class UPrimitiveComponent*     ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ForceFieldShapeSphere.FillByCylinder
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          BottomRadius                   (CPF_Parm)
// float                          TopRadius                      (CPF_Parm)
// float                          Height                         (CPF_Parm)
// float                          HeightOffset                   (CPF_Parm)

void UForceFieldShapeSphere::FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.FillByCylinder");

	struct
	{
		float                          BottomRadius;
		float                          TopRadius;
		float                          Height;
		float                          HeightOffset;
	} params;
	params.BottomRadius = BottomRadius;
	params.TopRadius = TopRadius;
	params.Height = Height;
	params.HeightOffset = HeightOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeSphere.FillByCapsule
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          Height                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)

void UForceFieldShapeSphere::FillByCapsule(float Height, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.FillByCapsule");

	struct
	{
		float                          Height;
		float                          Radius;
	} params;
	params.Height = Height;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeSphere.FillByBox
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FVector                 Extent                         (CPF_Parm)

void UForceFieldShapeSphere::FillByBox(const struct FVector& Extent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.FillByBox");

	struct
	{
		struct FVector                 Extent;
	} params;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeSphere.FillBySphere
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          Radius                         (CPF_Parm)

void UForceFieldShapeSphere::FillBySphere(float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.FillBySphere");

	struct
	{
		float                          Radius;
	} params;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ForceFieldShapeSphere.GetRadius
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UForceFieldShapeSphere::GetRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ForceFieldShapeSphere.GetRadius");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceObject.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USequenceObject::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceObject.ShouldClearNameOnPasting
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USequenceObject::ShouldClearNameOnPasting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.ShouldClearNameOnPasting");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceObject.IsPastingIntoLevelSequenceAllowed
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USequenceObject::IsPastingIntoLevelSequenceAllowed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.IsPastingIntoLevelSequenceAllowed");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceObject.IsValidLevelSequenceObject
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USequenceObject::IsValidLevelSequenceObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.IsValidLevelSequenceObject");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceObject.GetWorldInfo
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class AWorldInfo*              ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AWorldInfo* USequenceObject::GetWorldInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.GetWorldInfo");

	struct
	{
		class AWorldInfo*              ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceObject.ScriptLog
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 LogText                        (CPF_Parm, CPF_NeedCtorLink)
// bool                           bWarning                       (CPF_OptionalParm, CPF_Parm)

void USequenceObject::ScriptLog(const struct FString& LogText, bool bWarning)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceObject.ScriptLog");

	struct
	{
		struct FString                 LogText;
		bool                           bWarning;
	} params;
	params.LogText = LogText;
	params.bWarning = bWarning;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.ForceActivateOutput
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            OutputIdx                      (CPF_Parm)

void USequenceOp::ForceActivateOutput(int OutputIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.ForceActivateOutput");

	struct
	{
		int                            OutputIdx;
	} params;
	params.OutputIdx = OutputIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.ForceActivateInput
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            InputIdx                       (CPF_Parm)

void USequenceOp::ForceActivateInput(int InputIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.ForceActivateInput");

	struct
	{
		int                            InputIdx;
	} params;
	params.InputIdx = InputIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.GetController
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  TheActor                       (CPF_Parm)
// class AController*             ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AController* USequenceOp::GetController(class AActor* TheActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetController");

	struct
	{
		class AActor*                  TheActor;
		class AController*             ReturnValue;
	} params;
	params.TheActor = TheActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceOp.GetPawn
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  TheActor                       (CPF_Parm)
// class APawn*                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APawn* USequenceOp::GetPawn(class AActor* TheActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetPawn");

	struct
	{
		class AActor*                  TheActor;
		class APawn*                   ReturnValue;
	} params;
	params.TheActor = TheActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceOp.Reset
// (FUNC_Public)

void USequenceOp::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.PublishLinkedVariableValues
// (FUNC_Final, FUNC_Native, FUNC_Public)

void USequenceOp::PublishLinkedVariableValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.PublishLinkedVariableValues");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.PopulateLinkedVariableValues
// (FUNC_Final, FUNC_Native, FUNC_Public)

void USequenceOp::PopulateLinkedVariableValues()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.PopulateLinkedVariableValues");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.VersionUpdated
// (FUNC_Event, FUNC_Public)
// Parameters:
// int                            OldVersion                     (CPF_Parm)
// int                            NewVersion                     (CPF_Parm)

void USequenceOp::VersionUpdated(int OldVersion, int NewVersion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.VersionUpdated");

	struct
	{
		int                            OldVersion;
		int                            NewVersion;
	} params;
	params.OldVersion = OldVersion;
	params.NewVersion = NewVersion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.Deactivated
// (FUNC_Event, FUNC_Public)

void USequenceOp::Deactivated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.Deactivated");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.Activated
// (FUNC_Event, FUNC_Public)

void USequenceOp::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.Activated");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceOp.ActivateNamedOutputLink
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 LinkDesc                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USequenceOp::ActivateNamedOutputLink(const struct FString& LinkDesc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.ActivateNamedOutputLink");

	struct
	{
		struct FString                 LinkDesc;
		bool                           ReturnValue;
	} params;
	params.LinkDesc = LinkDesc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceOp.ActivateOutputLink
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            OutputIdx                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USequenceOp::ActivateOutputLink(int OutputIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.ActivateOutputLink");

	struct
	{
		int                            OutputIdx;
		bool                           ReturnValue;
	} params;
	params.OutputIdx = OutputIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SequenceOp.LinkedVariables
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  VarClass                       (CPF_Parm)
// class USequenceVariable*       OutVariable                    (CPF_Parm, CPF_OutParm)
// struct FString                 inDesc                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)

void USequenceOp::LinkedVariables(class UClass* VarClass, const struct FString& inDesc, class USequenceVariable** OutVariable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.LinkedVariables");

	struct
	{
		class UClass*                  VarClass;
		class USequenceVariable*       OutVariable;
		struct FString                 inDesc;
	} params;
	params.VarClass = VarClass;
	params.inDesc = inDesc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutVariable != nullptr)
		*OutVariable = params.OutVariable;
}


// Function Engine.SequenceOp.GetBoolVars
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<unsigned char>          boolVars                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 inDesc                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)

void USequenceOp::GetBoolVars(const struct FString& inDesc, TArray<unsigned char>* boolVars)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetBoolVars");

	struct
	{
		TArray<unsigned char>          boolVars;
		struct FString                 inDesc;
	} params;
	params.inDesc = inDesc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (boolVars != nullptr)
		*boolVars = params.boolVars;
}


// Function Engine.SequenceOp.GetInterpDataVars
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<class UInterpData*>     outIData                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 inDesc                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)

void USequenceOp::GetInterpDataVars(const struct FString& inDesc, TArray<class UInterpData*>* outIData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetInterpDataVars");

	struct
	{
		TArray<class UInterpData*>     outIData;
		struct FString                 inDesc;
	} params;
	params.inDesc = inDesc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outIData != nullptr)
		*outIData = params.outIData;
}


// Function Engine.SequenceOp.GetObjectVars
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<class UObject*>         objVars                        (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 inDesc                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)

void USequenceOp::GetObjectVars(const struct FString& inDesc, TArray<class UObject*>* objVars)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetObjectVars");

	struct
	{
		TArray<class UObject*>         objVars;
		struct FString                 inDesc;
	} params;
	params.inDesc = inDesc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (objVars != nullptr)
		*objVars = params.objVars;
}


// Function Engine.SequenceOp.GetLinkedObjects
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<class USequenceObject*> out_Objects                    (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// class UClass*                  ObjectType                     (CPF_OptionalParm, CPF_Parm)
// bool                           bRecurse                       (CPF_OptionalParm, CPF_Parm)

void USequenceOp::GetLinkedObjects(class UClass* ObjectType, bool bRecurse, TArray<class USequenceObject*>* out_Objects)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.GetLinkedObjects");

	struct
	{
		TArray<class USequenceObject*> out_Objects;
		class UClass*                  ObjectType;
		bool                           bRecurse;
	} params;
	params.ObjectType = ObjectType;
	params.bRecurse = bRecurse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Objects != nullptr)
		*out_Objects = params.out_Objects;
}


// Function Engine.SequenceOp.HasLinkedOps
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bConsiderInputLinks            (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USequenceOp::HasLinkedOps(bool bConsiderInputLinks)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceOp.HasLinkedOps");

	struct
	{
		bool                           bConsiderInputLinks;
		bool                           ReturnValue;
	} params;
	params.bConsiderInputLinks = bConsiderInputLinks;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Sequence.SetEnabled
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bInEnabled                     (CPF_Parm)

void USequence::SetEnabled(bool bInEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Sequence.SetEnabled");

	struct
	{
		bool                           bInEnabled;
	} params;
	params.bInEnabled = bInEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Sequence.Reset
// (FUNC_Defined, FUNC_Public)

void USequence::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Sequence.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Sequence.FindSeqObjectsByName
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 SeqObjName                     (CPF_Parm, CPF_NeedCtorLink)
// bool                           bCheckComment                  (CPF_Parm)
// TArray<class USequenceObject*> OutputObjects                  (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           bRecursive                     (CPF_OptionalParm, CPF_Parm)
// bool                           bUseFullLevelName              (CPF_OptionalParm, CPF_Parm)

void USequence::FindSeqObjectsByName(const struct FString& SeqObjName, bool bCheckComment, bool bRecursive, bool bUseFullLevelName, TArray<class USequenceObject*>* OutputObjects)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Sequence.FindSeqObjectsByName");

	struct
	{
		struct FString                 SeqObjName;
		bool                           bCheckComment;
		TArray<class USequenceObject*> OutputObjects;
		bool                           bRecursive;
		bool                           bUseFullLevelName;
	} params;
	params.SeqObjName = SeqObjName;
	params.bCheckComment = bCheckComment;
	params.bRecursive = bRecursive;
	params.bUseFullLevelName = bUseFullLevelName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutputObjects != nullptr)
		*OutputObjects = params.OutputObjects;
}


// Function Engine.Sequence.FindSeqObjectsByClass
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  DesiredClass                   (CPF_Parm)
// bool                           bRecursive                     (CPF_Parm)
// TArray<class USequenceObject*> OutputObjects                  (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void USequence::FindSeqObjectsByClass(class UClass* DesiredClass, bool bRecursive, TArray<class USequenceObject*>* OutputObjects)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Sequence.FindSeqObjectsByClass");

	struct
	{
		class UClass*                  DesiredClass;
		bool                           bRecursive;
		TArray<class USequenceObject*> OutputObjects;
	} params;
	params.DesiredClass = DesiredClass;
	params.bRecursive = bRecursive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutputObjects != nullptr)
		*OutputObjects = params.OutputObjects;
}


// Function Engine.PrefabSequence.GetOwnerPrefab
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class APrefabInstance*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APrefabInstance* UPrefabSequence::GetOwnerPrefab()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrefabSequence.GetOwnerPrefab");

	struct
	{
		class APrefabInstance*         ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrefabSequence.SetOwnerPrefab
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class APrefabInstance*         InOwner                        (CPF_Parm)

void UPrefabSequence::SetOwnerPrefab(class APrefabInstance* InOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrefabSequence.SetOwnerPrefab");

	struct
	{
		class APrefabInstance*         InOwner;
	} params;
	params.InOwner = InOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_ActivateRemoteEvent.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_ActivateRemoteEvent::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ActivateRemoteEvent.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_CameraFade.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_CameraFade::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CameraFade.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_CameraLookAt.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_CameraLookAt::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CameraLookAt.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_CameraShake.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_CameraShake::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_CameraShake.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ChangeCollision.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_ChangeCollision::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ChangeCollision.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ConvertToString.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_ConvertToString::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ConvertToString.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_DrawText.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_DrawText::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_DrawText.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_GetLocationAndRotation.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_GetLocationAndRotation::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_GetLocationAndRotation.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_GetVelocity.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_GetVelocity::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_GetVelocity.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_HeadTrackingControl.Activated
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void USeqAct_HeadTrackingControl::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_HeadTrackingControl.Activated");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_HeadTrackingControl.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_HeadTrackingControl::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_HeadTrackingControl.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Latent.Update
// (FUNC_Event, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USeqAct_Latent::Update(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Latent.Update");

	struct
	{
		float                          DeltaTime;
		bool                           ReturnValue;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Latent.AbortFor
// (FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  latentActor                    (CPF_Parm)

void USeqAct_Latent::AbortFor(class AActor* latentActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Latent.AbortFor");

	struct
	{
		class AActor*                  latentActor;
	} params;
	params.latentActor = latentActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_ActorFactory.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_ActorFactory::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ActorFactory.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ProjectileFactory.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_ProjectileFactory::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ProjectileFactory.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_AIMoveToActor.PickDestination
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Requestor                      (CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AActor* USeqAct_AIMoveToActor::PickDestination(class AActor* Requestor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_AIMoveToActor.PickDestination");

	struct
	{
		class AActor*                  Requestor;
		class AActor*                  ReturnValue;
	} params;
	params.Requestor = Requestor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_AIMoveToActor.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_AIMoveToActor::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_AIMoveToActor.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Delay.ResetDelayActive
// (FUNC_Native, FUNC_Public)

void USeqAct_Delay::ResetDelayActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Delay.ResetDelayActive");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Delay.Reset
// (FUNC_Defined, FUNC_Public)

void USeqAct_Delay::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Delay.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Interp.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_Interp::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Interp.Reset
// (FUNC_Defined, FUNC_Public)

void USeqAct_Interp::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Interp.AddPlayerToDirectorTracks
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)

void USeqAct_Interp::AddPlayerToDirectorTracks(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.AddPlayerToDirectorTracks");

	struct
	{
		class APlayerController*       PC;
	} params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Interp.Stop
// (FUNC_Final, FUNC_Native, FUNC_Public)

void USeqAct_Interp::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.Stop");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Interp.SetPosition
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          NewPosition                    (CPF_Parm)
// bool                           bJump                          (CPF_OptionalParm, CPF_Parm)

void USeqAct_Interp::SetPosition(float NewPosition, bool bJump)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Interp.SetPosition");

	struct
	{
		float                          NewPosition;
		bool                           bJump;
	} params;
	params.NewPosition = NewPosition;
	params.bJump = bJump;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_PlaySound.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_PlaySound::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_PlaySound.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_StreamInTextures.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_StreamInTextures::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_StreamInTextures.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_WaitForLevelsVisible.Activated
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void USeqAct_WaitForLevelsVisible::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_WaitForLevelsVisible.Activated");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_WaitForLevelsVisible.CheckLevelsVisible
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USeqAct_WaitForLevelsVisible::CheckLevelsVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_WaitForLevelsVisible.CheckLevelsVisible");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Log.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_Log::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Log.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ModifyHealth.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_ModifyHealth::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ModifyHealth.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ParticleEventGenerator.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_ParticleEventGenerator::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ParticleEventGenerator.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_PlayCameraAnim.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_PlayCameraAnim::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_PlayCameraAnim.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetCameraTarget.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_SetCameraTarget::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetCameraTarget.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetFloat.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_SetFloat::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetFloat.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetInt.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_SetInt::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetInt.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetLocation.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_SetLocation::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetLocation.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetObject.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_SetObject::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetObject.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetString.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_SetString::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetString.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_RandomSwitch.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_RandomSwitch::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_RandomSwitch.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Trace.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_Trace::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Trace.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_CompareBool.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqCond_CompareBool::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_CompareBool.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_GetServerType.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqCond_GetServerType::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_GetServerType.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_IsBenchmarking.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqCond_IsBenchmarking::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_IsBenchmarking.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_IsLoggedIn.CheckLogins
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USeqCond_IsLoggedIn::CheckLogins()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_IsLoggedIn.CheckLogins");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_IsPIE.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqCond_IsPIE::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_IsPIE.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_SwitchBase.RemoveValueEntry
// (FUNC_Event, FUNC_Public)
// Parameters:
// int                            RemoveIndex                    (CPF_Parm)

void USeqCond_SwitchBase::RemoveValueEntry(int RemoveIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.RemoveValueEntry");

	struct
	{
		int                            RemoveIndex;
	} params;
	params.RemoveIndex = RemoveIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchBase.InsertValueEntry
// (FUNC_Event, FUNC_Public)
// Parameters:
// int                            InsertIndex                    (CPF_Parm)

void USeqCond_SwitchBase::InsertValueEntry(int InsertIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.InsertValueEntry");

	struct
	{
		int                            InsertIndex;
	} params;
	params.InsertIndex = InsertIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchBase.IsFallThruEnabled
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            ValueIndex                     (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USeqCond_SwitchBase::IsFallThruEnabled(int ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.IsFallThruEnabled");

	struct
	{
		int                            ValueIndex;
		bool                           ReturnValue;
	} params;
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue
// (FUNC_Event, FUNC_Public)

void USeqCond_SwitchBase::VerifyDefaultCaseValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchBase.VerifyDefaultCaseValue");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchClass.RemoveValueEntry
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            RemoveIndex                    (CPF_Parm)

void USeqCond_SwitchClass::RemoveValueEntry(int RemoveIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.RemoveValueEntry");

	struct
	{
		int                            RemoveIndex;
	} params;
	params.RemoveIndex = RemoveIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchClass.InsertValueEntry
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            InsertIndex                    (CPF_Parm)

void USeqCond_SwitchClass::InsertValueEntry(int InsertIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.InsertValueEntry");

	struct
	{
		int                            InsertIndex;
	} params;
	params.InsertIndex = InsertIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchClass.IsFallThruEnabled
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            ValueIndex                     (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USeqCond_SwitchClass::IsFallThruEnabled(int ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.IsFallThruEnabled");

	struct
	{
		int                            ValueIndex;
		bool                           ReturnValue;
	} params;
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void USeqCond_SwitchClass::VerifyDefaultCaseValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchClass.VerifyDefaultCaseValue");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchObject.RemoveValueEntry
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            RemoveIndex                    (CPF_Parm)

void USeqCond_SwitchObject::RemoveValueEntry(int RemoveIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.RemoveValueEntry");

	struct
	{
		int                            RemoveIndex;
	} params;
	params.RemoveIndex = RemoveIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchObject.InsertValueEntry
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            InsertIndex                    (CPF_Parm)

void USeqCond_SwitchObject::InsertValueEntry(int InsertIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.InsertValueEntry");

	struct
	{
		int                            InsertIndex;
	} params;
	params.InsertIndex = InsertIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqCond_SwitchObject.IsFallThruEnabled
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            ValueIndex                     (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USeqCond_SwitchObject::IsFallThruEnabled(int ValueIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.IsFallThruEnabled");

	struct
	{
		int                            ValueIndex;
		bool                           ReturnValue;
	} params;
	params.ValueIndex = ValueIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void USeqCond_SwitchObject::VerifyDefaultCaseValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqCond_SwitchObject.VerifyDefaultCaseValue");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceEvent.Toggled
// (FUNC_Event, FUNC_Public)

void USequenceEvent::Toggled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.Toggled");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceEvent.Reset
// (FUNC_Defined, FUNC_Public)

void USequenceEvent::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SequenceEvent.CheckActivate
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AActor*                  InOriginator                   (CPF_Parm)
// class AActor*                  InInstigator                   (CPF_Parm)
// bool                           bTest                          (CPF_OptionalParm, CPF_Parm)
// TArray<int>                    ActivateIndices                (CPF_Const, CPF_OptionalParm, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           bPushTop                       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USequenceEvent::CheckActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest, bool bPushTop, TArray<int>* ActivateIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.CheckActivate");

	struct
	{
		class AActor*                  InOriginator;
		class AActor*                  InInstigator;
		bool                           bTest;
		TArray<int>                    ActivateIndices;
		bool                           bPushTop;
		bool                           ReturnValue;
	} params;
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.bTest = bTest;
	params.bPushTop = bPushTop;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActivateIndices != nullptr)
		*ActivateIndices = params.ActivateIndices;

	return params.ReturnValue;
}


// Function Engine.SequenceEvent.RegisterEvent
// (FUNC_Event, FUNC_Public)

void USequenceEvent::RegisterEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SequenceEvent.RegisterEvent");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_LevelLoaded.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqEvent_LevelLoaded::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_LevelLoaded.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_Mover.NotifyFinishedOpen
// (FUNC_Defined, FUNC_Public)

void USeqEvent_Mover::NotifyFinishedOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyFinishedOpen");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Mover.NotifyDetached
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void USeqEvent_Mover::NotifyDetached(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyDetached");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Mover.NotifyAttached
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void USeqEvent_Mover::NotifyAttached(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyAttached");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Mover.NotifyEncroachingOn
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Hit                            (CPF_Parm)

void USeqEvent_Mover::NotifyEncroachingOn(class AActor* Hit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.NotifyEncroachingOn");

	struct
	{
		class AActor*                  Hit;
	} params;
	params.Hit = Hit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Mover.RegisterEvent
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void USeqEvent_Mover::RegisterEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Mover.RegisterEvent");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_ParticleEvent.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqEvent_ParticleEvent::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_ParticleEvent.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_RemoteEvent.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqEvent_RemoteEvent::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_RemoteEvent.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_TakeDamage.Toggled
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void USeqEvent_TakeDamage::Toggled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.Toggled");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_TakeDamage.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqEvent_TakeDamage::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_TakeDamage.Reset
// (FUNC_Defined, FUNC_Public)

void USeqEvent_TakeDamage::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_TakeDamage.HandleDamage
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  InOriginator                   (CPF_Parm)
// class AActor*                  InInstigator                   (CPF_Parm)
// class UClass*                  inDamageType                   (CPF_Parm)
// int                            inAmount                       (CPF_Parm)

void USeqEvent_TakeDamage::HandleDamage(class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, int inAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.HandleDamage");

	struct
	{
		class AActor*                  InOriginator;
		class AActor*                  InInstigator;
		class UClass*                  inDamageType;
		int                            inAmount;
	} params;
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.inDamageType = inDamageType;
	params.inAmount = inAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_TakeDamage.IsValidDamageType
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// class UClass*                  inDamageType                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USeqEvent_TakeDamage::IsValidDamageType(class UClass* inDamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_TakeDamage.IsValidDamageType");

	struct
	{
		class UClass*                  inDamageType;
		bool                           ReturnValue;
	} params;
	params.inDamageType = inDamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_Touch.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqEvent_Touch::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_Touch.NotifyTouchingPawnDied
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APawn*                   P                              (CPF_Parm)

void USeqEvent_Touch::NotifyTouchingPawnDied(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.NotifyTouchingPawnDied");

	struct
	{
		class APawn*                   P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Touch.Toggled
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void USeqEvent_Touch::Toggled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.Toggled");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqEvent_Touch.CheckUnTouchActivate
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  InOriginator                   (CPF_Parm)
// class AActor*                  InInstigator                   (CPF_Parm)
// bool                           bTest                          (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USeqEvent_Touch::CheckUnTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.CheckUnTouchActivate");

	struct
	{
		class AActor*                  InOriginator;
		class AActor*                  InInstigator;
		bool                           bTest;
		bool                           ReturnValue;
	} params;
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_Touch.CheckTouchActivate
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  InOriginator                   (CPF_Parm)
// class AActor*                  InInstigator                   (CPF_Parm)
// bool                           bTest                          (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USeqEvent_Touch::CheckTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_Touch.CheckTouchActivate");

	struct
	{
		class AActor*                  InOriginator;
		class AActor*                  InInstigator;
		bool                           bTest;
		bool                           ReturnValue;
	} params;
	params.InOriginator = InOriginator;
	params.InInstigator = InInstigator;
	params.bTest = bTest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqVar_Object.SetObjectValue
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UObject*                 NewValue                       (CPF_Parm)

void USeqVar_Object::SetObjectValue(class UObject* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_Object.SetObjectValue");

	struct
	{
		class UObject*                 NewValue;
	} params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqVar_Object.GetObjectValue
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UObject*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UObject* USeqVar_Object::GetObjectValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_Object.GetObjectValue");

	struct
	{
		class UObject*                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqVar_ObjectList.SetObjectValue
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UObject*                 NewValue                       (CPF_Parm)

void USeqVar_ObjectList::SetObjectValue(class UObject* NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_ObjectList.SetObjectValue");

	struct
	{
		class UObject*                 NewValue;
	} params;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqVar_ObjectList.GetObjectValue
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UObject*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UObject* USeqVar_ObjectList::GetObjectValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_ObjectList.GetObjectValue");

	struct
	{
		class UObject*                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqVar_Player.GetObjectValue
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UObject*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UObject* USeqVar_Player::GetObjectValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_Player.GetObjectValue");

	struct
	{
		class UObject*                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqVar_Player.UpdatePlayersList
// (FUNC_Final, FUNC_Native, FUNC_Public)

void USeqVar_Player::UpdatePlayersList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqVar_Player.UpdatePlayersList");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSoundSimpleToggleable.ApplyCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct AAmbientSoundSimpleToggleable_FCheckpointRecord Record                         (CPF_Const, CPF_Parm, CPF_OutParm)

void AAmbientSoundSimpleToggleable::ApplyCheckpointRecord(struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.ApplyCheckpointRecord");

	struct
	{
		struct AAmbientSoundSimpleToggleable_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.AmbientSoundSimpleToggleable.CreateCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct AAmbientSoundSimpleToggleable_FCheckpointRecord Record                         (CPF_Parm, CPF_OutParm)

void AAmbientSoundSimpleToggleable::CreateCheckpointRecord(struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.CreateCheckpointRecord");

	struct
	{
		struct AAmbientSoundSimpleToggleable_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.AmbientSoundSimpleToggleable.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AAmbientSoundSimpleToggleable::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSoundSimpleToggleable.StopPlaying
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AAmbientSoundSimpleToggleable::StopPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.StopPlaying");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSoundSimpleToggleable.StartPlaying
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AAmbientSoundSimpleToggleable::StartPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.StartPlaying");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSoundSimpleToggleable.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AAmbientSoundSimpleToggleable::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AmbientSoundSimpleToggleable.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AAmbientSoundSimpleToggleable::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AmbientSoundSimpleToggleable.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SoundNodeWave.GeneratePCMData
// (FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<unsigned char>          Buffer                         (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            SamplesNeeded                  (CPF_Parm)

void USoundNodeWave::GeneratePCMData(int SamplesNeeded, TArray<unsigned char>* Buffer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWave.GeneratePCMData");

	struct
	{
		TArray<unsigned char>          Buffer;
		int                            SamplesNeeded;
	} params;
	params.SamplesNeeded = SamplesNeeded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Buffer != nullptr)
		*Buffer = params.Buffer;
}


// Function Engine.SoundNodeWaveStreaming.GeneratePCMData
// (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<unsigned char>          Buffer                         (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            SamplesNeeded                  (CPF_Parm)

void USoundNodeWaveStreaming::GeneratePCMData(int SamplesNeeded, TArray<unsigned char>* Buffer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWaveStreaming.GeneratePCMData");

	struct
	{
		TArray<unsigned char>          Buffer;
		int                            SamplesNeeded;
	} params;
	params.SamplesNeeded = SamplesNeeded;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Buffer != nullptr)
		*Buffer = params.Buffer;
}


// Function Engine.SoundNodeWaveStreaming.AvailableAudioBytes
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USoundNodeWaveStreaming::AvailableAudioBytes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWaveStreaming.AvailableAudioBytes");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SoundNodeWaveStreaming.ResetAudio
// (FUNC_Native, FUNC_Event, FUNC_Public)

void USoundNodeWaveStreaming::ResetAudio()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWaveStreaming.ResetAudio");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SoundNodeWaveStreaming.QueueSilence
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// float                          Seconds                        (CPF_Parm)

void USoundNodeWaveStreaming::QueueSilence(float Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWaveStreaming.QueueSilence");

	struct
	{
		float                          Seconds;
	} params;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SoundNodeWaveStreaming.QueueAudio
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// TArray<unsigned char>          Data                           (CPF_Parm, CPF_NeedCtorLink)

void USoundNodeWaveStreaming::QueueAudio(TArray<unsigned char> Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SoundNodeWaveStreaming.QueueAudio");

	struct
	{
		TArray<unsigned char>          Data;
	} params;
	params.Data = Data;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Terrain.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ATerrain::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Terrain.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Terrain.CalcLayerBounds
// (FUNC_Final, FUNC_Native, FUNC_Public)

void ATerrain::CalcLayerBounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Terrain.CalcLayerBounds");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TerrainLayerSetup.PostBeginPlay
// (FUNC_Simulated, FUNC_Public)

void UTerrainLayerSetup::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TerrainLayerSetup.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DataStoreClient.DebugDumpDataStoreInfo
// (FUNC_Final, FUNC_Public)
// Parameters:
// bool                           bVerbose                       (CPF_Parm)

void UDataStoreClient::DebugDumpDataStoreInfo(bool bVerbose)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.DebugDumpDataStoreInfo");

	struct
	{
		bool                           bVerbose;
	} params;
	params.bVerbose = bVerbose;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DataStoreClient.NotifyGameSessionEnded
// (FUNC_Final, FUNC_Defined, FUNC_Event, FUNC_Public)

void UDataStoreClient::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.NotifyGameSessionEnded");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DataStoreClient.FindDataStoreClass
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// class UClass*                  RequiredMetaClass              (CPF_Parm)
// class UClass*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UClass* UDataStoreClient::FindDataStoreClass(class UClass* RequiredMetaClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.FindDataStoreClass");

	struct
	{
		class UClass*                  RequiredMetaClass;
		class UClass*                  ReturnValue;
	} params;
	params.RequiredMetaClass = RequiredMetaClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataStoreClient.GetPlayerDataStoreClasses
// (FUNC_Final, FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<class UClass*>          out_DataStoreClasses           (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UDataStoreClient::GetPlayerDataStoreClasses(TArray<class UClass*>* out_DataStoreClasses)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.GetPlayerDataStoreClasses");

	struct
	{
		TArray<class UClass*>          out_DataStoreClasses;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_DataStoreClasses != nullptr)
		*out_DataStoreClasses = params.out_DataStoreClasses;
}


// Function Engine.DataStoreClient.FindPlayerDataStoreIndex
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UDataStoreClient::FindPlayerDataStoreIndex(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.FindPlayerDataStoreIndex");

	struct
	{
		class ULocalPlayer*            PlayerOwner;
		int                            ReturnValue;
	} params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataStoreClient.UnregisterDataStore
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UUIDataStore*            DataStore                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UDataStoreClient::UnregisterDataStore(class UUIDataStore* DataStore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.UnregisterDataStore");

	struct
	{
		class UUIDataStore*            DataStore;
		bool                           ReturnValue;
	} params;
	params.DataStore = DataStore;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataStoreClient.RegisterDataStore
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UUIDataStore*            DataStore                      (CPF_Parm)
// class ULocalPlayer*            PlayerOwner                    (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UDataStoreClient::RegisterDataStore(class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.RegisterDataStore");

	struct
	{
		class UUIDataStore*            DataStore;
		class ULocalPlayer*            PlayerOwner;
		bool                           ReturnValue;
	} params;
	params.DataStore = DataStore;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataStoreClient.CreateDataStore
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UClass*                  DataStoreClass                 (CPF_Parm)
// class UUIDataStore*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_CoerceParm)

class UUIDataStore* UDataStoreClient::CreateDataStore(class UClass* DataStoreClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.CreateDataStore");

	struct
	{
		class UClass*                  DataStoreClass;
		class UUIDataStore*            ReturnValue;
	} params;
	params.DataStoreClass = DataStoreClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DataStoreClient.FindDataStore
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   DataStoreTag                   (CPF_Parm)
// class ULocalPlayer*            PlayerOwner                    (CPF_OptionalParm, CPF_Parm)
// class UUIDataStore*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UUIDataStore* UDataStoreClient::FindDataStore(const struct FName& DataStoreTag, class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DataStoreClient.FindDataStore");

	struct
	{
		struct FName                   DataStoreTag;
		class ULocalPlayer*            PlayerOwner;
		class UUIDataStore*            ReturnValue;
	} params;
	params.DataStoreTag = DataStoreTag;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.OutputText
// (FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 Text                           (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)

void UConsole::OutputText(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.OutputText");

	struct
	{
		struct FString                 Text;
	} params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.UpdateCompleteIndices
// (FUNC_Native, FUNC_Public)

void UConsole::UpdateCompleteIndices()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.UpdateCompleteIndices");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.BuildRuntimeAutoCompleteList
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bForce                         (CPF_OptionalParm, CPF_Parm)

void UConsole::BuildRuntimeAutoCompleteList(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.BuildRuntimeAutoCompleteList");

	struct
	{
		bool                           bForce;
	} params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Input.SetBind
// (FUNC_Defined, FUNC_Exec, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// struct FName                   BindName                       (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 Command                        (CPF_Parm, CPF_NeedCtorLink)

void UInput::SetBind(const struct FString& Command, struct FName* BindName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Input.SetBind");

	struct
	{
		struct FName                   BindName;
		struct FString                 Command;
	} params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (BindName != nullptr)
		*BindName = params.BindName;
}


// Function Engine.Input.GetBind
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   Key                            (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UInput::GetBind(struct FName* Key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Input.GetBind");

	struct
	{
		struct FName                   Key;
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Key != nullptr)
		*Key = params.Key;

	return params.ReturnValue;
}


// Function Engine.Input.ResetInput
// (FUNC_Native, FUNC_Public)

void UInput::ResetInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Input.ResetInput");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.PreClientTravel
// (FUNC_Public)
// Parameters:
// struct FString                 PendingURL                     (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class ETravelType> TravelType                     (CPF_Parm)
// bool                           bIsSeamlessTravel              (CPF_Parm)

void UPlayerInput::PreClientTravel(const struct FString& PendingURL, TEnumAsByte<enum class ETravelType> TravelType, bool bIsSeamlessTravel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PreClientTravel");

	struct
	{
		struct FString                 PendingURL;
		TEnumAsByte<enum class ETravelType> TravelType;
		bool                           bIsSeamlessTravel;
	} params;
	params.PendingURL = PendingURL;
	params.TravelType = TravelType;
	params.bIsSeamlessTravel = bIsSeamlessTravel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.ClientInitInputSystem
// (FUNC_Public)

void UPlayerInput::ClientInitInputSystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ClientInitInputSystem");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.InitInputSystem
// (FUNC_Native, FUNC_Public)

void UPlayerInput::InitInputSystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InitInputSystem");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.SmoothMouse
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          aMouse                         (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)
// unsigned char                  SampleCount                    (CPF_Parm, CPF_OutParm)
// int                            Index                          (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UPlayerInput::SmoothMouse(float aMouse, float DeltaTime, int Index, unsigned char* SampleCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SmoothMouse");

	struct
	{
		float                          aMouse;
		float                          DeltaTime;
		unsigned char                  SampleCount;
		int                            Index;
		float                          ReturnValue;
	} params;
	params.aMouse = aMouse;
	params.DeltaTime = DeltaTime;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SampleCount != nullptr)
		*SampleCount = params.SampleCount;

	return params.ReturnValue;
}


// Function Engine.PlayerInput.ClearSmoothing
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UPlayerInput::ClearSmoothing()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ClearSmoothing");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.SmartJump
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UPlayerInput::SmartJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SmartJump");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.Jump
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void UPlayerInput::Jump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.Jump");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.ProcessInputMatching
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void UPlayerInput::ProcessInputMatching(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ProcessInputMatching");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.CheckForDoubleClickMove
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// TEnumAsByte<enum class EDoubleClickDir> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EDoubleClickDir> UPlayerInput::CheckForDoubleClickMove(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.CheckForDoubleClickMove");

	struct
	{
		float                          DeltaTime;
		TEnumAsByte<enum class EDoubleClickDir> ReturnValue;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerInput.CatchDoubleClickInput
// (FUNC_Defined, FUNC_Public)

void UPlayerInput::CatchDoubleClickInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.CatchDoubleClickInput");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.PlayerInput
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void UPlayerInput::PlayerInput(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PlayerInput");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.AdjustMouseSensitivity
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          FOVScale                       (CPF_Parm)

void UPlayerInput::AdjustMouseSensitivity(float FOVScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.AdjustMouseSensitivity");

	struct
	{
		float                          FOVScale;
	} params;
	params.FOVScale = FOVScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.PostProcessInput
// (FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void UPlayerInput::PostProcessInput(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PostProcessInput");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.PreProcessInput
// (FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void UPlayerInput::PreProcessInput(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PreProcessInput");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.DrawHUD
// (FUNC_Public)
// Parameters:
// class AHUD*                    H                              (CPF_Parm)

void UPlayerInput::DrawHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.DrawHUD");

	struct
	{
		class AHUD*                    H;
	} params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.SetSensitivity
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// float                          F                              (CPF_Parm)

void UPlayerInput::SetSensitivity(float F)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SetSensitivity");

	struct
	{
		float                          F;
	} params;
	params.F = F;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.InvertTurn
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UPlayerInput::InvertTurn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertTurn");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerInput.InvertMouse
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UPlayerInput::InvertMouse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertMouse");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerInput.CancelMobileInput
// (FUNC_Native, FUNC_Public)

void UPlayerInput::CancelMobileInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.CancelMobileInput");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISceneClient.InitializeSceneClient
// (FUNC_Event, FUNC_Public)

void UUISceneClient::InitializeSceneClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.InitializeSceneClient");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UISceneClient.GetInverseCanvasToScreen
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FMatrix                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FMatrix UUISceneClient::GetInverseCanvasToScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.GetInverseCanvasToScreen");

	struct
	{
		struct FMatrix                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISceneClient.GetCanvasToScreen
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FMatrix                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FMatrix UUISceneClient::GetCanvasToScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.GetCanvasToScreen");

	struct
	{
		struct FMatrix                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISceneClient.IsUIActive
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Flags                          (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUISceneClient::IsUIActive(int Flags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISceneClient.IsUIActive");

	struct
	{
		int                            Flags;
		bool                           ReturnValue;
	} params;
	params.Flags = Flags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UISoundTheme.ProcessSoundEvent
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   SoundEventName                 (CPF_Parm)
// class APlayerController*       SoundOwner                     (CPF_OptionalParm, CPF_Parm)

void UUISoundTheme::ProcessSoundEvent(const struct FName& SoundEventName, class APlayerController* SoundOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UISoundTheme.ProcessSoundEvent");

	struct
	{
		struct FName                   SoundEventName;
		class APlayerController*       SoundOwner;
	} params;
	params.SoundEventName = SoundEventName;
	params.SoundOwner = SoundOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStoreSubscriber.ClearBoundDataStores
// (FUNC_Native, FUNC_Public)

void UUIDataStoreSubscriber::ClearBoundDataStores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.ClearBoundDataStores");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStoreSubscriber.GetBoundDataStores
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UUIDataStoreSubscriber::GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.GetBoundDataStores");

	struct
	{
		TArray<class UUIDataStore*>    out_BoundDataStores;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;
}


// Function Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UUIDataStore*            SourceDataStore                (CPF_Parm)
// bool                           bValuesInvalidated             (CPF_Parm)
// struct FName                   PropertyTag                    (CPF_Parm)
// class UUIDataProvider*         SourceProvider                 (CPF_Parm)
// int                            ArrayIndex                     (CPF_Parm)

void UUIDataStoreSubscriber::NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.NotifyDataStoreValueUpdated");

	struct
	{
		class UUIDataStore*            SourceDataStore;
		bool                           bValuesInvalidated;
		struct FName                   PropertyTag;
		class UUIDataProvider*         SourceProvider;
		int                            ArrayIndex;
	} params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStoreSubscriber.RefreshSubscriberValue
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            BindingIndex                   (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStoreSubscriber::RefreshSubscriberValue(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.RefreshSubscriberValue");

	struct
	{
		int                            BindingIndex;
		bool                           ReturnValue;
	} params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStoreSubscriber.GetDataStoreBinding
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            BindingIndex                   (CPF_OptionalParm, CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UUIDataStoreSubscriber::GetDataStoreBinding(int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.GetDataStoreBinding");

	struct
	{
		int                            BindingIndex;
		struct FString                 ReturnValue;
	} params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStoreSubscriber.SetDataStoreBinding
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 MarkupText                     (CPF_Parm, CPF_NeedCtorLink)
// int                            BindingIndex                   (CPF_OptionalParm, CPF_Parm)

void UUIDataStoreSubscriber::SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStoreSubscriber.SetDataStoreBinding");

	struct
	{
		struct FString                 MarkupText;
		int                            BindingIndex;
	} params;
	params.MarkupText = MarkupText;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStorePublisher.SaveSubscriberValue
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<class UUIDataStore*>    out_BoundDataStores            (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            BindingIndex                   (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStorePublisher::SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStorePublisher.SaveSubscriberValue");

	struct
	{
		TArray<class UUIDataStore*>    out_BoundDataStores;
		int                            BindingIndex;
		bool                           ReturnValue;
	} params;
	params.BindingIndex = BindingIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_BoundDataStores != nullptr)
		*out_BoundDataStores = params.out_BoundDataStores;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_OnlinePlayerDataBase.OnUnregister
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UUIDataProvider_OnlinePlayerDataBase::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerDataBase.OnUnregister");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerDataBase.OnRegister
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            InPlayer                       (CPF_Parm)

void UUIDataProvider_OnlinePlayerDataBase::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerDataBase.OnRegister");

	struct
	{
		class ULocalPlayer*            InPlayer;
	} params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnGameInviteReceived
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 InviterName                    (CPF_Parm, CPF_NeedCtorLink)

void UUIDataProvider_OnlineFriendMessages::OnGameInviteReceived(unsigned char LocalUserNum, const struct FString& InviterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnGameInviteReceived");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 InviterName;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.InviterName = InviterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnLoginChange
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UUIDataProvider_OnlineFriendMessages::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnLoginChange");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendMessageReceived
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            SendingPlayer                  (CPF_Parm)
// struct FString                 SendingNick                    (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Message                        (CPF_Parm, CPF_NeedCtorLink)

void UUIDataProvider_OnlineFriendMessages::OnFriendMessageReceived(unsigned char LocalUserNum, const struct FUniqueNetId& SendingPlayer, const struct FString& SendingNick, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendMessageReceived");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            SendingPlayer;
		struct FString                 SendingNick;
		struct FString                 Message;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.SendingPlayer = SendingPlayer;
	params.SendingNick = SendingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendInviteReceived
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            RequestingPlayer               (CPF_Parm)
// struct FString                 RequestingNick                 (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Message                        (CPF_Parm, CPF_NeedCtorLink)

void UUIDataProvider_OnlineFriendMessages::OnFriendInviteReceived(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer, const struct FString& RequestingNick, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnFriendInviteReceived");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            RequestingPlayer;
		struct FString                 RequestingNick;
		struct FString                 Message;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;
	params.RequestingNick = RequestingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.ReadMessages
// (FUNC_Defined, FUNC_Public)

void UUIDataProvider_OnlineFriendMessages::ReadMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.ReadMessages");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnUnregister
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UUIDataProvider_OnlineFriendMessages::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnUnregister");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriendMessages.OnRegister
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            InPlayer                       (CPF_Parm)

void UUIDataProvider_OnlineFriendMessages::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriendMessages.OnRegister");

	struct
	{
		class ULocalPlayer*            InPlayer;
	} params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriends.RefreshFriendsList
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UUIDataProvider_OnlineFriends::RefreshFriendsList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.RefreshFriendsList");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriends.OnLoginChange
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UUIDataProvider_OnlineFriends::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnLoginChange");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriends.OnFriendsReadComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UUIDataProvider_OnlineFriends::OnFriendsReadComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnFriendsReadComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriends.OnUnregister
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UUIDataProvider_OnlineFriends::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnUnregister");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineFriends.OnRegister
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            InPlayer                       (CPF_Parm)

void UUIDataProvider_OnlineFriends::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineFriends.OnRegister");

	struct
	{
		class ULocalPlayer*            InPlayer;
	} params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePartyChatList.RefreshMembersList
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UUIDataProvider_OnlinePartyChatList::RefreshMembersList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePartyChatList.RefreshMembersList");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePartyChatList.OnLoginChange
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UUIDataProvider_OnlinePartyChatList::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePartyChatList.OnLoginChange");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePartyChatList.OnUnregister
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UUIDataProvider_OnlinePartyChatList::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePartyChatList.OnUnregister");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePartyChatList.OnRegister
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            InPlayer                       (CPF_Parm)

void UUIDataProvider_OnlinePartyChatList::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePartyChatList.OnRegister");

	struct
	{
		class ULocalPlayer*            InPlayer;
	} params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.OnExternalUIChange
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bIsOpening                     (CPF_Parm)

void UUIDataProvider_OnlinePlayerStorage::OnExternalUIChange(bool bIsOpening)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnExternalUIChange");

	struct
	{
		bool                           bIsOpening;
	} params;
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.OnStorageDeviceChange
// (FUNC_Defined, FUNC_Public)

void UUIDataProvider_OnlinePlayerStorage::OnStorageDeviceChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnStorageDeviceChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.OnDeviceSelectionComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UUIDataProvider_OnlinePlayerStorage::OnDeviceSelectionComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnDeviceSelectionComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.ShowDeviceSelection
// (FUNC_Defined, FUNC_Public)

void UUIDataProvider_OnlinePlayerStorage::ShowDeviceSelection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.ShowDeviceSelection");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.RefreshStorageData
// (FUNC_Defined, FUNC_Public)

void UUIDataProvider_OnlinePlayerStorage::RefreshStorageData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.RefreshStorageData");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.OnLoginChange
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UUIDataProvider_OnlinePlayerStorage::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnLoginChange");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.OnReadStorageComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UUIDataProvider_OnlinePlayerStorage::OnReadStorageComplete(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnReadStorageComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           bWasSuccessful;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.OnUnregister
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UUIDataProvider_OnlinePlayerStorage::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnUnregister");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.OnRegister
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            InPlayer                       (CPF_Parm)

void UUIDataProvider_OnlinePlayerStorage::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.OnRegister");

	struct
	{
		class ULocalPlayer*            InPlayer;
	} params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.ClearReadCompleteDelegate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (CPF_Parm)
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UUIDataProvider_OnlinePlayerStorage::ClearReadCompleteDelegate(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.ClearReadCompleteDelegate");

	struct
	{
		TScriptInterface<class UOnlinePlayerInterface> PlayerInterface;
		unsigned char                  LocalUserNum;
	} params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.AddReadCompleteDelegate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (CPF_Parm)
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UUIDataProvider_OnlinePlayerStorage::AddReadCompleteDelegate(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.AddReadCompleteDelegate");

	struct
	{
		TScriptInterface<class UOnlinePlayerInterface> PlayerInterface;
		unsigned char                  LocalUserNum;
	} params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.GetData
// (FUNC_Defined, FUNC_Public)
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (CPF_Parm)
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataProvider_OnlinePlayerStorage::GetData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.GetData");

	struct
	{
		TScriptInterface<class UOnlinePlayerInterface> PlayerInterface;
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.WriteData
// (FUNC_Defined, FUNC_Public)
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (CPF_Parm)
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            DeviceID                       (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataProvider_OnlinePlayerStorage::WriteData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.WriteData");

	struct
	{
		TScriptInterface<class UOnlinePlayerInterface> PlayerInterface;
		unsigned char                  LocalUserNum;
		int                            DeviceID;
		class UOnlinePlayerStorage*    PlayerStorage;
		bool                           ReturnValue;
	} params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_OnlinePlayerStorage.ReadData
// (FUNC_Defined, FUNC_Public)
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (CPF_Parm)
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            DeviceID                       (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataProvider_OnlinePlayerStorage::ReadData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlinePlayerStorage.ReadData");

	struct
	{
		TScriptInterface<class UOnlinePlayerInterface> PlayerInterface;
		unsigned char                  LocalUserNum;
		int                            DeviceID;
		class UOnlinePlayerStorage*    PlayerStorage;
		bool                           ReturnValue;
	} params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.OnStorageDeviceChange
// (FUNC_Public)

void UUIDataProvider_OnlineProfileSettings::OnStorageDeviceChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.OnStorageDeviceChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.RefreshStorageData
// (FUNC_Defined, FUNC_Public)

void UUIDataProvider_OnlineProfileSettings::RefreshStorageData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.RefreshStorageData");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.ClearReadCompleteDelegate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (CPF_Parm)
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UUIDataProvider_OnlineProfileSettings::ClearReadCompleteDelegate(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.ClearReadCompleteDelegate");

	struct
	{
		TScriptInterface<class UOnlinePlayerInterface> PlayerInterface;
		unsigned char                  LocalUserNum;
	} params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.AddReadCompleteDelegate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (CPF_Parm)
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UUIDataProvider_OnlineProfileSettings::AddReadCompleteDelegate(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.AddReadCompleteDelegate");

	struct
	{
		TScriptInterface<class UOnlinePlayerInterface> PlayerInterface;
		unsigned char                  LocalUserNum;
	} params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.GetData
// (FUNC_Defined, FUNC_Public)
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (CPF_Parm)
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataProvider_OnlineProfileSettings::GetData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.GetData");

	struct
	{
		TScriptInterface<class UOnlinePlayerInterface> PlayerInterface;
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.WriteData
// (FUNC_Defined, FUNC_Public)
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (CPF_Parm)
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            DeviceID                       (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataProvider_OnlineProfileSettings::WriteData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.WriteData");

	struct
	{
		TScriptInterface<class UOnlinePlayerInterface> PlayerInterface;
		unsigned char                  LocalUserNum;
		int                            DeviceID;
		class UOnlinePlayerStorage*    PlayerStorage;
		bool                           ReturnValue;
	} params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_OnlineProfileSettings.ReadData
// (FUNC_Defined, FUNC_Public)
// Parameters:
// TScriptInterface<class UOnlinePlayerInterface> PlayerInterface                (CPF_Parm)
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            DeviceID                       (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataProvider_OnlineProfileSettings::ReadData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_OnlineProfileSettings.ReadData");

	struct
	{
		TScriptInterface<class UOnlinePlayerInterface> PlayerInterface;
		unsigned char                  LocalUserNum;
		int                            DeviceID;
		class UOnlinePlayerStorage*    PlayerStorage;
		bool                           ReturnValue;
	} params;
	params.PlayerInterface = PlayerInterface;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_PlayerAchievements.UpdateAchievements
// (FUNC_Defined, FUNC_Public)

void UUIDataProvider_PlayerAchievements::UpdateAchievements()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.UpdateAchievements");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_PlayerAchievements.OnLoginChange
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UUIDataProvider_PlayerAchievements::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.OnLoginChange");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_PlayerAchievements.OnUnregister
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UUIDataProvider_PlayerAchievements::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.OnUnregister");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_PlayerAchievements.OnRegister
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            InPlayer                       (CPF_Parm)

void UUIDataProvider_PlayerAchievements::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.OnRegister");

	struct
	{
		class ULocalPlayer*            InPlayer;
	} params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementUnlocked
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UUIDataProvider_PlayerAchievements::OnPlayerAchievementUnlocked(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementUnlocked");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementsChanged
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            TitleId                        (CPF_Parm)

void UUIDataProvider_PlayerAchievements::OnPlayerAchievementsChanged(int TitleId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.OnPlayerAchievementsChanged");

	struct
	{
		int                            TitleId;
	} params;
	params.TitleId = TitleId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_PlayerAchievements.GetAchievementDetails
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            AchievementId                  (CPF_Const, CPF_Parm)
// struct FAchievementDetails     OutAchievementDetails          (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UUIDataProvider_PlayerAchievements::GetAchievementDetails(int AchievementId, struct FAchievementDetails* OutAchievementDetails)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.GetAchievementDetails");

	struct
	{
		int                            AchievementId;
		struct FAchievementDetails     OutAchievementDetails;
	} params;
	params.AchievementId = AchievementId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutAchievementDetails != nullptr)
		*OutAchievementDetails = params.OutAchievementDetails;
}


// Function Engine.UIDataProvider_PlayerAchievements.GetAchievementIconPathName
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            AchievementId                  (CPF_Parm)
// bool                           bReturnLockedIcon              (CPF_OptionalParm, CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UUIDataProvider_PlayerAchievements::GetAchievementIconPathName(int AchievementId, bool bReturnLockedIcon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.GetAchievementIconPathName");

	struct
	{
		int                            AchievementId;
		bool                           bReturnLockedIcon;
		struct FString                 ReturnValue;
	} params;
	params.AchievementId = AchievementId;
	params.bReturnLockedIcon = bReturnLockedIcon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_PlayerAchievements.PopulateAchievementIcons
// (FUNC_Public)

void UUIDataProvider_PlayerAchievements::PopulateAchievementIcons()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.PopulateAchievementIcons");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataProvider_PlayerAchievements.GetMaxTotalGamerScore
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UUIDataProvider_PlayerAchievements::GetMaxTotalGamerScore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.GetMaxTotalGamerScore");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataProvider_PlayerAchievements.GetTotalGamerScore
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UUIDataProvider_PlayerAchievements::GetTotalGamerScore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataProvider_PlayerAchievements.GetTotalGamerScore");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore.GetDataStoreClient
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// class UDataStoreClient*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UDataStoreClient* UUIDataStore::GetDataStoreClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.GetDataStoreClient");

	struct
	{
		class UDataStoreClient*        ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore.RefreshSubscribers
// (FUNC_Final, FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   PropertyTag                    (CPF_OptionalParm, CPF_Parm)
// bool                           bInvalidateValues              (CPF_OptionalParm, CPF_Parm)
// class UUIDataProvider*         SourceProvider                 (CPF_OptionalParm, CPF_Parm)
// int                            ArrayIndex                     (CPF_OptionalParm, CPF_Parm)

void UUIDataStore::RefreshSubscribers(const struct FName& PropertyTag, bool bInvalidateValues, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.RefreshSubscribers");

	struct
	{
		struct FName                   PropertyTag;
		bool                           bInvalidateValues;
		class UUIDataProvider*         SourceProvider;
		int                            ArrayIndex;
	} params;
	params.PropertyTag = PropertyTag;
	params.bInvalidateValues = bInvalidateValues;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.NotifyGameSessionEnded
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.NotifyGameSessionEnded");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore.SubscriberDetached
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// TScriptInterface<class UUIDataStoreSubscriber> Subscriber                     (CPF_Parm)

void UUIDataStore::SubscriberDetached(const TScriptInterface<class UUIDataStoreSubscriber>& Subscriber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.SubscriberDetached");

	struct
	{
		TScriptInterface<class UUIDataStoreSubscriber> Subscriber;
	} params;
	params.Subscriber = Subscriber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.SubscriberAttached
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// TScriptInterface<class UUIDataStoreSubscriber> Subscriber                     (CPF_Parm)

void UUIDataStore::SubscriberAttached(const TScriptInterface<class UUIDataStoreSubscriber>& Subscriber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.SubscriberAttached");

	struct
	{
		TScriptInterface<class UUIDataStoreSubscriber> Subscriber;
	} params;
	params.Subscriber = Subscriber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.Unregistered
// (FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (CPF_Parm)

void UUIDataStore::Unregistered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.Unregistered");

	struct
	{
		class ULocalPlayer*            PlayerOwner;
	} params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.Registered
// (FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (CPF_Parm)

void UUIDataStore::Registered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.Registered");

	struct
	{
		class ULocalPlayer*            PlayerOwner;
	} params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore.OnDataStoreValueUpdated
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// class UUIDataStore*            SourceDataStore                (CPF_Parm)
// bool                           bValuesInvalidated             (CPF_Parm)
// struct FName                   PropertyTag                    (CPF_Parm)
// class UUIDataProvider*         SourceProvider                 (CPF_Parm)
// int                            ArrayIndex                     (CPF_Parm)

void UUIDataStore::OnDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore.OnDataStoreValueUpdated");

	struct
	{
		class UUIDataStore*            SourceDataStore;
		bool                           bValuesInvalidated;
		struct FName                   PropertyTag;
		class UUIDataProvider*         SourceProvider;
		int                            ArrayIndex;
	} params;
	params.SourceDataStore = SourceDataStore;
	params.bValuesInvalidated = bValuesInvalidated;
	params.PropertyTag = PropertyTag;
	params.SourceProvider = SourceProvider;
	params.ArrayIndex = ArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_DynamicResource.Unregistered
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (CPF_Parm)

void UUIDataStore_DynamicResource::Unregistered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.Unregistered");

	struct
	{
		class ULocalPlayer*            PlayerOwner;
	} params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_DynamicResource.Registered
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (CPF_Parm)

void UUIDataStore_DynamicResource::Registered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.Registered");

	struct
	{
		class ULocalPlayer*            PlayerOwner;
	} params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_DynamicResource.OnLoginChange
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UUIDataStore_DynamicResource::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.OnLoginChange");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_DynamicResource.GetResourceProviders
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ProviderTag                    (CPF_Parm)
// TArray<class UUIResourceCombinationProvider*> out_Providers                  (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore_DynamicResource::GetResourceProviders(const struct FName& ProviderTag, TArray<class UUIResourceCombinationProvider*>* out_Providers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.GetResourceProviders");

	struct
	{
		struct FName                   ProviderTag;
		TArray<class UUIResourceCombinationProvider*> out_Providers;
		bool                           ReturnValue;
	} params;
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Providers != nullptr)
		*out_Providers = params.out_Providers;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_DynamicResource.FindProviderTypeIndex
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ProviderTag                    (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UUIDataStore_DynamicResource::FindProviderTypeIndex(const struct FName& ProviderTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_DynamicResource.FindProviderTypeIndex");

	struct
	{
		struct FName                   ProviderTag;
		int                            ReturnValue;
	} params;
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_GameResource.GetResourceProviders
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   ProviderTag                    (CPF_Parm)
// TArray<class UUIResourceDataProvider*> out_Providers                  (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore_GameResource::GetResourceProviders(const struct FName& ProviderTag, TArray<class UUIResourceDataProvider*>* out_Providers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameResource.GetResourceProviders");

	struct
	{
		struct FName                   ProviderTag;
		TArray<class UUIResourceDataProvider*> out_Providers;
		bool                           ReturnValue;
	} params;
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Providers != nullptr)
		*out_Providers = params.out_Providers;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_GameResource.FindProviderTypeIndex
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ProviderTag                    (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UUIDataStore_GameResource::FindProviderTypeIndex(const struct FName& ProviderTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameResource.FindProviderTypeIndex");

	struct
	{
		struct FName                   ProviderTag;
		int                            ReturnValue;
	} params;
	params.ProviderTag = ProviderTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_MenuItems.Unregistered
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (CPF_Parm)

void UUIDataStore_MenuItems::Unregistered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_MenuItems.Unregistered");

	struct
	{
		class ULocalPlayer*            PlayerOwner;
	} params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_MenuItems.Registered
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (CPF_Parm)

void UUIDataStore_MenuItems::Registered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_MenuItems.Registered");

	struct
	{
		class ULocalPlayer*            PlayerOwner;
	} params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_MenuItems.OnGameSettingsChanged
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UUIDataProvider*         SourceProvider                 (CPF_Parm)
// struct FName                   PropTag                        (CPF_OptionalParm, CPF_Parm)

void UUIDataStore_MenuItems::OnGameSettingsChanged(class UUIDataProvider* SourceProvider, const struct FName& PropTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_MenuItems.OnGameSettingsChanged");

	struct
	{
		class UUIDataProvider*         SourceProvider;
		struct FName                   PropTag;
	} params;
	params.SourceProvider = SourceProvider;
	params.PropTag = PropTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_GameState.NotifyGameSessionEnded
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore_GameState::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameState.NotifyGameSessionEnded");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_GameState.OnRefreshDataFieldValue
// (FUNC_Public, FUNC_Delegate)

void UUIDataStore_GameState::OnRefreshDataFieldValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_GameState.OnRefreshDataFieldValue");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_Registry.SetData
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FString                 Key                            (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Value                          (CPF_Parm, CPF_NeedCtorLink)

void UUIDataStore_Registry::SetData(const struct FString& Key, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_Registry.SetData");

	struct
	{
		struct FString                 Key;
		struct FString                 Value;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_Registry.GetData
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 Key                            (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 out_Data                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore_Registry::GetData(const struct FString& Key, struct FString* out_Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_Registry.GetData");

	struct
	{
		struct FString                 Key;
		struct FString                 out_Data;
		bool                           ReturnValue;
	} params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Data != nullptr)
		*out_Data = params.out_Data;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.ClearAllSearchResults
// (FUNC_Defined, FUNC_Public)

void UUIDataStore_OnlineGameSearch::ClearAllSearchResults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.ClearAllSearchResults");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.MoveToPrevious
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bInvalidateExistingSearchResults (CPF_OptionalParm, CPF_Parm)

void UUIDataStore_OnlineGameSearch::MoveToPrevious(bool bInvalidateExistingSearchResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.MoveToPrevious");

	struct
	{
		bool                           bInvalidateExistingSearchResults;
	} params;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.MoveToNext
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bInvalidateExistingSearchResults (CPF_OptionalParm, CPF_Parm)

void UUIDataStore_OnlineGameSearch::MoveToNext(bool bInvalidateExistingSearchResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.MoveToNext");

	struct
	{
		bool                           bInvalidateExistingSearchResults;
	} params;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByName
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   SearchName                     (CPF_Parm)
// bool                           bInvalidateExistingSearchResults (CPF_OptionalParm, CPF_Parm)

void UUIDataStore_OnlineGameSearch::SetCurrentByName(const struct FName& SearchName, bool bInvalidateExistingSearchResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByName");

	struct
	{
		struct FName                   SearchName;
		bool                           bInvalidateExistingSearchResults;
	} params;
	params.SearchName = SearchName;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByIndex
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            NewIndex                       (CPF_Parm)
// bool                           bInvalidateExistingSearchResults (CPF_OptionalParm, CPF_Parm)

void UUIDataStore_OnlineGameSearch::SetCurrentByIndex(int NewIndex, bool bInvalidateExistingSearchResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.SetCurrentByIndex");

	struct
	{
		int                            NewIndex;
		bool                           bInvalidateExistingSearchResults;
	} params;
	params.NewIndex = NewIndex;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.FindSearchConfigurationIndex
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   SearchTag                      (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UUIDataStore_OnlineGameSearch::FindSearchConfigurationIndex(const struct FName& SearchTag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.FindSearchConfigurationIndex");

	struct
	{
		struct FName                   SearchTag;
		int                            ReturnValue;
	} params;
	params.SearchTag = SearchTag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.GetActiveGameSearch
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UOnlineGameSearch*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UOnlineGameSearch* UUIDataStore_OnlineGameSearch::GetActiveGameSearch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.GetActiveGameSearch");

	struct
	{
		class UOnlineGameSearch*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.GetCurrentGameSearch
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UOnlineGameSearch*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UOnlineGameSearch* UUIDataStore_OnlineGameSearch::GetCurrentGameSearch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.GetCurrentGameSearch");

	struct
	{
		class UOnlineGameSearch*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.ShowHostGamercard
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// unsigned char                  ControllerIndex                (CPF_Parm)
// int                            ListIndex                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore_OnlineGameSearch::ShowHostGamercard(unsigned char ControllerIndex, int ListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.ShowHostGamercard");

	struct
	{
		unsigned char                  ControllerIndex;
		int                            ListIndex;
		bool                           ReturnValue;
	} params;
	params.ControllerIndex = ControllerIndex;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.GetSearchResultFromIndex
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            ListIndex                      (CPF_Parm)
// struct FOnlineGameSearchResult Result                         (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore_OnlineGameSearch::GetSearchResultFromIndex(int ListIndex, struct FOnlineGameSearchResult* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.GetSearchResultFromIndex");

	struct
	{
		int                            ListIndex;
		struct FOnlineGameSearchResult Result;
		bool                           ReturnValue;
	} params;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.OnSearchComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UUIDataStore_OnlineGameSearch::OnSearchComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.OnSearchComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSearch.OverrideQuerySubmission
// (FUNC_Defined, FUNC_Protected)
// Parameters:
// unsigned char                  ControllerId                   (CPF_Parm)
// class UOnlineGameSearch*       Search                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore_OnlineGameSearch::OverrideQuerySubmission(unsigned char ControllerId, class UOnlineGameSearch* Search)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.OverrideQuerySubmission");

	struct
	{
		unsigned char                  ControllerId;
		class UOnlineGameSearch*       Search;
		bool                           ReturnValue;
	} params;
	params.ControllerId = ControllerId;
	params.Search = Search;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.SubmitGameSearch
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  ControllerIndex                (CPF_Parm)
// bool                           bInvalidateExistingSearchResults (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore_OnlineGameSearch::SubmitGameSearch(unsigned char ControllerIndex, bool bInvalidateExistingSearchResults)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.SubmitGameSearch");

	struct
	{
		unsigned char                  ControllerIndex;
		bool                           bInvalidateExistingSearchResults;
		bool                           ReturnValue;
	} params;
	params.ControllerIndex = ControllerIndex;
	params.bInvalidateExistingSearchResults = bInvalidateExistingSearchResults;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.InvalidateCurrentSearchResults
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore_OnlineGameSearch::InvalidateCurrentSearchResults()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.InvalidateCurrentSearchResults");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSearch.Init
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UUIDataStore_OnlineGameSearch::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSearch.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerStorage
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// class UOnlinePlayerStorage*    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UOnlinePlayerStorage* UUIDataStore_OnlinePlayerData::GetCachedPlayerStorage(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerStorage");

	struct
	{
		int                            ControllerId;
		class UOnlinePlayerStorage*    ReturnValue;
	} params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerProfile
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// class UOnlineProfileSettings*  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UOnlineProfileSettings* UUIDataStore_OnlinePlayerData::GetCachedPlayerProfile(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.GetCachedPlayerProfile");

	struct
	{
		int                            ControllerId;
		class UOnlineProfileSettings*  ReturnValue;
	} params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlinePlayerData.ClearDelegates
// (FUNC_Public)

void UUIDataStore_OnlinePlayerData::ClearDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.ClearDelegates");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.RegisterDelegates
// (FUNC_Public)

void UUIDataStore_OnlinePlayerData::RegisterDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.RegisterDelegates");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.OnPlayerDataChange
// (FUNC_Defined, FUNC_Public)

void UUIDataStore_OnlinePlayerData::OnPlayerDataChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnPlayerDataChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.OnLoginChange
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UUIDataStore_OnlinePlayerData::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnLoginChange");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.OnUnregister
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UUIDataStore_OnlinePlayerData::OnUnregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnUnregister");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlinePlayerData.OnRegister
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            InPlayer                       (CPF_Parm)

void UUIDataStore_OnlinePlayerData::OnRegister(class ULocalPlayer* InPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlinePlayerData.OnRegister");

	struct
	{
		class ULocalPlayer*            InPlayer;
	} params;
	params.InPlayer = InPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineStats.SortResultsByRank
// (FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// class UOnlineStatsRead*        StatsToSort                    (CPF_Parm)

void UUIDataStore_OnlineStats::STATIC_SortResultsByRank(class UOnlineStatsRead* StatsToSort)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.SortResultsByRank");

	struct
	{
		class UOnlineStatsRead*        StatsToSort;
	} params;
	params.StatsToSort = StatsToSort;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineStats.OnReadComplete
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UUIDataStore_OnlineStats::OnReadComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.OnReadComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineStats.ShowGamercard
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// unsigned char                  ConrollerIndex                 (CPF_Parm)
// int                            ListIndex                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore_OnlineStats::ShowGamercard(unsigned char ConrollerIndex, int ListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.ShowGamercard");

	struct
	{
		unsigned char                  ConrollerIndex;
		int                            ListIndex;
		bool                           ReturnValue;
	} params;
	params.ConrollerIndex = ConrollerIndex;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineStats.RefreshStats
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// unsigned char                  ControllerIndex                (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore_OnlineStats::RefreshStats(unsigned char ControllerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.RefreshStats");

	struct
	{
		unsigned char                  ControllerIndex;
		bool                           ReturnValue;
	} params;
	params.ControllerIndex = ControllerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineStats.SetStatsReadInfo
// (FUNC_Defined, FUNC_Public)

void UUIDataStore_OnlineStats::SetStatsReadInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.SetStatsReadInfo");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineStats.Init
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UUIDataStore_OnlineStats::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineStats.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.Unregistered
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (CPF_Parm)

void UUIDataStore_OnlineGameSettings::Unregistered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.Unregistered");

	struct
	{
		class ULocalPlayer*            PlayerOwner;
	} params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.Registered
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class ULocalPlayer*            PlayerOwner                    (CPF_Parm)

void UUIDataStore_OnlineGameSettings::Registered(class ULocalPlayer* PlayerOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.Registered");

	struct
	{
		class ULocalPlayer*            PlayerOwner;
	} params;
	params.PlayerOwner = PlayerOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.MoveToPrevious
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UUIDataStore_OnlineGameSettings::MoveToPrevious()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.MoveToPrevious");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.MoveToNext
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void UUIDataStore_OnlineGameSettings::MoveToNext()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.MoveToNext");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByName
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   SettingsName                   (CPF_Parm)

void UUIDataStore_OnlineGameSettings::SetCurrentByName(const struct FName& SettingsName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByName");

	struct
	{
		struct FName                   SettingsName;
	} params;
	params.SettingsName = SettingsName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByIndex
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// int                            NewIndex                       (CPF_Parm)

void UUIDataStore_OnlineGameSettings::SetCurrentByIndex(int NewIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.SetCurrentByIndex");

	struct
	{
		int                            NewIndex;
	} params;
	params.NewIndex = NewIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIDataStore_OnlineGameSettings.GetCurrentProvider
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UUIDataProvider_Settings* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UUIDataProvider_Settings* UUIDataStore_OnlineGameSettings::GetCurrentProvider()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.GetCurrentProvider");

	struct
	{
		class UUIDataProvider_Settings* ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSettings.GetCurrentGameSettings
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UOnlineGameSettings*     ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UOnlineGameSettings* UUIDataStore_OnlineGameSettings::GetCurrentGameSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.GetCurrentGameSettings");

	struct
	{
		class UOnlineGameSettings*     ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_OnlineGameSettings.CreateGame
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// unsigned char                  ControllerIndex                (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore_OnlineGameSettings::CreateGame(unsigned char ControllerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_OnlineGameSettings.CreateGame");

	struct
	{
		unsigned char                  ControllerIndex;
		bool                           ReturnValue;
	} params;
	params.ControllerIndex = ControllerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_InputAlias.HasAliasMappingForPlatform
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   DesiredAlias                   (CPF_Parm)
// TEnumAsByte<enum class EInputPlatformType> DesiredPlatform                (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore_InputAlias::HasAliasMappingForPlatform(const struct FName& DesiredAlias, TEnumAsByte<enum class EInputPlatformType> DesiredPlatform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.HasAliasMappingForPlatform");

	struct
	{
		struct FName                   DesiredAlias;
		TEnumAsByte<enum class EInputPlatformType> DesiredPlatform;
		bool                           ReturnValue;
	} params;
	params.DesiredAlias = DesiredAlias;
	params.DesiredPlatform = DesiredPlatform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_InputAlias.FindInputAliasIndex
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   DesiredAlias                   (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UUIDataStore_InputAlias::FindInputAliasIndex(const struct FName& DesiredAlias)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.FindInputAliasIndex");

	struct
	{
		struct FName                   DesiredAlias;
		int                            ReturnValue;
	} params;
	params.DesiredAlias = DesiredAlias;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyDataByIndex
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FRawInputKeyEventData   out_InputKeyData               (CPF_Parm, CPF_OutParm)
// int                            AliasIndex                     (CPF_Parm)
// TEnumAsByte<enum class EInputPlatformType> OverridePlatform               (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore_InputAlias::GetAliasInputKeyDataByIndex(int AliasIndex, TEnumAsByte<enum class EInputPlatformType> OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyDataByIndex");

	struct
	{
		struct FRawInputKeyEventData   out_InputKeyData;
		int                            AliasIndex;
		TEnumAsByte<enum class EInputPlatformType> OverridePlatform;
		bool                           ReturnValue;
	} params;
	params.AliasIndex = AliasIndex;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_InputKeyData != nullptr)
		*out_InputKeyData = params.out_InputKeyData;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyData
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FRawInputKeyEventData   out_InputKeyData               (CPF_Parm, CPF_OutParm)
// struct FName                   DesiredAlias                   (CPF_Parm)
// TEnumAsByte<enum class EInputPlatformType> OverridePlatform               (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIDataStore_InputAlias::GetAliasInputKeyData(const struct FName& DesiredAlias, TEnumAsByte<enum class EInputPlatformType> OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyData");

	struct
	{
		struct FRawInputKeyEventData   out_InputKeyData;
		struct FName                   DesiredAlias;
		TEnumAsByte<enum class EInputPlatformType> OverridePlatform;
		bool                           ReturnValue;
	} params;
	params.DesiredAlias = DesiredAlias;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_InputKeyData != nullptr)
		*out_InputKeyData = params.out_InputKeyData;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyNameByIndex
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            AliasIndex                     (CPF_Parm)
// TEnumAsByte<enum class EInputPlatformType> OverridePlatform               (CPF_OptionalParm, CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName UUIDataStore_InputAlias::GetAliasInputKeyNameByIndex(int AliasIndex, TEnumAsByte<enum class EInputPlatformType> OverridePlatform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyNameByIndex");

	struct
	{
		int                            AliasIndex;
		TEnumAsByte<enum class EInputPlatformType> OverridePlatform;
		struct FName                   ReturnValue;
	} params;
	params.AliasIndex = AliasIndex;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_InputAlias.GetAliasInputKeyName
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   DesiredAlias                   (CPF_Parm)
// TEnumAsByte<enum class EInputPlatformType> OverridePlatform               (CPF_OptionalParm, CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName UUIDataStore_InputAlias::GetAliasInputKeyName(const struct FName& DesiredAlias, TEnumAsByte<enum class EInputPlatformType> OverridePlatform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasInputKeyName");

	struct
	{
		struct FName                   DesiredAlias;
		TEnumAsByte<enum class EInputPlatformType> OverridePlatform;
		struct FName                   ReturnValue;
	} params;
	params.DesiredAlias = DesiredAlias;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_InputAlias.GetAliasFontMarkupByIndex
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            AliasIndex                     (CPF_Parm)
// TEnumAsByte<enum class EInputPlatformType> OverridePlatform               (CPF_OptionalParm, CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UUIDataStore_InputAlias::GetAliasFontMarkupByIndex(int AliasIndex, TEnumAsByte<enum class EInputPlatformType> OverridePlatform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasFontMarkupByIndex");

	struct
	{
		int                            AliasIndex;
		TEnumAsByte<enum class EInputPlatformType> OverridePlatform;
		struct FString                 ReturnValue;
	} params;
	params.AliasIndex = AliasIndex;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_InputAlias.GetAliasFontMarkup
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   DesiredAlias                   (CPF_Parm)
// TEnumAsByte<enum class EInputPlatformType> OverridePlatform               (CPF_OptionalParm, CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UUIDataStore_InputAlias::GetAliasFontMarkup(const struct FName& DesiredAlias, TEnumAsByte<enum class EInputPlatformType> OverridePlatform)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_InputAlias.GetAliasFontMarkup");

	struct
	{
		struct FName                   DesiredAlias;
		TEnumAsByte<enum class EInputPlatformType> OverridePlatform;
		struct FString                 ReturnValue;
	} params;
	params.DesiredAlias = DesiredAlias;
	params.OverridePlatform = OverridePlatform;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_StringAliasMap.GetStringWithFieldName
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 FieldName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 MappedString                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UUIDataStore_StringAliasMap::GetStringWithFieldName(const struct FString& FieldName, struct FString* MappedString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_StringAliasMap.GetStringWithFieldName");

	struct
	{
		struct FString                 FieldName;
		struct FString                 MappedString;
		int                            ReturnValue;
	} params;
	params.FieldName = FieldName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MappedString != nullptr)
		*MappedString = params.MappedString;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 FieldName                      (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SetName                        (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UUIDataStore_StringAliasMap::FindMappingWithFieldName(const struct FString& FieldName, const struct FString& SetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_StringAliasMap.FindMappingWithFieldName");

	struct
	{
		struct FString                 FieldName;
		struct FString                 SetName;
		int                            ReturnValue;
	} params;
	params.FieldName = FieldName;
	params.SetName = SetName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIDataStore_StringAliasMap.GetPlayerOwner
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class ULocalPlayer*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ULocalPlayer* UUIDataStore_StringAliasMap::GetPlayerOwner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIDataStore_StringAliasMap.GetPlayerOwner");

	struct
	{
		class ULocalPlayer*            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIPropertyDataProvider.CanSupportComplexPropertyType
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// class UProperty*               UnsupportedProperty            (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUIPropertyDataProvider::CanSupportComplexPropertyType(class UProperty* UnsupportedProperty)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIPropertyDataProvider.CanSupportComplexPropertyType");

	struct
	{
		class UProperty*               UnsupportedProperty;
		bool                           ReturnValue;
	} params;
	params.UnsupportedProperty = UnsupportedProperty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UIResourceDataProvider.InitializeProvider
// (FUNC_Event, FUNC_Public)
// Parameters:
// bool                           bIsEditor                      (CPF_Parm)

void UUIResourceDataProvider::InitializeProvider(bool bIsEditor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceDataProvider.InitializeProvider");

	struct
	{
		bool                           bIsEditor;
	} params;
	params.bIsEditor = bIsEditor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIResourceCombinationProvider.ClearProviderReferences
// (FUNC_Defined, FUNC_Public)

void UUIResourceCombinationProvider::ClearProviderReferences()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.ClearProviderReferences");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UIResourceCombinationProvider.InitializeProvider
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           bIsEditor                      (CPF_Parm)
// class UUIResourceDataProvider* InStaticResourceProvider       (CPF_Parm)
// class UUIDataProvider_OnlineProfileSettings* InProfileProvider              (CPF_Parm)

void UUIResourceCombinationProvider::InitializeProvider(bool bIsEditor, class UUIResourceDataProvider* InStaticResourceProvider, class UUIDataProvider_OnlineProfileSettings* InProfileProvider)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UIResourceCombinationProvider.InitializeProvider");

	struct
	{
		bool                           bIsEditor;
		class UUIResourceDataProvider* InStaticResourceProvider;
		class UUIDataProvider_OnlineProfileSettings* InProfileProvider;
	} params;
	params.bIsEditor = bIsEditor;
	params.InStaticResourceProvider = InStaticResourceProvider;
	params.InProfileProvider = InProfileProvider;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.FindLocalPlayerIndex
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UPlayer*                 P                              (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UGameUISceneClient::FindLocalPlayerIndex(class UPlayer* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.FindLocalPlayerIndex");

	struct
	{
		class UPlayer*                 P;
		int                            ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameUISceneClient.NotifyPlayerRemoved
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            RemovedPlayer                  (CPF_Parm)

void UGameUISceneClient::NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyPlayerRemoved");

	struct
	{
		int                            PlayerIndex;
		class ULocalPlayer*            RemovedPlayer;
	} params;
	params.PlayerIndex = PlayerIndex;
	params.RemovedPlayer = RemovedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.NotifyPlayerAdded
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            PlayerIndex                    (CPF_Parm)
// class ULocalPlayer*            AddedPlayer                    (CPF_Parm)

void UGameUISceneClient::NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyPlayerAdded");

	struct
	{
		int                            PlayerIndex;
		class ULocalPlayer*            AddedPlayer;
	} params;
	params.PlayerIndex = PlayerIndex;
	params.AddedPlayer = AddedPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.NotifyGameSessionEnded
// (FUNC_Public)

void UGameUISceneClient::NotifyGameSessionEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyGameSessionEnded");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.NotifyClientTravel
// (FUNC_Public)
// Parameters:
// class APlayerController*       TravellingPlayer               (CPF_Parm)
// struct FString                 TravelURL                      (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class ETravelType> TravelType                     (CPF_Parm)
// bool                           bIsSeamlessTravel              (CPF_Parm)

void UGameUISceneClient::NotifyClientTravel(class APlayerController* TravellingPlayer, const struct FString& TravelURL, TEnumAsByte<enum class ETravelType> TravelType, bool bIsSeamlessTravel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.NotifyClientTravel");

	struct
	{
		class APlayerController*       TravellingPlayer;
		struct FString                 TravelURL;
		TEnumAsByte<enum class ETravelType> TravelType;
		bool                           bIsSeamlessTravel;
	} params;
	params.TravellingPlayer = TravellingPlayer;
	params.TravelURL = TravelURL;
	params.TravelType = TravelType;
	params.bIsSeamlessTravel = bIsSeamlessTravel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.PauseGame
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bDesiredPauseState             (CPF_Parm)
// int                            PlayerIndex                    (CPF_OptionalParm, CPF_Parm)

void UGameUISceneClient::PauseGame(bool bDesiredPauseState, int PlayerIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.PauseGame");

	struct
	{
		bool                           bDesiredPauseState;
		int                            PlayerIndex;
	} params;
	params.bDesiredPauseState = bDesiredPauseState;
	params.PlayerIndex = PlayerIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.CanUnpauseInternalUI
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UGameUISceneClient::CanUnpauseInternalUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.CanUnpauseInternalUI");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameUISceneClient.RequestInputProcessingUpdate
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UGameUISceneClient::RequestInputProcessingUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.RequestInputProcessingUpdate");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameUISceneClient.GetCurrentNetMode
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ENetMode> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class ENetMode> UGameUISceneClient::STATIC_GetCurrentNetMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameUISceneClient.GetCurrentNetMode");

	struct
	{
		TEnumAsByte<enum class ENetMode> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InteractiveFoliageActor.Touch
// (FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm, CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AInteractiveFoliageActor::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractiveFoliageActor.Touch");

	struct
	{
		class AActor*                  Other;
		class UPrimitiveComponent*     OtherComp;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
	} params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InteractiveFoliageActor.TakeDamage
// (FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Damage                         (CPF_Parm)
// class AController*             EventInstigator                (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm, CPF_Parm)

void AInteractiveFoliageActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractiveFoliageActor.TakeDamage");

	struct
	{
		int                            Damage;
		class AController*             EventInstigator;
		struct FVector                 HitLocation;
		struct FVector                 Momentum;
		class UClass*                  DamageType;
		struct FTraceHitInfo           HitInfo;
		class AActor*                  DamageCauser;
	} params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidInfluenceActor.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AFluidInfluenceActor::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidInfluenceActor.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidInfluenceActor.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void AFluidInfluenceActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidInfluenceActor.OnToggle");

	struct
	{
		class USeqAct_Toggle*          inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidSurfaceActor.Touch
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm, CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AFluidSurfaceActor::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceActor.Touch");

	struct
	{
		class AActor*                  Other;
		class UPrimitiveComponent*     OtherComp;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
	} params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidSurfaceActor.TakeDamage
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Damage                         (CPF_Parm)
// class AController*             EventInstigator                (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 Momentum                       (CPF_Parm)
// class UClass*                  DamageType                     (CPF_Parm)
// struct FTraceHitInfo           HitInfo                        (CPF_OptionalParm, CPF_Parm)
// class AActor*                  DamageCauser                   (CPF_OptionalParm, CPF_Parm)

void AFluidSurfaceActor::TakeDamage(int Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceActor.TakeDamage");

	struct
	{
		int                            Damage;
		class AController*             EventInstigator;
		struct FVector                 HitLocation;
		struct FVector                 Momentum;
		class UClass*                  DamageType;
		struct FTraceHitInfo           HitInfo;
		class AActor*                  DamageCauser;
	} params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.HitInfo = HitInfo;
	params.DamageCauser = DamageCauser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidSurfaceComponent.SetSimulationPosition
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 WorldPos                       (CPF_Parm)

void UFluidSurfaceComponent::SetSimulationPosition(const struct FVector& WorldPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceComponent.SetSimulationPosition");

	struct
	{
		struct FVector                 WorldPos;
	} params;
	params.WorldPos = WorldPos;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidSurfaceComponent.SetDetailPosition
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 WorldPos                       (CPF_Parm)

void UFluidSurfaceComponent::SetDetailPosition(const struct FVector& WorldPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceComponent.SetDetailPosition");

	struct
	{
		struct FVector                 WorldPos;
	} params;
	params.WorldPos = WorldPos;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidSurfaceComponent.ApplyForce
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 WorldPos                       (CPF_Parm)
// float                          Strength                       (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// bool                           bImpulse                       (CPF_OptionalParm, CPF_Parm)

void UFluidSurfaceComponent::ApplyForce(const struct FVector& WorldPos, float Strength, float Radius, bool bImpulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceComponent.ApplyForce");

	struct
	{
		struct FVector                 WorldPos;
		float                          Strength;
		float                          Radius;
		bool                           bImpulse;
	} params;
	params.WorldPos = WorldPos;
	params.Strength = Strength;
	params.Radius = Radius;
	params.bImpulse = bImpulse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpeedTreeComponent.SetMaterial
// (FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ESpeedTreeMeshType> MeshType                       (CPF_Parm)
// class UMaterialInterface*      Material                       (CPF_Parm)

void USpeedTreeComponent::SetMaterial(TEnumAsByte<enum class ESpeedTreeMeshType> MeshType, class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpeedTreeComponent.SetMaterial");

	struct
	{
		TEnumAsByte<enum class ESpeedTreeMeshType> MeshType;
		class UMaterialInterface*      Material;
	} params;
	params.MeshType = MeshType;
	params.Material = Material;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpeedTreeComponent.GetMaterial
// (FUNC_Native, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ESpeedTreeMeshType> MeshType                       (CPF_Parm)
// class UMaterialInterface*      ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMaterialInterface* USpeedTreeComponent::GetMaterial(TEnumAsByte<enum class ESpeedTreeMeshType> MeshType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpeedTreeComponent.GetMaterial");

	struct
	{
		TEnumAsByte<enum class ESpeedTreeMeshType> MeshType;
		class UMaterialInterface*      ReturnValue;
	} params;
	params.MeshType = MeshType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LensFlareSource.SetActorParameter
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// class AActor*                  Param                          (CPF_Parm)

void ALensFlareSource::SetActorParameter(const struct FName& ParameterName, class AActor* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetActorParameter");

	struct
	{
		struct FName                   ParameterName;
		class AActor*                  Param;
	} params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetExtColorParameter
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// float                          Red                            (CPF_Parm)
// float                          Green                          (CPF_Parm)
// float                          Blue                           (CPF_Parm)
// float                          Alpha                          (CPF_Parm)

void ALensFlareSource::SetExtColorParameter(const struct FName& ParameterName, float Red, float Green, float Blue, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetExtColorParameter");

	struct
	{
		struct FName                   ParameterName;
		float                          Red;
		float                          Green;
		float                          Blue;
		float                          Alpha;
	} params;
	params.ParameterName = ParameterName;
	params.Red = Red;
	params.Green = Green;
	params.Blue = Blue;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetColorParameter
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FLinearColor            Param                          (CPF_Parm)

void ALensFlareSource::SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetColorParameter");

	struct
	{
		struct FName                   ParameterName;
		struct FLinearColor            Param;
	} params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetVectorParameter
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// struct FVector                 Param                          (CPF_Parm)

void ALensFlareSource::SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetVectorParameter");

	struct
	{
		struct FName                   ParameterName;
		struct FVector                 Param;
	} params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetFloatParameter
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FName                   ParameterName                  (CPF_Parm)
// float                          Param                          (CPF_Parm)

void ALensFlareSource::SetFloatParameter(const struct FName& ParameterName, float Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetFloatParameter");

	struct
	{
		struct FName                   ParameterName;
		float                          Param;
	} params;
	params.ParameterName = ParameterName;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void ALensFlareSource::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ALensFlareSource::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ALensFlareSource::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareSource.SetTemplate
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class ULensFlare*              NewTemplate                    (CPF_Parm)

void ALensFlareSource::SetTemplate(class ULensFlare* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareSource.SetTemplate");

	struct
	{
		class ULensFlare*              NewTemplate;
	} params;
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareComponent.CreateAndSetMaterialInstanceConstant
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            ElementIndex                   (CPF_Parm)
// class UMaterialInstanceConstant* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMaterialInstanceConstant* ULensFlareComponent::CreateAndSetMaterialInstanceConstant(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.CreateAndSetMaterialInstanceConstant");

	struct
	{
		int                            ElementIndex;
		class UMaterialInstanceConstant* ReturnValue;
	} params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LensFlareComponent.SetMaterial
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ElementIndex                   (CPF_Parm)
// class UMaterialInterface*      Material                       (CPF_Parm)

void ULensFlareComponent::SetMaterial(int ElementIndex, class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.SetMaterial");

	struct
	{
		int                            ElementIndex;
		class UMaterialInterface*      Material;
	} params;
	params.ElementIndex = ElementIndex;
	params.Material = Material;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareComponent.GetMaterial
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ElementIndex                   (CPF_Parm)
// class UMaterialInterface*      ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMaterialInterface* ULensFlareComponent::GetMaterial(int ElementIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.GetMaterial");

	struct
	{
		int                            ElementIndex;
		class UMaterialInterface*      ReturnValue;
	} params;
	params.ElementIndex = ElementIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LensFlareComponent.SetIsActive
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bInIsActive                    (CPF_Parm)

void ULensFlareComponent::SetIsActive(bool bInIsActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.SetIsActive");

	struct
	{
		bool                           bInIsActive;
	} params;
	params.bInIsActive = bInIsActive;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareComponent.SetSourceColor
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FLinearColor            InSourceColor                  (CPF_Parm)

void ULensFlareComponent::SetSourceColor(const struct FLinearColor& InSourceColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.SetSourceColor");

	struct
	{
		struct FLinearColor            InSourceColor;
	} params;
	params.InSourceColor = InSourceColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LensFlareComponent.SetTemplate
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class ULensFlare*              NewTemplate                    (CPF_Parm)
// bool                           bForceSet                      (CPF_OptionalParm, CPF_Parm)

void ULensFlareComponent::SetTemplate(class ULensFlare* NewTemplate, bool bForceSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LensFlareComponent.SetTemplate");

	struct
	{
		class ULensFlare*              NewTemplate;
		bool                           bForceSet;
	} params;
	params.NewTemplate = NewTemplate;
	params.bForceSet = bForceSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureFlipBook.SetCurrentFrame
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            Row                            (CPF_Parm)
// int                            Col                            (CPF_Parm)

void UTextureFlipBook::SetCurrentFrame(int Row, int Col)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.SetCurrentFrame");

	struct
	{
		int                            Row;
		int                            Col;
	} params;
	params.Row = Row;
	params.Col = Col;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureFlipBook.Stop
// (FUNC_Native, FUNC_Public)

void UTextureFlipBook::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.Stop");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureFlipBook.Pause
// (FUNC_Native, FUNC_Public)

void UTextureFlipBook::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.Pause");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureFlipBook.Play
// (FUNC_Native, FUNC_Public)

void UTextureFlipBook::Play()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureFlipBook.Play");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Texture2DComposite.ResetSourceRegions
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UTexture2DComposite::ResetSourceRegions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DComposite.ResetSourceRegions");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Texture2DComposite.UpdateCompositeTexture
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            NumMipsToGenerate              (CPF_Parm)

void UTexture2DComposite::UpdateCompositeTexture(int NumMipsToGenerate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DComposite.UpdateCompositeTexture");

	struct
	{
		int                            NumMipsToGenerate;
	} params;
	params.NumMipsToGenerate = NumMipsToGenerate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Texture2DComposite.SourceTexturesFullyStreamedIn
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UTexture2DComposite::SourceTexturesFullyStreamedIn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DComposite.SourceTexturesFullyStreamedIn");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Texture2DDynamic.Create
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            InSizeX                        (CPF_Parm)
// int                            InSizeY                        (CPF_Parm)
// TEnumAsByte<enum class EPixelFormat> InFormat                       (CPF_OptionalParm, CPF_Parm)
// bool                           InIsResolveTarget              (CPF_OptionalParm, CPF_Parm)
// class UTexture2DDynamic*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UTexture2DDynamic* UTexture2DDynamic::STATIC_Create(int InSizeX, int InSizeY, TEnumAsByte<enum class EPixelFormat> InFormat, bool InIsResolveTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DDynamic.Create");

	struct
	{
		int                            InSizeX;
		int                            InSizeY;
		TEnumAsByte<enum class EPixelFormat> InFormat;
		bool                           InIsResolveTarget;
		class UTexture2DDynamic*       ReturnValue;
	} params;
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;
	params.InFormat = InFormat;
	params.InIsResolveTarget = InIsResolveTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Texture2DDynamic.UpdateMipFromPNG
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            MipIdx                         (CPF_Parm)
// TArray<unsigned char>          MipData                        (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UTexture2DDynamic::UpdateMipFromPNG(int MipIdx, TArray<unsigned char>* MipData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DDynamic.UpdateMipFromPNG");

	struct
	{
		int                            MipIdx;
		TArray<unsigned char>          MipData;
	} params;
	params.MipIdx = MipIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MipData != nullptr)
		*MipData = params.MipData;
}


// Function Engine.Texture2DDynamic.UpdateMipFromJPEG
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            MipIdx                         (CPF_Parm)
// TArray<unsigned char>          MipData                        (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UTexture2DDynamic::UpdateMipFromJPEG(int MipIdx, TArray<unsigned char>* MipData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DDynamic.UpdateMipFromJPEG");

	struct
	{
		int                            MipIdx;
		TArray<unsigned char>          MipData;
	} params;
	params.MipIdx = MipIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MipData != nullptr)
		*MipData = params.MipData;
}


// Function Engine.Texture2DDynamic.UpdateMip
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            MipIdx                         (CPF_Parm)
// TArray<unsigned char>          MipData                        (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UTexture2DDynamic::UpdateMip(int MipIdx, TArray<unsigned char>* MipData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DDynamic.UpdateMip");

	struct
	{
		int                            MipIdx;
		TArray<unsigned char>          MipData;
	} params;
	params.MipIdx = MipIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MipData != nullptr)
		*MipData = params.MipData;
}


// Function Engine.Texture2DDynamic.Init
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            InSizeX                        (CPF_Parm)
// int                            InSizeY                        (CPF_Parm)
// TEnumAsByte<enum class EPixelFormat> InFormat                       (CPF_OptionalParm, CPF_Parm)
// bool                           InIsResolveTarget              (CPF_OptionalParm, CPF_Parm)

void UTexture2DDynamic::Init(int InSizeX, int InSizeY, TEnumAsByte<enum class EPixelFormat> InFormat, bool InIsResolveTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Texture2DDynamic.Init");

	struct
	{
		int                            InSizeX;
		int                            InSizeY;
		TEnumAsByte<enum class EPixelFormat> InFormat;
		bool                           InIsResolveTarget;
	} params;
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;
	params.InFormat = InFormat;
	params.InIsResolveTarget = InIsResolveTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureMovie.Stop
// (FUNC_Native, FUNC_Public)

void UTextureMovie::Stop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureMovie.Stop");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureMovie.Pause
// (FUNC_Native, FUNC_Public)

void UTextureMovie::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureMovie.Pause");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureMovie.Play
// (FUNC_Native, FUNC_Public)

void UTextureMovie::Play()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureMovie.Play");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TextureRenderTarget2D.Create
// (FUNC_Final, FUNC_Native, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            InSizeX                        (CPF_Parm)
// int                            InSizeY                        (CPF_Parm)
// TEnumAsByte<enum class EPixelFormat> InFormat                       (CPF_OptionalParm, CPF_Parm)
// struct FLinearColor            InClearColor                   (CPF_OptionalParm, CPF_Parm)
// bool                           bOnlyRenderOnce                (CPF_OptionalParm, CPF_Parm)
// class UTextureRenderTarget2D*  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UTextureRenderTarget2D* UTextureRenderTarget2D::STATIC_Create(int InSizeX, int InSizeY, TEnumAsByte<enum class EPixelFormat> InFormat, const struct FLinearColor& InClearColor, bool bOnlyRenderOnce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureRenderTarget2D.Create");

	struct
	{
		int                            InSizeX;
		int                            InSizeY;
		TEnumAsByte<enum class EPixelFormat> InFormat;
		struct FLinearColor            InClearColor;
		bool                           bOnlyRenderOnce;
		class UTextureRenderTarget2D*  ReturnValue;
	} params;
	params.InSizeX = InSizeX;
	params.InSizeY = InSizeY;
	params.InFormat = InFormat;
	params.InClearColor = InClearColor;
	params.bOnlyRenderOnce = bOnlyRenderOnce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TextureRenderTarget2D.EventResourceUpdated
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// class UTextureRenderTarget2D*  RenderTarget                   (CPF_Parm)

void UTextureRenderTarget2D::EventResourceUpdated(class UTextureRenderTarget2D* RenderTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TextureRenderTarget2D.EventResourceUpdated");

	struct
	{
		class UTextureRenderTarget2D*  RenderTarget;
	} params;
	params.RenderTarget = RenderTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScriptedTexture.Render
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// class UCanvas*                 C                              (CPF_Parm)

void UScriptedTexture::Render(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScriptedTexture.Render");

	struct
	{
		class UCanvas*                 C;
	} params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AudioDevice.FindSoundClass
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   SoundClassName                 (CPF_Parm)
// class USoundClass*             ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class USoundClass* UAudioDevice::FindSoundClass(const struct FName& SoundClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioDevice.FindSoundClass");

	struct
	{
		struct FName                   SoundClassName;
		class USoundClass*             ReturnValue;
	} params;
	params.SoundClassName = SoundClassName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AudioDevice.SetSoundMode
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   NewModeGroup                   (CPF_Parm)
// struct FName                   NewModeValue                   (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UAudioDevice::SetSoundMode(const struct FName& NewModeGroup, const struct FName& NewModeValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AudioDevice.SetSoundMode");

	struct
	{
		struct FName                   NewModeGroup;
		struct FName                   NewModeValue;
		bool                           ReturnValue;
	} params;
	params.NewModeGroup = NewModeGroup;
	params.NewModeValue = NewModeValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Scout.PreBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AScout::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Scout.PreBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void ALight::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Light.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void ALight::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Light.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PointLightToggleable.ApplyCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct APointLightToggleable_FCheckpointRecord Record                         (CPF_Const, CPF_Parm, CPF_OutParm)

void APointLightToggleable::ApplyCheckpointRecord(struct APointLightToggleable_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightToggleable.ApplyCheckpointRecord");

	struct
	{
		struct APointLightToggleable_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.PointLightToggleable.CreateCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct APointLightToggleable_FCheckpointRecord Record                         (CPF_Parm, CPF_OutParm)

void APointLightToggleable::CreateCheckpointRecord(struct APointLightToggleable_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightToggleable.CreateCheckpointRecord");

	struct
	{
		struct APointLightToggleable_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.PointLightToggleable.ShouldSaveForCheckpoint
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APointLightToggleable::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightToggleable.ShouldSaveForCheckpoint");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SpotLightToggleable.ApplyCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ASpotLightToggleable_FCheckpointRecord Record                         (CPF_Const, CPF_Parm, CPF_OutParm)

void ASpotLightToggleable::ApplyCheckpointRecord(struct ASpotLightToggleable_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightToggleable.ApplyCheckpointRecord");

	struct
	{
		struct ASpotLightToggleable_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.SpotLightToggleable.CreateCheckpointRecord
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct ASpotLightToggleable_FCheckpointRecord Record                         (CPF_Parm, CPF_OutParm)

void ASpotLightToggleable::CreateCheckpointRecord(struct ASpotLightToggleable_FCheckpointRecord* Record)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightToggleable.CreateCheckpointRecord");

	struct
	{
		struct ASpotLightToggleable_FCheckpointRecord Record;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Record != nullptr)
		*Record = params.Record;
}


// Function Engine.SpotLightToggleable.ShouldSaveForCheckpoint
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ASpotLightToggleable::ShouldSaveForCheckpoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightToggleable.ShouldSaveForCheckpoint");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LightComponent.OnUpdatePropertyLightColor
// (FUNC_Defined, FUNC_Public)

void ULightComponent::OnUpdatePropertyLightColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyLightColor");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.OnUpdatePropertyBrightness
// (FUNC_Defined, FUNC_Public)

void ULightComponent::OnUpdatePropertyBrightness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyBrightness");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.OnUpdatePropertyOcclusionMaskDarkness
// (FUNC_Defined, FUNC_Public)

void ULightComponent::OnUpdatePropertyOcclusionMaskDarkness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyOcclusionMaskDarkness");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.OnUpdatePropertyBloomTint
// (FUNC_Defined, FUNC_Public)

void ULightComponent::OnUpdatePropertyBloomTint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyBloomTint");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.OnUpdatePropertyBloomScale
// (FUNC_Defined, FUNC_Public)

void ULightComponent::OnUpdatePropertyBloomScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.OnUpdatePropertyBloomScale");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.UpdateLightShaftParameters
// (FUNC_Final, FUNC_Native, FUNC_Public)

void ULightComponent::UpdateLightShaftParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.UpdateLightShaftParameters");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.UpdateColorAndBrightness
// (FUNC_Final, FUNC_Native, FUNC_Public)

void ULightComponent::UpdateColorAndBrightness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.UpdateColorAndBrightness");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.GetDirection
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector ULightComponent::GetDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.GetDirection");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LightComponent.GetOrigin
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector ULightComponent::GetOrigin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.GetOrigin");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LightComponent.SetLightProperties
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          NewBrightness                  (CPF_OptionalParm, CPF_Parm)
// struct FColor                  NewLightColor                  (CPF_OptionalParm, CPF_Parm)
// class ULightFunction*          NewLightFunction               (CPF_OptionalParm, CPF_Parm)

void ULightComponent::SetLightProperties(float NewBrightness, const struct FColor& NewLightColor, class ULightFunction* NewLightFunction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetLightProperties");

	struct
	{
		float                          NewBrightness;
		struct FColor                  NewLightColor;
		class ULightFunction*          NewLightFunction;
	} params;
	params.NewBrightness = NewBrightness;
	params.NewLightColor = NewLightColor;
	params.NewLightFunction = NewLightFunction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightComponent.SetEnabled
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bSetEnabled                    (CPF_Parm)

void ULightComponent::SetEnabled(bool bSetEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightComponent.SetEnabled");

	struct
	{
		bool                           bSetEnabled;
	} params;
	params.bSetEnabled = bSetEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DirectionalLightComponent.OnUpdatePropertyBrightness
// (FUNC_Defined, FUNC_Public)

void UDirectionalLightComponent::OnUpdatePropertyBrightness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.OnUpdatePropertyBrightness");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DirectionalLightComponent.OnUpdatePropertyLightColor
// (FUNC_Defined, FUNC_Public)

void UDirectionalLightComponent::OnUpdatePropertyLightColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DirectionalLightComponent.OnUpdatePropertyLightColor");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PointLightComponent.OnUpdatePropertyBrightness
// (FUNC_Defined, FUNC_Public)

void UPointLightComponent::OnUpdatePropertyBrightness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.OnUpdatePropertyBrightness");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PointLightComponent.OnUpdatePropertyLightColor
// (FUNC_Defined, FUNC_Public)

void UPointLightComponent::OnUpdatePropertyLightColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.OnUpdatePropertyLightColor");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PointLightComponent.SetTranslation
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 NewTranslation                 (CPF_Parm)

void UPointLightComponent::SetTranslation(const struct FVector& NewTranslation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PointLightComponent.SetTranslation");

	struct
	{
		struct FVector                 NewTranslation;
	} params;
	params.NewTranslation = NewTranslation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SpotLightComponent.SetRotation
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FRotator                NewRotation                    (CPF_Parm)

void USpotLightComponent::SetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SpotLightComponent.SetRotation");

	struct
	{
		struct FRotator                NewRotation;
	} params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LightEnvironmentComponent.IsEnabled
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ULightEnvironmentComponent::IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightEnvironmentComponent.IsEnabled");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LightEnvironmentComponent.SetEnabled
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewEnabled                    (CPF_Parm)

void ULightEnvironmentComponent::SetEnabled(bool bNewEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LightEnvironmentComponent.SetEnabled");

	struct
	{
		bool                           bNewEnabled;
	} params;
	params.bNewEnabled = bNewEnabled;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicLightEnvironmentComponent.GetLightIntensity
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FLinearColor            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FLinearColor UDynamicLightEnvironmentComponent::GetLightIntensity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicLightEnvironmentComponent.GetLightIntensity");

	struct
	{
		struct FLinearColor            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DynamicLightEnvironmentComponent.ResetEnvironment
// (FUNC_Final, FUNC_Native, FUNC_Public)

void UDynamicLightEnvironmentComponent::ResetEnvironment()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicLightEnvironmentComponent.ResetEnvironment");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.GetSocketOrBoneWorldLocationAndRotation
// (FUNC_Final, FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   SocketOrBoneName               (CPF_Parm)
// struct FVector                 OutLoc                         (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// struct FRotator                OutRot                         (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USkeletalMeshComponent::GetSocketOrBoneWorldLocationAndRotation(const struct FName& SocketOrBoneName, struct FVector* OutLoc, struct FRotator* OutRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetSocketOrBoneWorldLocationAndRotation");

	struct
	{
		struct FName                   SocketOrBoneName;
		struct FVector                 OutLoc;
		struct FRotator                OutRot;
		bool                           ReturnValue;
	} params;
	params.SocketOrBoneName = SocketOrBoneName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLoc != nullptr)
		*OutLoc = params.OutLoc;
	if (OutRot != nullptr)
		*OutRot = params.OutRot;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.SetMaterial
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ElementIndex                   (CPF_Parm)
// class UMaterialInterface*      Material                       (CPF_Parm)

void USkeletalMeshComponent::SetMaterial(int ElementIndex, class UMaterialInterface* Material)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetMaterial");

	struct
	{
		int                            ElementIndex;
		class UMaterialInterface*      Material;
	} params;
	params.ElementIndex = ElementIndex;
	params.Material = Material;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.GetRotation
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FRotator USkeletalMeshComponent::GetRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetRotation");

	struct
	{
		struct FRotator                ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetPosition
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector USkeletalMeshComponent::GetPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetPosition");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.BreakConstraint
// (FUNC_Final, FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 Impulse                        (CPF_Parm)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FName                   InBoneName                     (CPF_Parm)
// bool                           bVelChange                     (CPF_OptionalParm, CPF_Parm)

void USkeletalMeshComponent::BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const struct FName& InBoneName, bool bVelChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BreakConstraint");

	struct
	{
		struct FVector                 Impulse;
		struct FVector                 HitLocation;
		struct FName                   InBoneName;
		bool                           bVelChange;
	} params;
	params.Impulse = Impulse;
	params.HitLocation = HitLocation;
	params.InBoneName = InBoneName;
	params.bVelChange = bVelChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SkelMeshCompOnParticleSystemFinished
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class UParticleSystemComponent* PSC                            (CPF_Parm, CPF_EditInline)

void USkeletalMeshComponent::SkelMeshCompOnParticleSystemFinished(class UParticleSystemComponent* PSC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SkelMeshCompOnParticleSystemFinished");

	struct
	{
		class UParticleSystemComponent* PSC;
	} params;
	params.PSC = PSC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.PlayParticleEffect
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class UAnimNotify_PlayParticleEffect* AnimNotifyData                 (CPF_Const, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USkeletalMeshComponent::PlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.PlayParticleEffect");

	struct
	{
		class UAnimNotify_PlayParticleEffect* AnimNotifyData;
		bool                           ReturnValue;
	} params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.CreateForceField
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class UAnimNotify_ForceField*  AnimNotifyData                 (CPF_Const, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USkeletalMeshComponent::CreateForceField(class UAnimNotify_ForceField* AnimNotifyData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.CreateForceField");

	struct
	{
		class UAnimNotify_ForceField*  AnimNotifyData;
		bool                           ReturnValue;
	} params;
	params.AnimNotifyData = AnimNotifyData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.StopAnim
// (FUNC_Defined, FUNC_Public)

void USkeletalMeshComponent::StopAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.StopAnim");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.PlayAnim
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   AnimName                       (CPF_Parm)
// float                          Duration                       (CPF_OptionalParm, CPF_Parm)
// bool                           bLoop                          (CPF_OptionalParm, CPF_Parm)
// bool                           bRestartIfAlreadyPlaying       (CPF_OptionalParm, CPF_Parm)
// float                          StartTime                      (CPF_OptionalParm, CPF_Parm)
// bool                           bPlayBackwards                 (CPF_OptionalParm, CPF_Parm)

void USkeletalMeshComponent::PlayAnim(const struct FName& AnimName, float Duration, bool bLoop, bool bRestartIfAlreadyPlaying, float StartTime, bool bPlayBackwards)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.PlayAnim");

	struct
	{
		struct FName                   AnimName;
		float                          Duration;
		bool                           bLoop;
		bool                           bRestartIfAlreadyPlaying;
		float                          StartTime;
		bool                           bPlayBackwards;
	} params;
	params.AnimName = AnimName;
	params.Duration = Duration;
	params.bLoop = bLoop;
	params.bRestartIfAlreadyPlaying = bRestartIfAlreadyPlaying;
	params.StartTime = StartTime;
	params.bPlayBackwards = bPlayBackwards;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.CreateAnimTree
// (FUNC_Final, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::CreateAnimTree()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.CreateAnimTree");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.ShowMaterialSection
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// int                            MaterialID                     (CPF_Parm)
// bool                           bShow                          (CPF_Parm)
// int                            LODIndex                       (CPF_Parm)

void USkeletalMeshComponent::ShowMaterialSection(int MaterialID, bool bShow, int LODIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ShowMaterialSection");

	struct
	{
		int                            MaterialID;
		bool                           bShow;
		int                            LODIndex;
	} params;
	params.MaterialID = MaterialID;
	params.bShow = bShow;
	params.LODIndex = LODIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UpdateMeshForBrokenConstraints
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::UpdateMeshForBrokenConstraints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateMeshForBrokenConstraints");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UnHideBoneByName
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_Parm)

void USkeletalMeshComponent::UnHideBoneByName(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UnHideBoneByName");

	struct
	{
		struct FName                   BoneName;
	} params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.HideBoneByName
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_Parm)
// TEnumAsByte<enum class EPhysBodyOp> PhysBodyOption                 (CPF_Parm)

void USkeletalMeshComponent::HideBoneByName(const struct FName& BoneName, TEnumAsByte<enum class EPhysBodyOp> PhysBodyOption)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.HideBoneByName");

	struct
	{
		struct FName                   BoneName;
		TEnumAsByte<enum class EPhysBodyOp> PhysBodyOption;
	} params;
	params.BoneName = BoneName;
	params.PhysBodyOption = PhysBodyOption;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.IsBoneHidden
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            BoneIndex                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USkeletalMeshComponent::IsBoneHidden(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsBoneHidden");

	struct
	{
		int                            BoneIndex;
		bool                           ReturnValue;
	} params;
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.UnHideBone
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            BoneIndex                      (CPF_Parm)

void USkeletalMeshComponent::UnHideBone(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UnHideBone");

	struct
	{
		int                            BoneIndex;
	} params;
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.HideBone
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            BoneIndex                      (CPF_Parm)
// TEnumAsByte<enum class EPhysBodyOp> PhysBodyOption                 (CPF_Parm)

void USkeletalMeshComponent::HideBone(int BoneIndex, TEnumAsByte<enum class EPhysBodyOp> PhysBodyOption)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.HideBone");

	struct
	{
		int                            BoneIndex;
		TEnumAsByte<enum class EPhysBodyOp> PhysBodyOption;
	} params;
	params.BoneIndex = BoneIndex;
	params.PhysBodyOption = PhysBodyOption;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetFaceFXRegisterEx
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 RegName                        (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class EFaceFXRegOp> RegOp                          (CPF_Parm)
// float                          FirstValue                     (CPF_Parm)
// float                          FirstInterpDuration            (CPF_Parm)
// float                          NextValue                      (CPF_Parm)
// float                          NextInterpDuration             (CPF_Parm)

void USkeletalMeshComponent::SetFaceFXRegisterEx(const struct FString& RegName, TEnumAsByte<enum class EFaceFXRegOp> RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetFaceFXRegisterEx");

	struct
	{
		struct FString                 RegName;
		TEnumAsByte<enum class EFaceFXRegOp> RegOp;
		float                          FirstValue;
		float                          FirstInterpDuration;
		float                          NextValue;
		float                          NextInterpDuration;
	} params;
	params.RegName = RegName;
	params.RegOp = RegOp;
	params.FirstValue = FirstValue;
	params.FirstInterpDuration = FirstInterpDuration;
	params.NextValue = NextValue;
	params.NextInterpDuration = NextInterpDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetFaceFXRegister
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 RegName                        (CPF_Parm, CPF_NeedCtorLink)
// float                          RegVal                         (CPF_Parm)
// TEnumAsByte<enum class EFaceFXRegOp> RegOp                          (CPF_Parm)
// float                          InterpDuration                 (CPF_OptionalParm, CPF_Parm)

void USkeletalMeshComponent::SetFaceFXRegister(const struct FString& RegName, float RegVal, TEnumAsByte<enum class EFaceFXRegOp> RegOp, float InterpDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetFaceFXRegister");

	struct
	{
		struct FString                 RegName;
		float                          RegVal;
		TEnumAsByte<enum class EFaceFXRegOp> RegOp;
		float                          InterpDuration;
	} params;
	params.RegName = RegName;
	params.RegVal = RegVal;
	params.RegOp = RegOp;
	params.InterpDuration = InterpDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.GetFaceFXRegister
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 RegName                        (CPF_Parm, CPF_NeedCtorLink)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USkeletalMeshComponent::GetFaceFXRegister(const struct FString& RegName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetFaceFXRegister");

	struct
	{
		struct FString                 RegName;
		float                          ReturnValue;
	} params;
	params.RegName = RegName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.DeclareFaceFXRegister
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 RegName                        (CPF_Parm, CPF_NeedCtorLink)

void USkeletalMeshComponent::DeclareFaceFXRegister(const struct FString& RegName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.DeclareFaceFXRegister");

	struct
	{
		struct FString                 RegName;
	} params;
	params.RegName = RegName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USkeletalMeshComponent::IsPlayingFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsPlayingFaceFXAnim");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.StopFaceFXAnim
// (FUNC_Final, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::StopFaceFXAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.StopFaceFXAnim");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.PlayFaceFXAnim
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UFaceFXAnimSet*          FaceFXAnimSetRef               (CPF_Parm)
// struct FString                 AnimName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 GroupName                      (CPF_Parm, CPF_NeedCtorLink)
// class USoundCue*               SoundCueToPlay                 (CPF_Parm)
// class UAkEvent*                AkEventToPlay                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USkeletalMeshComponent::PlayFaceFXAnim(class UFaceFXAnimSet* FaceFXAnimSetRef, const struct FString& AnimName, const struct FString& GroupName, class USoundCue* SoundCueToPlay, class UAkEvent* AkEventToPlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.PlayFaceFXAnim");

	struct
	{
		class UFaceFXAnimSet*          FaceFXAnimSetRef;
		struct FString                 AnimName;
		struct FString                 GroupName;
		class USoundCue*               SoundCueToPlay;
		class UAkEvent*                AkEventToPlay;
		bool                           ReturnValue;
	} params;
	params.FaceFXAnimSetRef = FaceFXAnimSetRef;
	params.AnimName = AnimName;
	params.GroupName = GroupName;
	params.SoundCueToPlay = SoundCueToPlay;
	params.AkEventToPlay = AkEventToPlay;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.ToggleInstanceVertexWeights
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bEnable                        (CPF_Parm)
// int                            LODIdx                         (CPF_Parm)

void USkeletalMeshComponent::ToggleInstanceVertexWeights(bool bEnable, int LODIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ToggleInstanceVertexWeights");

	struct
	{
		bool                           bEnable;
		int                            LODIdx;
	} params;
	params.bEnable = bEnable;
	params.LODIdx = LODIdx;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UpdateInstanceVertexWeightBones
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// TArray<struct FBonePair>       BonePairs                      (CPF_Parm, CPF_NeedCtorLink)

void USkeletalMeshComponent::UpdateInstanceVertexWeightBones(TArray<struct FBonePair> BonePairs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateInstanceVertexWeightBones");

	struct
	{
		TArray<struct FBonePair>       BonePairs;
	} params;
	params.BonePairs = BonePairs;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.FindInstanceVertexweightBonePair
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FBonePair               Bones                          (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USkeletalMeshComponent::FindInstanceVertexweightBonePair(const struct FBonePair& Bones)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindInstanceVertexweightBonePair");

	struct
	{
		struct FBonePair               Bones;
		int                            ReturnValue;
	} params;
	params.Bones = Bones;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.RemoveInstanceVertexWeightBoneParented
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_Parm)

void USkeletalMeshComponent::RemoveInstanceVertexWeightBoneParented(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.RemoveInstanceVertexWeightBoneParented");

	struct
	{
		struct FName                   BoneName;
	} params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.AddInstanceVertexWeightBoneParented
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_Parm)
// bool                           bPairWithParent                (CPF_OptionalParm, CPF_Parm)

void USkeletalMeshComponent::AddInstanceVertexWeightBoneParented(const struct FName& BoneName, bool bPairWithParent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AddInstanceVertexWeightBoneParented");

	struct
	{
		struct FName                   BoneName;
		bool                           bPairWithParent;
	} params;
	params.BoneName = BoneName;
	params.bPairWithParent = bPairWithParent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.GetBonesWithinRadius
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 Origin                         (CPF_Parm)
// float                          Radius                         (CPF_Parm)
// int                            TraceFlags                     (CPF_Parm)
// TArray<struct FName>           out_Bones                      (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USkeletalMeshComponent::GetBonesWithinRadius(const struct FVector& Origin, float Radius, int TraceFlags, TArray<struct FName>* out_Bones)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBonesWithinRadius");

	struct
	{
		struct FVector                 Origin;
		float                          Radius;
		int                            TraceFlags;
		TArray<struct FName>           out_Bones;
		bool                           ReturnValue;
	} params;
	params.Origin = Origin;
	params.Radius = Radius;
	params.TraceFlags = TraceFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_Bones != nullptr)
		*out_Bones = params.out_Bones;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.UpdateAnimations
// (FUNC_Final, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::UpdateAnimations()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateAnimations");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.ForceSkelUpdate
// (FUNC_Final, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::ForceSkelUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceSkelUpdate");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bMoveUnfixedBodies             (CPF_Parm)
// bool                           bTeleport                      (CPF_Parm)

void USkeletalMeshComponent::UpdateRBBonesFromSpaceBases(bool bMoveUnfixedBodies, bool bTeleport)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateRBBonesFromSpaceBases");

	struct
	{
		bool                           bMoveUnfixedBodies;
		bool                           bTeleport;
	} params;
	params.bMoveUnfixedBodies = bMoveUnfixedBodies;
	params.bTeleport = bTeleport;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bHasInstance                   (CPF_Parm)
// bool                           bUseCurrentPosition            (CPF_OptionalParm, CPF_Parm)

void USkeletalMeshComponent::SetHasPhysicsAssetInstance(bool bHasInstance, bool bUseCurrentPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetHasPhysicsAssetInstance");

	struct
	{
		bool                           bHasInstance;
		bool                           bUseCurrentPosition;
	} params;
	params.bHasInstance = bHasInstance;
	params.bUseCurrentPosition = bUseCurrentPosition;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.FindBodyInstanceNamed
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_Parm)
// class URB_BodyInstance*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class URB_BodyInstance* USkeletalMeshComponent::FindBodyInstanceNamed(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindBodyInstanceNamed");

	struct
	{
		struct FName                   BoneName;
		class URB_BodyInstance*        ReturnValue;
	} params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindConstraintBoneName
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            ConstraintIndex                (CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName USkeletalMeshComponent::FindConstraintBoneName(int ConstraintIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindConstraintBoneName");

	struct
	{
		int                            ConstraintIndex;
		struct FName                   ReturnValue;
	} params;
	params.ConstraintIndex = ConstraintIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindConstraintIndex
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   ConstraintName                 (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USkeletalMeshComponent::FindConstraintIndex(const struct FName& ConstraintName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindConstraintIndex");

	struct
	{
		struct FName                   ConstraintName;
		int                            ReturnValue;
	} params;
	params.ConstraintName = ConstraintName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.InitMorphTargets
// (FUNC_Final, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::InitMorphTargets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.InitMorphTargets");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.InitSkelControls
// (FUNC_Final, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::InitSkelControls()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.InitSkelControls");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UpdateParentBoneMap
// (FUNC_Final, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::UpdateParentBoneMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateParentBoneMap");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetParentAnimComponent
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class USkeletalMeshComponent*  NewParentAnimComp              (CPF_Parm, CPF_EditInline)

void USkeletalMeshComponent::SetParentAnimComponent(class USkeletalMeshComponent* NewParentAnimComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetParentAnimComponent");

	struct
	{
		class USkeletalMeshComponent*  NewParentAnimComp;
	} params;
	params.NewParentAnimComp = NewParentAnimComp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetAnimTreeTemplate
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UAnimTree*               NewTemplate                    (CPF_Parm)

void USkeletalMeshComponent::SetAnimTreeTemplate(class UAnimTree* NewTemplate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAnimTreeTemplate");

	struct
	{
		class UAnimTree*               NewTemplate;
	} params;
	params.NewTemplate = NewTemplate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.GetClosestCollidingBoneLocation
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 TestLocation                   (CPF_Parm)
// bool                           bCheckZeroExtent               (CPF_Parm)
// bool                           bCheckNonZeroExtent            (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector USkeletalMeshComponent::GetClosestCollidingBoneLocation(const struct FVector& TestLocation, bool bCheckZeroExtent, bool bCheckNonZeroExtent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClosestCollidingBoneLocation");

	struct
	{
		struct FVector                 TestLocation;
		bool                           bCheckZeroExtent;
		bool                           bCheckNonZeroExtent;
		struct FVector                 ReturnValue;
	} params;
	params.TestLocation = TestLocation;
	params.bCheckZeroExtent = bCheckZeroExtent;
	params.bCheckNonZeroExtent = bCheckNonZeroExtent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindClosestBone
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 TestLocation                   (CPF_Parm)
// struct FVector                 BoneLocation                   (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// float                          IgnoreScale                    (CPF_OptionalParm, CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName USkeletalMeshComponent::FindClosestBone(const struct FVector& TestLocation, float IgnoreScale, struct FVector* BoneLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindClosestBone");

	struct
	{
		struct FVector                 TestLocation;
		struct FVector                 BoneLocation;
		float                          IgnoreScale;
		struct FName                   ReturnValue;
	} params;
	params.TestLocation = TestLocation;
	params.IgnoreScale = IgnoreScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (BoneLocation != nullptr)
		*BoneLocation = params.BoneLocation;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.TransformFromBoneSpace
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   BoneName                       (CPF_Parm)
// struct FVector                 InPosition                     (CPF_Parm)
// struct FRotator                InRotation                     (CPF_Parm)
// struct FVector                 OutPosition                    (CPF_Parm, CPF_OutParm)
// struct FRotator                OutRotation                    (CPF_Parm, CPF_OutParm)

void USkeletalMeshComponent::TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.TransformFromBoneSpace");

	struct
	{
		struct FName                   BoneName;
		struct FVector                 InPosition;
		struct FRotator                InRotation;
		struct FVector                 OutPosition;
		struct FRotator                OutRotation;
	} params;
	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
}


// Function Engine.SkeletalMeshComponent.TransformToBoneSpace
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   BoneName                       (CPF_Parm)
// struct FVector                 InPosition                     (CPF_Parm)
// struct FRotator                InRotation                     (CPF_Parm)
// struct FVector                 OutPosition                    (CPF_Parm, CPF_OutParm)
// struct FRotator                OutRotation                    (CPF_Parm, CPF_OutParm)

void USkeletalMeshComponent::TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.TransformToBoneSpace");

	struct
	{
		struct FName                   BoneName;
		struct FVector                 InPosition;
		struct FRotator                InRotation;
		struct FVector                 OutPosition;
		struct FRotator                OutRotation;
	} params;
	params.BoneName = BoneName;
	params.InPosition = InPosition;
	params.InRotation = InRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPosition != nullptr)
		*OutPosition = params.OutPosition;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;
}


// Function Engine.SkeletalMeshComponent.GetBoneAxis
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_Parm)
// TEnumAsByte<enum class EAxis>  Axis                           (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector USkeletalMeshComponent::GetBoneAxis(const struct FName& BoneName, TEnumAsByte<enum class EAxis> Axis)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneAxis");

	struct
	{
		struct FName                   BoneName;
		TEnumAsByte<enum class EAxis>  Axis;
		struct FVector                 ReturnValue;
	} params;
	params.BoneName = BoneName;
	params.Axis = Axis;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetComposedRefPosePosition
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector USkeletalMeshComponent::GetComposedRefPosePosition(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetComposedRefPosePosition");

	struct
	{
		struct FName                   BoneName;
		struct FVector                 ReturnValue;
	} params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetRefPosePosition
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            BoneIndex                      (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector USkeletalMeshComponent::GetRefPosePosition(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetRefPosePosition");

	struct
	{
		int                            BoneIndex;
		struct FVector                 ReturnValue;
	} params;
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.BoneIsChildOf
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_Parm)
// struct FName                   ParentBoneName                 (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USkeletalMeshComponent::BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.BoneIsChildOf");

	struct
	{
		struct FName                   BoneName;
		struct FName                   ParentBoneName;
		bool                           ReturnValue;
	} params;
	params.BoneName = BoneName;
	params.ParentBoneName = ParentBoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBoneNames
// (FUNC_Final, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FName>           BoneNames                      (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void USkeletalMeshComponent::GetBoneNames(TArray<struct FName>* BoneNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneNames");

	struct
	{
		TArray<struct FName>           BoneNames;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (BoneNames != nullptr)
		*BoneNames = params.BoneNames;
}


// Function Engine.SkeletalMeshComponent.GetParentBone
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName USkeletalMeshComponent::GetParentBone(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetParentBone");

	struct
	{
		struct FName                   BoneName;
		struct FName                   ReturnValue;
	} params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBoneMatrix
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            BoneIndex                      (CPF_Parm)
// struct FMatrix                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FMatrix USkeletalMeshComponent::GetBoneMatrix(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneMatrix");

	struct
	{
		int                            BoneIndex;
		struct FMatrix                 ReturnValue;
	} params;
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBoneName
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// int                            BoneIndex                      (CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName USkeletalMeshComponent::GetBoneName(int BoneIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneName");

	struct
	{
		int                            BoneIndex;
		struct FName                   ReturnValue;
	} params;
	params.BoneIndex = BoneIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.MatchRefBone
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USkeletalMeshComponent::MatchRefBone(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.MatchRefBone");

	struct
	{
		struct FName                   BoneName;
		int                            ReturnValue;
	} params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBoneLocation
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_Parm)
// int                            Space                          (CPF_OptionalParm, CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector USkeletalMeshComponent::GetBoneLocation(const struct FName& BoneName, int Space)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneLocation");

	struct
	{
		struct FName                   BoneName;
		int                            Space;
		struct FVector                 ReturnValue;
	} params;
	params.BoneName = BoneName;
	params.Space = Space;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetBoneQuaternion
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   BoneName                       (CPF_Parm)
// int                            Space                          (CPF_OptionalParm, CPF_Parm)
// struct FQuat                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FQuat USkeletalMeshComponent::GetBoneQuaternion(const struct FName& BoneName, int Space)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetBoneQuaternion");

	struct
	{
		struct FName                   BoneName;
		int                            Space;
		struct FQuat                   ReturnValue;
	} params;
	params.BoneName = BoneName;
	params.Space = Space;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindMorphNode
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InNodeName                     (CPF_Parm)
// class UMorphNodeBase*          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMorphNodeBase* USkeletalMeshComponent::FindMorphNode(const struct FName& InNodeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindMorphNode");

	struct
	{
		struct FName                   InNodeName;
		class UMorphNodeBase*          ReturnValue;
	} params;
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindSkelControl
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InControlName                  (CPF_Parm)
// class USkelControlBase*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class USkelControlBase* USkeletalMeshComponent::FindSkelControl(const struct FName& InControlName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindSkelControl");

	struct
	{
		struct FName                   InControlName;
		class USkelControlBase*        ReturnValue;
	} params;
	params.InControlName = InControlName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.AllAnimNodes
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class UAnimNode*               Node                           (CPF_Parm, CPF_OutParm)

void USkeletalMeshComponent::AllAnimNodes(class UClass* BaseClass, class UAnimNode** Node)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AllAnimNodes");

	struct
	{
		class UClass*                  BaseClass;
		class UAnimNode*               Node;
	} params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Node != nullptr)
		*Node = params.Node;
}


// Function Engine.SkeletalMeshComponent.FindAnimNode
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InNodeName                     (CPF_Parm)
// class UAnimNode*               ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UAnimNode* USkeletalMeshComponent::FindAnimNode(const struct FName& InNodeName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindAnimNode");

	struct
	{
		struct FName                   InNodeName;
		class UAnimNode*               ReturnValue;
	} params;
	params.InNodeName = InNodeName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindMorphTarget
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   MorphTargetName                (CPF_Parm)
// class UMorphTarget*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UMorphTarget* USkeletalMeshComponent::FindMorphTarget(const struct FName& MorphTargetName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindMorphTarget");

	struct
	{
		struct FName                   MorphTargetName;
		class UMorphTarget*            ReturnValue;
	} params;
	params.MorphTargetName = MorphTargetName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAnimLength
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   AnimSeqName                    (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USkeletalMeshComponent::GetAnimLength(const struct FName& AnimSeqName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimLength");

	struct
	{
		struct FName                   AnimSeqName;
		float                          ReturnValue;
	} params;
	params.AnimSeqName = AnimSeqName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetAnimRateByDuration
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   AnimSeqName                    (CPF_Parm)
// float                          Duration                       (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USkeletalMeshComponent::GetAnimRateByDuration(const struct FName& AnimSeqName, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetAnimRateByDuration");

	struct
	{
		struct FName                   AnimSeqName;
		float                          Duration;
		float                          ReturnValue;
	} params;
	params.AnimSeqName = AnimSeqName;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.RestoreSavedAnimSets
// (FUNC_Final, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::RestoreSavedAnimSets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.RestoreSavedAnimSets");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SaveAnimSets
// (FUNC_Final, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::SaveAnimSets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SaveAnimSets");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.FindAnimSequence
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   AnimSeqName                    (CPF_Parm)
// class UAnimSequence*           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UAnimSequence* USkeletalMeshComponent::FindAnimSequence(const struct FName& AnimSeqName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindAnimSequence");

	struct
	{
		struct FName                   AnimSeqName;
		class UAnimSequence*           ReturnValue;
	} params;
	params.AnimSeqName = AnimSeqName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.WakeSoftBody
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::WakeSoftBody()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.WakeSoftBody");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetSoftBodyFrozen
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewFrozen                     (CPF_Parm)

void USkeletalMeshComponent::SetSoftBodyFrozen(bool bNewFrozen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetSoftBodyFrozen");

	struct
	{
		bool                           bNewFrozen;
	} params;
	params.bNewFrozen = bNewFrozen;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UpdateSoftBodyParams
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::UpdateSoftBodyParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateSoftBodyParams");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothValidBounds
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ClothValidBoundsMin            (CPF_Parm)
// struct FVector                 ClothValidBoundsMax            (CPF_Parm)

void USkeletalMeshComponent::SetClothValidBounds(const struct FVector& ClothValidBoundsMin, const struct FVector& ClothValidBoundsMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothValidBounds");

	struct
	{
		struct FVector                 ClothValidBoundsMin;
		struct FVector                 ClothValidBoundsMax;
	} params;
	params.ClothValidBoundsMin = ClothValidBoundsMin;
	params.ClothValidBoundsMax = ClothValidBoundsMax;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.EnableClothValidBounds
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           IfEnableClothValidBounds       (CPF_Parm)

void USkeletalMeshComponent::EnableClothValidBounds(bool IfEnableClothValidBounds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.EnableClothValidBounds");

	struct
	{
		bool                           IfEnableClothValidBounds;
	} params;
	params.IfEnableClothValidBounds = IfEnableClothValidBounds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.AttachClothToCollidingShapes
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           AttatchTwoWay                  (CPF_Parm)
// bool                           AttachTearable                 (CPF_Parm)

void USkeletalMeshComponent::AttachClothToCollidingShapes(bool AttatchTwoWay, bool AttachTearable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachClothToCollidingShapes");

	struct
	{
		bool                           AttatchTwoWay;
		bool                           AttachTearable;
	} params;
	params.AttatchTwoWay = AttatchTwoWay;
	params.AttachTearable = AttachTearable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothVelocity
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 VelocityOffSet                 (CPF_Parm)

void USkeletalMeshComponent::SetClothVelocity(const struct FVector& VelocityOffSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothVelocity");

	struct
	{
		struct FVector                 VelocityOffSet;
	} params;
	params.VelocityOffSet = VelocityOffSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothPosition
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ClothOffSet                    (CPF_Parm)

void USkeletalMeshComponent::SetClothPosition(const struct FVector& ClothOffSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothPosition");

	struct
	{
		struct FVector                 ClothOffSet;
	} params;
	params.ClothOffSet = ClothOffSet;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothSleep
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           IfClothSleep                   (CPF_Parm)

void USkeletalMeshComponent::SetClothSleep(bool IfClothSleep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothSleep");

	struct
	{
		bool                           IfClothSleep;
	} params;
	params.IfClothSleep = IfClothSleep;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothThickness
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ClothThickness                 (CPF_Parm)

void USkeletalMeshComponent::SetClothThickness(float ClothThickness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothThickness");

	struct
	{
		float                          ClothThickness;
	} params;
	params.ClothThickness = ClothThickness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothTearFactor
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ClothTearFactor                (CPF_Parm)

void USkeletalMeshComponent::SetClothTearFactor(float ClothTearFactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothTearFactor");

	struct
	{
		float                          ClothTearFactor;
	} params;
	params.ClothTearFactor = ClothTearFactor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothStretchingStiffness
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ClothStretchingStiffness       (CPF_Parm)

void USkeletalMeshComponent::SetClothStretchingStiffness(float ClothStretchingStiffness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothStretchingStiffness");

	struct
	{
		float                          ClothStretchingStiffness;
	} params;
	params.ClothStretchingStiffness = ClothStretchingStiffness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothSolverIterations
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// int                            ClothSolverIterations          (CPF_Parm)

void USkeletalMeshComponent::SetClothSolverIterations(int ClothSolverIterations)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothSolverIterations");

	struct
	{
		int                            ClothSolverIterations;
	} params;
	params.ClothSolverIterations = ClothSolverIterations;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothSleepLinearVelocity
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ClothSleepLinearVelocity       (CPF_Parm)

void USkeletalMeshComponent::SetClothSleepLinearVelocity(float ClothSleepLinearVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothSleepLinearVelocity");

	struct
	{
		float                          ClothSleepLinearVelocity;
	} params;
	params.ClothSleepLinearVelocity = ClothSleepLinearVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothPressure
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ClothPressure                  (CPF_Parm)

void USkeletalMeshComponent::SetClothPressure(float ClothPressure)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothPressure");

	struct
	{
		float                          ClothPressure;
	} params;
	params.ClothPressure = ClothPressure;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothFriction
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ClothFriction                  (CPF_Parm)

void USkeletalMeshComponent::SetClothFriction(float ClothFriction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothFriction");

	struct
	{
		float                          ClothFriction;
	} params;
	params.ClothFriction = ClothFriction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothFlags
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// int                            ClothFlags                     (CPF_Parm)

void USkeletalMeshComponent::SetClothFlags(int ClothFlags)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothFlags");

	struct
	{
		int                            ClothFlags;
	} params;
	params.ClothFlags = ClothFlags;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothDampingCoefficient
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ClothDampingCoefficient        (CPF_Parm)

void USkeletalMeshComponent::SetClothDampingCoefficient(float ClothDampingCoefficient)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothDampingCoefficient");

	struct
	{
		float                          ClothDampingCoefficient;
	} params;
	params.ClothDampingCoefficient = ClothDampingCoefficient;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothCollisionResponseCoefficient
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ClothCollisionResponseCoefficient (CPF_Parm)

void USkeletalMeshComponent::SetClothCollisionResponseCoefficient(float ClothCollisionResponseCoefficient)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothCollisionResponseCoefficient");

	struct
	{
		float                          ClothCollisionResponseCoefficient;
	} params;
	params.ClothCollisionResponseCoefficient = ClothCollisionResponseCoefficient;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothBendingStiffness
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ClothBendingStiffness          (CPF_Parm)

void USkeletalMeshComponent::SetClothBendingStiffness(float ClothBendingStiffness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothBendingStiffness");

	struct
	{
		float                          ClothBendingStiffness;
	} params;
	params.ClothBendingStiffness = ClothBendingStiffness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothAttachmentTearFactor
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ClothAttachTearFactor          (CPF_Parm)

void USkeletalMeshComponent::SetClothAttachmentTearFactor(float ClothAttachTearFactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothAttachmentTearFactor");

	struct
	{
		float                          ClothAttachTearFactor;
	} params;
	params.ClothAttachTearFactor = ClothAttachTearFactor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothAttachmentResponseCoefficient
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ClothAttachmentResponseCoefficient (CPF_Parm)

void USkeletalMeshComponent::SetClothAttachmentResponseCoefficient(float ClothAttachmentResponseCoefficient)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothAttachmentResponseCoefficient");

	struct
	{
		float                          ClothAttachmentResponseCoefficient;
	} params;
	params.ClothAttachmentResponseCoefficient = ClothAttachmentResponseCoefficient;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.GetClothThickness
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USkeletalMeshComponent::GetClothThickness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothThickness");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothTearFactor
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USkeletalMeshComponent::GetClothTearFactor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothTearFactor");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothStretchingStiffness
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USkeletalMeshComponent::GetClothStretchingStiffness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothStretchingStiffness");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothSolverIterations
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USkeletalMeshComponent::GetClothSolverIterations()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothSolverIterations");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothSleepLinearVelocity
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USkeletalMeshComponent::GetClothSleepLinearVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothSleepLinearVelocity");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothPressure
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USkeletalMeshComponent::GetClothPressure()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothPressure");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothFriction
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USkeletalMeshComponent::GetClothFriction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothFriction");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothFlags
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USkeletalMeshComponent::GetClothFlags()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothFlags");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothDampingCoefficient
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USkeletalMeshComponent::GetClothDampingCoefficient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothDampingCoefficient");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothCollisionResponseCoefficient
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USkeletalMeshComponent::GetClothCollisionResponseCoefficient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothCollisionResponseCoefficient");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothBendingStiffness
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USkeletalMeshComponent::GetClothBendingStiffness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothBendingStiffness");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothAttachmentTearFactor
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USkeletalMeshComponent::GetClothAttachmentTearFactor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothAttachmentTearFactor");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetClothAttachmentResponseCoefficient
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USkeletalMeshComponent::GetClothAttachmentResponseCoefficient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetClothAttachmentResponseCoefficient");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.ForceApexClothingTeleport
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::ForceApexClothingTeleport()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceApexClothingTeleport");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.ForceApexClothingTeleportAndReset
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::ForceApexClothingTeleportAndReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ForceApexClothingTeleportAndReset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.ResetClothVertsToRefPose
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::ResetClothVertsToRefPose()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.ResetClothVertsToRefPose");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetAttachClothVertsToBaseBody
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bAttachVerts                   (CPF_Parm)

void USkeletalMeshComponent::SetAttachClothVertsToBaseBody(bool bAttachVerts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetAttachClothVertsToBaseBody");

	struct
	{
		bool                           bAttachVerts;
	} params;
	params.bAttachVerts = bAttachVerts;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothExternalForce
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 InForce                        (CPF_Parm)

void USkeletalMeshComponent::SetClothExternalForce(const struct FVector& InForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothExternalForce");

	struct
	{
		struct FVector                 InForce;
	} params;
	params.InForce = InForce;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.UpdateClothParams
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)

void USkeletalMeshComponent::UpdateClothParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.UpdateClothParams");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetEnableClothingSimulation
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bInEnable                      (CPF_Parm)

void USkeletalMeshComponent::SetEnableClothingSimulation(bool bInEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnableClothingSimulation");

	struct
	{
		bool                           bInEnable;
	} params;
	params.bInEnable = bInEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetClothFrozen
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewFrozen                     (CPF_Parm)

void USkeletalMeshComponent::SetClothFrozen(bool bNewFrozen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetClothFrozen");

	struct
	{
		bool                           bNewFrozen;
	} params;
	params.bNewFrozen = bNewFrozen;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetEnableClothSimulation
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bInEnable                      (CPF_Parm)

void USkeletalMeshComponent::SetEnableClothSimulation(bool bInEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetEnableClothSimulation");

	struct
	{
		bool                           bInEnable;
	} params;
	params.bInEnable = bInEnable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetForceRefPose
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bNewForceRefPose               (CPF_Parm)

void USkeletalMeshComponent::SetForceRefPose(bool bNewForceRefPose)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetForceRefPose");

	struct
	{
		bool                           bNewForceRefPose;
	} params;
	params.bNewForceRefPose = bNewForceRefPose;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetPhysicsAsset
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UPhysicsAsset*           NewPhysicsAsset                (CPF_Parm)
// bool                           bForceReInit                   (CPF_OptionalParm, CPF_Parm)

void USkeletalMeshComponent::SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetPhysicsAsset");

	struct
	{
		class UPhysicsAsset*           NewPhysicsAsset;
		bool                           bForceReInit;
	} params;
	params.NewPhysicsAsset = NewPhysicsAsset;
	params.bForceReInit = bForceReInit;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.SetSkeletalMesh
// (FUNC_Final, FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class USkeletalMesh*           NewMesh                        (CPF_Parm)
// bool                           bKeepSpaceBases                (CPF_OptionalParm, CPF_Parm)

void USkeletalMeshComponent::SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bKeepSpaceBases)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.SetSkeletalMesh");

	struct
	{
		class USkeletalMesh*           NewMesh;
		bool                           bKeepSpaceBases;
	} params;
	params.NewMesh = NewMesh;
	params.bKeepSpaceBases = bKeepSpaceBases;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.GetTransformMatrix
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FMatrix                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FMatrix USkeletalMeshComponent::GetTransformMatrix()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetTransformMatrix");

	struct
	{
		struct FMatrix                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.AttachedComponents
// (FUNC_Final, FUNC_Iterator, FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class UClass*                  BaseClass                      (CPF_Parm)
// class UActorComponent*         OutComponent                   (CPF_Parm, CPF_OutParm, CPF_EditInline)

void USkeletalMeshComponent::AttachedComponents(class UClass* BaseClass, class UActorComponent** OutComponent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachedComponents");

	struct
	{
		class UClass*                  BaseClass;
		class UActorComponent*         OutComponent;
	} params;
	params.BaseClass = BaseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutComponent != nullptr)
		*OutComponent = params.OutComponent;
}


// Function Engine.SkeletalMeshComponent.IsComponentAttached
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UActorComponent*         Component                      (CPF_Parm, CPF_EditInline)
// struct FName                   BoneName                       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USkeletalMeshComponent::IsComponentAttached(class UActorComponent* Component, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.IsComponentAttached");

	struct
	{
		class UActorComponent*         Component;
		struct FName                   BoneName;
		bool                           ReturnValue;
	} params;
	params.Component = Component;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.FindComponentAttachedToBone
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InBoneName                     (CPF_Parm)
// class UActorComponent*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class UActorComponent* USkeletalMeshComponent::FindComponentAttachedToBone(const struct FName& InBoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.FindComponentAttachedToBone");

	struct
	{
		struct FName                   InBoneName;
		class UActorComponent*         ReturnValue;
	} params;
	params.InBoneName = InBoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetSocketBoneName
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InSocketName                   (CPF_Parm)
// struct FName                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FName USkeletalMeshComponent::GetSocketBoneName(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetSocketBoneName");

	struct
	{
		struct FName                   InSocketName;
		struct FName                   ReturnValue;
	} params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetSocketByName
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// struct FName                   InSocketName                   (CPF_Parm)
// class USkeletalMeshSocket*     ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class USkeletalMeshSocket* USkeletalMeshComponent::GetSocketByName(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetSocketByName");

	struct
	{
		struct FName                   InSocketName;
		class USkeletalMeshSocket*     ReturnValue;
	} params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   InSocketName                   (CPF_Parm)
// struct FVector                 OutLocation                    (CPF_Parm, CPF_OutParm)
// struct FRotator                OutRotation                    (CPF_OptionalParm, CPF_Parm, CPF_OutParm)
// int                            Space                          (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USkeletalMeshComponent::GetSocketWorldLocationAndRotation(const struct FName& InSocketName, int Space, struct FVector* OutLocation, struct FRotator* OutRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.GetSocketWorldLocationAndRotation");

	struct
	{
		struct FName                   InSocketName;
		struct FVector                 OutLocation;
		struct FRotator                OutRotation;
		int                            Space;
		bool                           ReturnValue;
	} params;
	params.InSocketName = InSocketName;
	params.Space = Space;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutLocation != nullptr)
		*OutLocation = params.OutLocation;
	if (OutRotation != nullptr)
		*OutRotation = params.OutRotation;

	return params.ReturnValue;
}


// Function Engine.SkeletalMeshComponent.AttachComponentToSocket
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UActorComponent*         Component                      (CPF_Parm, CPF_EditInline)
// struct FName                   SocketName                     (CPF_Parm)

void USkeletalMeshComponent::AttachComponentToSocket(class UActorComponent* Component, const struct FName& SocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachComponentToSocket");

	struct
	{
		class UActorComponent*         Component;
		struct FName                   SocketName;
	} params;
	params.Component = Component;
	params.SocketName = SocketName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.DetachComponent
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// class UActorComponent*         Component                      (CPF_Parm, CPF_EditInline)

void USkeletalMeshComponent::DetachComponent(class UActorComponent* Component)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.DetachComponent");

	struct
	{
		class UActorComponent*         Component;
	} params;
	params.Component = Component;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMeshComponent.AttachComponent
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UActorComponent*         Component                      (CPF_Parm, CPF_EditInline)
// struct FName                   BoneName                       (CPF_Parm)
// struct FVector                 RelativeLocation               (CPF_OptionalParm, CPF_Parm)
// struct FRotator                RelativeRotation               (CPF_OptionalParm, CPF_Parm)
// struct FVector                 RelativeScale                  (CPF_OptionalParm, CPF_Parm)

void USkeletalMeshComponent::AttachComponent(class UActorComponent* Component, const struct FName& BoneName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation, const struct FVector& RelativeScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMeshComponent.AttachComponent");

	struct
	{
		class UActorComponent*         Component;
		struct FName                   BoneName;
		struct FVector                 RelativeLocation;
		struct FRotator                RelativeRotation;
		struct FVector                 RelativeScale;
	} params;
	params.Component = Component;
	params.BoneName = BoneName;
	params.RelativeLocation = RelativeLocation;
	params.RelativeRotation = RelativeRotation;
	params.RelativeScale = RelativeScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SkeletalMesh.HasSocket
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// struct FName                   InSocketName                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USkeletalMesh::HasSocket(const struct FName& InSocketName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SkeletalMesh.HasSocket");

	struct
	{
		struct FName                   InSocketName;
		bool                           ReturnValue;
	} params;
	params.InSocketName = InSocketName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineActor.OnToggleHidden
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_ToggleHidden*    Action                         (CPF_Parm)

void ASplineActor::OnToggleHidden(class USeqAct_ToggleHidden* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.OnToggleHidden");

	struct
	{
		class USeqAct_ToggleHidden*    Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.OnToggle
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ASplineActor::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.OnToggle");

	struct
	{
		class USeqAct_Toggle*          inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.GetAllConnectedSplineActors
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<class ASplineActor*>    OutSet                         (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void ASplineActor::GetAllConnectedSplineActors(TArray<class ASplineActor*>* OutSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.GetAllConnectedSplineActors");

	struct
	{
		TArray<class ASplineActor*>    OutSet;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSet != nullptr)
		*OutSet = params.OutSet;
}


// Function Engine.SplineActor.FindSplinePathTo
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class ASplineActor*            Goal                           (CPF_Parm)
// TArray<class ASplineActor*>    OutRoute                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ASplineActor::FindSplinePathTo(class ASplineActor* Goal, TArray<class ASplineActor*>* OutRoute)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.FindSplinePathTo");

	struct
	{
		class ASplineActor*            Goal;
		TArray<class ASplineActor*>    OutRoute;
		bool                           ReturnValue;
	} params;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutRoute != nullptr)
		*OutRoute = params.OutRoute;

	return params.ReturnValue;
}


// Function Engine.SplineActor.GetBestConnectionInDirection
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FVector                 DesiredDir                     (CPF_Parm)
// bool                           bUseLinksFrom                  (CPF_OptionalParm, CPF_Parm)
// class ASplineActor*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ASplineActor* ASplineActor::GetBestConnectionInDirection(const struct FVector& DesiredDir, bool bUseLinksFrom)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.GetBestConnectionInDirection");

	struct
	{
		struct FVector                 DesiredDir;
		bool                           bUseLinksFrom;
		class ASplineActor*            ReturnValue;
	} params;
	params.DesiredDir = DesiredDir;
	params.bUseLinksFrom = bUseLinksFrom;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineActor.GetRandomConnection
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bUseLinksFrom                  (CPF_OptionalParm, CPF_Parm)
// class ASplineActor*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ASplineActor* ASplineActor::GetRandomConnection(bool bUseLinksFrom)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.GetRandomConnection");

	struct
	{
		bool                           bUseLinksFrom;
		class ASplineActor*            ReturnValue;
	} params;
	params.bUseLinksFrom = bUseLinksFrom;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineActor.BreakAllConnectionsFrom
// (FUNC_Native, FUNC_Public)

void ASplineActor::BreakAllConnectionsFrom()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.BreakAllConnectionsFrom");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.BreakAllConnections
// (FUNC_Native, FUNC_Public)

void ASplineActor::BreakAllConnections()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.BreakAllConnections");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.BreakConnectionTo
// (FUNC_Native, FUNC_Public)
// Parameters:
// class ASplineActor*            NextActor                      (CPF_Parm)

void ASplineActor::BreakConnectionTo(class ASplineActor* NextActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.BreakConnectionTo");

	struct
	{
		class ASplineActor*            NextActor;
	} params;
	params.NextActor = NextActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.FindTargetForComponent
// (FUNC_Native, FUNC_Public)
// Parameters:
// class USplineComponent*        SplineComp                     (CPF_Parm, CPF_EditInline)
// class ASplineActor*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class ASplineActor* ASplineActor::FindTargetForComponent(class USplineComponent* SplineComp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.FindTargetForComponent");

	struct
	{
		class USplineComponent*        SplineComp;
		class ASplineActor*            ReturnValue;
	} params;
	params.SplineComp = SplineComp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineActor.FindSplineComponentTo
// (FUNC_Native, FUNC_Public)
// Parameters:
// class ASplineActor*            NextActor                      (CPF_Parm)
// class USplineComponent*        ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_EditInline)

class USplineComponent* ASplineActor::FindSplineComponentTo(class ASplineActor* NextActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.FindSplineComponentTo");

	struct
	{
		class ASplineActor*            NextActor;
		class USplineComponent*        ReturnValue;
	} params;
	params.NextActor = NextActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineActor.IsConnectedTo
// (FUNC_Native, FUNC_Public)
// Parameters:
// class ASplineActor*            NextActor                      (CPF_Parm)
// bool                           bCheckForDisableDestination    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ASplineActor::IsConnectedTo(class ASplineActor* NextActor, bool bCheckForDisableDestination)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.IsConnectedTo");

	struct
	{
		class ASplineActor*            NextActor;
		bool                           bCheckForDisableDestination;
		bool                           ReturnValue;
	} params;
	params.NextActor = NextActor;
	params.bCheckForDisableDestination = bCheckForDisableDestination;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineActor.AddConnectionTo
// (FUNC_Native, FUNC_Public)
// Parameters:
// class ASplineActor*            NextActor                      (CPF_Parm)

void ASplineActor::AddConnectionTo(class ASplineActor* NextActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.AddConnectionTo");

	struct
	{
		class ASplineActor*            NextActor;
	} params;
	params.NextActor = NextActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.UpdateConnectedSplineComponents
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bFinish                        (CPF_Parm)

void ASplineActor::UpdateConnectedSplineComponents(bool bFinish)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.UpdateConnectedSplineComponents");

	struct
	{
		bool                           bFinish;
	} params;
	params.bFinish = bFinish;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.UpdateSplineComponents
// (FUNC_Native, FUNC_Public)

void ASplineActor::UpdateSplineComponents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.UpdateSplineComponents");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineActor.GetWorldSpaceTangent
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector ASplineActor::GetWorldSpaceTangent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineActor.GetWorldSpaceTangent");

	struct
	{
		struct FVector                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineLoftActor.UpdateSplineParams
// (FUNC_Native, FUNC_Public)

void ASplineLoftActor::UpdateSplineParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineLoftActor.UpdateSplineParams");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineLoftActor.ClearLoftMesh
// (FUNC_Native, FUNC_Public)

void ASplineLoftActor::ClearLoftMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineLoftActor.ClearLoftMesh");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineComponent.GetDistanceAlongSpline
// (FUNC_Final, FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FVector                 Location                       (CPF_Parm)
// bool                           bClamp                         (CPF_OptionalParm, CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USplineComponent::GetDistanceAlongSpline(const struct FVector& Location, bool bClamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetDistanceAlongSpline");

	struct
	{
		struct FVector                 Location;
		bool                           bClamp;
		float                          ReturnValue;
	} params;
	params.Location = Location;
	params.bClamp = bClamp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          Distance                       (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector USplineComponent::GetTangentAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetTangentAtDistanceAlongSpline");

	struct
	{
		float                          Distance;
		struct FVector                 ReturnValue;
	} params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          Distance                       (CPF_Parm)
// struct FVector                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVector USplineComponent::GetLocationAtDistanceAlongSpline(float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetLocationAtDistanceAlongSpline");

	struct
	{
		float                          Distance;
		struct FVector                 ReturnValue;
	} params;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.GetSplineLength
// (FUNC_Native, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float USplineComponent::GetSplineLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.GetSplineLength");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SplineComponent.UpdateSplineReparamTable
// (FUNC_Native, FUNC_Public)

void USplineComponent::UpdateSplineReparamTable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.UpdateSplineReparamTable");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SplineComponent.UpdateSplineCurviness
// (FUNC_Native, FUNC_Public)

void USplineComponent::UpdateSplineCurviness()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SplineComponent.UpdateSplineCurviness");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ProcBuilding.FindEdgeForTopLevelScope
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            TopLevelScopeIndex             (CPF_Parm)
// TEnumAsByte<enum class EScopeEdge> Edge                           (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int AProcBuilding::FindEdgeForTopLevelScope(int TopLevelScopeIndex, TEnumAsByte<enum class EScopeEdge> Edge)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.FindEdgeForTopLevelScope");

	struct
	{
		int                            TopLevelScopeIndex;
		TEnumAsByte<enum class EScopeEdge> Edge;
		int                            ReturnValue;
	} params;
	params.TopLevelScopeIndex = TopLevelScopeIndex;
	params.Edge = Edge;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ProcBuilding.BreakFractureComponent
// (FUNC_Native, FUNC_Public)
// Parameters:
// class UFracturedStaticMeshComponent* Comp                           (CPF_Parm, CPF_EditInline)
// struct FVector                 BoxMin                         (CPF_Parm)
// struct FVector                 BoxMax                         (CPF_Parm)

void AProcBuilding::BreakFractureComponent(class UFracturedStaticMeshComponent* Comp, const struct FVector& BoxMin, const struct FVector& BoxMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.BreakFractureComponent");

	struct
	{
		class UFracturedStaticMeshComponent* Comp;
		struct FVector                 BoxMin;
		struct FVector                 BoxMax;
	} params;
	params.Comp = Comp;
	params.BoxMin = BoxMin;
	params.BoxMax = BoxMax;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ProcBuilding.GetAllGroupedProcBuildings
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<class AProcBuilding*>   OutSet                         (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void AProcBuilding::GetAllGroupedProcBuildings(TArray<class AProcBuilding*>* OutSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.GetAllGroupedProcBuildings");

	struct
	{
		TArray<class AProcBuilding*>   OutSet;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSet != nullptr)
		*OutSet = params.OutSet;
}


// Function Engine.ProcBuilding.GetBaseMostBuilding
// (FUNC_Native, FUNC_Public)
// Parameters:
// class AProcBuilding*           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AProcBuilding* AProcBuilding::GetBaseMostBuilding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.GetBaseMostBuilding");

	struct
	{
		class AProcBuilding*           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ProcBuilding.FindComponentsForTopLevelScope
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            TopLevelScopeIndex             (CPF_Parm)
// TArray<class UStaticMeshComponent*> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink, CPF_EditInline)

TArray<class UStaticMeshComponent*> AProcBuilding::FindComponentsForTopLevelScope(int TopLevelScopeIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.FindComponentsForTopLevelScope");

	struct
	{
		int                            TopLevelScopeIndex;
		TArray<class UStaticMeshComponent*> ReturnValue;
	} params;
	params.TopLevelScopeIndex = TopLevelScopeIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ProcBuilding.ClearBuildingMeshes
// (FUNC_Native, FUNC_Public)

void AProcBuilding::ClearBuildingMeshes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ProcBuilding.ClearBuildingMeshes");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PBRuleNodeMesh.PickRandomBuildingMesh
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UPBRuleNodeMesh::PickRandomBuildingMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PBRuleNodeMesh.PickRandomBuildingMesh");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.ShouldShowGore
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameReplicationInfo::ShouldShowGore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.ShouldShowGore");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.IsCoopMultiplayerGame
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameReplicationInfo::IsCoopMultiplayerGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.IsCoopMultiplayerGame");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.IsMultiplayerGame
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameReplicationInfo::IsMultiplayerGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.IsMultiplayerGame");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.EndGame
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AGameReplicationInfo::EndGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.EndGame");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.StartMatch
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AGameReplicationInfo::StartMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.StartMatch");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.SetTeam
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// int                            Index                          (CPF_Parm)
// class ATeamInfo*               TI                             (CPF_Parm)

void AGameReplicationInfo::SetTeam(int Index, class ATeamInfo* TI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.SetTeam");

	struct
	{
		int                            Index;
		class ATeamInfo*               TI;
	} params;
	params.Index = Index;
	params.TI = TI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.RemovePRI
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (CPF_Parm)

void AGameReplicationInfo::RemovePRI(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.RemovePRI");

	struct
	{
		class APlayerReplicationInfo*  PRI;
	} params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.AddPRI
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (CPF_Parm)

void AGameReplicationInfo::AddPRI(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.AddPRI");

	struct
	{
		class APlayerReplicationInfo*  PRI;
	} params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.OnSameTeam
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// class AActor*                  A                              (CPF_Parm)
// class AActor*                  B                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AGameReplicationInfo::OnSameTeam(class AActor* A, class AActor* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.OnSameTeam");

	struct
	{
		class AActor*                  A;
		class AActor*                  B;
		bool                           ReturnValue;
	} params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.Timer
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AGameReplicationInfo::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.Timer");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.Reset
// (FUNC_Defined, FUNC_Public)

void AGameReplicationInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.ReceivedGameClass
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)

void AGameReplicationInfo::ReceivedGameClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.ReceivedGameClass");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AGameReplicationInfo::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AGameReplicationInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.IsPrimaryPlayer
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerReplicationInfo::IsPrimaryPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.IsPrimaryPlayer");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.UnregisterPlayerFromSession
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)

void APlayerReplicationInfo::UnregisterPlayerFromSession()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.UnregisterPlayerFromSession");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.RegisterPlayerWithSession
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)

void APlayerReplicationInfo::RegisterPlayerWithSession()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.RegisterPlayerWithSession");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.IsInvalidName
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerReplicationInfo::IsInvalidName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.IsInvalidName");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.GetTeamNum
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

unsigned char APlayerReplicationInfo::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetTeamNum");

	struct
	{
		unsigned char                  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.SetUniqueId
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerUniqueId                 (CPF_Parm)

void APlayerReplicationInfo::SetUniqueId(const struct FUniqueNetId& PlayerUniqueId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetUniqueId");

	struct
	{
		struct FUniqueNetId            PlayerUniqueId;
	} params;
	params.PlayerUniqueId = PlayerUniqueId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.SeamlessTravelTo
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  NewPRI                         (CPF_Parm)

void APlayerReplicationInfo::SeamlessTravelTo(class APlayerReplicationInfo* NewPRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SeamlessTravelTo");

	struct
	{
		class APlayerReplicationInfo*  NewPRI;
	} params;
	params.NewPRI = NewPRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.IncrementDeaths
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Amt                            (CPF_OptionalParm, CPF_Parm)

void APlayerReplicationInfo::IncrementDeaths(int Amt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.IncrementDeaths");

	struct
	{
		int                            Amt;
	} params;
	params.Amt = Amt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.CopyProperties
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (CPF_Parm)

void APlayerReplicationInfo::CopyProperties(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.CopyProperties");

	struct
	{
		class APlayerReplicationInfo*  PRI;
	} params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.OverrideWith
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (CPF_Parm)

void APlayerReplicationInfo::OverrideWith(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.OverrideWith");

	struct
	{
		class APlayerReplicationInfo*  PRI;
	} params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.Duplicate
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APlayerReplicationInfo* APlayerReplicationInfo::Duplicate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Duplicate");

	struct
	{
		class APlayerReplicationInfo*  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.SetWaitingPlayer
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           B                              (CPF_Parm)

void APlayerReplicationInfo::SetWaitingPlayer(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetWaitingPlayer");

	struct
	{
		bool                           B;
	} params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.SetPlayerName
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 S                              (CPF_Parm, CPF_NeedCtorLink)

void APlayerReplicationInfo::SetPlayerName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetPlayerName");

	struct
	{
		struct FString                 S;
	} params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.DisplayDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          YL                             (CPF_Parm, CPF_OutParm)
// float                          YPos                           (CPF_Parm, CPF_OutParm)

void APlayerReplicationInfo::DisplayDebug(class AHUD* HUD, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.DisplayDebug");

	struct
	{
		class AHUD*                    HUD;
		float                          YL;
		float                          YPos;
	} params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.PlayerReplicationInfo.GetHumanReadableName
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString APlayerReplicationInfo::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetHumanReadableName");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.Reset
// (FUNC_Defined, FUNC_Public)

void APlayerReplicationInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Reset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.Destroyed
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void APlayerReplicationInfo::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.Unregister
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)

void APlayerReplicationInfo::Unregister()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Unregister");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.ShouldBroadCastWelcomeMessage
// (FUNC_Defined, FUNC_Simulated, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bExiting                       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool APlayerReplicationInfo::ShouldBroadCastWelcomeMessage(bool bExiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ShouldBroadCastWelcomeMessage");

	struct
	{
		bool                           bExiting;
		bool                           ReturnValue;
	} params;
	params.bExiting = bExiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.UpdatePing
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          TimeStamp                      (CPF_Parm)

void APlayerReplicationInfo::UpdatePing(float TimeStamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.UpdatePing");

	struct
	{
		float                          TimeStamp;
	} params;
	params.TimeStamp = TimeStamp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void APlayerReplicationInfo::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.RemoteUserDataReplicated
// (FUNC_Native, FUNC_Public)

void APlayerReplicationInfo::RemoteUserDataReplicated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.RemoteUserDataReplicated");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.SetPlayerTeam
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class ATeamInfo*               NewTeam                        (CPF_Parm)

void APlayerReplicationInfo::SetPlayerTeam(class ATeamInfo* NewTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetPlayerTeam");

	struct
	{
		class ATeamInfo*               NewTeam;
	} params;
	params.NewTeam = NewTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.ClientInitialize
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class AController*             C                              (CPF_Parm)

void APlayerReplicationInfo::ClientInitialize(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ClientInitialize");

	struct
	{
		class AController*             C;
	} params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.UpdateRemoteUserData
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FPRIRemoteUserData      Data                           (CPF_Parm, CPF_NeedCtorLink)

void APlayerReplicationInfo::UpdateRemoteUserData(const struct FPRIRemoteUserData& Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.UpdateRemoteUserData");

	struct
	{
		struct FPRIRemoteUserData      Data;
	} params;
	params.Data = Data;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.ServerUpdateRemoteUserData
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)
// Parameters:
// struct FPRIRemoteUserData      Data                           (CPF_Parm, CPF_NeedCtorLink)

void APlayerReplicationInfo::ServerUpdateRemoteUserData(const struct FPRIRemoteUserData& Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ServerUpdateRemoteUserData");

	struct
	{
		struct FPRIRemoteUserData      Data;
	} params;
	params.Data = Data;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.ClientFillRemoteUserData
// (FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Native, FUNC_Event, FUNC_Public, FUNC_NetClient)

void APlayerReplicationInfo::ClientFillRemoteUserData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ClientFillRemoteUserData");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void APlayerReplicationInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TeamInfo.GetTeamNum
// (FUNC_Simulated, FUNC_Native, FUNC_Public)
// Parameters:
// unsigned char                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

unsigned char ATeamInfo::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.GetTeamNum");

	struct
	{
		unsigned char                  ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.GetHumanReadableName
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString ATeamInfo::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.GetHumanReadableName");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.RemoveFromTeam
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Other                          (CPF_Parm)

void ATeamInfo::RemoveFromTeam(class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.RemoveFromTeam");

	struct
	{
		class AController*             Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TeamInfo.AddToTeam
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AController*             Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ATeamInfo::AddToTeam(class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.AddToTeam");

	struct
	{
		class AController*             Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.Destroyed
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ATeamInfo::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TeamInfo.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void ATeamInfo::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.SetCameraFade
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bNewEnableFading               (CPF_Parm)
// struct FColor                  NewFadeColor                   (CPF_OptionalParm, CPF_Parm)
// struct FVector2D               NewFadeAlpha                   (CPF_OptionalParm, CPF_Parm)
// float                          NewFadeTime                    (CPF_OptionalParm, CPF_Parm)
// bool                           bNewFadeAudio                  (CPF_OptionalParm, CPF_Parm)

void ACamera::SetCameraFade(bool bNewEnableFading, const struct FColor& NewFadeColor, const struct FVector2D& NewFadeAlpha, float NewFadeTime, bool bNewFadeAudio)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.SetCameraFade");

	struct
	{
		bool                           bNewEnableFading;
		struct FColor                  NewFadeColor;
		struct FVector2D               NewFadeAlpha;
		float                          NewFadeTime;
		bool                           bNewFadeAudio;
	} params;
	params.bNewEnableFading = bNewEnableFading;
	params.NewFadeColor = NewFadeColor;
	params.NewFadeAlpha = NewFadeAlpha;
	params.NewFadeTime = NewFadeTime;
	params.bNewFadeAudio = bNewFadeAudio;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.StopCameraAnim
// (FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UCameraAnimInst*         AnimInst                       (CPF_Parm)
// bool                           bImmediate                     (CPF_OptionalParm, CPF_Parm)

void ACamera::StopCameraAnim(class UCameraAnimInst* AnimInst, bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.StopCameraAnim");

	struct
	{
		class UCameraAnimInst*         AnimInst;
		bool                           bImmediate;
	} params;
	params.AnimInst = AnimInst;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.StopAllCameraAnimsByType
// (FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UCameraAnim*             Anim                           (CPF_Parm)
// bool                           bImmediate                     (CPF_OptionalParm, CPF_Parm)

void ACamera::StopAllCameraAnimsByType(class UCameraAnim* Anim, bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.StopAllCameraAnimsByType");

	struct
	{
		class UCameraAnim*             Anim;
		bool                           bImmediate;
	} params;
	params.Anim = Anim;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.StopAllCameraAnims
// (FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bImmediate                     (CPF_OptionalParm, CPF_Parm)

void ACamera::StopAllCameraAnims(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.StopAllCameraAnims");

	struct
	{
		bool                           bImmediate;
	} params;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.PlayCameraAnim
// (FUNC_Simulated, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UCameraAnim*             Anim                           (CPF_Parm)
// float                          Rate                           (CPF_OptionalParm, CPF_Parm)
// float                          Scale                          (CPF_OptionalParm, CPF_Parm)
// float                          BlendInTime                    (CPF_OptionalParm, CPF_Parm)
// float                          BlendOutTime                   (CPF_OptionalParm, CPF_Parm)
// bool                           bLoop                          (CPF_OptionalParm, CPF_Parm)
// bool                           bRandomStartTime               (CPF_OptionalParm, CPF_Parm)
// float                          Duration                       (CPF_OptionalParm, CPF_Parm)
// bool                           bSingleInstance                (CPF_OptionalParm, CPF_Parm)
// class UCameraAnimInst*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UCameraAnimInst* ACamera::PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, bool bSingleInstance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.PlayCameraAnim");

	struct
	{
		class UCameraAnim*             Anim;
		float                          Rate;
		float                          Scale;
		float                          BlendInTime;
		float                          BlendOutTime;
		bool                           bLoop;
		bool                           bRandomStartTime;
		float                          Duration;
		bool                           bSingleInstance;
		class UCameraAnimInst*         ReturnValue;
	} params;
	params.Anim = Anim;
	params.Rate = Rate;
	params.Scale = Scale;
	params.BlendInTime = BlendInTime;
	params.BlendOutTime = BlendOutTime;
	params.bLoop = bLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Duration = Duration;
	params.bSingleInstance = bSingleInstance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Camera.ClearAllCameraShakes
// (FUNC_Defined, FUNC_Public)

void ACamera::ClearAllCameraShakes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.ClearAllCameraShakes");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.PlayWorldCameraShake
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class UCameraShake*            Shake                          (CPF_Parm)
// class AActor*                  ShakeInstigator                (CPF_Parm)
// struct FVector                 Epicenter                      (CPF_Parm)
// float                          InnerRadius                    (CPF_Parm)
// float                          OuterRadius                    (CPF_Parm)
// float                          Falloff                        (CPF_Parm)
// bool                           bTryForceFeedback              (CPF_Parm)
// bool                           bOrientShakeTowardsEpicenter   (CPF_OptionalParm, CPF_Parm)

void ACamera::STATIC_PlayWorldCameraShake(class UCameraShake* Shake, class AActor* ShakeInstigator, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bTryForceFeedback, bool bOrientShakeTowardsEpicenter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.PlayWorldCameraShake");

	struct
	{
		class UCameraShake*            Shake;
		class AActor*                  ShakeInstigator;
		struct FVector                 Epicenter;
		float                          InnerRadius;
		float                          OuterRadius;
		float                          Falloff;
		bool                           bTryForceFeedback;
		bool                           bOrientShakeTowardsEpicenter;
	} params;
	params.Shake = Shake;
	params.ShakeInstigator = ShakeInstigator;
	params.Epicenter = Epicenter;
	params.InnerRadius = InnerRadius;
	params.OuterRadius = OuterRadius;
	params.Falloff = Falloff;
	params.bTryForceFeedback = bTryForceFeedback;
	params.bOrientShakeTowardsEpicenter = bOrientShakeTowardsEpicenter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.CalcRadialShakeScale
// (FUNC_Defined, FUNC_Static, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class ACamera*                 Cam                            (CPF_Parm)
// struct FVector                 Epicenter                      (CPF_Parm)
// float                          InnerRadius                    (CPF_Parm)
// float                          OuterRadius                    (CPF_Parm)
// float                          Falloff                        (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float ACamera::STATIC_CalcRadialShakeScale(class ACamera* Cam, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.CalcRadialShakeScale");

	struct
	{
		class ACamera*                 Cam;
		struct FVector                 Epicenter;
		float                          InnerRadius;
		float                          OuterRadius;
		float                          Falloff;
		float                          ReturnValue;
	} params;
	params.Cam = Cam;
	params.Epicenter = Epicenter;
	params.InnerRadius = InnerRadius;
	params.OuterRadius = OuterRadius;
	params.Falloff = Falloff;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Camera.StopCameraShake
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UCameraShake*            Shake                          (CPF_Parm)

void ACamera::StopCameraShake(class UCameraShake* Shake)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.StopCameraShake");

	struct
	{
		class UCameraShake*            Shake;
	} params;
	params.Shake = Shake;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.PlayCameraShake
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UCameraShake*            Shake                          (CPF_Parm)
// float                          Scale                          (CPF_Parm)
// TEnumAsByte<enum class ECameraAnimPlaySpace> PlaySpace                      (CPF_OptionalParm, CPF_Parm)
// struct FRotator                UserPlaySpaceRot               (CPF_OptionalParm, CPF_Parm)

void ACamera::PlayCameraShake(class UCameraShake* Shake, float Scale, TEnumAsByte<enum class ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.PlayCameraShake");

	struct
	{
		class UCameraShake*            Shake;
		float                          Scale;
		TEnumAsByte<enum class ECameraAnimPlaySpace> PlaySpace;
		struct FRotator                UserPlaySpaceRot;
	} params;
	params.Shake = Shake;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.ClearCameraLensEffects
// (FUNC_Defined, FUNC_Public)

void ACamera::ClearCameraLensEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.ClearCameraLensEffects");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.RemoveCameraLensEffect
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AEmitterCameraLensEffectBase* Emitter                        (CPF_Parm)

void ACamera::RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.RemoveCameraLensEffect");

	struct
	{
		class AEmitterCameraLensEffectBase* Emitter;
	} params;
	params.Emitter = Emitter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.AddCameraLensEffect
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class UClass*                  LensEffectEmitterClass         (CPF_Parm)

void ACamera::AddCameraLensEffect(class UClass* LensEffectEmitterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.AddCameraLensEffect");

	struct
	{
		class UClass*                  LensEffectEmitterClass;
	} params;
	params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.FindCameraLensEffect
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UClass*                  LensEffectEmitterClass         (CPF_Parm)
// class AEmitterCameraLensEffectBase* ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AEmitterCameraLensEffectBase* ACamera::FindCameraLensEffect(class UClass* LensEffectEmitterClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.FindCameraLensEffect");

	struct
	{
		class UClass*                  LensEffectEmitterClass;
		class AEmitterCameraLensEffectBase* ReturnValue;
	} params;
	params.LensEffectEmitterClass = LensEffectEmitterClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Camera.DisplayDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm, CPF_OutParm)
// float                          out_YPos                       (CPF_Parm, CPF_OutParm)

void ACamera::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.DisplayDebug");

	struct
	{
		class AHUD*                    HUD;
		float                          out_YL;
		float                          out_YPos;
	} params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.Camera.ProcessViewRotation
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// struct FRotator                OutViewRotation                (CPF_Parm, CPF_OutParm)
// struct FRotator                OutDeltaRot                    (CPF_Parm, CPF_OutParm)

void ACamera::ProcessViewRotation(float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.ProcessViewRotation");

	struct
	{
		float                          DeltaTime;
		struct FRotator                OutViewRotation;
		struct FRotator                OutDeltaRot;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutViewRotation != nullptr)
		*OutViewRotation = params.OutViewRotation;
	if (OutDeltaRot != nullptr)
		*OutDeltaRot = params.OutDeltaRot;
}


// Function Engine.Camera.SetViewTarget
// (FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  NewViewTarget                  (CPF_Parm)
// struct FViewTargetTransitionParams TransitionParams               (CPF_OptionalParm, CPF_Parm)

void ACamera::SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.SetViewTarget");

	struct
	{
		class AActor*                  NewViewTarget;
		struct FViewTargetTransitionParams TransitionParams;
	} params;
	params.NewViewTarget = NewViewTarget;
	params.TransitionParams = TransitionParams;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.UpdateViewTarget
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// struct FTViewTarget            OutVT                          (CPF_Parm, CPF_OutParm)
// float                          DeltaTime                      (CPF_Parm)

void ACamera::UpdateViewTarget(float DeltaTime, struct FTViewTarget* OutVT)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.UpdateViewTarget");

	struct
	{
		struct FTViewTarget            OutVT;
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutVT != nullptr)
		*OutVT = params.OutVT;
}


// Function Engine.Camera.CheckViewTarget
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FTViewTarget            VT                             (CPF_Parm, CPF_OutParm)

void ACamera::CheckViewTarget(struct FTViewTarget* VT)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.CheckViewTarget");

	struct
	{
		struct FTViewTarget            VT;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (VT != nullptr)
		*VT = params.VT;
}


// Function Engine.Camera.FillCameraCache
// (FUNC_Final, FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FTPOV                   NewPOV                         (CPF_Const, CPF_Parm, CPF_OutParm)

void ACamera::FillCameraCache(struct FTPOV* NewPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.FillCameraCache");

	struct
	{
		struct FTPOV                   NewPOV;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewPOV != nullptr)
		*NewPOV = params.NewPOV;
}


// Function Engine.Camera.BlendViewTargets
// (FUNC_Final, FUNC_Defined, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// struct FTViewTarget            A                              (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FTViewTarget            B                              (CPF_Const, CPF_Parm, CPF_OutParm)
// float                          Alpha                          (CPF_Parm)
// struct FTPOV                   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FTPOV ACamera::BlendViewTargets(float Alpha, struct FTViewTarget* A, struct FTViewTarget* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.BlendViewTargets");

	struct
	{
		struct FTViewTarget            A;
		struct FTViewTarget            B;
		float                          Alpha;
		struct FTPOV                   ReturnValue;
	} params;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;
	if (B != nullptr)
		*B = params.B;

	return params.ReturnValue;
}


// Function Engine.Camera.ApplyAudioFade
// (FUNC_Native, FUNC_Public)

void ACamera::ApplyAudioFade()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.ApplyAudioFade");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.UpdateFade
// (FUNC_Defined, FUNC_Simulated, FUNC_Protected)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void ACamera::UpdateFade(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.UpdateFade");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.DoUpdateCamera
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void ACamera::DoUpdateCamera(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.DoUpdateCamera");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.UpdateCamera
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void ACamera::UpdateCamera(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.UpdateCamera");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.SetDesiredColorScale
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// struct FVector                 NewColorScale                  (CPF_Parm)
// float                          InterpTime                     (CPF_Parm)

void ACamera::SetDesiredColorScale(const struct FVector& NewColorScale, float InterpTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.SetDesiredColorScale");

	struct
	{
		struct FVector                 NewColorScale;
		float                          InterpTime;
	} params;
	params.NewColorScale = NewColorScale;
	params.InterpTime = InterpTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.GetCameraRotation
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// struct FRotator                ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FRotator ACamera::GetCameraRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.GetCameraRotation");

	struct
	{
		struct FRotator                ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Camera.GetCameraViewPoint
// (FUNC_Final, FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FVector                 OutCamLoc                      (CPF_Parm, CPF_OutParm)
// struct FRotator                OutCamRot                      (CPF_Parm, CPF_OutParm)

void ACamera::GetCameraViewPoint(struct FVector* OutCamLoc, struct FRotator* OutCamRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.GetCameraViewPoint");

	struct
	{
		struct FVector                 OutCamLoc;
		struct FRotator                OutCamRot;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutCamLoc != nullptr)
		*OutCamLoc = params.OutCamLoc;
	if (OutCamRot != nullptr)
		*OutCamRot = params.OutCamRot;
}


// Function Engine.Camera.SetFOV
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          NewFOV                         (CPF_Parm)

void ACamera::SetFOV(float NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.SetFOV");

	struct
	{
		float                          NewFOV;
	} params;
	params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.GetFOVAngle
// (FUNC_Defined, FUNC_Public)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float ACamera::GetFOVAngle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.GetFOVAngle");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Camera.InitializeFor
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)

void ACamera::InitializeFor(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.InitializeFor");

	struct
	{
		class APlayerController*       PC;
	} params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.ApplyCameraModifiers
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// struct FTPOV                   OutPOV                         (CPF_Parm, CPF_OutParm)

void ACamera::ApplyCameraModifiers(float DeltaTime, struct FTPOV* OutPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.ApplyCameraModifiers");

	struct
	{
		float                          DeltaTime;
		struct FTPOV                   OutPOV;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;
}


// Function Engine.Camera.Destroyed
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void ACamera::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.PostBeginPlay
// (FUNC_Defined, FUNC_Public)

void ACamera::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Camera.CreateCameraModifier
// (FUNC_Defined, FUNC_Protected)
// Parameters:
// class UClass*                  ModifierClass                  (CPF_Parm)
// class UCameraModifier*         ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UCameraModifier* ACamera::CreateCameraModifier(class UClass* ModifierClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Camera.CreateCameraModifier");

	struct
	{
		class UClass*                  ModifierClass;
		class UCameraModifier*         ReturnValue;
	} params;
	params.ModifierClass = ModifierClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraActor.DisplayDebug
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AHUD*                    HUD                            (CPF_Parm)
// float                          out_YL                         (CPF_Parm, CPF_OutParm)
// float                          out_YPos                       (CPF_Parm, CPF_OutParm)

void ACameraActor::DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraActor.DisplayDebug");

	struct
	{
		class AHUD*                    HUD;
		float                          out_YL;
		float                          out_YPos;
	} params;
	params.HUD = HUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_YL != nullptr)
		*out_YL = params.out_YL;
	if (out_YPos != nullptr)
		*out_YPos = params.out_YPos;
}


// Function Engine.CameraActor.GetCameraView
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// struct FTPOV                   OutPOV                         (CPF_Parm, CPF_OutParm)

void ACameraActor::GetCameraView(float DeltaTime, struct FTPOV* OutPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraActor.GetCameraView");

	struct
	{
		float                          DeltaTime;
		struct FTPOV                   OutPOV;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;
}


// Function Engine.CameraAnimInst.SetPlaySpace
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ECameraAnimPlaySpace> NewSpace                       (CPF_Parm)
// struct FRotator                UserPlaySpace                  (CPF_OptionalParm, CPF_Parm)

void UCameraAnimInst::SetPlaySpace(TEnumAsByte<enum class ECameraAnimPlaySpace> NewSpace, const struct FRotator& UserPlaySpace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.SetPlaySpace");

	struct
	{
		TEnumAsByte<enum class ECameraAnimPlaySpace> NewSpace;
		struct FRotator                UserPlaySpace;
	} params;
	params.NewSpace = NewSpace;
	params.UserPlaySpace = UserPlaySpace;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraAnimInst.ApplyTransientScaling
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          Scalar                         (CPF_Parm)

void UCameraAnimInst::ApplyTransientScaling(float Scalar)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.ApplyTransientScaling");

	struct
	{
		float                          Scalar;
	} params;
	params.Scalar = Scalar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraAnimInst.Stop
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bImmediate                     (CPF_OptionalParm, CPF_Parm)

void UCameraAnimInst::Stop(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.Stop");

	struct
	{
		bool                           bImmediate;
	} params;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraAnimInst.AdvanceAnim
// (FUNC_Final, FUNC_Native, FUNC_Public)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// bool                           bJump                          (CPF_Parm)

void UCameraAnimInst::AdvanceAnim(float DeltaTime, bool bJump)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.AdvanceAnim");

	struct
	{
		float                          DeltaTime;
		bool                           bJump;
	} params;
	params.DeltaTime = DeltaTime;
	params.bJump = bJump;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraAnimInst.Update
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          NewRate                        (CPF_Parm)
// float                          NewScale                       (CPF_Parm)
// float                          NewBlendInTime                 (CPF_Parm)
// float                          NewBlendOutTime                (CPF_Parm)
// float                          NewDuration                    (CPF_OptionalParm, CPF_Parm)

void UCameraAnimInst::Update(float NewRate, float NewScale, float NewBlendInTime, float NewBlendOutTime, float NewDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.Update");

	struct
	{
		float                          NewRate;
		float                          NewScale;
		float                          NewBlendInTime;
		float                          NewBlendOutTime;
		float                          NewDuration;
	} params;
	params.NewRate = NewRate;
	params.NewScale = NewScale;
	params.NewBlendInTime = NewBlendInTime;
	params.NewBlendOutTime = NewBlendOutTime;
	params.NewDuration = NewDuration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraAnimInst.Play
// (FUNC_Final, FUNC_Native, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UCameraAnim*             Anim                           (CPF_Parm)
// class AActor*                  CamActor                       (CPF_Parm)
// float                          InRate                         (CPF_Parm)
// float                          InScale                        (CPF_Parm)
// float                          InBlendInTime                  (CPF_Parm)
// float                          InBlendOutTime                 (CPF_Parm)
// bool                           bInLoop                        (CPF_Parm)
// bool                           bRandomStartTime               (CPF_Parm)
// float                          Duration                       (CPF_OptionalParm, CPF_Parm)

void UCameraAnimInst::Play(class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, bool bInLoop, bool bRandomStartTime, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraAnimInst.Play");

	struct
	{
		class UCameraAnim*             Anim;
		class AActor*                  CamActor;
		float                          InRate;
		float                          InScale;
		float                          InBlendInTime;
		float                          InBlendOutTime;
		bool                           bInLoop;
		bool                           bRandomStartTime;
		float                          Duration;
	} params;
	params.Anim = Anim;
	params.CamActor = CamActor;
	params.InRate = InRate;
	params.InScale = InScale;
	params.InBlendInTime = InBlendInTime;
	params.InBlendOutTime = InBlendOutTime;
	params.bInLoop = bInLoop;
	params.bRandomStartTime = bRandomStartTime;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier.UpdateAlpha
// (FUNC_Native, FUNC_Public)
// Parameters:
// class ACamera*                 Camera                         (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)

void UCameraModifier::UpdateAlpha(class ACamera* Camera, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.UpdateAlpha");

	struct
	{
		class ACamera*                 Camera;
		float                          DeltaTime;
	} params;
	params.Camera = Camera;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier.ProcessViewRotation
// (FUNC_Simulated, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class AActor*                  ViewTarget                     (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)
// struct FRotator                out_ViewRotation               (CPF_Parm, CPF_OutParm)
// struct FRotator                out_DeltaRot                   (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCameraModifier::ProcessViewRotation(class AActor* ViewTarget, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.ProcessViewRotation");

	struct
	{
		class AActor*                  ViewTarget;
		float                          DeltaTime;
		struct FRotator                out_ViewRotation;
		struct FRotator                out_DeltaRot;
		bool                           ReturnValue;
	} params;
	params.ViewTarget = ViewTarget;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (out_ViewRotation != nullptr)
		*out_ViewRotation = params.out_ViewRotation;
	if (out_DeltaRot != nullptr)
		*out_DeltaRot = params.out_DeltaRot;

	return params.ReturnValue;
}


// Function Engine.CameraModifier.ToggleModifier
// (FUNC_Defined, FUNC_Public)

void UCameraModifier::ToggleModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.ToggleModifier");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier.EnableModifier
// (FUNC_Defined, FUNC_Public)

void UCameraModifier::EnableModifier()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.EnableModifier");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier.DisableModifier
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bImmediate                     (CPF_OptionalParm, CPF_Parm)

void UCameraModifier::DisableModifier(bool bImmediate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.DisableModifier");

	struct
	{
		bool                           bImmediate;
	} params;
	params.bImmediate = bImmediate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier.RemoveCameraModifier
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class ACamera*                 Camera                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCameraModifier::RemoveCameraModifier(class ACamera* Camera)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.RemoveCameraModifier");

	struct
	{
		class ACamera*                 Camera;
		bool                           ReturnValue;
	} params;
	params.Camera = Camera;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraModifier.AddCameraModifier
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class ACamera*                 Camera                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCameraModifier::AddCameraModifier(class ACamera* Camera)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.AddCameraModifier");

	struct
	{
		class ACamera*                 Camera;
		bool                           ReturnValue;
	} params;
	params.Camera = Camera;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraModifier.IsDisabled
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCameraModifier::IsDisabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.IsDisabled");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraModifier.ModifyCamera
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class ACamera*                 Camera                         (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)
// struct FTPOV                   OutPOV                         (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCameraModifier::ModifyCamera(class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.ModifyCamera");

	struct
	{
		class ACamera*                 Camera;
		float                          DeltaTime;
		struct FTPOV                   OutPOV;
		bool                           ReturnValue;
	} params;
	params.Camera = Camera;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;

	return params.ReturnValue;
}


// Function Engine.CameraModifier.Init
// (FUNC_Public)

void UCameraModifier::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier_CameraShake.ModifyCamera
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class ACamera*                 Camera                         (CPF_Parm)
// float                          DeltaTime                      (CPF_Parm)
// struct FTPOV                   OutPOV                         (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCameraModifier_CameraShake::ModifyCamera(class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.ModifyCamera");

	struct
	{
		class ACamera*                 Camera;
		float                          DeltaTime;
		struct FTPOV                   OutPOV;
		bool                           ReturnValue;
	} params;
	params.Camera = Camera;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;

	return params.ReturnValue;
}


// Function Engine.CameraModifier_CameraShake.UpdateCameraShake
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)
// struct FCameraShakeInstance    Shake                          (CPF_Parm, CPF_OutParm)
// struct FTPOV                   OutPOV                         (CPF_Parm, CPF_OutParm)

void UCameraModifier_CameraShake::UpdateCameraShake(float DeltaTime, struct FCameraShakeInstance* Shake, struct FTPOV* OutPOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.UpdateCameraShake");

	struct
	{
		float                          DeltaTime;
		struct FCameraShakeInstance    Shake;
		struct FTPOV                   OutPOV;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Shake != nullptr)
		*Shake = params.Shake;
	if (OutPOV != nullptr)
		*OutPOV = params.OutPOV;
}


// Function Engine.CameraModifier_CameraShake.RemoveAllCameraShakes
// (FUNC_Defined, FUNC_Public)

void UCameraModifier_CameraShake::RemoveAllCameraShakes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.RemoveAllCameraShakes");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier_CameraShake.RemoveCameraShake
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UCameraShake*            Shake                          (CPF_Parm)

void UCameraModifier_CameraShake::RemoveCameraShake(class UCameraShake* Shake)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.RemoveCameraShake");

	struct
	{
		class UCameraShake*            Shake;
	} params;
	params.Shake = Shake;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier_CameraShake.AddCameraShake
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UCameraShake*            NewShake                       (CPF_Parm)
// float                          Scale                          (CPF_Parm)
// TEnumAsByte<enum class ECameraAnimPlaySpace> PlaySpace                      (CPF_OptionalParm, CPF_Parm)
// struct FRotator                UserPlaySpaceRot               (CPF_OptionalParm, CPF_Parm)

void UCameraModifier_CameraShake::AddCameraShake(class UCameraShake* NewShake, float Scale, TEnumAsByte<enum class ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.AddCameraShake");

	struct
	{
		class UCameraShake*            NewShake;
		float                          Scale;
		TEnumAsByte<enum class ECameraAnimPlaySpace> PlaySpace;
		struct FRotator                UserPlaySpaceRot;
	} params;
	params.NewShake = NewShake;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier_CameraShake.InitializeShake
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Protected, FUNC_HasDefaults)
// Parameters:
// class UCameraShake*            NewShake                       (CPF_Parm)
// float                          Scale                          (CPF_Parm)
// TEnumAsByte<enum class ECameraAnimPlaySpace> PlaySpace                      (CPF_Parm)
// struct FRotator                UserPlaySpaceRot               (CPF_OptionalParm, CPF_Parm)
// struct FCameraShakeInstance    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FCameraShakeInstance UCameraModifier_CameraShake::InitializeShake(class UCameraShake* NewShake, float Scale, TEnumAsByte<enum class ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.InitializeShake");

	struct
	{
		class UCameraShake*            NewShake;
		float                          Scale;
		TEnumAsByte<enum class ECameraAnimPlaySpace> PlaySpace;
		struct FRotator                UserPlaySpaceRot;
		struct FCameraShakeInstance    ReturnValue;
	} params;
	params.NewShake = NewShake;
	params.Scale = Scale;
	params.PlaySpace = PlaySpace;
	params.UserPlaySpaceRot = UserPlaySpaceRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraModifier_CameraShake.ReinitShake
// (FUNC_Defined, FUNC_Protected)
// Parameters:
// int                            ActiveShakeIdx                 (CPF_Parm)
// float                          Scale                          (CPF_Parm)

void UCameraModifier_CameraShake::ReinitShake(int ActiveShakeIdx, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.ReinitShake");

	struct
	{
		int                            ActiveShakeIdx;
		float                          Scale;
	} params;
	params.ActiveShakeIdx = ActiveShakeIdx;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraModifier_CameraShake.InitializeOffset
// (FUNC_Defined, FUNC_Static, FUNC_Protected, FUNC_HasOutParms)
// Parameters:
// struct FFOscillator            Param                          (CPF_Const, CPF_Parm, CPF_OutParm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UCameraModifier_CameraShake::STATIC_InitializeOffset(struct FFOscillator* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraModifier_CameraShake.InitializeOffset");

	struct
	{
		struct FFOscillator            Param;
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Param != nullptr)
		*Param = params.Param;

	return params.ReturnValue;
}


// Function Engine.CameraShake.GetAPC
// (FUNC_Final, FUNC_Defined, FUNC_Protected)
// Parameters:
// class APlayerController*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class APlayerController* UCameraShake::GetAPC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.GetAPC");

	struct
	{
		class APlayerController*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraShake.ToggleShake
// (FUNC_Defined, FUNC_Protected)
// Parameters:
// bool                           bShake                         (CPF_Parm)

void UCameraShake::ToggleShake(bool bShake)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.ToggleShake");

	struct
	{
		bool                           bShake;
	} params;
	params.bShake = bShake;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraShake.OnPropertyChanged
// (FUNC_Defined, FUNC_Event, FUNC_Protected)

void UCameraShake::OnPropertyChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.OnPropertyChanged");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraShake.GetRandomFOscillator
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// float                          AmplitudeScale                 (CPF_Parm)
// float                          FrequencyScale                 (CPF_Parm)
// struct FFOscillator            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FFOscillator UCameraShake::GetRandomFOscillator(float AmplitudeScale, float FrequencyScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.GetRandomFOscillator");

	struct
	{
		float                          AmplitudeScale;
		float                          FrequencyScale;
		struct FFOscillator            ReturnValue;
	} params;
	params.AmplitudeScale = AmplitudeScale;
	params.FrequencyScale = FrequencyScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraShake.GetRandomLocOscillation
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// float                          AmplitudeScale                 (CPF_Parm)
// float                          FrequencyScale                 (CPF_Parm)
// struct FVOscillator            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FVOscillator UCameraShake::GetRandomLocOscillation(float AmplitudeScale, float FrequencyScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.GetRandomLocOscillation");

	struct
	{
		float                          AmplitudeScale;
		float                          FrequencyScale;
		struct FVOscillator            ReturnValue;
	} params;
	params.AmplitudeScale = AmplitudeScale;
	params.FrequencyScale = FrequencyScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraShake.GetRandomROscillator
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// float                          AmplitudeScale                 (CPF_Parm)
// float                          FrequencyScale                 (CPF_Parm)
// struct FROscillator            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FROscillator UCameraShake::GetRandomROscillator(float AmplitudeScale, float FrequencyScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.GetRandomROscillator");

	struct
	{
		float                          AmplitudeScale;
		float                          FrequencyScale;
		struct FROscillator            ReturnValue;
	} params;
	params.AmplitudeScale = AmplitudeScale;
	params.FrequencyScale = FrequencyScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraShake.SetRandomLocShake
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// float                          AmplitudeScale                 (CPF_Parm)
// float                          FrequencyScale                 (CPF_Parm)

void UCameraShake::SetRandomLocShake(float AmplitudeScale, float FrequencyScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.SetRandomLocShake");

	struct
	{
		float                          AmplitudeScale;
		float                          FrequencyScale;
	} params;
	params.AmplitudeScale = AmplitudeScale;
	params.FrequencyScale = FrequencyScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraShake.SetRandomRotShake
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// float                          AmplitudeScale                 (CPF_Parm)
// float                          FrequencyScale                 (CPF_Parm)

void UCameraShake::SetRandomRotShake(float AmplitudeScale, float FrequencyScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.SetRandomRotShake");

	struct
	{
		float                          AmplitudeScale;
		float                          FrequencyScale;
	} params;
	params.AmplitudeScale = AmplitudeScale;
	params.FrequencyScale = FrequencyScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CameraShake.CreateScaled
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// float                          AmplitudeScale                 (CPF_Parm)
// float                          FrequencyScale                 (CPF_Parm)
// float                          DurationScale                  (CPF_Parm)
// class UCameraShake*            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UCameraShake* UCameraShake::CreateScaled(float AmplitudeScale, float FrequencyScale, float DurationScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.CreateScaled");

	struct
	{
		float                          AmplitudeScale;
		float                          FrequencyScale;
		float                          DurationScale;
		class UCameraShake*            ReturnValue;
	} params;
	params.AmplitudeScale = AmplitudeScale;
	params.FrequencyScale = FrequencyScale;
	params.DurationScale = DurationScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraShake.GetLocOscillationMagnitude
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UCameraShake::GetLocOscillationMagnitude()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.GetLocOscillationMagnitude");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CameraShake.GetRotOscillationMagnitude
// (FUNC_Defined, FUNC_Simulated, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float UCameraShake::GetRotOscillationMagnitude()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CameraShake.GetRotOscillationMagnitude");

	struct
	{
		float                          ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageUpgradeHelper.GetCloudUpgradeKeys
// (FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FString>         CloudKeys                      (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UCloudStorageUpgradeHelper::GetCloudUpgradeKeys(TArray<struct FString>* CloudKeys)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageUpgradeHelper.GetCloudUpgradeKeys");

	struct
	{
		TArray<struct FString>         CloudKeys;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CloudKeys != nullptr)
		*CloudKeys = params.CloudKeys;
}


// Function Engine.CloudStorageUpgradeHelper.HandleLocalKeyValue
// (FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 CloudKeyName                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FPlatformInterfaceData  CloudValue                     (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            bShouldMoveToCloud             (CPF_Parm, CPF_OutParm)
// int                            bShouldDeleteLocalKey          (CPF_Parm, CPF_OutParm)

void UCloudStorageUpgradeHelper::HandleLocalKeyValue(struct FString* CloudKeyName, struct FPlatformInterfaceData* CloudValue, int* bShouldMoveToCloud, int* bShouldDeleteLocalKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageUpgradeHelper.HandleLocalKeyValue");

	struct
	{
		struct FString                 CloudKeyName;
		struct FPlatformInterfaceData  CloudValue;
		int                            bShouldMoveToCloud;
		int                            bShouldDeleteLocalKey;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CloudKeyName != nullptr)
		*CloudKeyName = params.CloudKeyName;
	if (CloudValue != nullptr)
		*CloudValue = params.CloudValue;
	if (bShouldMoveToCloud != nullptr)
		*bShouldMoveToCloud = params.bShouldMoveToCloud;
	if (bShouldDeleteLocalKey != nullptr)
		*bShouldDeleteLocalKey = params.bShouldDeleteLocalKey;
}


// Function Engine.CloudStorageUpgradeHelper.HandleLocalDocument
// (FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 DocName                        (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            bShouldMoveToCloud             (CPF_Parm, CPF_OutParm)
// int                            bShouldDeleteLocalFile         (CPF_Parm, CPF_OutParm)

void UCloudStorageUpgradeHelper::HandleLocalDocument(struct FString* DocName, int* bShouldMoveToCloud, int* bShouldDeleteLocalFile)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageUpgradeHelper.HandleLocalDocument");

	struct
	{
		struct FString                 DocName;
		int                            bShouldMoveToCloud;
		int                            bShouldDeleteLocalFile;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DocName != nullptr)
		*DocName = params.DocName;
	if (bShouldMoveToCloud != nullptr)
		*bShouldMoveToCloud = params.bShouldMoveToCloud;
	if (bShouldDeleteLocalFile != nullptr)
		*bShouldDeleteLocalFile = params.bShouldDeleteLocalFile;
}


// Function Engine.AnalyticEventsBase.SendCachedEvents
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UAnalyticEventsBase::SendCachedEvents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.SendCachedEvents");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.LogCurrencyGivenEvent
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 GameCurrencyType               (CPF_Parm, CPF_NeedCtorLink)
// int                            GameCurrencyAmount             (CPF_Parm)

void UAnalyticEventsBase::LogCurrencyGivenEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogCurrencyGivenEvent");

	struct
	{
		struct FString                 GameCurrencyType;
		int                            GameCurrencyAmount;
	} params;
	params.GameCurrencyType = GameCurrencyType;
	params.GameCurrencyAmount = GameCurrencyAmount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.LogCurrencyPurchaseEvent
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 GameCurrencyType               (CPF_Parm, CPF_NeedCtorLink)
// int                            GameCurrencyAmount             (CPF_Parm)
// struct FString                 RealCurrencyType               (CPF_Parm, CPF_NeedCtorLink)
// float                          RealMoneyCost                  (CPF_Parm)
// struct FString                 PaymentProvider                (CPF_Parm, CPF_NeedCtorLink)

void UAnalyticEventsBase::LogCurrencyPurchaseEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount, const struct FString& RealCurrencyType, float RealMoneyCost, const struct FString& PaymentProvider)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogCurrencyPurchaseEvent");

	struct
	{
		struct FString                 GameCurrencyType;
		int                            GameCurrencyAmount;
		struct FString                 RealCurrencyType;
		float                          RealMoneyCost;
		struct FString                 PaymentProvider;
	} params;
	params.GameCurrencyType = GameCurrencyType;
	params.GameCurrencyAmount = GameCurrencyAmount;
	params.RealCurrencyType = RealCurrencyType;
	params.RealMoneyCost = RealMoneyCost;
	params.PaymentProvider = PaymentProvider;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.LogItemPurchaseEvent
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 ItemID                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Currency                       (CPF_Parm, CPF_NeedCtorLink)
// int                            PerItemCost                    (CPF_Parm)
// int                            ItemQuantity                   (CPF_Parm)

void UAnalyticEventsBase::LogItemPurchaseEvent(const struct FString& ItemID, const struct FString& Currency, int PerItemCost, int ItemQuantity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogItemPurchaseEvent");

	struct
	{
		struct FString                 ItemID;
		struct FString                 Currency;
		int                            PerItemCost;
		int                            ItemQuantity;
	} params;
	params.ItemID = ItemID;
	params.Currency = Currency;
	params.PerItemCost = PerItemCost;
	params.ItemQuantity = ItemQuantity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.LogUserAttributeUpdateArray
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// TArray<struct FEventStringParam> AttributeArray                 (CPF_Parm, CPF_NeedCtorLink)

void UAnalyticEventsBase::LogUserAttributeUpdateArray(TArray<struct FEventStringParam> AttributeArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogUserAttributeUpdateArray");

	struct
	{
		TArray<struct FEventStringParam> AttributeArray;
	} params;
	params.AttributeArray = AttributeArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.LogUserAttributeUpdate
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 AttributeName                  (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 AttributeValue                 (CPF_Parm, CPF_NeedCtorLink)

void UAnalyticEventsBase::LogUserAttributeUpdate(const struct FString& AttributeName, const struct FString& AttributeValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogUserAttributeUpdate");

	struct
	{
		struct FString                 AttributeName;
		struct FString                 AttributeValue;
	} params;
	params.AttributeName = AttributeName;
	params.AttributeValue = AttributeValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.LogErrorMessage
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 ErrorName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ErrorMessage                   (CPF_Parm, CPF_NeedCtorLink)

void UAnalyticEventsBase::LogErrorMessage(const struct FString& ErrorName, const struct FString& ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogErrorMessage");

	struct
	{
		struct FString                 ErrorName;
		struct FString                 ErrorMessage;
	} params;
	params.ErrorName = ErrorName;
	params.ErrorMessage = ErrorMessage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.EndStringEventParamArray
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)
// TArray<struct FEventStringParam> ParamArray                     (CPF_Parm, CPF_NeedCtorLink)

void UAnalyticEventsBase::EndStringEventParamArray(const struct FString& EventName, TArray<struct FEventStringParam> ParamArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.EndStringEventParamArray");

	struct
	{
		struct FString                 EventName;
		TArray<struct FEventStringParam> ParamArray;
	} params;
	params.EventName = EventName;
	params.ParamArray = ParamArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.LogStringEventParamArray
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)
// TArray<struct FEventStringParam> ParamArray                     (CPF_Parm, CPF_NeedCtorLink)
// bool                           bTimed                         (CPF_Parm)

void UAnalyticEventsBase::LogStringEventParamArray(const struct FString& EventName, TArray<struct FEventStringParam> ParamArray, bool bTimed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogStringEventParamArray");

	struct
	{
		struct FString                 EventName;
		TArray<struct FEventStringParam> ParamArray;
		bool                           bTimed;
	} params;
	params.EventName = EventName;
	params.ParamArray = ParamArray;
	params.bTimed = bTimed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.EndStringEventParam
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ParamName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ParamValue                     (CPF_Parm, CPF_NeedCtorLink)

void UAnalyticEventsBase::EndStringEventParam(const struct FString& EventName, const struct FString& ParamName, const struct FString& ParamValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.EndStringEventParam");

	struct
	{
		struct FString                 EventName;
		struct FString                 ParamName;
		struct FString                 ParamValue;
	} params;
	params.EventName = EventName;
	params.ParamName = ParamName;
	params.ParamValue = ParamValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.LogStringEventParam
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ParamName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ParamValue                     (CPF_Parm, CPF_NeedCtorLink)
// bool                           bTimed                         (CPF_Parm)

void UAnalyticEventsBase::LogStringEventParam(const struct FString& EventName, const struct FString& ParamName, const struct FString& ParamValue, bool bTimed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogStringEventParam");

	struct
	{
		struct FString                 EventName;
		struct FString                 ParamName;
		struct FString                 ParamValue;
		bool                           bTimed;
	} params;
	params.EventName = EventName;
	params.ParamName = ParamName;
	params.ParamValue = ParamValue;
	params.bTimed = bTimed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.EndStringEvent
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)

void UAnalyticEventsBase::EndStringEvent(const struct FString& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.EndStringEvent");

	struct
	{
		struct FString                 EventName;
	} params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.LogStringEvent
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)
// bool                           bTimed                         (CPF_Parm)

void UAnalyticEventsBase::LogStringEvent(const struct FString& EventName, bool bTimed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.LogStringEvent");

	struct
	{
		struct FString                 EventName;
		bool                           bTimed;
	} params;
	params.EventName = EventName;
	params.bTimed = bTimed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.EndSession
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UAnalyticEventsBase::EndSession()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.EndSession");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.StartSession
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UAnalyticEventsBase::StartSession()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.StartSession");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.SetUserId
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 NewUserId                      (CPF_Parm, CPF_NeedCtorLink)

void UAnalyticEventsBase::SetUserId(const struct FString& NewUserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.SetUserId");

	struct
	{
		struct FString                 NewUserId;
	} params;
	params.NewUserId = NewUserId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.Init
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UAnalyticEventsBase::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnalyticEventsBase.IsSessionInProgress
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UAnalyticEventsBase::IsSessionInProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnalyticEventsBase.IsSessionInProgress");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MultiProviderAnalytics.SendCachedEvents
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UMultiProviderAnalytics::SendCachedEvents()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.SendCachedEvents");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.LogCurrencyGivenEvent
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 GameCurrencyType               (CPF_Parm, CPF_NeedCtorLink)
// int                            GameCurrencyAmount             (CPF_Parm)

void UMultiProviderAnalytics::LogCurrencyGivenEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogCurrencyGivenEvent");

	struct
	{
		struct FString                 GameCurrencyType;
		int                            GameCurrencyAmount;
	} params;
	params.GameCurrencyType = GameCurrencyType;
	params.GameCurrencyAmount = GameCurrencyAmount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.LogCurrencyPurchaseEvent
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 GameCurrencyType               (CPF_Parm, CPF_NeedCtorLink)
// int                            GameCurrencyAmount             (CPF_Parm)
// struct FString                 RealCurrencyType               (CPF_Parm, CPF_NeedCtorLink)
// float                          RealMoneyCost                  (CPF_Parm)
// struct FString                 PaymentProvider                (CPF_Parm, CPF_NeedCtorLink)

void UMultiProviderAnalytics::LogCurrencyPurchaseEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount, const struct FString& RealCurrencyType, float RealMoneyCost, const struct FString& PaymentProvider)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogCurrencyPurchaseEvent");

	struct
	{
		struct FString                 GameCurrencyType;
		int                            GameCurrencyAmount;
		struct FString                 RealCurrencyType;
		float                          RealMoneyCost;
		struct FString                 PaymentProvider;
	} params;
	params.GameCurrencyType = GameCurrencyType;
	params.GameCurrencyAmount = GameCurrencyAmount;
	params.RealCurrencyType = RealCurrencyType;
	params.RealMoneyCost = RealMoneyCost;
	params.PaymentProvider = PaymentProvider;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.LogItemPurchaseEvent
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 ItemID                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Currency                       (CPF_Parm, CPF_NeedCtorLink)
// int                            PerItemCost                    (CPF_Parm)
// int                            ItemQuantity                   (CPF_Parm)

void UMultiProviderAnalytics::LogItemPurchaseEvent(const struct FString& ItemID, const struct FString& Currency, int PerItemCost, int ItemQuantity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogItemPurchaseEvent");

	struct
	{
		struct FString                 ItemID;
		struct FString                 Currency;
		int                            PerItemCost;
		int                            ItemQuantity;
	} params;
	params.ItemID = ItemID;
	params.Currency = Currency;
	params.PerItemCost = PerItemCost;
	params.ItemQuantity = ItemQuantity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.LogUserAttributeUpdateArray
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// TArray<struct FEventStringParam> AttributeArray                 (CPF_Parm, CPF_NeedCtorLink)

void UMultiProviderAnalytics::LogUserAttributeUpdateArray(TArray<struct FEventStringParam> AttributeArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogUserAttributeUpdateArray");

	struct
	{
		TArray<struct FEventStringParam> AttributeArray;
	} params;
	params.AttributeArray = AttributeArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.LogUserAttributeUpdate
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 AttributeName                  (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 AttributeValue                 (CPF_Parm, CPF_NeedCtorLink)

void UMultiProviderAnalytics::LogUserAttributeUpdate(const struct FString& AttributeName, const struct FString& AttributeValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogUserAttributeUpdate");

	struct
	{
		struct FString                 AttributeName;
		struct FString                 AttributeValue;
	} params;
	params.AttributeName = AttributeName;
	params.AttributeValue = AttributeValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.LogErrorMessage
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 ErrorName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ErrorMessage                   (CPF_Parm, CPF_NeedCtorLink)

void UMultiProviderAnalytics::LogErrorMessage(const struct FString& ErrorName, const struct FString& ErrorMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogErrorMessage");

	struct
	{
		struct FString                 ErrorName;
		struct FString                 ErrorMessage;
	} params;
	params.ErrorName = ErrorName;
	params.ErrorMessage = ErrorMessage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.EndStringEventParamArray
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)
// TArray<struct FEventStringParam> ParamArray                     (CPF_Parm, CPF_NeedCtorLink)

void UMultiProviderAnalytics::EndStringEventParamArray(const struct FString& EventName, TArray<struct FEventStringParam> ParamArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.EndStringEventParamArray");

	struct
	{
		struct FString                 EventName;
		TArray<struct FEventStringParam> ParamArray;
	} params;
	params.EventName = EventName;
	params.ParamArray = ParamArray;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.LogStringEventParamArray
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)
// TArray<struct FEventStringParam> ParamArray                     (CPF_Parm, CPF_NeedCtorLink)
// bool                           bTimed                         (CPF_Parm)

void UMultiProviderAnalytics::LogStringEventParamArray(const struct FString& EventName, TArray<struct FEventStringParam> ParamArray, bool bTimed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogStringEventParamArray");

	struct
	{
		struct FString                 EventName;
		TArray<struct FEventStringParam> ParamArray;
		bool                           bTimed;
	} params;
	params.EventName = EventName;
	params.ParamArray = ParamArray;
	params.bTimed = bTimed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.EndStringEventParam
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ParamName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ParamValue                     (CPF_Parm, CPF_NeedCtorLink)

void UMultiProviderAnalytics::EndStringEventParam(const struct FString& EventName, const struct FString& ParamName, const struct FString& ParamValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.EndStringEventParam");

	struct
	{
		struct FString                 EventName;
		struct FString                 ParamName;
		struct FString                 ParamValue;
	} params;
	params.EventName = EventName;
	params.ParamName = ParamName;
	params.ParamValue = ParamValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.LogStringEventParam
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ParamName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ParamValue                     (CPF_Parm, CPF_NeedCtorLink)
// bool                           bTimed                         (CPF_Parm)

void UMultiProviderAnalytics::LogStringEventParam(const struct FString& EventName, const struct FString& ParamName, const struct FString& ParamValue, bool bTimed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogStringEventParam");

	struct
	{
		struct FString                 EventName;
		struct FString                 ParamName;
		struct FString                 ParamValue;
		bool                           bTimed;
	} params;
	params.EventName = EventName;
	params.ParamName = ParamName;
	params.ParamValue = ParamValue;
	params.bTimed = bTimed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.EndStringEvent
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)

void UMultiProviderAnalytics::EndStringEvent(const struct FString& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.EndStringEvent");

	struct
	{
		struct FString                 EventName;
	} params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.LogStringEvent
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)
// bool                           bTimed                         (CPF_Parm)

void UMultiProviderAnalytics::LogStringEvent(const struct FString& EventName, bool bTimed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.LogStringEvent");

	struct
	{
		struct FString                 EventName;
		bool                           bTimed;
	} params;
	params.EventName = EventName;
	params.bTimed = bTimed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.EndSession
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UMultiProviderAnalytics::EndSession()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.EndSession");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.StartSession
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UMultiProviderAnalytics::StartSession()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.StartSession");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.SetUserId
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 NewUserId                      (CPF_Parm, CPF_NeedCtorLink)

void UMultiProviderAnalytics::SetUserId(const struct FString& NewUserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.SetUserId");

	struct
	{
		struct FString                 NewUserId;
	} params;
	params.NewUserId = NewUserId;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MultiProviderAnalytics.Init
// (FUNC_Defined, FUNC_Public)

void UMultiProviderAnalytics::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MultiProviderAnalytics.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AppNotificationsBase.DebugLogNotification
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FNotificationInfo       Notification                   (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UAppNotificationsBase::DebugLogNotification(struct FNotificationInfo* Notification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.DebugLogNotification");

	struct
	{
		struct FNotificationInfo       Notification;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Notification != nullptr)
		*Notification = params.Notification;
}


// Function Engine.AppNotificationsBase.OnReceivedRemoteNotification
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// struct FNotificationInfo       Notification                   (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           bWasAppActive                  (CPF_Parm)

void UAppNotificationsBase::OnReceivedRemoteNotification(bool bWasAppActive, struct FNotificationInfo* Notification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.OnReceivedRemoteNotification");

	struct
	{
		struct FNotificationInfo       Notification;
		bool                           bWasAppActive;
	} params;
	params.bWasAppActive = bWasAppActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Notification != nullptr)
		*Notification = params.Notification;
}


// Function Engine.AppNotificationsBase.OnReceivedLocalNotification
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// struct FNotificationInfo       Notification                   (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           bWasAppActive                  (CPF_Parm)

void UAppNotificationsBase::OnReceivedLocalNotification(bool bWasAppActive, struct FNotificationInfo* Notification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.OnReceivedLocalNotification");

	struct
	{
		struct FNotificationInfo       Notification;
		bool                           bWasAppActive;
	} params;
	params.bWasAppActive = bWasAppActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Notification != nullptr)
		*Notification = params.Notification;
}


// Function Engine.AppNotificationsBase.CancelAllScheduledLocalNotifications
// (FUNC_Native, FUNC_Public)

void UAppNotificationsBase::CancelAllScheduledLocalNotifications()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.CancelAllScheduledLocalNotifications");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AppNotificationsBase.ScheduleLocalNotification
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FNotificationInfo       Notification                   (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            StartOffsetSeconds             (CPF_Parm)

void UAppNotificationsBase::ScheduleLocalNotification(int StartOffsetSeconds, struct FNotificationInfo* Notification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.ScheduleLocalNotification");

	struct
	{
		struct FNotificationInfo       Notification;
		int                            StartOffsetSeconds;
	} params;
	params.StartOffsetSeconds = StartOffsetSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Notification != nullptr)
		*Notification = params.Notification;
}


// Function Engine.AppNotificationsBase.WasLaunchedViaNotification
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UAppNotificationsBase::WasLaunchedViaNotification()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.WasLaunchedViaNotification");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AppNotificationsBase.Init
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UAppNotificationsBase::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AppNotificationsBase.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CloudStorageBase.UpgradeLocalStorageToCloud
// (FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// TScriptInterface<class UCloudStorageUpgradeHelper> UpgradeHelper                  (CPF_Parm)
// bool                           bForceSearchAgain              (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBase::UpgradeLocalStorageToCloud(const TScriptInterface<class UCloudStorageUpgradeHelper>& UpgradeHelper, bool bForceSearchAgain)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.UpgradeLocalStorageToCloud");

	struct
	{
		TScriptInterface<class UCloudStorageUpgradeHelper> UpgradeHelper;
		bool                           bForceSearchAgain;
		bool                           ReturnValue;
	} params;
	params.UpgradeHelper = UpgradeHelper;
	params.bForceSearchAgain = bForceSearchAgain;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.ResolveConflictWithVersionIndex
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// int                            Index                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBase::ResolveConflictWithVersionIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ResolveConflictWithVersionIndex");

	struct
	{
		int                            Index;
		bool                           ReturnValue;
	} params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.ResolveConflictWithNewestDocument
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBase::ResolveConflictWithNewestDocument()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ResolveConflictWithNewestDocument");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.WaitForWritesToFinish
// (FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// float                          MaxTimeSeconds                 (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBase::WaitForWritesToFinish(float MaxTimeSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.WaitForWritesToFinish");

	struct
	{
		float                          MaxTimeSeconds;
		bool                           ReturnValue;
	} params;
	params.MaxTimeSeconds = MaxTimeSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.IsStillWritingFiles
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBase::IsStillWritingFiles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.IsStillWritingFiles");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.SaveDocumentWithObject
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// int                            Index                          (CPF_Parm)
// class UObject*                 ObjectData                     (CPF_Parm)
// int                            SaveVersion                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBase::SaveDocumentWithObject(int Index, class UObject* ObjectData, int SaveVersion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.SaveDocumentWithObject");

	struct
	{
		int                            Index;
		class UObject*                 ObjectData;
		int                            SaveVersion;
		bool                           ReturnValue;
	} params;
	params.Index = Index;
	params.ObjectData = ObjectData;
	params.SaveVersion = SaveVersion;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.SaveDocumentWithBytes
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// int                            Index                          (CPF_Parm)
// TArray<unsigned char>          ByteData                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBase::SaveDocumentWithBytes(int Index, TArray<unsigned char> ByteData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.SaveDocumentWithBytes");

	struct
	{
		int                            Index;
		TArray<unsigned char>          ByteData;
		bool                           ReturnValue;
	} params;
	params.Index = Index;
	params.ByteData = ByteData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.SaveDocumentWithString
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// int                            Index                          (CPF_Parm)
// struct FString                 StringData                     (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBase::SaveDocumentWithString(int Index, const struct FString& StringData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.SaveDocumentWithString");

	struct
	{
		int                            Index;
		struct FString                 StringData;
		bool                           ReturnValue;
	} params;
	params.Index = Index;
	params.StringData = StringData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.WriteCloudDocument
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// int                            Index                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBase::WriteCloudDocument(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.WriteCloudDocument");

	struct
	{
		int                            Index;
		bool                           ReturnValue;
	} params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.ParseDocumentAsObject
// (FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Index                          (CPF_Parm)
// class UClass*                  ObjectClass                    (CPF_Parm)
// int                            ExpectedVersion                (CPF_Parm)
// bool                           bIsForConflict                 (CPF_OptionalParm, CPF_Parm)
// class UObject*                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UObject* UCloudStorageBase::ParseDocumentAsObject(int Index, class UClass* ObjectClass, int ExpectedVersion, bool bIsForConflict)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ParseDocumentAsObject");

	struct
	{
		int                            Index;
		class UClass*                  ObjectClass;
		int                            ExpectedVersion;
		bool                           bIsForConflict;
		class UObject*                 ReturnValue;
	} params;
	params.Index = Index;
	params.ObjectClass = ObjectClass;
	params.ExpectedVersion = ExpectedVersion;
	params.bIsForConflict = bIsForConflict;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.ParseDocumentAsBytes
// (FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            Index                          (CPF_Parm)
// TArray<unsigned char>          ByteData                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           bIsForConflict                 (CPF_OptionalParm, CPF_Parm)

void UCloudStorageBase::ParseDocumentAsBytes(int Index, bool bIsForConflict, TArray<unsigned char>* ByteData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ParseDocumentAsBytes");

	struct
	{
		int                            Index;
		TArray<unsigned char>          ByteData;
		bool                           bIsForConflict;
	} params;
	params.Index = Index;
	params.bIsForConflict = bIsForConflict;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ByteData != nullptr)
		*ByteData = params.ByteData;
}


// Function Engine.CloudStorageBase.ParseDocumentAsString
// (FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Index                          (CPF_Parm)
// bool                           bIsForConflict                 (CPF_OptionalParm, CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UCloudStorageBase::ParseDocumentAsString(int Index, bool bIsForConflict)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ParseDocumentAsString");

	struct
	{
		int                            Index;
		bool                           bIsForConflict;
		struct FString                 ReturnValue;
	} params;
	params.Index = Index;
	params.bIsForConflict = bIsForConflict;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.ReadCloudDocument
// (FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Index                          (CPF_Parm)
// bool                           bIsForConflict                 (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBase::ReadCloudDocument(int Index, bool bIsForConflict)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ReadCloudDocument");

	struct
	{
		int                            Index;
		bool                           bIsForConflict;
		bool                           ReturnValue;
	} params;
	params.Index = Index;
	params.bIsForConflict = bIsForConflict;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.DeleteAllCloudDocuments
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UCloudStorageBase::DeleteAllCloudDocuments()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.DeleteAllCloudDocuments");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CloudStorageBase.CreateCloudDocument
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UCloudStorageBase::CreateCloudDocument(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.CreateCloudDocument");

	struct
	{
		struct FString                 Filename;
		int                            ReturnValue;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.GetCloudDocumentName
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// int                            Index                          (CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UCloudStorageBase::GetCloudDocumentName(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.GetCloudDocumentName");

	struct
	{
		int                            Index;
		struct FString                 ReturnValue;
	} params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.GetNumCloudDocuments
// (FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bIsForConflict                 (CPF_OptionalParm, CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UCloudStorageBase::GetNumCloudDocuments(bool bIsForConflict)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.GetNumCloudDocuments");

	struct
	{
		bool                           bIsForConflict;
		int                            ReturnValue;
	} params;
	params.bIsForConflict = bIsForConflict;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.QueryForCloudDocuments
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBase::QueryForCloudDocuments()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.QueryForCloudDocuments");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.WriteKeyValue
// (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 KeyName                        (CPF_Parm, CPF_NeedCtorLink)
// struct FPlatformInterfaceData  Value                          (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBase::WriteKeyValue(const struct FString& KeyName, struct FPlatformInterfaceData* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.WriteKeyValue");

	struct
	{
		struct FString                 KeyName;
		struct FPlatformInterfaceData  Value;
		bool                           ReturnValue;
	} params;
	params.KeyName = KeyName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.ReadKeyValueFromLocalStore
// (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 KeyName                        (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class EPlatformInterfaceDataType> Type                           (CPF_Parm)
// struct FPlatformInterfaceDelegateResult Value                          (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBase::ReadKeyValueFromLocalStore(const struct FString& KeyName, TEnumAsByte<enum class EPlatformInterfaceDataType> Type, struct FPlatformInterfaceDelegateResult* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ReadKeyValueFromLocalStore");

	struct
	{
		struct FString                 KeyName;
		TEnumAsByte<enum class EPlatformInterfaceDataType> Type;
		struct FPlatformInterfaceDelegateResult Value;
		bool                           ReturnValue;
	} params;
	params.KeyName = KeyName;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.ReadKeyValue
// (FUNC_Native, FUNC_Event, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 KeyName                        (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class EPlatformInterfaceDataType> Type                           (CPF_Parm)
// struct FPlatformInterfaceDelegateResult Value                          (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBase::ReadKeyValue(const struct FString& KeyName, TEnumAsByte<enum class EPlatformInterfaceDataType> Type, struct FPlatformInterfaceDelegateResult* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.ReadKeyValue");

	struct
	{
		struct FString                 KeyName;
		TEnumAsByte<enum class EPlatformInterfaceDataType> Type;
		struct FPlatformInterfaceDelegateResult Value;
		bool                           ReturnValue;
	} params;
	params.KeyName = KeyName;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.IsUsingLocalStorage
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBase::IsUsingLocalStorage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.IsUsingLocalStorage");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBase.Init
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UCloudStorageBase::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBase.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.Disconnect
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UFacebookIntegration::Disconnect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.Disconnect");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.FacebookDialog
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 Action                         (CPF_Parm, CPF_NeedCtorLink)
// TArray<struct FString>         ParamKeysAndValues             (CPF_Parm, CPF_NeedCtorLink)

void UFacebookIntegration::FacebookDialog(const struct FString& Action, TArray<struct FString> ParamKeysAndValues)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.FacebookDialog");

	struct
	{
		struct FString                 Action;
		TArray<struct FString>         ParamKeysAndValues;
	} params;
	params.Action = Action;
	params.ParamKeysAndValues = ParamKeysAndValues;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.FacebookRequest
// (FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 GraphRequest                   (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 HTTPMethod                     (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// TArray<struct FString>         ParamKeysAndValues             (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)

void UFacebookIntegration::FacebookRequest(const struct FString& GraphRequest, const struct FString& HTTPMethod, TArray<struct FString> ParamKeysAndValues)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.FacebookRequest");

	struct
	{
		struct FString                 GraphRequest;
		struct FString                 HTTPMethod;
		TArray<struct FString>         ParamKeysAndValues;
	} params;
	params.GraphRequest = GraphRequest;
	params.HTTPMethod = HTTPMethod;
	params.ParamKeysAndValues = ParamKeysAndValues;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FacebookIntegration.IsAuthorized
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UFacebookIntegration::IsAuthorized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.IsAuthorized");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FacebookIntegration.Authorize
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UFacebookIntegration::Authorize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.Authorize");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FacebookIntegration.Init
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UFacebookIntegration::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FacebookIntegration.Init");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InAppMessageBase.ShowInAppEmailUI
// (FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 InitialSubject                 (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// struct FString                 InitialMessage                 (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UInAppMessageBase::ShowInAppEmailUI(const struct FString& InitialSubject, const struct FString& InitialMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InAppMessageBase.ShowInAppEmailUI");

	struct
	{
		struct FString                 InitialSubject;
		struct FString                 InitialMessage;
		bool                           ReturnValue;
	} params;
	params.InitialSubject = InitialSubject;
	params.InitialMessage = InitialMessage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InAppMessageBase.ShowInAppSMSUI
// (FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 InitialMessage                 (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UInAppMessageBase::ShowInAppSMSUI(const struct FString& InitialMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InAppMessageBase.ShowInAppSMSUI");

	struct
	{
		struct FString                 InitialMessage;
		bool                           ReturnValue;
	} params;
	params.InitialMessage = InitialMessage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InAppMessageBase.Init
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UInAppMessageBase::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InAppMessageBase.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.SetPauseWhileAdOpen
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bShouldPause                   (CPF_Parm)

void UInGameAdManager::SetPauseWhileAdOpen(bool bShouldPause)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.SetPauseWhileAdOpen");

	struct
	{
		bool                           bShouldPause;
	} params;
	params.bShouldPause = bShouldPause;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.ForceCloseAd
// (FUNC_Native, FUNC_Public)

void UInGameAdManager::ForceCloseAd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.ForceCloseAd");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.HideBanner
// (FUNC_Native, FUNC_Public)

void UInGameAdManager::HideBanner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.HideBanner");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.ShowBanner
// (FUNC_Native, FUNC_Public)
// Parameters:
// bool                           bShowBottomOfScreen            (CPF_Parm)

void UInGameAdManager::ShowBanner(bool bShowBottomOfScreen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.ShowBanner");

	struct
	{
		bool                           bShowBottomOfScreen;
	} params;
	params.bShowBottomOfScreen = bShowBottomOfScreen;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InGameAdManager.Init
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UInGameAdManager::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InGameAdManager.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TwitterIntegrationBase.TwitterRequest
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)
// TArray<struct FString>         ParamKeysAndValues             (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class ETwitterRequestMethod> RequestMethod                  (CPF_Parm)
// int                            AccountIndex                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UTwitterIntegrationBase::TwitterRequest(const struct FString& URL, TArray<struct FString> ParamKeysAndValues, TEnumAsByte<enum class ETwitterRequestMethod> RequestMethod, int AccountIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.TwitterRequest");

	struct
	{
		struct FString                 URL;
		TArray<struct FString>         ParamKeysAndValues;
		TEnumAsByte<enum class ETwitterRequestMethod> RequestMethod;
		int                            AccountIndex;
		bool                           ReturnValue;
	} params;
	params.URL = URL;
	params.ParamKeysAndValues = ParamKeysAndValues;
	params.RequestMethod = RequestMethod;
	params.AccountIndex = AccountIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.GetAccountId
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// int                            AccountIndex                   (CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UTwitterIntegrationBase::GetAccountId(int AccountIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.GetAccountId");

	struct
	{
		int                            AccountIndex;
		struct FString                 ReturnValue;
	} params;
	params.AccountIndex = AccountIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.GetAccountName
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// int                            AccountIndex                   (CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UTwitterIntegrationBase::GetAccountName(int AccountIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.GetAccountName");

	struct
	{
		int                            AccountIndex;
		struct FString                 ReturnValue;
	} params;
	params.AccountIndex = AccountIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.GetNumAccounts
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UTwitterIntegrationBase::GetNumAccounts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.GetNumAccounts");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.AuthorizeAccounts
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UTwitterIntegrationBase::AuthorizeAccounts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.AuthorizeAccounts");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.ShowTweetUI
// (FUNC_Native, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 InitialMessage                 (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// struct FString                 URL                            (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Picture                        (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UTwitterIntegrationBase::ShowTweetUI(const struct FString& InitialMessage, const struct FString& URL, const struct FString& Picture)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.ShowTweetUI");

	struct
	{
		struct FString                 InitialMessage;
		struct FString                 URL;
		struct FString                 Picture;
		bool                           ReturnValue;
	} params;
	params.InitialMessage = InitialMessage;
	params.URL = URL;
	params.Picture = Picture;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.CanShowTweetUI
// (FUNC_Native, FUNC_Event, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UTwitterIntegrationBase::CanShowTweetUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.CanShowTweetUI");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TwitterIntegrationBase.Init
// (FUNC_Native, FUNC_Event, FUNC_Public)

void UTwitterIntegrationBase::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TwitterIntegrationBase.Init");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlatformInterfaceWebResponse.GetHeaderValue
// (FUNC_Native, FUNC_Public)
// Parameters:
// struct FString                 HeaderName                     (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UPlatformInterfaceWebResponse::GetHeaderValue(const struct FString& HeaderName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetHeaderValue");

	struct
	{
		struct FString                 HeaderName;
		struct FString                 ReturnValue;
	} params;
	params.HeaderName = HeaderName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlatformInterfaceWebResponse.GetHeader
// (FUNC_Native, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            HeaderIndex                    (CPF_Parm)
// struct FString                 Header                         (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 Value                          (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UPlatformInterfaceWebResponse::GetHeader(int HeaderIndex, struct FString* Header, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetHeader");

	struct
	{
		int                            HeaderIndex;
		struct FString                 Header;
		struct FString                 Value;
	} params;
	params.HeaderIndex = HeaderIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Header != nullptr)
		*Header = params.Header;
	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.PlatformInterfaceWebResponse.GetNumHeaders
// (FUNC_Native, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UPlatformInterfaceWebResponse::GetNumHeaders()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlatformInterfaceWebResponse.GetNumHeaders");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.PartiallyDuplicates
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// int                            Switch1                        (CPF_Parm)
// int                            Switch2                        (CPF_Parm)
// class UObject*                 OptionalObject1                (CPF_Parm)
// class UObject*                 OptionalObject2                (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ULocalMessage::STATIC_PartiallyDuplicates(int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.PartiallyDuplicates");

	struct
	{
		int                            Switch1;
		int                            Switch2;
		class UObject*                 OptionalObject1;
		class UObject*                 OptionalObject2;
		bool                           ReturnValue;
	} params;
	params.Switch1 = Switch1;
	params.Switch2 = Switch2;
	params.OptionalObject1 = OptionalObject1;
	params.OptionalObject2 = OptionalObject2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.IsConsoleMessage
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// int                            Switch                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ULocalMessage::STATIC_IsConsoleMessage(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.IsConsoleMessage");

	struct
	{
		int                            Switch;
		bool                           ReturnValue;
	} params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetLifeTime
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// int                            Switch                         (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float ULocalMessage::STATIC_GetLifeTime(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetLifeTime");

	struct
	{
		int                            Switch;
		float                          ReturnValue;
	} params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetFontSize
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// int                            Switch                         (CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI1                    (CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI2                    (CPF_Parm)
// class APlayerReplicationInfo*  LocalPlayer                    (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int ULocalMessage::STATIC_GetFontSize(int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetFontSize");

	struct
	{
		int                            Switch;
		class APlayerReplicationInfo*  RelatedPRI1;
		class APlayerReplicationInfo*  RelatedPRI2;
		class APlayerReplicationInfo*  LocalPlayer;
		int                            ReturnValue;
	} params;
	params.Switch = Switch;
	params.RelatedPRI1 = RelatedPRI1;
	params.RelatedPRI2 = RelatedPRI2;
	params.LocalPlayer = LocalPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetPos
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// int                            Switch                         (CPF_Parm)
// class AHUD*                    myHUD                          (CPF_Parm)
// float                          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

float ULocalMessage::STATIC_GetPos(int Switch, class AHUD* myHUD)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetPos");

	struct
	{
		int                            Switch;
		class AHUD*                    myHUD;
		float                          ReturnValue;
	} params;
	params.Switch = Switch;
	params.myHUD = myHUD;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetColor
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Switch                         (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_OptionalParm, CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm, CPF_Parm)
// struct FColor                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FColor ULocalMessage::STATIC_GetColor(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetColor");

	struct
	{
		int                            Switch;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		class UObject*                 OptionalObject;
		struct FColor                  ReturnValue;
	} params;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetConsoleColor
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_Parm)
// struct FColor                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

struct FColor ULocalMessage::STATIC_GetConsoleColor(class APlayerReplicationInfo* RelatedPRI_2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetConsoleColor");

	struct
	{
		class APlayerReplicationInfo*  RelatedPRI_2;
		struct FColor                  ReturnValue;
	} params;
	params.RelatedPRI_2 = RelatedPRI_2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetString
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Switch                         (CPF_OptionalParm, CPF_Parm)
// bool                           bPRI1HUD                       (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_OptionalParm, CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm, CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString ULocalMessage::STATIC_GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetString");

	struct
	{
		int                            Switch;
		bool                           bPRI1HUD;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		class UObject*                 OptionalObject;
		struct FString                 ReturnValue;
	} params;
	params.Switch = Switch;
	params.bPRI1HUD = bPRI1HUD;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.ClientReceive
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APlayerController*       P                              (CPF_Parm)
// int                            Switch                         (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_OptionalParm, CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm, CPF_Parm)

void ULocalMessage::STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.ClientReceive");

	struct
	{
		class APlayerController*       P;
		int                            Switch;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		class UObject*                 OptionalObject;
	} params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_Teleport.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_Teleport::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Teleport.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_Teleport.ShouldTeleport
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  TestActor                      (CPF_Parm)
// struct FVector                 TeleportLocation               (CPF_Parm)
// float                          TeleportDist                   (CPF_OptionalParm, CPF_Parm)
// TArray<class AVolume*>         Volumes                        (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USeqAct_Teleport::STATIC_ShouldTeleport(class AActor* TestActor, const struct FVector& TeleportLocation, float TeleportDist, TArray<class AVolume*> Volumes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_Teleport.ShouldTeleport");

	struct
	{
		class AActor*                  TestActor;
		struct FVector                 TeleportLocation;
		float                          TeleportDist;
		TArray<class AVolume*>         Volumes;
		bool                           ReturnValue;
	} params;
	params.TestActor = TestActor;
	params.TeleportLocation = TeleportLocation;
	params.TeleportDist = TeleportDist;
	params.Volumes = Volumes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetVelocity.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_SetVelocity::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetVelocity.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_AttachToActor.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_AttachToActor::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_AttachToActor.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.RemoveCanPlayOnlineChangedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         Callback                       (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::RemoveCanPlayOnlineChangedDelegate(const struct FScriptDelegate& Callback)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.RemoveCanPlayOnlineChangedDelegate");

	struct
	{
		struct FScriptDelegate         Callback;
	} params;
	params.Callback = Callback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddCanPlayOnlineChangedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         Callback                       (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddCanPlayOnlineChangedDelegate(const struct FScriptDelegate& Callback)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddCanPlayOnlineChangedDelegate");

	struct
	{
		struct FScriptDelegate         Callback;
	} params;
	params.Callback = Callback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.GetPlayerLanguage
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UOnlinePlayerInterface::GetPlayerLanguage(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetPlayerLanguage");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetPlayerCountry
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UOnlinePlayerInterface::GetPlayerCountry(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetPlayerCountry");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ClearReadPlayerCountryDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadPlayerCountryDelegate      (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearReadPlayerCountryDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadPlayerCountryDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadPlayerCountryDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadPlayerCountryDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadPlayerCountryDelegate = ReadPlayerCountryDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReadPlayerCountryDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadPlayerCountryDelegate      (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddReadPlayerCountryDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadPlayerCountryDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadPlayerCountryDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadPlayerCountryDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadPlayerCountryDelegate = ReadPlayerCountryDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.GetAchievements
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TArray<struct FAchievementDetails> Achievements                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            TitleId                        (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EOnlineEnumerationReadState> UOnlinePlayerInterface::GetAchievements(unsigned char LocalUserNum, int TitleId, TArray<struct FAchievementDetails>* Achievements)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetAchievements");

	struct
	{
		unsigned char                  LocalUserNum;
		TArray<struct FAchievementDetails> Achievements;
		int                            TitleId;
		TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.TitleId = TitleId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Achievements != nullptr)
		*Achievements = params.Achievements;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReadAchievementsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadAchievementsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearReadAchievementsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadAchievementsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadAchievementsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadAchievementsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadAchievementsCompleteDelegate = ReadAchievementsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReadAchievementsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadAchievementsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddReadAchievementsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadAchievementsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadAchievementsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadAchievementsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadAchievementsCompleteDelegate = ReadAchievementsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReadAchievementsComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// int                            TitleId                        (CPF_Parm)

void UOnlinePlayerInterface::OnReadAchievementsComplete(int TitleId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadAchievementsComplete");

	struct
	{
		int                            TitleId;
	} params;
	params.TitleId = TitleId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ReadAchievements
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            TitleId                        (CPF_OptionalParm, CPF_Parm)
// bool                           bShouldReadText                (CPF_OptionalParm, CPF_Parm)
// bool                           bShouldReadImages              (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::ReadAchievements(unsigned char LocalUserNum, int TitleId, bool bShouldReadText, bool bShouldReadImages)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadAchievements");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            TitleId;
		bool                           bShouldReadText;
		bool                           bShouldReadImages;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.TitleId = TitleId;
	params.bShouldReadText = bShouldReadText;
	params.bShouldReadImages = bShouldReadImages;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearUnlockAchievementCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         UnlockAchievementCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearUnlockAchievementCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearUnlockAchievementCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         UnlockAchievementCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.UnlockAchievementCompleteDelegate = UnlockAchievementCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddUnlockAchievementCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         UnlockAchievementCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddUnlockAchievementCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddUnlockAchievementCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         UnlockAchievementCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.UnlockAchievementCompleteDelegate = UnlockAchievementCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnUnlockAchievementComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnUnlockAchievementComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnUnlockAchievementComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.UnlockAchievement
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            AchievementId                  (CPF_Parm)
// float                          PercentComplete                (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::UnlockAchievement(unsigned char LocalUserNum, int AchievementId, float PercentComplete)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.UnlockAchievement");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            AchievementId;
		float                          PercentComplete;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.AchievementId = AchievementId;
	params.PercentComplete = PercentComplete;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.DeleteMessage
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            MessageIndex                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::DeleteMessage(unsigned char LocalUserNum, int MessageIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.DeleteMessage");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            MessageIndex;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.MessageIndex = MessageIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearFriendMessageReceivedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         MessageDelegate                (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearFriendMessageReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& MessageDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearFriendMessageReceivedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         MessageDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.MessageDelegate = MessageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddFriendMessageReceivedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         MessageDelegate                (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddFriendMessageReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& MessageDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendMessageReceivedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         MessageDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.MessageDelegate = MessageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnFriendMessageReceived
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            SendingPlayer                  (CPF_Parm)
// struct FString                 SendingNick                    (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Message                        (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::OnFriendMessageReceived(unsigned char LocalUserNum, const struct FUniqueNetId& SendingPlayer, const struct FString& SendingNick, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnFriendMessageReceived");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            SendingPlayer;
		struct FString                 SendingNick;
		struct FString                 Message;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.SendingPlayer = SendingPlayer;
	params.SendingNick = SendingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.GetFriendMessages
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TArray<struct FOnlineFriendMessage> FriendMessages                 (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::GetFriendMessages(unsigned char LocalUserNum, TArray<struct FOnlineFriendMessage>* FriendMessages)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetFriendMessages");

	struct
	{
		unsigned char                  LocalUserNum;
		TArray<struct FOnlineFriendMessage> FriendMessages;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FriendMessages != nullptr)
		*FriendMessages = params.FriendMessages;
}


// Function Engine.OnlinePlayerInterface.ClearJoinFriendGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         JoinFriendGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearJoinFriendGameCompleteDelegate(const struct FScriptDelegate& JoinFriendGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearJoinFriendGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         JoinFriendGameCompleteDelegate;
	} params;
	params.JoinFriendGameCompleteDelegate = JoinFriendGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddJoinFriendGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         JoinFriendGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddJoinFriendGameCompleteDelegate(const struct FScriptDelegate& JoinFriendGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddJoinFriendGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         JoinFriendGameCompleteDelegate;
	} params;
	params.JoinFriendGameCompleteDelegate = JoinFriendGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnJoinFriendGameComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnJoinFriendGameComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnJoinFriendGameComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.JoinFriendGame
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            Friend                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::JoinFriendGame(unsigned char LocalUserNum, const struct FUniqueNetId& Friend)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.JoinFriendGame");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            Friend;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.Friend = Friend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReceivedGameInviteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReceivedGameInviteDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearReceivedGameInviteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReceivedGameInviteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReceivedGameInviteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReceivedGameInviteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReceivedGameInviteDelegate = ReceivedGameInviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReceivedGameInviteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReceivedGameInviteDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddReceivedGameInviteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReceivedGameInviteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReceivedGameInviteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReceivedGameInviteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReceivedGameInviteDelegate = ReceivedGameInviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReceivedGameInvite
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 InviterName                    (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::OnReceivedGameInvite(unsigned char LocalUserNum, const struct FString& InviterName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReceivedGameInvite");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 InviterName;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.InviterName = InviterName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.SendGameInviteToFriends
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TArray<struct FUniqueNetId>    Friends                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Text                           (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::SendGameInviteToFriends(unsigned char LocalUserNum, TArray<struct FUniqueNetId> Friends, const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SendGameInviteToFriends");

	struct
	{
		unsigned char                  LocalUserNum;
		TArray<struct FUniqueNetId>    Friends;
		struct FString                 Text;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.Friends = Friends;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.SendGameInviteToFriend
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            Friend                         (CPF_Parm)
// struct FString                 Text                           (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::SendGameInviteToFriend(unsigned char LocalUserNum, const struct FUniqueNetId& Friend, const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SendGameInviteToFriend");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            Friend;
		struct FString                 Text;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.Friend = Friend;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.SendMessageToFriend
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            Friend                         (CPF_Parm)
// struct FString                 Message                        (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::SendMessageToFriend(unsigned char LocalUserNum, const struct FUniqueNetId& Friend, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SendMessageToFriend");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            Friend;
		struct FString                 Message;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.Friend = Friend;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearFriendInviteReceivedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         InviteDelegate                 (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearFriendInviteReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& InviteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearFriendInviteReceivedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         InviteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.InviteDelegate = InviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddFriendInviteReceivedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         InviteDelegate                 (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddFriendInviteReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& InviteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendInviteReceivedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         InviteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.InviteDelegate = InviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnFriendInviteReceived
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            RequestingPlayer               (CPF_Parm)
// struct FString                 RequestingNick                 (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Message                        (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::OnFriendInviteReceived(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer, const struct FString& RequestingNick, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnFriendInviteReceived");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            RequestingPlayer;
		struct FString                 RequestingNick;
		struct FString                 Message;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;
	params.RequestingNick = RequestingNick;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.RemoveFriend
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            FormerFriend                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::RemoveFriend(unsigned char LocalUserNum, const struct FUniqueNetId& FormerFriend)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.RemoveFriend");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            FormerFriend;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.FormerFriend = FormerFriend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.DenyFriendInvite
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            RequestingPlayer               (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::DenyFriendInvite(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.DenyFriendInvite");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            RequestingPlayer;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.AcceptFriendInvite
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            RequestingPlayer               (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::AcceptFriendInvite(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AcceptFriendInvite");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            RequestingPlayer;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.RequestingPlayer = RequestingPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearAddFriendByNameCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         FriendDelegate                 (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearAddFriendByNameCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearAddFriendByNameCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         FriendDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.FriendDelegate = FriendDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddAddFriendByNameCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         FriendDelegate                 (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddAddFriendByNameCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddAddFriendByNameCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         FriendDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.FriendDelegate = FriendDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnAddFriendByNameComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnAddFriendByNameComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnAddFriendByNameComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddFriendByName
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 FriendName                     (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Message                        (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::AddFriendByName(unsigned char LocalUserNum, const struct FString& FriendName, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendByName");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 FriendName;
		struct FString                 Message;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.FriendName = FriendName;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.AddFriend
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            NewFriend                      (CPF_Parm)
// struct FString                 Message                        (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::AddFriend(unsigned char LocalUserNum, const struct FUniqueNetId& NewFriend, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriend");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            NewFriend;
		struct FString                 Message;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.NewFriend = NewFriend;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetKeyboardInputResults
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  bWasCanceled                   (CPF_Parm, CPF_OutParm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UOnlinePlayerInterface::GetKeyboardInputResults(unsigned char* bWasCanceled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetKeyboardInputResults");

	struct
	{
		unsigned char                  bWasCanceled;
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bWasCanceled != nullptr)
		*bWasCanceled = params.bWasCanceled;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         InputDelegate                  (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearKeyboardInputDoneDelegate");

	struct
	{
		struct FScriptDelegate         InputDelegate;
	} params;
	params.InputDelegate = InputDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         InputDelegate                  (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddKeyboardInputDoneDelegate");

	struct
	{
		struct FScriptDelegate         InputDelegate;
	} params;
	params.InputDelegate = InputDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnKeyboardInputComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnKeyboardInputComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnKeyboardInputComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.HideKeyboardUI
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::HideKeyboardUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.HideKeyboardUI");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ShowKeyboardUI
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 TitleText                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 DescriptionText                (CPF_Parm, CPF_NeedCtorLink)
// bool                           bIsPassword                    (CPF_OptionalParm, CPF_Parm)
// bool                           bShouldValidate                (CPF_OptionalParm, CPF_Parm)
// struct FString                 DefaultText                    (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// int                            MaxResultLength                (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::ShowKeyboardUI(unsigned char LocalUserNum, const struct FString& TitleText, const struct FString& DescriptionText, bool bIsPassword, bool bShouldValidate, const struct FString& DefaultText, int MaxResultLength)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ShowKeyboardUI");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 TitleText;
		struct FString                 DescriptionText;
		bool                           bIsPassword;
		bool                           bShouldValidate;
		struct FString                 DefaultText;
		int                            MaxResultLength;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.TitleText = TitleText;
	params.DescriptionText = DescriptionText;
	params.bIsPassword = bIsPassword;
	params.bShouldValidate = bShouldValidate;
	params.DefaultText = DefaultText;
	params.MaxResultLength = MaxResultLength;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.SetOnlineStatus
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            StatusId                       (CPF_Parm)
// TArray<struct FLocalizedStringSetting> LocalizedStringSettings        (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// TArray<struct FSettingsProperty> Properties                     (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::SetOnlineStatus(unsigned char LocalUserNum, int StatusId, TArray<struct FLocalizedStringSetting>* LocalizedStringSettings, TArray<struct FSettingsProperty>* Properties)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SetOnlineStatus");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            StatusId;
		TArray<struct FLocalizedStringSetting> LocalizedStringSettings;
		TArray<struct FSettingsProperty> Properties;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.StatusId = StatusId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LocalizedStringSettings != nullptr)
		*LocalizedStringSettings = params.LocalizedStringSettings;
	if (Properties != nullptr)
		*Properties = params.Properties;
}


// Function Engine.OnlinePlayerInterface.GetFriendsList
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TArray<struct FOnlineFriend>   Friends                        (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            Count                          (CPF_OptionalParm, CPF_Parm)
// int                            StartingAt                     (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EOnlineEnumerationReadState> UOnlinePlayerInterface::GetFriendsList(unsigned char LocalUserNum, int Count, int StartingAt, TArray<struct FOnlineFriend>* Friends)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetFriendsList");

	struct
	{
		unsigned char                  LocalUserNum;
		TArray<struct FOnlineFriend>   Friends;
		int                            Count;
		int                            StartingAt;
		TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.Count = Count;
	params.StartingAt = StartingAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Friends != nullptr)
		*Friends = params.Friends;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadFriendsCompleteDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearReadFriendsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadFriendsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadFriendsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadFriendsCompleteDelegate = ReadFriendsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadFriendsCompleteDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddReadFriendsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadFriendsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadFriendsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadFriendsCompleteDelegate = ReadFriendsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReadFriendsComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnReadFriendsComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadFriendsComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ReadFriendsList
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            Count                          (CPF_OptionalParm, CPF_Parm)
// int                            StartingAt                     (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::ReadFriendsList(unsigned char LocalUserNum, int Count, int StartingAt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadFriendsList");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            Count;
		int                            StartingAt;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.Count = Count;
	params.StartingAt = StartingAt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearWritePlayerStorageCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         WritePlayerStorageCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearWritePlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WritePlayerStorageCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearWritePlayerStorageCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         WritePlayerStorageCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.WritePlayerStorageCompleteDelegate = WritePlayerStorageCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddWritePlayerStorageCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         WritePlayerStorageCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddWritePlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WritePlayerStorageCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddWritePlayerStorageCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         WritePlayerStorageCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.WritePlayerStorageCompleteDelegate = WritePlayerStorageCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnWritePlayerStorageComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnWritePlayerStorageComplete(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnWritePlayerStorageComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           bWasSuccessful;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.WritePlayerStorage
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)
// int                            DeviceID                       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::WritePlayerStorage(unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int DeviceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.WritePlayerStorage");

	struct
	{
		unsigned char                  LocalUserNum;
		class UOnlinePlayerStorage*    PlayerStorage;
		int                            DeviceID;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerStorage = PlayerStorage;
	params.DeviceID = DeviceID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetPlayerStorage
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// class UOnlinePlayerStorage*    ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UOnlinePlayerStorage* UOnlinePlayerInterface::GetPlayerStorage(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetPlayerStorage");

	struct
	{
		unsigned char                  LocalUserNum;
		class UOnlinePlayerStorage*    ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageForNetIdCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            NetId                          (CPF_Parm)
// struct FScriptDelegate         ReadPlayerStorageForNetIdCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearReadPlayerStorageForNetIdCompleteDelegate(const struct FUniqueNetId& NetId, const struct FScriptDelegate& ReadPlayerStorageForNetIdCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageForNetIdCompleteDelegate");

	struct
	{
		struct FUniqueNetId            NetId;
		struct FScriptDelegate         ReadPlayerStorageForNetIdCompleteDelegate;
	} params;
	params.NetId = NetId;
	params.ReadPlayerStorageForNetIdCompleteDelegate = ReadPlayerStorageForNetIdCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReadPlayerStorageForNetIdCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            NetId                          (CPF_Parm)
// struct FScriptDelegate         ReadPlayerStorageForNetIdCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddReadPlayerStorageForNetIdCompleteDelegate(const struct FUniqueNetId& NetId, const struct FScriptDelegate& ReadPlayerStorageForNetIdCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadPlayerStorageForNetIdCompleteDelegate");

	struct
	{
		struct FUniqueNetId            NetId;
		struct FScriptDelegate         ReadPlayerStorageForNetIdCompleteDelegate;
	} params;
	params.NetId = NetId;
	params.ReadPlayerStorageForNetIdCompleteDelegate = ReadPlayerStorageForNetIdCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReadPlayerStorageForNetIdComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FUniqueNetId            NetId                          (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnReadPlayerStorageForNetIdComplete(const struct FUniqueNetId& NetId, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadPlayerStorageForNetIdComplete");

	struct
	{
		struct FUniqueNetId            NetId;
		bool                           bWasSuccessful;
	} params;
	params.NetId = NetId;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ReadPlayerStorageForNetId
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            NetId                          (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::ReadPlayerStorageForNetId(unsigned char LocalUserNum, const struct FUniqueNetId& NetId, class UOnlinePlayerStorage* PlayerStorage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadPlayerStorageForNetId");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            NetId;
		class UOnlinePlayerStorage*    PlayerStorage;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.NetId = NetId;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadPlayerStorageCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearReadPlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadPlayerStorageCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadPlayerStorageCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadPlayerStorageCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadPlayerStorageCompleteDelegate = ReadPlayerStorageCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReadPlayerStorageCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadPlayerStorageCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddReadPlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadPlayerStorageCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadPlayerStorageCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadPlayerStorageCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadPlayerStorageCompleteDelegate = ReadPlayerStorageCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReadPlayerStorageComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnReadPlayerStorageComplete(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadPlayerStorageComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           bWasSuccessful;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ReadPlayerStorage
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)
// int                            DeviceID                       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::ReadPlayerStorage(unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int DeviceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadPlayerStorage");

	struct
	{
		unsigned char                  LocalUserNum;
		class UOnlinePlayerStorage*    PlayerStorage;
		int                            DeviceID;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerStorage = PlayerStorage;
	params.DeviceID = DeviceID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearWriteProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearWriteProfileSettingsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         WriteProfileSettingsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.WriteProfileSettingsCompleteDelegate = WriteProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         WriteProfileSettingsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddWriteProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddWriteProfileSettingsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         WriteProfileSettingsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.WriteProfileSettingsCompleteDelegate = WriteProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnWriteProfileSettingsComplete(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnWriteProfileSettingsComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           bWasSuccessful;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.WriteProfileSettings
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// class UOnlineProfileSettings*  ProfileSettings                (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::WriteProfileSettings(unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.WriteProfileSettings");

	struct
	{
		unsigned char                  LocalUserNum;
		class UOnlineProfileSettings*  ProfileSettings;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ProfileSettings = ProfileSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetProfileSettings
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// class UOnlineProfileSettings*  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UOnlineProfileSettings* UOnlinePlayerInterface::GetProfileSettings(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetProfileSettings");

	struct
	{
		unsigned char                  LocalUserNum;
		class UOnlineProfileSettings*  ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearReadProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearReadProfileSettingsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadProfileSettingsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadProfileSettingsCompleteDelegate = ReadProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddReadProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddReadProfileSettingsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadProfileSettingsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadProfileSettingsCompleteDelegate = ReadProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnReadProfileSettingsComplete(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnReadProfileSettingsComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           bWasSuccessful;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ReadProfileSettings
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// class UOnlineProfileSettings*  ProfileSettings                (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::ReadProfileSettings(unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ReadProfileSettings");

	struct
	{
		unsigned char                  LocalUserNum;
		class UOnlineProfileSettings*  ProfileSettings;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ProfileSettings = ProfileSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearFriendsChangeDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         FriendsDelegate                (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearFriendsChangeDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearFriendsChangeDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         FriendsDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.FriendsDelegate = FriendsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddFriendsChangeDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         FriendsDelegate                (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddFriendsChangeDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddFriendsChangeDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         FriendsDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.FriendsDelegate = FriendsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ClearMutingChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         MutingDelegate                 (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearMutingChangeDelegate(const struct FScriptDelegate& MutingDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearMutingChangeDelegate");

	struct
	{
		struct FScriptDelegate         MutingDelegate;
	} params;
	params.MutingDelegate = MutingDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddMutingChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         MutingDelegate                 (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddMutingChangeDelegate(const struct FScriptDelegate& MutingDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddMutingChangeDelegate");

	struct
	{
		struct FScriptDelegate         MutingDelegate;
	} params;
	params.MutingDelegate = MutingDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         CancelledDelegate              (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLoginCancelledDelegate");

	struct
	{
		struct FScriptDelegate         CancelledDelegate;
	} params;
	params.CancelledDelegate = CancelledDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddLoginCancelledDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         CancelledDelegate              (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLoginCancelledDelegate");

	struct
	{
		struct FScriptDelegate         CancelledDelegate;
	} params;
	params.CancelledDelegate = CancelledDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ClearLoginStatusChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LoginStatusDelegate            (CPF_Parm, CPF_NeedCtorLink)
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UOnlinePlayerInterface::ClearLoginStatusChangeDelegate(const struct FScriptDelegate& LoginStatusDelegate, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLoginStatusChangeDelegate");

	struct
	{
		struct FScriptDelegate         LoginStatusDelegate;
		unsigned char                  LocalUserNum;
	} params;
	params.LoginStatusDelegate = LoginStatusDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddLoginStatusChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LoginStatusDelegate            (CPF_Parm, CPF_NeedCtorLink)
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UOnlinePlayerInterface::AddLoginStatusChangeDelegate(const struct FScriptDelegate& LoginStatusDelegate, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLoginStatusChangeDelegate");

	struct
	{
		struct FScriptDelegate         LoginStatusDelegate;
		unsigned char                  LocalUserNum;
	} params;
	params.LoginStatusDelegate = LoginStatusDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnLoginStatusChange
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// TEnumAsByte<enum class ELoginStatus> NewStatus                      (CPF_Parm)
// struct FUniqueNetId            NewId                          (CPF_Parm)

void UOnlinePlayerInterface::OnLoginStatusChange(TEnumAsByte<enum class ELoginStatus> NewStatus, const struct FUniqueNetId& NewId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLoginStatusChange");

	struct
	{
		TEnumAsByte<enum class ELoginStatus> NewStatus;
		struct FUniqueNetId            NewId;
	} params;
	params.NewStatus = NewStatus;
	params.NewId = NewId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ClearLoginChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LoginDelegate                  (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLoginChangeDelegate");

	struct
	{
		struct FScriptDelegate         LoginDelegate;
	} params;
	params.LoginDelegate = LoginDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddLoginChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LoginDelegate                  (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLoginChangeDelegate");

	struct
	{
		struct FScriptDelegate         LoginDelegate;
	} params;
	params.LoginDelegate = LoginDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ClearUserSignInCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         UserSignInCompleteDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearUserSignInCompleteDelegate(const struct FScriptDelegate& UserSignInCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearUserSignInCompleteDelegate");

	struct
	{
		struct FScriptDelegate         UserSignInCompleteDelegate;
	} params;
	params.UserSignInCompleteDelegate = UserSignInCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddUserSignInCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         UserSignInCompleteDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddUserSignInCompleteDelegate(const struct FScriptDelegate& UserSignInCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddUserSignInCompleteDelegate");

	struct
	{
		struct FScriptDelegate         UserSignInCompleteDelegate;
	} params;
	params.UserSignInCompleteDelegate = UserSignInCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ClearUserSwitchCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         UserSwitchCompleteDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearUserSwitchCompleteDelegate(const struct FScriptDelegate& UserSwitchCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearUserSwitchCompleteDelegate");

	struct
	{
		struct FScriptDelegate         UserSwitchCompleteDelegate;
	} params;
	params.UserSwitchCompleteDelegate = UserSwitchCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddUserSwitchCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         UserSwitchCompleteDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddUserSwitchCompleteDelegate(const struct FScriptDelegate& UserSwitchCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddUserSwitchCompleteDelegate");

	struct
	{
		struct FScriptDelegate         UserSwitchCompleteDelegate;
	} params;
	params.UserSwitchCompleteDelegate = UserSwitchCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.SetPrimaryPlayerGamepadToLastInput
// (FUNC_Public)

void UOnlinePlayerInterface::SetPrimaryPlayerGamepadToLastInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SetPrimaryPlayerGamepadToLastInput");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.ShowFriendsUI
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::ShowFriendsUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ShowFriendsUI");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.IsMuted
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::IsMuted(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.IsMuted");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            PlayerID;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.AreAnyFriends
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TArray<struct FFriendsQuery>   Query                          (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::AreAnyFriends(unsigned char LocalUserNum, TArray<struct FFriendsQuery>* Query)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AreAnyFriends");

	struct
	{
		unsigned char                  LocalUserNum;
		TArray<struct FFriendsQuery>   Query;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Query != nullptr)
		*Query = params.Query;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.IsFriend
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::IsFriend(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.IsFriend");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            PlayerID;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanCommunicate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class ECommunicationMethod> CommMethod                     (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EFeaturePrivilegeLevel> UOnlinePlayerInterface::CanCommunicate(unsigned char LocalUserNum, TEnumAsByte<enum class ECommunicationMethod> CommMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanCommunicate");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class ECommunicationMethod> CommMethod;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.CommMethod = CommMethod;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanDownloadUserContent
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanDownloadUserContent(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanDownloadUserContent");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanUploadFitnessData
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanUploadFitnessData(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanUploadFitnessData");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanShareKinectContent
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanShareKinectContent(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanShareKinectContent");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanShareWithSocialNetwork
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanShareWithSocialNetwork(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanShareWithSocialNetwork");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanBrowseInternet
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanBrowseInternet(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanBrowseInternet");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanAccessPremiumVideoContent
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanAccessPremiumVideoContent(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanAccessPremiumVideoContent");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanAccessPremiumContent
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanAccessPremiumContent(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanAccessPremiumContent");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanUseCloudStorage
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanUseCloudStorage(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanUseCloudStorage");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanRecordDVRClips
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanRecordDVRClips(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanRecordDVRClips");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanShowPresenceInformation
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanShowPresenceInformation(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanShowPresenceInformation");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanViewPlayerProfiles
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanViewPlayerProfiles(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanViewPlayerProfiles");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanPurchaseContent
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanPurchaseContent(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanPurchaseContent");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanShareUserCreatedContent
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanShareUserCreatedContent(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanShareUserCreatedContent");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanCommunicateVoice
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanCommunicateVoice(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanCommunicateVoice");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanCommunicateVideo
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanCommunicateVideo(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanCommunicateVideo");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanCommunicateText
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanCommunicateText(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanCommunicateText");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanPlayOnline
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint             (CPF_Parm, CPF_OutParm)
// bool                           bAttemptToResolve              (CPF_OptionalParm, CPF_Parm)
// struct FString                 Reason                         (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::CanPlayOnline(unsigned char LocalUserNum, bool bAttemptToResolve, const struct FString& Reason, TEnumAsByte<enum class EFeaturePrivilegeLevel>* PrivilegeLevelHint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanPlayOnline");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EFeaturePrivilegeLevel> PrivilegeLevelHint;
		bool                           bAttemptToResolve;
		struct FString                 Reason;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAttemptToResolve = bAttemptToResolve;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PrivilegeLevelHint != nullptr)
		*PrivilegeLevelHint = params.PrivilegeLevelHint;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.IsLocalLogin
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::IsLocalLogin(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.IsLocalLogin");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.IsGuestLogin
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::IsGuestLogin(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.IsGuestLogin");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetPlayerNickname
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UOnlinePlayerInterface::GetPlayerNickname(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetPlayerNickname");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetUniquePlayerId
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::GetUniquePlayerId(unsigned char LocalUserNum, struct FUniqueNetId* PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetUniquePlayerId");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            PlayerID;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlayerID != nullptr)
		*PlayerID = params.PlayerID;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.GetLoginStatus
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class ELoginStatus> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class ELoginStatus> UOnlinePlayerInterface::GetLoginStatus(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.GetLoginStatus");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class ELoginStatus> ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         LogoutDelegate                 (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearLogoutCompletedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LogoutDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLogoutCompletedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         LogoutDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.LogoutDelegate = LogoutDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         LogoutDelegate                 (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddLogoutCompletedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LogoutDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLogoutCompletedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         LogoutDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.LogoutDelegate = LogoutDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnLogoutCompleted
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterface::OnLogoutCompleted(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLogoutCompleted");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.Logout
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::Logout(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.Logout");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ClearLoginFailedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         LoginDelegate                  (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::ClearLoginFailedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LoginDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ClearLoginFailedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         LoginDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.LoginDelegate = LoginDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AddLoginFailedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         LoginDelegate                  (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::AddLoginFailedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LoginDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AddLoginFailedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         LoginDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.LoginDelegate = LoginDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnLoginFailed
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EOnlineServerConnectionStatus> ErrorCode                      (CPF_Parm)

void UOnlinePlayerInterface::OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<enum class EOnlineServerConnectionStatus> ErrorCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLoginFailed");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EOnlineServerConnectionStatus> ErrorCode;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ErrorCode = ErrorCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.AutoLogin
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::AutoLogin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.AutoLogin");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.Login
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 LoginName                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Password                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           bWantsLocalOnly                (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::Login(unsigned char LocalUserNum, const struct FString& LoginName, const struct FString& Password, bool bWantsLocalOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.Login");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 LoginName;
		struct FString                 Password;
		bool                           bWantsLocalOnly;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.LoginName = LoginName;
	params.Password = Password;
	params.bWantsLocalOnly = bWantsLocalOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.SetKickPlayerDialogActive
// (FUNC_Public)
// Parameters:
// bool                           Active                         (CPF_Parm)

void UOnlinePlayerInterface::SetKickPlayerDialogActive(bool Active)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SetKickPlayerDialogActive");

	struct
	{
		bool                           Active;
	} params;
	params.Active = Active;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.IsUserSwitchActive
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::IsUserSwitchActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.IsUserSwitchActive");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.SetKickPreviousUser
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UOnlinePlayerInterface::SetKickPreviousUser(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SetKickPreviousUser");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.SupportInGameLogin
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::SupportInGameLogin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.SupportInGameLogin");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ShowLoginUIForOrphanedUser
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::ShowLoginUIForOrphanedUser(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ShowLoginUIForOrphanedUser");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.ShowLoginUI
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           bShowOnlineOnly                (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterface::ShowLoginUI(unsigned char LocalUserNum, bool bShowOnlineOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.ShowLoginUI");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           bShowOnlineOnly;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bShowOnlineOnly = bShowOnlineOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterface.CanPlayOnlineChanged
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UOnlinePlayerInterface::CanPlayOnlineChanged(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.CanPlayOnlineChanged");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnPlayerCountryRetrieved
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// struct FString                 Country                        (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterface::OnPlayerCountryRetrieved(const struct FUniqueNetId& PlayerID, const struct FString& Country)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnPlayerCountryRetrieved");

	struct
	{
		struct FUniqueNetId            PlayerID;
		struct FString                 Country;
	} params;
	params.PlayerID = PlayerID;
	params.Country = Country;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnFriendsChange
// (FUNC_Public, FUNC_Delegate)

void UOnlinePlayerInterface::OnFriendsChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnFriendsChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnMutingChange
// (FUNC_Public, FUNC_Delegate)

void UOnlinePlayerInterface::OnMutingChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnMutingChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnLoginCancelled
// (FUNC_Public, FUNC_Delegate)

void UOnlinePlayerInterface::OnLoginCancelled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLoginCancelled");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnLoginChange
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UOnlinePlayerInterface::OnLoginChange(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnLoginChange");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnUserSignInComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UOnlinePlayerInterface::OnUserSignInComplete(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnUserSignInComplete");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterface.OnUserSwitchComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UOnlinePlayerInterface::OnUserSwitchComplete(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterface.OnUserSwitchComplete");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.DownloadAllWorkshopData
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         Callback                       (CPF_Parm, CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::DownloadAllWorkshopData(const struct FScriptDelegate& Callback)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.DownloadAllWorkshopData");

	struct
	{
		struct FScriptDelegate         Callback;
	} params;
	params.Callback = Callback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.OnDownloadedWorkshopData
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// TArray<struct FDownloadedWorkshopData> Items                          (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           bSuccess                       (CPF_Parm)

void UOnlineCommunityContentInterface::OnDownloadedWorkshopData(bool bSuccess, TArray<struct FDownloadedWorkshopData>* Items)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnDownloadedWorkshopData");

	struct
	{
		TArray<struct FDownloadedWorkshopData> Items;
		bool                           bSuccess;
	} params;
	params.bSuccess = bSuccess;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Items != nullptr)
		*Items = params.Items;
}


// Function Engine.OnlineCommunityContentInterface.RateContent
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  PlayerNum                      (CPF_Parm)
// struct FCommunityContentFile   FileToRate                     (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            NewRating                      (CPF_Parm)

void UOnlineCommunityContentInterface::RateContent(unsigned char PlayerNum, int NewRating, struct FCommunityContentFile* FileToRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.RateContent");

	struct
	{
		unsigned char                  PlayerNum;
		struct FCommunityContentFile   FileToRate;
		int                            NewRating;
	} params;
	params.PlayerNum = PlayerNum;
	params.NewRating = NewRating;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FileToRate != nullptr)
		*FileToRate = params.FileToRate;
}


// Function Engine.OnlineCommunityContentInterface.ClearGetContentPayloadCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         GetContentPayloadCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::ClearGetContentPayloadCompleteDelegate(const struct FScriptDelegate& GetContentPayloadCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ClearGetContentPayloadCompleteDelegate");

	struct
	{
		struct FScriptDelegate         GetContentPayloadCompleteDelegate;
	} params;
	params.GetContentPayloadCompleteDelegate = GetContentPayloadCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.AddGetContentPayloadCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         GetContentPayloadCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::AddGetContentPayloadCompleteDelegate(const struct FScriptDelegate& GetContentPayloadCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.AddGetContentPayloadCompleteDelegate");

	struct
	{
		struct FScriptDelegate         GetContentPayloadCompleteDelegate;
	} params;
	params.GetContentPayloadCompleteDelegate = GetContentPayloadCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.OnGetContentPayloadComplete
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FCommunityContentFile   FileDownloaded                 (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          Payload                        (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::OnGetContentPayloadComplete(bool bWasSuccessful, const struct FCommunityContentFile& FileDownloaded, TArray<unsigned char>* Payload)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnGetContentPayloadComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FCommunityContentFile   FileDownloaded;
		TArray<unsigned char>          Payload;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.FileDownloaded = FileDownloaded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Payload != nullptr)
		*Payload = params.Payload;
}


// Function Engine.OnlineCommunityContentInterface.GetContentPayload
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  PlayerNum                      (CPF_Parm)
// struct FCommunityContentFile   FileDownloaded                 (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineCommunityContentInterface::GetContentPayload(unsigned char PlayerNum, struct FCommunityContentFile* FileDownloaded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.GetContentPayload");

	struct
	{
		unsigned char                  PlayerNum;
		struct FCommunityContentFile   FileDownloaded;
		bool                           ReturnValue;
	} params;
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FileDownloaded != nullptr)
		*FileDownloaded = params.FileDownloaded;

	return params.ReturnValue;
}


// Function Engine.OnlineCommunityContentInterface.ClearDownloadContentCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         DownloadContentCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::ClearDownloadContentCompleteDelegate(const struct FScriptDelegate& DownloadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ClearDownloadContentCompleteDelegate");

	struct
	{
		struct FScriptDelegate         DownloadContentCompleteDelegate;
	} params;
	params.DownloadContentCompleteDelegate = DownloadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.AddDownloadContentCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         DownloadContentCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::AddDownloadContentCompleteDelegate(const struct FScriptDelegate& DownloadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.AddDownloadContentCompleteDelegate");

	struct
	{
		struct FScriptDelegate         DownloadContentCompleteDelegate;
	} params;
	params.DownloadContentCompleteDelegate = DownloadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.OnDownloadContentComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FCommunityContentFile   FileDownloaded                 (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          Payload                        (CPF_Parm, CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::OnDownloadContentComplete(bool bWasSuccessful, const struct FCommunityContentFile& FileDownloaded, TArray<unsigned char> Payload)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnDownloadContentComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FCommunityContentFile   FileDownloaded;
		TArray<unsigned char>          Payload;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.FileDownloaded = FileDownloaded;
	params.Payload = Payload;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.DownloadContent
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  PlayerNum                      (CPF_Parm)
// struct FCommunityContentFile   FileToDownload                 (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineCommunityContentInterface::DownloadContent(unsigned char PlayerNum, struct FCommunityContentFile* FileToDownload)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.DownloadContent");

	struct
	{
		unsigned char                  PlayerNum;
		struct FCommunityContentFile   FileToDownload;
		bool                           ReturnValue;
	} params;
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FileToDownload != nullptr)
		*FileToDownload = params.FileToDownload;

	return params.ReturnValue;
}


// Function Engine.OnlineCommunityContentInterface.ClearUploadContentCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         UploadContentCompleteDelegate  (CPF_Parm, CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::ClearUploadContentCompleteDelegate(const struct FScriptDelegate& UploadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ClearUploadContentCompleteDelegate");

	struct
	{
		struct FScriptDelegate         UploadContentCompleteDelegate;
	} params;
	params.UploadContentCompleteDelegate = UploadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.AddUploadContentCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         UploadContentCompleteDelegate  (CPF_Parm, CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::AddUploadContentCompleteDelegate(const struct FScriptDelegate& UploadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.AddUploadContentCompleteDelegate");

	struct
	{
		struct FScriptDelegate         UploadContentCompleteDelegate;
	} params;
	params.UploadContentCompleteDelegate = UploadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.OnUploadContentComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FCommunityContentFile   UploadedFile                   (CPF_Parm, CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::OnUploadContentComplete(bool bWasSuccessful, const struct FCommunityContentFile& UploadedFile)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnUploadContentComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FCommunityContentFile   UploadedFile;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.UploadedFile = UploadedFile;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.UploadContent
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  PlayerNum                      (CPF_Parm)
// TArray<unsigned char>          Payload                        (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FCommunityContentMetadata MetaData                       (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineCommunityContentInterface::UploadContent(unsigned char PlayerNum, TArray<unsigned char>* Payload, struct FCommunityContentMetadata* MetaData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.UploadContent");

	struct
	{
		unsigned char                  PlayerNum;
		TArray<unsigned char>          Payload;
		struct FCommunityContentMetadata MetaData;
		bool                           ReturnValue;
	} params;
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Payload != nullptr)
		*Payload = params.Payload;
	if (MetaData != nullptr)
		*MetaData = params.MetaData;

	return params.ReturnValue;
}


// Function Engine.OnlineCommunityContentInterface.GetFriendsContentList
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  PlayerNum                      (CPF_Parm)
// struct FOnlineFriend           Friend                         (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// TArray<struct FCommunityContentFile> ContentFiles                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineCommunityContentInterface::GetFriendsContentList(unsigned char PlayerNum, struct FOnlineFriend* Friend, TArray<struct FCommunityContentFile>* ContentFiles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.GetFriendsContentList");

	struct
	{
		unsigned char                  PlayerNum;
		struct FOnlineFriend           Friend;
		TArray<struct FCommunityContentFile> ContentFiles;
		bool                           ReturnValue;
	} params;
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Friend != nullptr)
		*Friend = params.Friend;
	if (ContentFiles != nullptr)
		*ContentFiles = params.ContentFiles;

	return params.ReturnValue;
}


// Function Engine.OnlineCommunityContentInterface.ClearReadFriendsContentListCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadFriendsContentListCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::ClearReadFriendsContentListCompleteDelegate(const struct FScriptDelegate& ReadFriendsContentListCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ClearReadFriendsContentListCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ReadFriendsContentListCompleteDelegate;
	} params;
	params.ReadFriendsContentListCompleteDelegate = ReadFriendsContentListCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.AddReadFriendsContentListCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadFriendsContentListCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::AddReadFriendsContentListCompleteDelegate(const struct FScriptDelegate& ReadFriendsContentListCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.AddReadFriendsContentListCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ReadFriendsContentListCompleteDelegate;
	} params;
	params.ReadFriendsContentListCompleteDelegate = ReadFriendsContentListCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.OnReadFriendsContentListComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineCommunityContentInterface::OnReadFriendsContentListComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnReadFriendsContentListComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.ReadFriendsContentList
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  PlayerNum                      (CPF_Parm)
// TArray<struct FOnlineFriend>   Friends                        (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            StartAt                        (CPF_OptionalParm, CPF_Parm)
// int                            NumToRead                      (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineCommunityContentInterface::ReadFriendsContentList(unsigned char PlayerNum, int StartAt, int NumToRead, TArray<struct FOnlineFriend>* Friends)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ReadFriendsContentList");

	struct
	{
		unsigned char                  PlayerNum;
		TArray<struct FOnlineFriend>   Friends;
		int                            StartAt;
		int                            NumToRead;
		bool                           ReturnValue;
	} params;
	params.PlayerNum = PlayerNum;
	params.StartAt = StartAt;
	params.NumToRead = NumToRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Friends != nullptr)
		*Friends = params.Friends;

	return params.ReturnValue;
}


// Function Engine.OnlineCommunityContentInterface.GetContentList
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  PlayerNum                      (CPF_Parm)
// TArray<struct FCommunityContentFile> ContentFiles                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineCommunityContentInterface::GetContentList(unsigned char PlayerNum, TArray<struct FCommunityContentFile>* ContentFiles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.GetContentList");

	struct
	{
		unsigned char                  PlayerNum;
		TArray<struct FCommunityContentFile> ContentFiles;
		bool                           ReturnValue;
	} params;
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ContentFiles != nullptr)
		*ContentFiles = params.ContentFiles;

	return params.ReturnValue;
}


// Function Engine.OnlineCommunityContentInterface.ClearReadContentListCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadContentListCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::ClearReadContentListCompleteDelegate(const struct FScriptDelegate& ReadContentListCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ClearReadContentListCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ReadContentListCompleteDelegate;
	} params;
	params.ReadContentListCompleteDelegate = ReadContentListCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.AddReadContentListCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadContentListCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::AddReadContentListCompleteDelegate(const struct FScriptDelegate& ReadContentListCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.AddReadContentListCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ReadContentListCompleteDelegate;
	} params;
	params.ReadContentListCompleteDelegate = ReadContentListCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.OnReadContentListComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// TArray<struct FCommunityContentFile> ContentFiles                   (CPF_Parm, CPF_NeedCtorLink)

void UOnlineCommunityContentInterface::OnReadContentListComplete(bool bWasSuccessful, TArray<struct FCommunityContentFile> ContentFiles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.OnReadContentListComplete");

	struct
	{
		bool                           bWasSuccessful;
		TArray<struct FCommunityContentFile> ContentFiles;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.ContentFiles = ContentFiles;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.ReadContentList
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  PlayerNum                      (CPF_Parm)
// struct FUniqueNetId            NetId                          (CPF_Parm)
// struct FString                 Path                           (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// int                            StartAt                        (CPF_OptionalParm, CPF_Parm)
// int                            NumToRead                      (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineCommunityContentInterface::ReadContentList(unsigned char PlayerNum, const struct FUniqueNetId& NetId, const struct FString& Path, int StartAt, int NumToRead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.ReadContentList");

	struct
	{
		unsigned char                  PlayerNum;
		struct FUniqueNetId            NetId;
		struct FString                 Path;
		int                            StartAt;
		int                            NumToRead;
		bool                           ReturnValue;
	} params;
	params.PlayerNum = PlayerNum;
	params.NetId = NetId;
	params.Path = Path;
	params.StartAt = StartAt;
	params.NumToRead = NumToRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineCommunityContentInterface.Exit
// (FUNC_Public)

void UOnlineCommunityContentInterface::Exit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.Exit");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineCommunityContentInterface.Init
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineCommunityContentInterface::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineCommunityContentInterface.Init");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameDVRInterface.CancelRecordingEvent
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameDVRInterface::CancelRecordingEvent(unsigned char LocalUserNum, const struct FString& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameDVRInterface.CancelRecordingEvent");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 EventName;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameDVRInterface.RecordPreviousTimespan
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)
// float                          Duration                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameDVRInterface::RecordPreviousTimespan(unsigned char LocalUserNum, const struct FString& EventName, float Duration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameDVRInterface.RecordPreviousTimespan");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 EventName;
		float                          Duration;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.EventName = EventName;
	params.Duration = Duration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameDVRInterface.EndRecordingEvent
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameDVRInterface::EndRecordingEvent(unsigned char LocalUserNum, const struct FString& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameDVRInterface.EndRecordingEvent");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 EventName;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameDVRInterface.ClearRecordEventCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         RecordEventCompleteDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameDVRInterface::ClearRecordEventCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& RecordEventCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameDVRInterface.ClearRecordEventCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         RecordEventCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.RecordEventCompleteDelegate = RecordEventCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameDVRInterface.AddRecordEventCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         RecordEventCompleteDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameDVRInterface::AddRecordEventCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& RecordEventCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameDVRInterface.AddRecordEventCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         RecordEventCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.RecordEventCompleteDelegate = RecordEventCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameDVRInterface.OnRecordEventComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameDVRInterface::OnRecordEventComplete(bool bWasSuccessful, unsigned char LocalUserNum, const struct FString& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameDVRInterface.OnRecordEventComplete");

	struct
	{
		bool                           bWasSuccessful;
		unsigned char                  LocalUserNum;
		struct FString                 EventName;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.LocalUserNum = LocalUserNum;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameDVRInterface.BeginRecordingEvent
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 EventName                      (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameDVRInterface::BeginRecordingEvent(unsigned char LocalUserNum, const struct FString& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameDVRInterface.BeginRecordingEvent");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 EventName;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameDVRInterface.ClearReadRecordedClipsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadRecordedClipsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameDVRInterface::ClearReadRecordedClipsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadRecordedClipsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameDVRInterface.ClearReadRecordedClipsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadRecordedClipsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadRecordedClipsCompleteDelegate = ReadRecordedClipsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameDVRInterface.AddReadRecordedClipsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadRecordedClipsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameDVRInterface::AddReadRecordedClipsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadRecordedClipsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameDVRInterface.AddReadRecordedClipsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadRecordedClipsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadRecordedClipsCompleteDelegate = ReadRecordedClipsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameDVRInterface.ClearCachedRecordedClips
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UOnlineGameDVRInterface::ClearCachedRecordedClips(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameDVRInterface.ClearCachedRecordedClips");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameDVRInterface.OnReadRecordedClipsComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UOnlineGameDVRInterface::OnReadRecordedClipsComplete(bool bWasSuccessful, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameDVRInterface.OnReadRecordedClipsComplete");

	struct
	{
		bool                           bWasSuccessful;
		unsigned char                  LocalUserNum;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameDVRInterface.ReadRecordedClips
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameDVRInterface::ReadRecordedClips(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameDVRInterface.ReadRecordedClips");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameDVRInterface.DisableRecording
// (FUNC_Public)

void UOnlineGameDVRInterface::DisableRecording()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameDVRInterface.DisableRecording");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameDVRInterface.EnableRecording
// (FUNC_Public)

void UOnlineGameDVRInterface::EnableRecording()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameDVRInterface.EnableRecording");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SharedCloudFileInterface.ClearWriteSharedFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         WriteSharedFileCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void USharedCloudFileInterface::ClearWriteSharedFileCompleteDelegate(const struct FScriptDelegate& WriteSharedFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.ClearWriteSharedFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         WriteSharedFileCompleteDelegate;
	} params;
	params.WriteSharedFileCompleteDelegate = WriteSharedFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SharedCloudFileInterface.AddWriteSharedFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         WriteSharedFileCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void USharedCloudFileInterface::AddWriteSharedFileCompleteDelegate(const struct FScriptDelegate& WriteSharedFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.AddWriteSharedFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         WriteSharedFileCompleteDelegate;
	} params;
	params.WriteSharedFileCompleteDelegate = WriteSharedFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SharedCloudFileInterface.WriteSharedFile
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          Contents                       (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USharedCloudFileInterface::WriteSharedFile(const struct FString& UserId, const struct FString& Filename, TArray<unsigned char>* Contents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.WriteSharedFile");

	struct
	{
		struct FString                 UserId;
		struct FString                 Filename;
		TArray<unsigned char>          Contents;
		bool                           ReturnValue;
	} params;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Contents != nullptr)
		*Contents = params.Contents;

	return params.ReturnValue;
}


// Function Engine.SharedCloudFileInterface.OnWriteSharedFileComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SharedHandle                   (CPF_Parm, CPF_NeedCtorLink)

void USharedCloudFileInterface::OnWriteSharedFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename, const struct FString& SharedHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.OnWriteSharedFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 UserId;
		struct FString                 Filename;
		struct FString                 SharedHandle;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;
	params.SharedHandle = SharedHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SharedCloudFileInterface.ClearReadSharedFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadSharedFileCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void USharedCloudFileInterface::ClearReadSharedFileCompleteDelegate(const struct FScriptDelegate& ReadSharedFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.ClearReadSharedFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ReadSharedFileCompleteDelegate;
	} params;
	params.ReadSharedFileCompleteDelegate = ReadSharedFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SharedCloudFileInterface.AddReadSharedFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadSharedFileCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void USharedCloudFileInterface::AddReadSharedFileCompleteDelegate(const struct FScriptDelegate& ReadSharedFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.AddReadSharedFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ReadSharedFileCompleteDelegate;
	} params;
	params.ReadSharedFileCompleteDelegate = ReadSharedFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SharedCloudFileInterface.ReadSharedFile
// (FUNC_Public)
// Parameters:
// struct FString                 SharedHandle                   (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USharedCloudFileInterface::ReadSharedFile(const struct FString& SharedHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.ReadSharedFile");

	struct
	{
		struct FString                 SharedHandle;
		bool                           ReturnValue;
	} params;
	params.SharedHandle = SharedHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SharedCloudFileInterface.OnReadSharedFileComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 SharedHandle                   (CPF_Parm, CPF_NeedCtorLink)

void USharedCloudFileInterface::OnReadSharedFileComplete(bool bWasSuccessful, const struct FString& SharedHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.OnReadSharedFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 SharedHandle;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.SharedHandle = SharedHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SharedCloudFileInterface.ClearSharedFile
// (FUNC_Public)
// Parameters:
// struct FString                 SharedHandle                   (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USharedCloudFileInterface::ClearSharedFile(const struct FString& SharedHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.ClearSharedFile");

	struct
	{
		struct FString                 SharedHandle;
		bool                           ReturnValue;
	} params;
	params.SharedHandle = SharedHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SharedCloudFileInterface.ClearSharedFiles
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USharedCloudFileInterface::ClearSharedFiles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.ClearSharedFiles");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SharedCloudFileInterface.GetSharedFileContents
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 SharedHandle                   (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          FileContents                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool USharedCloudFileInterface::GetSharedFileContents(const struct FString& SharedHandle, TArray<unsigned char>* FileContents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SharedCloudFileInterface.GetSharedFileContents");

	struct
	{
		struct FString                 SharedHandle;
		TArray<unsigned char>          FileContents;
		bool                           ReturnValue;
	} params;
	params.SharedHandle = SharedHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FileContents != nullptr)
		*FileContents = params.FileContents;

	return params.ReturnValue;
}


// Function Engine.UserCloudFileInterface.ClearAllDelegates
// (FUNC_Public)

void UUserCloudFileInterface::ClearAllDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ClearAllDelegates");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileInterface.ClearDeleteUserFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         DeleteUserFileCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileInterface::ClearDeleteUserFileCompleteDelegate(const struct FScriptDelegate& DeleteUserFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ClearDeleteUserFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         DeleteUserFileCompleteDelegate;
	} params;
	params.DeleteUserFileCompleteDelegate = DeleteUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileInterface.AddDeleteUserFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         DeleteUserFileCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileInterface::AddDeleteUserFileCompleteDelegate(const struct FScriptDelegate& DeleteUserFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.AddDeleteUserFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         DeleteUserFileCompleteDelegate;
	} params;
	params.DeleteUserFileCompleteDelegate = DeleteUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileInterface.DeleteUserFile
// (FUNC_Public)
// Parameters:
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           bShouldCloudDelete             (CPF_Parm)
// bool                           bShouldLocallyDelete           (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUserCloudFileInterface::DeleteUserFile(const struct FString& UserId, const struct FString& Filename, bool bShouldCloudDelete, bool bShouldLocallyDelete)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.DeleteUserFile");

	struct
	{
		struct FString                 UserId;
		struct FString                 Filename;
		bool                           bShouldCloudDelete;
		bool                           bShouldLocallyDelete;
		bool                           ReturnValue;
	} params;
	params.UserId = UserId;
	params.Filename = Filename;
	params.bShouldCloudDelete = bShouldCloudDelete;
	params.bShouldLocallyDelete = bShouldLocallyDelete;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UserCloudFileInterface.OnDeleteUserFileComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileInterface::OnDeleteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.OnDeleteUserFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 UserId;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileInterface.ClearWriteUserFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         WriteUserFileCompleteDelegate  (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileInterface::ClearWriteUserFileCompleteDelegate(const struct FScriptDelegate& WriteUserFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ClearWriteUserFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         WriteUserFileCompleteDelegate;
	} params;
	params.WriteUserFileCompleteDelegate = WriteUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileInterface.AddWriteUserFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         WriteUserFileCompleteDelegate  (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileInterface::AddWriteUserFileCompleteDelegate(const struct FScriptDelegate& WriteUserFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.AddWriteUserFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         WriteUserFileCompleteDelegate;
	} params;
	params.WriteUserFileCompleteDelegate = WriteUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileInterface.WriteUserFile
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          FileContents                   (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUserCloudFileInterface::WriteUserFile(const struct FString& UserId, const struct FString& Filename, TArray<unsigned char>* FileContents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.WriteUserFile");

	struct
	{
		struct FString                 UserId;
		struct FString                 Filename;
		TArray<unsigned char>          FileContents;
		bool                           ReturnValue;
	} params;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FileContents != nullptr)
		*FileContents = params.FileContents;

	return params.ReturnValue;
}


// Function Engine.UserCloudFileInterface.OnWriteUserFileComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileInterface::OnWriteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.OnWriteUserFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 UserId;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileInterface.ClearReadUserFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadUserFileCompleteDelegate   (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileInterface::ClearReadUserFileCompleteDelegate(const struct FScriptDelegate& ReadUserFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ClearReadUserFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ReadUserFileCompleteDelegate;
	} params;
	params.ReadUserFileCompleteDelegate = ReadUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileInterface.AddReadUserFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadUserFileCompleteDelegate   (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileInterface::AddReadUserFileCompleteDelegate(const struct FScriptDelegate& ReadUserFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.AddReadUserFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ReadUserFileCompleteDelegate;
	} params;
	params.ReadUserFileCompleteDelegate = ReadUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileInterface.ReadUserFile
// (FUNC_Public)
// Parameters:
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUserCloudFileInterface::ReadUserFile(const struct FString& UserId, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ReadUserFile");

	struct
	{
		struct FString                 UserId;
		struct FString                 Filename;
		bool                           ReturnValue;
	} params;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UserCloudFileInterface.OnReadUserFileComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileInterface::OnReadUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.OnReadUserFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 UserId;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileInterface.GetUserFileList
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// TArray<struct FEmsFile>        UserFiles                      (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UUserCloudFileInterface::GetUserFileList(const struct FString& UserId, TArray<struct FEmsFile>* UserFiles)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.GetUserFileList");

	struct
	{
		struct FString                 UserId;
		TArray<struct FEmsFile>        UserFiles;
	} params;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (UserFiles != nullptr)
		*UserFiles = params.UserFiles;
}


// Function Engine.UserCloudFileInterface.ClearEnumerateUserFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         EnumerateUserFileCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileInterface::ClearEnumerateUserFileCompleteDelegate(const struct FScriptDelegate& EnumerateUserFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ClearEnumerateUserFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         EnumerateUserFileCompleteDelegate;
	} params;
	params.EnumerateUserFileCompleteDelegate = EnumerateUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileInterface.AddEnumerateUserFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         EnumerateUserFileCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileInterface::AddEnumerateUserFileCompleteDelegate(const struct FScriptDelegate& EnumerateUserFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.AddEnumerateUserFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         EnumerateUserFileCompleteDelegate;
	} params;
	params.EnumerateUserFileCompleteDelegate = EnumerateUserFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileInterface.EnumerateUserFiles
// (FUNC_Public)
// Parameters:
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileInterface::EnumerateUserFiles(const struct FString& UserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.EnumerateUserFiles");

	struct
	{
		struct FString                 UserId;
	} params;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileInterface.OnEnumerateUserFilesComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileInterface::OnEnumerateUserFilesComplete(bool bWasSuccessful, const struct FString& UserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.OnEnumerateUserFilesComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 UserId;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileInterface.ClearFile
// (FUNC_Public)
// Parameters:
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUserCloudFileInterface::ClearFile(const struct FString& UserId, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ClearFile");

	struct
	{
		struct FString                 UserId;
		struct FString                 Filename;
		bool                           ReturnValue;
	} params;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UserCloudFileInterface.ClearFiles
// (FUNC_Public)
// Parameters:
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUserCloudFileInterface::ClearFiles(const struct FString& UserId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.ClearFiles");

	struct
	{
		struct FString                 UserId;
		bool                           ReturnValue;
	} params;
	params.UserId = UserId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UserCloudFileInterface.GetFileContents
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          FileContents                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUserCloudFileInterface::GetFileContents(const struct FString& UserId, const struct FString& Filename, TArray<unsigned char>* FileContents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileInterface.GetFileContents");

	struct
	{
		struct FString                 UserId;
		struct FString                 Filename;
		TArray<unsigned char>          FileContents;
		bool                           ReturnValue;
	} params;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FileContents != nullptr)
		*FileContents = params.FileContents;

	return params.ReturnValue;
}


// Function Engine.OnlineSocialInterface.ClearPostLinkCompleted
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         PostLinkDelegate               (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSocialInterface::ClearPostLinkCompleted(unsigned char LocalUserNum, const struct FScriptDelegate& PostLinkDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.ClearPostLinkCompleted");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         PostLinkDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PostLinkDelegate = PostLinkDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSocialInterface.AddPostLinkCompleted
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         PostLinkDelegate               (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSocialInterface::AddPostLinkCompleted(unsigned char LocalUserNum, const struct FScriptDelegate& PostLinkDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.AddPostLinkCompleted");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         PostLinkDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PostLinkDelegate = PostLinkDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSocialInterface.OnPostLinkCompleted
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineSocialInterface::OnPostLinkCompleted(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.OnPostLinkCompleted");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           bWasSuccessful;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSocialInterface.PostLink
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FSocialPostLinkInfo     PostLinkInfo                   (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSocialInterface::PostLink(unsigned char LocalUserNum, struct FSocialPostLinkInfo* PostLinkInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.PostLink");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FSocialPostLinkInfo     PostLinkInfo;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PostLinkInfo != nullptr)
		*PostLinkInfo = params.PostLinkInfo;

	return params.ReturnValue;
}


// Function Engine.OnlineSocialInterface.ClearPostImageCompleted
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         PostImageDelegate              (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSocialInterface::ClearPostImageCompleted(unsigned char LocalUserNum, const struct FScriptDelegate& PostImageDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.ClearPostImageCompleted");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         PostImageDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PostImageDelegate = PostImageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSocialInterface.AddPostImageCompleted
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         PostImageDelegate              (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSocialInterface::AddPostImageCompleted(unsigned char LocalUserNum, const struct FScriptDelegate& PostImageDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.AddPostImageCompleted");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         PostImageDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PostImageDelegate = PostImageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSocialInterface.OnPostImageCompleted
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineSocialInterface::OnPostImageCompleted(unsigned char LocalUserNum, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.OnPostImageCompleted");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           bWasSuccessful;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSocialInterface.PostImage
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FSocialPostImageInfo    PostImageInfo                  (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// TArray<unsigned char>          FullImage                      (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSocialInterface::PostImage(unsigned char LocalUserNum, TArray<unsigned char> FullImage, struct FSocialPostImageInfo* PostImageInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.PostImage");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FSocialPostImageInfo    PostImageInfo;
		TArray<unsigned char>          FullImage;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.FullImage = FullImage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PostImageInfo != nullptr)
		*PostImageInfo = params.PostImageInfo;

	return params.ReturnValue;
}


// Function Engine.OnlineSocialInterface.ClearQuerySocialPostPrivilegesCompleted
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         PostPrivilegesDelegate         (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSocialInterface::ClearQuerySocialPostPrivilegesCompleted(const struct FScriptDelegate& PostPrivilegesDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.ClearQuerySocialPostPrivilegesCompleted");

	struct
	{
		struct FScriptDelegate         PostPrivilegesDelegate;
	} params;
	params.PostPrivilegesDelegate = PostPrivilegesDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSocialInterface.AddQuerySocialPostPrivilegesCompleted
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         PostPrivilegesDelegate         (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSocialInterface::AddQuerySocialPostPrivilegesCompleted(const struct FScriptDelegate& PostPrivilegesDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.AddQuerySocialPostPrivilegesCompleted");

	struct
	{
		struct FScriptDelegate         PostPrivilegesDelegate;
	} params;
	params.PostPrivilegesDelegate = PostPrivilegesDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSocialInterface.OnQuerySocialPostPrivilegesCompleted
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FSocialPostPrivileges   PostPrivileges                 (CPF_Parm)

void UOnlineSocialInterface::OnQuerySocialPostPrivilegesCompleted(bool bWasSuccessful, const struct FSocialPostPrivileges& PostPrivileges)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.OnQuerySocialPostPrivilegesCompleted");

	struct
	{
		bool                           bWasSuccessful;
		struct FSocialPostPrivileges   PostPrivileges;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.PostPrivileges = PostPrivileges;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSocialInterface.QuerySocialPostPrivileges
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSocialInterface::QuerySocialPostPrivileges()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSocialInterface.QuerySocialPostPrivileges");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileCacheInterface.DeleteTitleFile
// (FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineTitleFileCacheInterface::DeleteTitleFile(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.DeleteTitleFile");

	struct
	{
		struct FString                 Filename;
		bool                           ReturnValue;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileCacheInterface.DeleteTitleFiles
// (FUNC_Public)
// Parameters:
// float                          MaxAgeSeconds                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineTitleFileCacheInterface::DeleteTitleFiles(float MaxAgeSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.DeleteTitleFiles");

	struct
	{
		float                          MaxAgeSeconds;
		bool                           ReturnValue;
	} params;
	params.MaxAgeSeconds = MaxAgeSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileCacheInterface.ClearCachedFile
// (FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineTitleFileCacheInterface::ClearCachedFile(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.ClearCachedFile");

	struct
	{
		struct FString                 Filename;
		bool                           ReturnValue;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileCacheInterface.ClearCachedFiles
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineTitleFileCacheInterface::ClearCachedFiles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.ClearCachedFiles");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileCacheInterface.GetTitleFileLogicalName
// (FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UOnlineTitleFileCacheInterface::GetTitleFileLogicalName(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.GetTitleFileLogicalName");

	struct
	{
		struct FString                 Filename;
		struct FString                 ReturnValue;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileCacheInterface.GetTitleFileHash
// (FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UOnlineTitleFileCacheInterface::GetTitleFileHash(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.GetTitleFileHash");

	struct
	{
		struct FString                 Filename;
		struct FString                 ReturnValue;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileCacheInterface.GetTitleFileState
// (FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EOnlineEnumerationReadState> UOnlineTitleFileCacheInterface::GetTitleFileState(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.GetTitleFileState");

	struct
	{
		struct FString                 Filename;
		TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileCacheInterface.GetTitleFileContents
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          FileContents                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineTitleFileCacheInterface::GetTitleFileContents(const struct FString& Filename, TArray<unsigned char>* FileContents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.GetTitleFileContents");

	struct
	{
		struct FString                 Filename;
		TArray<unsigned char>          FileContents;
		bool                           ReturnValue;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FileContents != nullptr)
		*FileContents = params.FileContents;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileCacheInterface.ClearSaveTitleFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         SaveCompleteDelegate           (CPF_Parm, CPF_NeedCtorLink)

void UOnlineTitleFileCacheInterface::ClearSaveTitleFileCompleteDelegate(const struct FScriptDelegate& SaveCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.ClearSaveTitleFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         SaveCompleteDelegate;
	} params;
	params.SaveCompleteDelegate = SaveCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineTitleFileCacheInterface.AddSaveTitleFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         SaveCompleteDelegate           (CPF_Parm, CPF_NeedCtorLink)

void UOnlineTitleFileCacheInterface::AddSaveTitleFileCompleteDelegate(const struct FScriptDelegate& SaveCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.AddSaveTitleFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         SaveCompleteDelegate;
	} params;
	params.SaveCompleteDelegate = SaveCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineTitleFileCacheInterface.OnSaveTitleFileComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UOnlineTitleFileCacheInterface::OnSaveTitleFileComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.OnSaveTitleFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineTitleFileCacheInterface.SaveTitleFile
// (FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 LogicalName                    (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          FileContents                   (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineTitleFileCacheInterface::SaveTitleFile(const struct FString& Filename, const struct FString& LogicalName, TArray<unsigned char> FileContents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.SaveTitleFile");

	struct
	{
		struct FString                 Filename;
		struct FString                 LogicalName;
		TArray<unsigned char>          FileContents;
		bool                           ReturnValue;
	} params;
	params.Filename = Filename;
	params.LogicalName = LogicalName;
	params.FileContents = FileContents;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileCacheInterface.ClearLoadTitleFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LoadCompleteDelegate           (CPF_Parm, CPF_NeedCtorLink)

void UOnlineTitleFileCacheInterface::ClearLoadTitleFileCompleteDelegate(const struct FScriptDelegate& LoadCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.ClearLoadTitleFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         LoadCompleteDelegate;
	} params;
	params.LoadCompleteDelegate = LoadCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineTitleFileCacheInterface.AddLoadTitleFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LoadCompleteDelegate           (CPF_Parm, CPF_NeedCtorLink)

void UOnlineTitleFileCacheInterface::AddLoadTitleFileCompleteDelegate(const struct FScriptDelegate& LoadCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.AddLoadTitleFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         LoadCompleteDelegate;
	} params;
	params.LoadCompleteDelegate = LoadCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineTitleFileCacheInterface.OnLoadTitleFileComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UOnlineTitleFileCacheInterface::OnLoadTitleFileComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.OnLoadTitleFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineTitleFileCacheInterface.LoadTitleFile
// (FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineTitleFileCacheInterface::LoadTitleFile(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileCacheInterface.LoadTitleFile");

	struct
	{
		struct FString                 Filename;
		bool                           ReturnValue;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileInterface.ClearRequestTitleFileListCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         RequestTitleFileListDelegate   (CPF_Parm, CPF_NeedCtorLink)

void UOnlineTitleFileInterface::ClearRequestTitleFileListCompleteDelegate(const struct FScriptDelegate& RequestTitleFileListDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.ClearRequestTitleFileListCompleteDelegate");

	struct
	{
		struct FScriptDelegate         RequestTitleFileListDelegate;
	} params;
	params.RequestTitleFileListDelegate = RequestTitleFileListDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineTitleFileInterface.AddRequestTitleFileListCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         RequestTitleFileListDelegate   (CPF_Parm, CPF_NeedCtorLink)

void UOnlineTitleFileInterface::AddRequestTitleFileListCompleteDelegate(const struct FScriptDelegate& RequestTitleFileListDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.AddRequestTitleFileListCompleteDelegate");

	struct
	{
		struct FScriptDelegate         RequestTitleFileListDelegate;
	} params;
	params.RequestTitleFileListDelegate = RequestTitleFileListDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineTitleFileInterface.OnRequestTitleFileListComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// TArray<struct FString>         ResultStr                      (CPF_Parm, CPF_NeedCtorLink)

void UOnlineTitleFileInterface::OnRequestTitleFileListComplete(bool bWasSuccessful, TArray<struct FString> ResultStr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.OnRequestTitleFileListComplete");

	struct
	{
		bool                           bWasSuccessful;
		TArray<struct FString>         ResultStr;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.ResultStr = ResultStr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineTitleFileInterface.RequestTitleFileList
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineTitleFileInterface::RequestTitleFileList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.RequestTitleFileList");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileInterface.ClearDownloadedFile
// (FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineTitleFileInterface::ClearDownloadedFile(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.ClearDownloadedFile");

	struct
	{
		struct FString                 Filename;
		bool                           ReturnValue;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileInterface.ClearDownloadedFiles
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineTitleFileInterface::ClearDownloadedFiles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.ClearDownloadedFiles");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileInterface.GetTitleFileState
// (FUNC_Public)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EOnlineEnumerationReadState> UOnlineTitleFileInterface::GetTitleFileState(const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.GetTitleFileState");

	struct
	{
		struct FString                 Filename;
		TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileInterface.GetTitleFileContents
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          FileContents                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineTitleFileInterface::GetTitleFileContents(const struct FString& Filename, TArray<unsigned char>* FileContents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.GetTitleFileContents");

	struct
	{
		struct FString                 Filename;
		TArray<unsigned char>          FileContents;
		bool                           ReturnValue;
	} params;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FileContents != nullptr)
		*FileContents = params.FileContents;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileInterface.ClearReadTitleFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  (CPF_Parm, CPF_NeedCtorLink)

void UOnlineTitleFileInterface::ClearReadTitleFileCompleteDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.ClearReadTitleFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ReadTitleFileCompleteDelegate;
	} params;
	params.ReadTitleFileCompleteDelegate = ReadTitleFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineTitleFileInterface.AddReadTitleFileCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadTitleFileCompleteDelegate  (CPF_Parm, CPF_NeedCtorLink)

void UOnlineTitleFileInterface::AddReadTitleFileCompleteDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.AddReadTitleFileCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ReadTitleFileCompleteDelegate;
	} params;
	params.ReadTitleFileCompleteDelegate = ReadTitleFileCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineTitleFileInterface.ReadTitleFile
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 FileToRead                     (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class EOnlineFileType> FileType                       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineTitleFileInterface::ReadTitleFile(const struct FString& FileToRead, TEnumAsByte<enum class EOnlineFileType> FileType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.ReadTitleFile");

	struct
	{
		struct FString                 FileToRead;
		TEnumAsByte<enum class EOnlineFileType> FileType;
		bool                           ReturnValue;
	} params;
	params.FileToRead = FileToRead;
	params.FileType = FileType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineTitleFileInterface.OnReadTitleFileComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UOnlineTitleFileInterface::OnReadTitleFileComplete(bool bWasSuccessful, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineTitleFileInterface.OnReadTitleFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.IsInPartyChat
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePartyChatInterface::IsInPartyChat(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.IsInPartyChat");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.ShowCommunitySessionsUI
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePartyChatInterface::ShowCommunitySessionsUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ShowCommunitySessionsUI");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.ShowVoiceChannelUI
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePartyChatInterface::ShowVoiceChannelUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ShowVoiceChannelUI");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.ShowPartyUI
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePartyChatInterface::ShowPartyUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ShowPartyUI");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.GetPartyBandwidth
// (FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UOnlinePartyChatInterface::GetPartyBandwidth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.GetPartyBandwidth");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.SetPartyMemberCustomData
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            Data1                          (CPF_Parm)
// int                            Data2                          (CPF_Parm)
// int                            Data3                          (CPF_Parm)
// int                            Data4                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePartyChatInterface::SetPartyMemberCustomData(unsigned char LocalUserNum, int Data1, int Data2, int Data3, int Data4)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.SetPartyMemberCustomData");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            Data1;
		int                            Data2;
		int                            Data3;
		int                            Data4;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.Data1 = Data1;
	params.Data2 = Data2;
	params.Data3 = Data3;
	params.Data4 = Data4;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.ClearPartyMembersInfoChangedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         PartyMembersInfoChangedDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePartyChatInterface::ClearPartyMembersInfoChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMembersInfoChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ClearPartyMembersInfoChangedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         PartyMembersInfoChangedDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PartyMembersInfoChangedDelegate = PartyMembersInfoChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.AddPartyMembersInfoChangedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         PartyMembersInfoChangedDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePartyChatInterface::AddPartyMembersInfoChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMembersInfoChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.AddPartyMembersInfoChangedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         PartyMembersInfoChangedDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PartyMembersInfoChangedDelegate = PartyMembersInfoChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.OnPartyMembersInfoChanged
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FString                 PlayerName                     (CPF_Parm, CPF_NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// int                            CustomData1                    (CPF_Parm)
// int                            CustomData2                    (CPF_Parm)
// int                            CustomData3                    (CPF_Parm)
// int                            CustomData4                    (CPF_Parm)

void UOnlinePartyChatInterface::OnPartyMembersInfoChanged(const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, int CustomData1, int CustomData2, int CustomData3, int CustomData4)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.OnPartyMembersInfoChanged");

	struct
	{
		struct FString                 PlayerName;
		struct FUniqueNetId            PlayerID;
		int                            CustomData1;
		int                            CustomData2;
		int                            CustomData3;
		int                            CustomData4;
	} params;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;
	params.CustomData1 = CustomData1;
	params.CustomData2 = CustomData2;
	params.CustomData3 = CustomData3;
	params.CustomData4 = CustomData4;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.ClearPartyMemberListChangedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         PartyMemberListChangedDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePartyChatInterface::ClearPartyMemberListChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMemberListChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ClearPartyMemberListChangedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         PartyMemberListChangedDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PartyMemberListChangedDelegate = PartyMemberListChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.AddPartyMemberListChangedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         PartyMemberListChangedDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePartyChatInterface::AddPartyMemberListChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMemberListChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.AddPartyMemberListChangedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         PartyMemberListChangedDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PartyMemberListChangedDelegate = PartyMemberListChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.OnPartyMemberListChanged
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bJoinedOrLeft                  (CPF_Parm)
// struct FString                 PlayerName                     (CPF_Parm, CPF_NeedCtorLink)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)

void UOnlinePartyChatInterface::OnPartyMemberListChanged(bool bJoinedOrLeft, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.OnPartyMemberListChanged");

	struct
	{
		bool                           bJoinedOrLeft;
		struct FString                 PlayerName;
		struct FUniqueNetId            PlayerID;
	} params;
	params.bJoinedOrLeft = bJoinedOrLeft;
	params.PlayerName = PlayerName;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.GetPartyMemberInformation
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            MemberId                       (CPF_Parm)
// struct FOnlinePartyMember      PartyMember                    (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePartyChatInterface::GetPartyMemberInformation(const struct FUniqueNetId& MemberId, struct FOnlinePartyMember* PartyMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.GetPartyMemberInformation");

	struct
	{
		struct FUniqueNetId            MemberId;
		struct FOnlinePartyMember      PartyMember;
		bool                           ReturnValue;
	} params;
	params.MemberId = MemberId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PartyMember != nullptr)
		*PartyMember = params.PartyMember;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.GetPartyMembersInformation
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FOnlinePartyMember> PartyMembers                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePartyChatInterface::GetPartyMembersInformation(TArray<struct FOnlinePartyMember>* PartyMembers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.GetPartyMembersInformation");

	struct
	{
		TArray<struct FOnlinePartyMember> PartyMembers;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PartyMembers != nullptr)
		*PartyMembers = params.PartyMembers;

	return params.ReturnValue;
}


// Function Engine.OnlinePartyChatInterface.ClearSendPartyGameInvitesCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         SendPartyGameInvitesCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePartyChatInterface::ClearSendPartyGameInvitesCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& SendPartyGameInvitesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.ClearSendPartyGameInvitesCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         SendPartyGameInvitesCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.SendPartyGameInvitesCompleteDelegate = SendPartyGameInvitesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.AddSendPartyGameInvitesCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         SendPartyGameInvitesCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePartyChatInterface::AddSendPartyGameInvitesCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& SendPartyGameInvitesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.AddSendPartyGameInvitesCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         SendPartyGameInvitesCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.SendPartyGameInvitesCompleteDelegate = SendPartyGameInvitesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.OnSendPartyGameInvitesComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlinePartyChatInterface::OnSendPartyGameInvitesComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.OnSendPartyGameInvitesComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePartyChatInterface.SendPartyGameInvites
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePartyChatInterface::SendPartyGameInvites(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePartyChatInterface.SendPartyGameInvites");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineNewsInterface.GetNews
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EOnlineNewsType> NewsType                       (CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UOnlineNewsInterface::GetNews(unsigned char LocalUserNum, TEnumAsByte<enum class EOnlineNewsType> NewsType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.GetNews");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EOnlineNewsType> NewsType;
		struct FString                 ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.NewsType = NewsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineNewsInterface.ClearReadNewsCompletedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadNewsDelegate               (CPF_Parm, CPF_NeedCtorLink)

void UOnlineNewsInterface::ClearReadNewsCompletedDelegate(const struct FScriptDelegate& ReadNewsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.ClearReadNewsCompletedDelegate");

	struct
	{
		struct FScriptDelegate         ReadNewsDelegate;
	} params;
	params.ReadNewsDelegate = ReadNewsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineNewsInterface.AddReadNewsCompletedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadNewsDelegate               (CPF_Parm, CPF_NeedCtorLink)

void UOnlineNewsInterface::AddReadNewsCompletedDelegate(const struct FScriptDelegate& ReadNewsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.AddReadNewsCompletedDelegate");

	struct
	{
		struct FScriptDelegate         ReadNewsDelegate;
	} params;
	params.ReadNewsDelegate = ReadNewsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineNewsInterface.OnReadNewsCompleted
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// TEnumAsByte<enum class EOnlineNewsType> NewsType                       (CPF_Parm)

void UOnlineNewsInterface::OnReadNewsCompleted(bool bWasSuccessful, TEnumAsByte<enum class EOnlineNewsType> NewsType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.OnReadNewsCompleted");

	struct
	{
		bool                           bWasSuccessful;
		TEnumAsByte<enum class EOnlineNewsType> NewsType;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.NewsType = NewsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineNewsInterface.ReadNews
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EOnlineNewsType> NewsType                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineNewsInterface::ReadNews(unsigned char LocalUserNum, TEnumAsByte<enum class EOnlineNewsType> NewsType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineNewsInterface.ReadNews");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EOnlineNewsType> NewsType;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.NewsType = NewsType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.CalcAggregateSkill
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FDouble>         Mus                            (CPF_Parm, CPF_NeedCtorLink)
// TArray<struct FDouble>         Sigmas                         (CPF_Parm, CPF_NeedCtorLink)
// struct FDouble                 OutAggregateMu                 (CPF_Parm, CPF_OutParm)
// struct FDouble                 OutAggregateSigma              (CPF_Parm, CPF_OutParm)

void UOnlineStatsInterface::CalcAggregateSkill(TArray<struct FDouble> Mus, TArray<struct FDouble> Sigmas, struct FDouble* OutAggregateMu, struct FDouble* OutAggregateSigma)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.CalcAggregateSkill");

	struct
	{
		TArray<struct FDouble>         Mus;
		TArray<struct FDouble>         Sigmas;
		struct FDouble                 OutAggregateMu;
		struct FDouble                 OutAggregateSigma;
	} params;
	params.Mus = Mus;
	params.Sigmas = Sigmas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutAggregateMu != nullptr)
		*OutAggregateMu = params.OutAggregateMu;
	if (OutAggregateSigma != nullptr)
		*OutAggregateSigma = params.OutAggregateSigma;
}


// Function Engine.OnlineStatsInterface.RegisterStatGuid
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// struct FString                 ClientStatGuid                 (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsInterface::RegisterStatGuid(const struct FUniqueNetId& PlayerID, struct FString* ClientStatGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.RegisterStatGuid");

	struct
	{
		struct FUniqueNetId            PlayerID;
		struct FString                 ClientStatGuid;
		bool                           ReturnValue;
	} params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ClientStatGuid != nullptr)
		*ClientStatGuid = params.ClientStatGuid;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.GetClientStatGuid
// (FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UOnlineStatsInterface::GetClientStatGuid()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.GetClientStatGuid");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineStatsInterface::ClearRegisterHostStatGuidCompleteDelegateDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ClearRegisterHostStatGuidCompleteDelegateDelegate");

	struct
	{
		struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate;
	} params;
	params.RegisterHostStatGuidCompleteDelegate = RegisterHostStatGuidCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineStatsInterface::AddRegisterHostStatGuidCompleteDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.AddRegisterHostStatGuidCompleteDelegate");

	struct
	{
		struct FScriptDelegate         RegisterHostStatGuidCompleteDelegate;
	} params;
	params.RegisterHostStatGuidCompleteDelegate = RegisterHostStatGuidCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineStatsInterface::OnRegisterHostStatGuidComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.OnRegisterHostStatGuidComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.RegisterHostStatGuid
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 HostStatGuid                   (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsInterface::RegisterHostStatGuid(struct FString* HostStatGuid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.RegisterHostStatGuid");

	struct
	{
		struct FString                 HostStatGuid;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HostStatGuid != nullptr)
		*HostStatGuid = params.HostStatGuid;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.GetHostStatGuid
// (FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UOnlineStatsInterface::GetHostStatGuid()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.GetHostStatGuid");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.WriteOnlinePlayerScores
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// int                            LeaderboardId                  (CPF_Parm)
// TArray<struct FOnlinePlayerScore> PlayerScores                   (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsInterface::WriteOnlinePlayerScores(const struct FName& SessionName, int LeaderboardId, TArray<struct FOnlinePlayerScore>* PlayerScores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.WriteOnlinePlayerScores");

	struct
	{
		struct FName                   SessionName;
		int                            LeaderboardId;
		TArray<struct FOnlinePlayerScore> PlayerScores;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;
	params.LeaderboardId = LeaderboardId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlayerScores != nullptr)
		*PlayerScores = params.PlayerScores;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineStatsInterface::ClearFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ClearFlushOnlineStatsCompleteDelegate");

	struct
	{
		struct FScriptDelegate         FlushOnlineStatsCompleteDelegate;
	} params;
	params.FlushOnlineStatsCompleteDelegate = FlushOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         FlushOnlineStatsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineStatsInterface::AddFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.AddFlushOnlineStatsCompleteDelegate");

	struct
	{
		struct FScriptDelegate         FlushOnlineStatsCompleteDelegate;
	} params;
	params.FlushOnlineStatsCompleteDelegate = FlushOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineStatsInterface::OnFlushOnlineStatsComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.OnFlushOnlineStatsComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.FlushOnlineStats
// (FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsInterface::FlushOnlineStats(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.FlushOnlineStats");

	struct
	{
		struct FName                   SessionName;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.WriteOnlineStats
// (FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// struct FUniqueNetId            Player                         (CPF_Parm)
// class UOnlineStatsWrite*       StatsWrite                     (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsInterface::WriteOnlineStats(const struct FName& SessionName, const struct FUniqueNetId& Player, class UOnlineStatsWrite* StatsWrite)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.WriteOnlineStats");

	struct
	{
		struct FName                   SessionName;
		struct FUniqueNetId            Player;
		class UOnlineStatsWrite*       StatsWrite;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;
	params.Player = Player;
	params.StatsWrite = StatsWrite;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.FreeStats
// (FUNC_Public)
// Parameters:
// class UOnlineStatsRead*        StatsRead                      (CPF_Parm)

void UOnlineStatsInterface::FreeStats(class UOnlineStatsRead* StatsRead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.FreeStats");

	struct
	{
		class UOnlineStatsRead*        StatsRead;
	} params;
	params.StatsRead = StatsRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineStatsInterface::ClearReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ClearReadOnlineStatsCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ReadOnlineStatsCompleteDelegate;
	} params;
	params.ReadOnlineStatsCompleteDelegate = ReadOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ReadOnlineStatsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineStatsInterface::AddReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.AddReadOnlineStatsCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ReadOnlineStatsCompleteDelegate;
	} params;
	params.ReadOnlineStatsCompleteDelegate = ReadOnlineStatsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.OnReadOnlineStatsComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineStatsInterface::OnReadOnlineStatsComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.OnReadOnlineStatsComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// class UOnlineStatsRead*        StatsRead                      (CPF_Parm)
// int                            NumRows                        (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsInterface::ReadOnlineStatsByRankAroundPlayer(unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int NumRows)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStatsByRankAroundPlayer");

	struct
	{
		unsigned char                  LocalUserNum;
		class UOnlineStatsRead*        StatsRead;
		int                            NumRows;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.StatsRead = StatsRead;
	params.NumRows = NumRows;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.ReadOnlineStatsByRank
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// class UOnlineStatsRead*        StatsRead                      (CPF_Parm)
// int                            StartIndex                     (CPF_OptionalParm, CPF_Parm)
// int                            NumToRead                      (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsInterface::ReadOnlineStatsByRank(unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int StartIndex, int NumToRead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStatsByRank");

	struct
	{
		unsigned char                  LocalUserNum;
		class UOnlineStatsRead*        StatsRead;
		int                            StartIndex;
		int                            NumToRead;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.StatsRead = StatsRead;
	params.StartIndex = StartIndex;
	params.NumToRead = NumToRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.ReadOnlineStatsForFriends
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// class UOnlineStatsRead*        StatsRead                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsInterface::ReadOnlineStatsForFriends(unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStatsForFriends");

	struct
	{
		unsigned char                  LocalUserNum;
		class UOnlineStatsRead*        StatsRead;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.StatsRead = StatsRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineStatsInterface.ReadOnlineStats
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TArray<struct FUniqueNetId>    Players                        (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// class UOnlineStatsRead*        StatsRead                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineStatsInterface::ReadOnlineStats(unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsInterface.ReadOnlineStats");

	struct
	{
		unsigned char                  LocalUserNum;
		TArray<struct FUniqueNetId>    Players;
		class UOnlineStatsRead*        StatsRead;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.StatsRead = StatsRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.SetVoiceReceiveVolume
// (FUNC_Public)
// Parameters:
// float                          VoiceVolume                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::SetVoiceReceiveVolume(float VoiceVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.SetVoiceReceiveVolume");

	struct
	{
		float                          VoiceVolume;
		bool                           ReturnValue;
	} params;
	params.VoiceVolume = VoiceVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.UnmuteAll
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::UnmuteAll(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnmuteAll");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.MuteAll
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           bAllowFriends                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::MuteAll(unsigned char LocalUserNum, bool bAllowFriends)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.MuteAll");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           bAllowFriends;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.bAllowFriends = bAllowFriends;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.SetSpeechRecognitionObject
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// class USpeechRecognition*      SpeechRecogObj                 (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::SetSpeechRecognitionObject(unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.SetSpeechRecognitionObject");

	struct
	{
		unsigned char                  LocalUserNum;
		class USpeechRecognition*      SpeechRecogObj;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.SpeechRecogObj = SpeechRecogObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.SelectVocabulary
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            VocabularyId                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::SelectVocabulary(unsigned char LocalUserNum, int VocabularyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.SelectVocabulary");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            VocabularyId;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.VocabularyId = VocabularyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.ClearRecognitionCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         RecognitionDelegate            (CPF_Parm, CPF_NeedCtorLink)

void UOnlineVoiceInterface::ClearRecognitionCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& RecognitionDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.ClearRecognitionCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         RecognitionDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.RecognitionDelegate = RecognitionDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.AddRecognitionCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         RecognitionDelegate            (CPF_Parm, CPF_NeedCtorLink)

void UOnlineVoiceInterface::AddRecognitionCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& RecognitionDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.AddRecognitionCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         RecognitionDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.RecognitionDelegate = RecognitionDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.OnRecognitionComplete
// (FUNC_Public, FUNC_Delegate)

void UOnlineVoiceInterface::OnRecognitionComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.OnRecognitionComplete");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.GetRecognitionResults
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TArray<struct FSpeechRecognizedWord> Words                          (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::GetRecognitionResults(unsigned char LocalUserNum, TArray<struct FSpeechRecognizedWord>* Words)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.GetRecognitionResults");

	struct
	{
		unsigned char                  LocalUserNum;
		TArray<struct FSpeechRecognizedWord> Words;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Words != nullptr)
		*Words = params.Words;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.StopSpeechRecognition
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::StopSpeechRecognition(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StopSpeechRecognition");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.StartSpeechRecognition
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::StartSpeechRecognition(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StartSpeechRecognition");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.StopNetworkedVoice
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UOnlineVoiceInterface::StopNetworkedVoice(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StopNetworkedVoice");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.StartNetworkedVoice
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UOnlineVoiceInterface::StartNetworkedVoice(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.StartNetworkedVoice");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.ClearPlayerTalkingDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         TalkerDelegate                 (CPF_Parm, CPF_NeedCtorLink)

void UOnlineVoiceInterface::ClearPlayerTalkingDelegate(const struct FScriptDelegate& TalkerDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.ClearPlayerTalkingDelegate");

	struct
	{
		struct FScriptDelegate         TalkerDelegate;
	} params;
	params.TalkerDelegate = TalkerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.AddPlayerTalkingDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         TalkerDelegate                 (CPF_Parm, CPF_NeedCtorLink)

void UOnlineVoiceInterface::AddPlayerTalkingDelegate(const struct FScriptDelegate& TalkerDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.AddPlayerTalkingDelegate");

	struct
	{
		struct FScriptDelegate         TalkerDelegate;
	} params;
	params.TalkerDelegate = TalkerDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.OnPlayerTalkingStateChange
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FUniqueNetId            Player                         (CPF_Parm)
// bool                           bIsTalking                     (CPF_Parm)

void UOnlineVoiceInterface::OnPlayerTalkingStateChange(const struct FUniqueNetId& Player, bool bIsTalking)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.OnPlayerTalkingStateChange");

	struct
	{
		struct FUniqueNetId            Player;
		bool                           bIsTalking;
	} params;
	params.Player = Player;
	params.bIsTalking = bIsTalking;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineVoiceInterface.UnmuteRemoteTalker
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           bIsSystemWide                  (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::UnmuteRemoteTalker(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID, bool bIsSystemWide)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnmuteRemoteTalker");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            PlayerID;
		bool                           bIsSystemWide;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;
	params.bIsSystemWide = bIsSystemWide;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.MuteRemoteTalker
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           bIsSystemWide                  (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::MuteRemoteTalker(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID, bool bIsSystemWide)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.MuteRemoteTalker");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            PlayerID;
		bool                           bIsSystemWide;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;
	params.bIsSystemWide = bIsSystemWide;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.SetRemoteTalkerPriority
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// int                            Priority                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::SetRemoteTalkerPriority(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID, int Priority)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.SetRemoteTalkerPriority");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            PlayerID;
		int                            Priority;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;
	params.Priority = Priority;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.IsHeadsetPresent
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::IsHeadsetPresent(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.IsHeadsetPresent");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.IsRemotePlayerTalking
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::IsRemotePlayerTalking(const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.IsRemotePlayerTalking");

	struct
	{
		struct FUniqueNetId            PlayerID;
		bool                           ReturnValue;
	} params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.IsLocalPlayerTalking
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::IsLocalPlayerTalking(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.IsLocalPlayerTalking");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.UnregisterRemoteTalker
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::UnregisterRemoteTalker(const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnregisterRemoteTalker");

	struct
	{
		struct FUniqueNetId            PlayerID;
		bool                           ReturnValue;
	} params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.RegisterRemoteTalker
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::RegisterRemoteTalker(const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.RegisterRemoteTalker");

	struct
	{
		struct FUniqueNetId            PlayerID;
		bool                           ReturnValue;
	} params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.UnregisterLocalTalker
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::UnregisterLocalTalker(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.UnregisterLocalTalker");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineVoiceInterface.RegisterLocalTalker
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineVoiceInterface::RegisterLocalTalker(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineVoiceInterface.RegisterLocalTalker");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ClearSaveGames
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineContentInterface::ClearSaveGames(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearSaveGames");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.DeleteSaveGame
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            DeviceID                       (CPF_Parm)
// struct FString                 FriendlyName                   (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineContentInterface::DeleteSaveGame(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.DeleteSaveGame");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            DeviceID;
		struct FString                 FriendlyName;
		struct FString                 Filename;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ClearWriteSaveGameDataComplete
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         WriteSaveGameDataCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineContentInterface::ClearWriteSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& WriteSaveGameDataCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearWriteSaveGameDataComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         WriteSaveGameDataCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.WriteSaveGameDataCompleteDelegate = WriteSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.AddWriteSaveGameDataComplete
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         WriteSaveGameDataCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineContentInterface::AddWriteSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& WriteSaveGameDataCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddWriteSaveGameDataComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         WriteSaveGameDataCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.WriteSaveGameDataCompleteDelegate = WriteSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.OnWriteSaveGameDataComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            DeviceID                       (CPF_Parm)
// struct FString                 FriendlyName                   (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SaveFileName                   (CPF_Parm, CPF_NeedCtorLink)

void UOnlineContentInterface::OnWriteSaveGameDataComplete(bool bWasSuccessful, unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnWriteSaveGameDataComplete");

	struct
	{
		bool                           bWasSuccessful;
		unsigned char                  LocalUserNum;
		int                            DeviceID;
		struct FString                 FriendlyName;
		struct FString                 Filename;
		struct FString                 SaveFileName;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.WriteSaveGameData
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            DeviceID                       (CPF_Parm)
// struct FString                 FriendlyName                   (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SaveFileName                   (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          SaveGameData                   (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineContentInterface::WriteSaveGameData(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName, TArray<unsigned char>* SaveGameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.WriteSaveGameData");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            DeviceID;
		struct FString                 FriendlyName;
		struct FString                 Filename;
		struct FString                 SaveFileName;
		TArray<unsigned char>          SaveGameData;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SaveGameData != nullptr)
		*SaveGameData = params.SaveGameData;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ClearReadSaveGameDataComplete
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadSaveGameDataCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineContentInterface::ClearReadSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearReadSaveGameDataComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadSaveGameDataCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadSaveGameDataCompleteDelegate = ReadSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.AddReadSaveGameDataComplete
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadSaveGameDataCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineContentInterface::AddReadSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddReadSaveGameDataComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadSaveGameDataCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadSaveGameDataCompleteDelegate = ReadSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.OnReadSaveGameDataComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            DeviceID                       (CPF_Parm)
// struct FString                 FriendlyName                   (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SaveFileName                   (CPF_Parm, CPF_NeedCtorLink)

void UOnlineContentInterface::OnReadSaveGameDataComplete(bool bWasSuccessful, unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnReadSaveGameDataComplete");

	struct
	{
		bool                           bWasSuccessful;
		unsigned char                  LocalUserNum;
		int                            DeviceID;
		struct FString                 FriendlyName;
		struct FString                 Filename;
		struct FString                 SaveFileName;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.GetSaveGameData
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            DeviceID                       (CPF_Parm)
// struct FString                 FriendlyName                   (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SaveFileName                   (CPF_Parm, CPF_NeedCtorLink)
// unsigned char                  bIsValid                       (CPF_Parm, CPF_OutParm)
// TArray<unsigned char>          SaveGameData                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineContentInterface::GetSaveGameData(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName, unsigned char* bIsValid, TArray<unsigned char>* SaveGameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.GetSaveGameData");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            DeviceID;
		struct FString                 FriendlyName;
		struct FString                 Filename;
		struct FString                 SaveFileName;
		unsigned char                  bIsValid;
		TArray<unsigned char>          SaveGameData;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bIsValid != nullptr)
		*bIsValid = params.bIsValid;
	if (SaveGameData != nullptr)
		*SaveGameData = params.SaveGameData;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ReadSaveGameData
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            DeviceID                       (CPF_Parm)
// struct FString                 FriendlyName                   (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SaveFileName                   (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineContentInterface::ReadSaveGameData(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ReadSaveGameData");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            DeviceID;
		struct FString                 FriendlyName;
		struct FString                 Filename;
		struct FString                 SaveFileName;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.GetAvailableDownloadCounts
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            NewDownloads                   (CPF_Parm, CPF_OutParm)
// int                            TotalDownloads                 (CPF_Parm, CPF_OutParm)

void UOnlineContentInterface::GetAvailableDownloadCounts(unsigned char LocalUserNum, int* NewDownloads, int* TotalDownloads)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.GetAvailableDownloadCounts");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            NewDownloads;
		int                            TotalDownloads;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewDownloads != nullptr)
		*NewDownloads = params.NewDownloads;
	if (TotalDownloads != nullptr)
		*TotalDownloads = params.TotalDownloads;
}


// Function Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         QueryDownloadsDelegate         (CPF_Parm, CPF_NeedCtorLink)

void UOnlineContentInterface::ClearQueryAvailableDownloadsComplete(unsigned char LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearQueryAvailableDownloadsComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         QueryDownloadsDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.QueryDownloadsDelegate = QueryDownloadsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         QueryDownloadsDelegate         (CPF_Parm, CPF_NeedCtorLink)

void UOnlineContentInterface::AddQueryAvailableDownloadsComplete(unsigned char LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddQueryAvailableDownloadsComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         QueryDownloadsDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.QueryDownloadsDelegate = QueryDownloadsDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineContentInterface::OnQueryAvailableDownloadsComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnQueryAvailableDownloadsComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.QueryAvailableDownloads
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            CategoryMask                   (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineContentInterface::QueryAvailableDownloads(unsigned char LocalUserNum, int CategoryMask)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.QueryAvailableDownloads");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            CategoryMask;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.CategoryMask = CategoryMask;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ClearCrossTitleSaveGames
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineContentInterface::ClearCrossTitleSaveGames(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearCrossTitleSaveGames");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ClearReadCrossTitleSaveGameDataComplete
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadSaveGameDataCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineContentInterface::ClearReadCrossTitleSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearReadCrossTitleSaveGameDataComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadSaveGameDataCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadSaveGameDataCompleteDelegate = ReadSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.AddReadCrossTitleSaveGameDataComplete
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadSaveGameDataCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineContentInterface::AddReadCrossTitleSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddReadCrossTitleSaveGameDataComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadSaveGameDataCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadSaveGameDataCompleteDelegate = ReadSaveGameDataCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.OnReadCrossTitleSaveGameDataComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            DeviceID                       (CPF_Parm)
// int                            TitleId                        (CPF_Parm)
// struct FString                 FriendlyName                   (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SaveFileName                   (CPF_Parm, CPF_NeedCtorLink)

void UOnlineContentInterface::OnReadCrossTitleSaveGameDataComplete(bool bWasSuccessful, unsigned char LocalUserNum, int DeviceID, int TitleId, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnReadCrossTitleSaveGameDataComplete");

	struct
	{
		bool                           bWasSuccessful;
		unsigned char                  LocalUserNum;
		int                            DeviceID;
		int                            TitleId;
		struct FString                 FriendlyName;
		struct FString                 Filename;
		struct FString                 SaveFileName;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.TitleId = TitleId;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.GetCrossTitleSaveGameData
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            DeviceID                       (CPF_Parm)
// int                            TitleId                        (CPF_Parm)
// struct FString                 FriendlyName                   (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SaveFileName                   (CPF_Parm, CPF_NeedCtorLink)
// unsigned char                  bIsValid                       (CPF_Parm, CPF_OutParm)
// TArray<unsigned char>          SaveGameData                   (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineContentInterface::GetCrossTitleSaveGameData(unsigned char LocalUserNum, int DeviceID, int TitleId, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName, unsigned char* bIsValid, TArray<unsigned char>* SaveGameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.GetCrossTitleSaveGameData");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            DeviceID;
		int                            TitleId;
		struct FString                 FriendlyName;
		struct FString                 Filename;
		struct FString                 SaveFileName;
		unsigned char                  bIsValid;
		TArray<unsigned char>          SaveGameData;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.TitleId = TitleId;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bIsValid != nullptr)
		*bIsValid = params.bIsValid;
	if (SaveGameData != nullptr)
		*SaveGameData = params.SaveGameData;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ReadCrossTitleSaveGameData
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            DeviceID                       (CPF_Parm)
// int                            TitleId                        (CPF_Parm)
// struct FString                 FriendlyName                   (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 SaveFileName                   (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineContentInterface::ReadCrossTitleSaveGameData(unsigned char LocalUserNum, int DeviceID, int TitleId, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ReadCrossTitleSaveGameData");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            DeviceID;
		int                            TitleId;
		struct FString                 FriendlyName;
		struct FString                 Filename;
		struct FString                 SaveFileName;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceID = DeviceID;
	params.TitleId = TitleId;
	params.FriendlyName = FriendlyName;
	params.Filename = Filename;
	params.SaveFileName = SaveFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ClearReadCrossTitleContentCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EOnlineContentType> ContentType                    (CPF_Parm)
// struct FScriptDelegate         ReadContentCompleteDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineContentInterface::ClearReadCrossTitleContentCompleteDelegate(unsigned char LocalUserNum, TEnumAsByte<enum class EOnlineContentType> ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearReadCrossTitleContentCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EOnlineContentType> ContentType;
		struct FScriptDelegate         ReadContentCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;
	params.ReadContentCompleteDelegate = ReadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.AddReadCrossTitleContentCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EOnlineContentType> ContentType                    (CPF_Parm)
// struct FScriptDelegate         ReadContentCompleteDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineContentInterface::AddReadCrossTitleContentCompleteDelegate(unsigned char LocalUserNum, TEnumAsByte<enum class EOnlineContentType> ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddReadCrossTitleContentCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EOnlineContentType> ContentType;
		struct FScriptDelegate         ReadContentCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;
	params.ReadContentCompleteDelegate = ReadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.OnReadCrossTitleContentComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineContentInterface::OnReadCrossTitleContentComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnReadCrossTitleContentComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.GetCrossTitleContentList
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EOnlineContentType> ContentType                    (CPF_Parm)
// TArray<struct FOnlineCrossTitleContent> ContentList                    (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EOnlineEnumerationReadState> UOnlineContentInterface::GetCrossTitleContentList(unsigned char LocalUserNum, TEnumAsByte<enum class EOnlineContentType> ContentType, TArray<struct FOnlineCrossTitleContent>* ContentList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.GetCrossTitleContentList");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EOnlineContentType> ContentType;
		TArray<struct FOnlineCrossTitleContent> ContentList;
		TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ContentList != nullptr)
		*ContentList = params.ContentList;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ClearCrossTitleContentList
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EOnlineContentType> ContentType                    (CPF_Parm)

void UOnlineContentInterface::ClearCrossTitleContentList(unsigned char LocalUserNum, TEnumAsByte<enum class EOnlineContentType> ContentType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearCrossTitleContentList");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EOnlineContentType> ContentType;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.ReadCrossTitleContentList
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EOnlineContentType> ContentType                    (CPF_Parm)
// int                            TitleId                        (CPF_OptionalParm, CPF_Parm)
// int                            DeviceID                       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineContentInterface::ReadCrossTitleContentList(unsigned char LocalUserNum, TEnumAsByte<enum class EOnlineContentType> ContentType, int TitleId, int DeviceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ReadCrossTitleContentList");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EOnlineContentType> ContentType;
		int                            TitleId;
		int                            DeviceID;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;
	params.TitleId = TitleId;
	params.DeviceID = DeviceID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.GetContentList
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EOnlineContentType> ContentType                    (CPF_Parm)
// TArray<struct FOnlineContent>  ContentList                    (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EOnlineEnumerationReadState> UOnlineContentInterface::GetContentList(unsigned char LocalUserNum, TEnumAsByte<enum class EOnlineContentType> ContentType, TArray<struct FOnlineContent>* ContentList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.GetContentList");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EOnlineContentType> ContentType;
		TArray<struct FOnlineContent>  ContentList;
		TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ContentList != nullptr)
		*ContentList = params.ContentList;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ClearContentList
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EOnlineContentType> ContentType                    (CPF_Parm)

void UOnlineContentInterface::ClearContentList(unsigned char LocalUserNum, TEnumAsByte<enum class EOnlineContentType> ContentType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearContentList");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EOnlineContentType> ContentType;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.ReadContentList
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EOnlineContentType> ContentType                    (CPF_Parm)
// int                            DeviceID                       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineContentInterface::ReadContentList(unsigned char LocalUserNum, TEnumAsByte<enum class EOnlineContentType> ContentType, int DeviceID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ReadContentList");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EOnlineContentType> ContentType;
		int                            DeviceID;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;
	params.DeviceID = DeviceID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineContentInterface.ClearReadContentComplete
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EOnlineContentType> ContentType                    (CPF_Parm)
// struct FScriptDelegate         ReadContentCompleteDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineContentInterface::ClearReadContentComplete(unsigned char LocalUserNum, TEnumAsByte<enum class EOnlineContentType> ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearReadContentComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EOnlineContentType> ContentType;
		struct FScriptDelegate         ReadContentCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;
	params.ReadContentCompleteDelegate = ReadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.AddReadContentComplete
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EOnlineContentType> ContentType                    (CPF_Parm)
// struct FScriptDelegate         ReadContentCompleteDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineContentInterface::AddReadContentComplete(unsigned char LocalUserNum, TEnumAsByte<enum class EOnlineContentType> ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddReadContentComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EOnlineContentType> ContentType;
		struct FScriptDelegate         ReadContentCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ContentType = ContentType;
	params.ReadContentCompleteDelegate = ReadContentCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.OnReadContentComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineContentInterface::OnReadContentComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnReadContentComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.ClearContentChangeDelegate
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FScriptDelegate         ContentDelegate                (CPF_Parm, CPF_NeedCtorLink)
// unsigned char                  LocalUserNum                   (CPF_OptionalParm, CPF_Parm)

void UOnlineContentInterface::ClearContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.ClearContentChangeDelegate");

	struct
	{
		struct FScriptDelegate         ContentDelegate;
		unsigned char                  LocalUserNum;
	} params;
	params.ContentDelegate = ContentDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.AddContentChangeDelegate
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FScriptDelegate         ContentDelegate                (CPF_Parm, CPF_NeedCtorLink)
// unsigned char                  LocalUserNum                   (CPF_OptionalParm, CPF_Parm)

void UOnlineContentInterface::AddContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.AddContentChangeDelegate");

	struct
	{
		struct FScriptDelegate         ContentDelegate;
		unsigned char                  LocalUserNum;
	} params;
	params.ContentDelegate = ContentDelegate;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineContentInterface.OnContentChange
// (FUNC_Public, FUNC_Delegate)

void UOnlineContentInterface::OnContentChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineContentInterface.OnContentChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.ClearHostStartPlayTogetherDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::ClearHostStartPlayTogetherDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.ClearHostStartPlayTogetherDelegate");

	struct
	{
		struct FScriptDelegate         InDelegate;
	} params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.AddHostStartPlayTogetherDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::AddHostStartPlayTogetherDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.AddHostStartPlayTogetherDelegate");

	struct
	{
		struct FScriptDelegate         InDelegate;
	} params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.OnHostStartPlayTogether
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)

void UOnlineLobbyInterface::OnHostStartPlayTogether(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.OnHostStartPlayTogether");

	struct
	{
		unsigned char                  LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.ClearLobbyErrorDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyErrorDelegate             (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::ClearLobbyErrorDelegate(const struct FScriptDelegate& LobbyErrorDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.ClearLobbyErrorDelegate");

	struct
	{
		struct FScriptDelegate         LobbyErrorDelegate;
	} params;
	params.LobbyErrorDelegate = LobbyErrorDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.AddLobbyErrorDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyErrorDelegate             (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::AddLobbyErrorDelegate(const struct FScriptDelegate& LobbyErrorDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.AddLobbyErrorDelegate");

	struct
	{
		struct FScriptDelegate         LobbyErrorDelegate;
	} params;
	params.LobbyErrorDelegate = LobbyErrorDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.OnLobbyError
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::OnLobbyError(const struct FString& Error)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.OnLobbyError");

	struct
	{
		struct FString                 Error;
	} params;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.AddLobbySessionCreatedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbySessionCreatedDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::AddLobbySessionCreatedDelegate(const struct FScriptDelegate& LobbySessionCreatedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.AddLobbySessionCreatedDelegate");

	struct
	{
		struct FScriptDelegate         LobbySessionCreatedDelegate;
	} params;
	params.LobbySessionCreatedDelegate = LobbySessionCreatedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.OnLobbySessionCreated
// (FUNC_Public, FUNC_Delegate)

void UOnlineLobbyInterface::OnLobbySessionCreated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.OnLobbySessionCreated");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.RemoveLocalPlayerFromSession
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            PartyMember                    (CPF_Const, CPF_Parm, CPF_OutParm)

void UOnlineLobbyInterface::RemoveLocalPlayerFromSession(struct FUniqueNetId* PartyMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.RemoveLocalPlayerFromSession");

	struct
	{
		struct FUniqueNetId            PartyMember;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PartyMember != nullptr)
		*PartyMember = params.PartyMember;
}


// Function Engine.OnlineLobbyInterface.AddLocalPartyMemberToSession
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            NewPartyMember                 (CPF_Const, CPF_Parm, CPF_OutParm)

void UOnlineLobbyInterface::AddLocalPartyMemberToSession(struct FUniqueNetId* NewPartyMember)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.AddLocalPartyMemberToSession");

	struct
	{
		struct FUniqueNetId            NewPartyMember;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewPartyMember != nullptr)
		*NewPartyMember = params.NewPartyMember;
}


// Function Engine.OnlineLobbyInterface.KickPlayer
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FUniqueNetId            PlayerID                       (CPF_Const, CPF_Parm, CPF_OutParm)
// TEnumAsByte<enum class ELobbyKickReason> Reason                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::KickPlayer(TEnumAsByte<enum class ELobbyKickReason> Reason, struct FUniqueLobbyId* LobbyId, struct FUniqueNetId* PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.KickPlayer");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		struct FUniqueNetId            PlayerID;
		TEnumAsByte<enum class ELobbyKickReason> Reason;
		bool                           ReturnValue;
	} params;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;
	if (PlayerID != nullptr)
		*PlayerID = params.PlayerID;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.ClearLobbyDestroyedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyDestroyedDelegate         (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::ClearLobbyDestroyedDelegate(const struct FScriptDelegate& LobbyDestroyedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.ClearLobbyDestroyedDelegate");

	struct
	{
		struct FScriptDelegate         LobbyDestroyedDelegate;
	} params;
	params.LobbyDestroyedDelegate = LobbyDestroyedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.AddLobbyDestroyedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyDestroyedDelegate         (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::AddLobbyDestroyedDelegate(const struct FScriptDelegate& LobbyDestroyedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.AddLobbyDestroyedDelegate");

	struct
	{
		struct FScriptDelegate         LobbyDestroyedDelegate;
	} params;
	params.LobbyDestroyedDelegate = LobbyDestroyedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.OnLobbyDestroyed
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// TEnumAsByte<enum class ELobbyKickReason> Reason                         (CPF_Parm)

void UOnlineLobbyInterface::OnLobbyDestroyed(TEnumAsByte<enum class ELobbyKickReason> Reason, struct FUniqueLobbyId* LobbyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.OnLobbyDestroyed");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		TEnumAsByte<enum class ELobbyKickReason> Reason;
	} params;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;
}


// Function Engine.OnlineLobbyInterface.GetLobbyMembers
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// TArray<struct FLobbyMember>    Members                        (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::GetLobbyMembers(struct FUniqueLobbyId* LobbyId, TArray<struct FLobbyMember>* Members)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.GetLobbyMembers");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		TArray<struct FLobbyMember>    Members;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;
	if (Members != nullptr)
		*Members = params.Members;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.PlayTogether_Invite
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 InviteMessage                  (CPF_Const, CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::PlayTogether_Invite(const struct FString& InviteMessage, struct FUniqueLobbyId* LobbyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.PlayTogether_Invite");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		struct FString                 InviteMessage;
	} params;
	params.InviteMessage = InviteMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;
}


// Function Engine.OnlineLobbyInterface.ShowInviteUI
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Const, CPF_Parm)
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::ShowInviteUI(unsigned char LocalUserNum, struct FUniqueLobbyId* LobbyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.ShowInviteUI");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueLobbyId          LobbyId;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.ClearLobbyInviteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyInviteDelegate            (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::ClearLobbyInviteDelegate(const struct FScriptDelegate& LobbyInviteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.ClearLobbyInviteDelegate");

	struct
	{
		struct FScriptDelegate         LobbyInviteDelegate;
	} params;
	params.LobbyInviteDelegate = LobbyInviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.AddLobbyInviteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyInviteDelegate            (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::AddLobbyInviteDelegate(const struct FScriptDelegate& LobbyInviteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.AddLobbyInviteDelegate");

	struct
	{
		struct FScriptDelegate         LobbyInviteDelegate;
	} params;
	params.LobbyInviteDelegate = LobbyInviteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.OnLobbyInvite
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FUniqueNetId            FriendId                       (CPF_Const, CPF_Parm, CPF_OutParm)
// bool                           bAccepted                      (CPF_Parm)

void UOnlineLobbyInterface::OnLobbyInvite(bool bAccepted, struct FUniqueLobbyId* LobbyId, struct FUniqueNetId* FriendId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.OnLobbyInvite");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		struct FUniqueNetId            FriendId;
		bool                           bAccepted;
	} params;
	params.bAccepted = bAccepted;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;
	if (FriendId != nullptr)
		*FriendId = params.FriendId;
}


// Function Engine.OnlineLobbyInterface.InviteToLobby
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FUniqueNetId            PlayerID                       (CPF_Const, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::InviteToLobby(struct FUniqueLobbyId* LobbyId, struct FUniqueNetId* PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.InviteToLobby");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		struct FUniqueNetId            PlayerID;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;
	if (PlayerID != nullptr)
		*PlayerID = params.PlayerID;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.SetLobbyOwner
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FUniqueNetId            NewOwner                       (CPF_Const, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::SetLobbyOwner(struct FUniqueLobbyId* LobbyId, struct FUniqueNetId* NewOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.SetLobbyOwner");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		struct FUniqueNetId            NewOwner;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;
	if (NewOwner != nullptr)
		*NewOwner = params.NewOwner;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.SetLobbyLock
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// bool                           bLocked                        (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::SetLobbyLock(bool bLocked, struct FUniqueLobbyId* LobbyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.SetLobbyLock");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		bool                           bLocked;
		bool                           ReturnValue;
	} params;
	params.bLocked = bLocked;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.SetLobbyServer
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FUniqueNetId            ServerUID                      (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 ServerIP                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::SetLobbyServer(const struct FString& ServerIP, struct FUniqueLobbyId* LobbyId, struct FUniqueNetId* ServerUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.SetLobbyServer");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		struct FUniqueNetId            ServerUID;
		struct FString                 ServerIP;
		bool                           ReturnValue;
	} params;
	params.ServerIP = ServerIP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;
	if (ServerUID != nullptr)
		*ServerUID = params.ServerUID;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.RemoveLobbySetting
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 Key                            (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::RemoveLobbySetting(const struct FString& Key, struct FUniqueLobbyId* LobbyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.RemoveLobbySetting");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		struct FString                 Key;
		bool                           ReturnValue;
	} params;
	params.Key = Key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.SetLobbySetting
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 Key                            (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Value                          (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::SetLobbySetting(const struct FString& Key, const struct FString& Value, struct FUniqueLobbyId* LobbyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.SetLobbySetting");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		struct FString                 Key;
		struct FString                 Value;
		bool                           ReturnValue;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.GetLobbyAdmin
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FUniqueNetId            AdminId                        (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::GetLobbyAdmin(struct FUniqueLobbyId* LobbyId, struct FUniqueNetId* AdminId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.GetLobbyAdmin");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		struct FUniqueNetId            AdminId;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;
	if (AdminId != nullptr)
		*AdminId = params.AdminId;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.ClearLobbyJoinGameDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyJoinGameDelegate          (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::ClearLobbyJoinGameDelegate(const struct FScriptDelegate& LobbyJoinGameDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.ClearLobbyJoinGameDelegate");

	struct
	{
		struct FScriptDelegate         LobbyJoinGameDelegate;
	} params;
	params.LobbyJoinGameDelegate = LobbyJoinGameDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.AddLobbyJoinGameDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyJoinGameDelegate          (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::AddLobbyJoinGameDelegate(const struct FScriptDelegate& LobbyJoinGameDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.AddLobbyJoinGameDelegate");

	struct
	{
		struct FScriptDelegate         LobbyJoinGameDelegate;
	} params;
	params.LobbyJoinGameDelegate = LobbyJoinGameDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.OnLobbyJoinGame
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// struct FActiveLobbyInfo        LobbyInfo                      (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FUniqueNetId            ServerID                       (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 ServerIP                       (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::OnLobbyJoinGame(const struct FString& ServerIP, struct FActiveLobbyInfo* LobbyInfo, struct FUniqueNetId* ServerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.OnLobbyJoinGame");

	struct
	{
		struct FActiveLobbyInfo        LobbyInfo;
		struct FUniqueNetId            ServerID;
		struct FString                 ServerIP;
	} params;
	params.ServerIP = ServerIP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyInfo != nullptr)
		*LobbyInfo = params.LobbyInfo;
	if (ServerID != nullptr)
		*ServerID = params.ServerID;
}


// Function Engine.OnlineLobbyInterface.ClearLobbyReceiveBinaryDataDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyReceiveBinaryDataDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::ClearLobbyReceiveBinaryDataDelegate(const struct FScriptDelegate& LobbyReceiveBinaryDataDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.ClearLobbyReceiveBinaryDataDelegate");

	struct
	{
		struct FScriptDelegate         LobbyReceiveBinaryDataDelegate;
	} params;
	params.LobbyReceiveBinaryDataDelegate = LobbyReceiveBinaryDataDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.AddLobbyReceiveBinaryDataDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyReceiveBinaryDataDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::AddLobbyReceiveBinaryDataDelegate(const struct FScriptDelegate& LobbyReceiveBinaryDataDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.AddLobbyReceiveBinaryDataDelegate");

	struct
	{
		struct FScriptDelegate         LobbyReceiveBinaryDataDelegate;
	} params;
	params.LobbyReceiveBinaryDataDelegate = LobbyReceiveBinaryDataDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.OnLobbyReceiveBinaryData
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// struct FActiveLobbyInfo        LobbyInfo                      (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            MemberIndex                    (CPF_Parm)
// TArray<unsigned char>          Data                           (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::OnLobbyReceiveBinaryData(int MemberIndex, struct FActiveLobbyInfo* LobbyInfo, TArray<unsigned char>* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.OnLobbyReceiveBinaryData");

	struct
	{
		struct FActiveLobbyInfo        LobbyInfo;
		int                            MemberIndex;
		TArray<unsigned char>          Data;
	} params;
	params.MemberIndex = MemberIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyInfo != nullptr)
		*LobbyInfo = params.LobbyInfo;
	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.OnlineLobbyInterface.SendLobbyBinaryData
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// TArray<unsigned char>          Data                           (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::SendLobbyBinaryData(struct FUniqueLobbyId* LobbyId, TArray<unsigned char>* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.SendLobbyBinaryData");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		TArray<unsigned char>          Data;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;
	if (Data != nullptr)
		*Data = params.Data;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.ClearLobbyReceiveMessageDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyReceiveMessageDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::ClearLobbyReceiveMessageDelegate(const struct FScriptDelegate& LobbyReceiveMessageDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.ClearLobbyReceiveMessageDelegate");

	struct
	{
		struct FScriptDelegate         LobbyReceiveMessageDelegate;
	} params;
	params.LobbyReceiveMessageDelegate = LobbyReceiveMessageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.AddLobbyReceiveMessageDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyReceiveMessageDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::AddLobbyReceiveMessageDelegate(const struct FScriptDelegate& LobbyReceiveMessageDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.AddLobbyReceiveMessageDelegate");

	struct
	{
		struct FScriptDelegate         LobbyReceiveMessageDelegate;
	} params;
	params.LobbyReceiveMessageDelegate = LobbyReceiveMessageDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.OnLobbyReceiveMessage
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// struct FActiveLobbyInfo        LobbyInfo                      (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            MemberIndex                    (CPF_Parm)
// struct FString                 Type                           (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Message                        (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::OnLobbyReceiveMessage(int MemberIndex, const struct FString& Type, const struct FString& Message, struct FActiveLobbyInfo* LobbyInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.OnLobbyReceiveMessage");

	struct
	{
		struct FActiveLobbyInfo        LobbyInfo;
		int                            MemberIndex;
		struct FString                 Type;
		struct FString                 Message;
	} params;
	params.MemberIndex = MemberIndex;
	params.Type = Type;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyInfo != nullptr)
		*LobbyInfo = params.LobbyInfo;
}


// Function Engine.OnlineLobbyInterface.SendLobbyMessage
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 Message                        (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::SendLobbyMessage(const struct FString& Message, struct FUniqueLobbyId* LobbyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.SendLobbyMessage");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		struct FString                 Message;
		bool                           ReturnValue;
	} params;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.ClearLobbyMemberStatusUpdateDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyMemberStatusUpdateDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::ClearLobbyMemberStatusUpdateDelegate(const struct FScriptDelegate& LobbyMemberStatusUpdateDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.ClearLobbyMemberStatusUpdateDelegate");

	struct
	{
		struct FScriptDelegate         LobbyMemberStatusUpdateDelegate;
	} params;
	params.LobbyMemberStatusUpdateDelegate = LobbyMemberStatusUpdateDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.AddLobbyMemberStatusUpdateDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyMemberStatusUpdateDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::AddLobbyMemberStatusUpdateDelegate(const struct FScriptDelegate& LobbyMemberStatusUpdateDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.AddLobbyMemberStatusUpdateDelegate");

	struct
	{
		struct FScriptDelegate         LobbyMemberStatusUpdateDelegate;
	} params;
	params.LobbyMemberStatusUpdateDelegate = LobbyMemberStatusUpdateDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.OnLobbyMemberStatusUpdate
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// struct FActiveLobbyInfo        LobbyInfo                      (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            MemberIndex                    (CPF_Parm)
// int                            InstigatorIndex                (CPF_Parm)
// struct FString                 Status                         (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::OnLobbyMemberStatusUpdate(int MemberIndex, int InstigatorIndex, const struct FString& Status, struct FActiveLobbyInfo* LobbyInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.OnLobbyMemberStatusUpdate");

	struct
	{
		struct FActiveLobbyInfo        LobbyInfo;
		int                            MemberIndex;
		int                            InstigatorIndex;
		struct FString                 Status;
	} params;
	params.MemberIndex = MemberIndex;
	params.InstigatorIndex = InstigatorIndex;
	params.Status = Status;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyInfo != nullptr)
		*LobbyInfo = params.LobbyInfo;
}


// Function Engine.OnlineLobbyInterface.ClearLobbyMemberSettingsUpdateDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyMemberSettingsUpdateDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::ClearLobbyMemberSettingsUpdateDelegate(const struct FScriptDelegate& LobbyMemberSettingsUpdateDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.ClearLobbyMemberSettingsUpdateDelegate");

	struct
	{
		struct FScriptDelegate         LobbyMemberSettingsUpdateDelegate;
	} params;
	params.LobbyMemberSettingsUpdateDelegate = LobbyMemberSettingsUpdateDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.AddLobbyMemberSettingsUpdateDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbyMemberSettingsUpdateDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::AddLobbyMemberSettingsUpdateDelegate(const struct FScriptDelegate& LobbyMemberSettingsUpdateDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.AddLobbyMemberSettingsUpdateDelegate");

	struct
	{
		struct FScriptDelegate         LobbyMemberSettingsUpdateDelegate;
	} params;
	params.LobbyMemberSettingsUpdateDelegate = LobbyMemberSettingsUpdateDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.OnLobbyMemberSettingsUpdate
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// struct FActiveLobbyInfo        LobbyInfo                      (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            MemberIndex                    (CPF_Parm)

void UOnlineLobbyInterface::OnLobbyMemberSettingsUpdate(int MemberIndex, struct FActiveLobbyInfo* LobbyInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.OnLobbyMemberSettingsUpdate");

	struct
	{
		struct FActiveLobbyInfo        LobbyInfo;
		int                            MemberIndex;
	} params;
	params.MemberIndex = MemberIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyInfo != nullptr)
		*LobbyInfo = params.LobbyInfo;
}


// Function Engine.OnlineLobbyInterface.ClearLobbySettingsUpdateDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbySettingsUpdateDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::ClearLobbySettingsUpdateDelegate(const struct FScriptDelegate& LobbySettingsUpdateDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.ClearLobbySettingsUpdateDelegate");

	struct
	{
		struct FScriptDelegate         LobbySettingsUpdateDelegate;
	} params;
	params.LobbySettingsUpdateDelegate = LobbySettingsUpdateDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.AddLobbySettingsUpdateDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LobbySettingsUpdateDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::AddLobbySettingsUpdateDelegate(const struct FScriptDelegate& LobbySettingsUpdateDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.AddLobbySettingsUpdateDelegate");

	struct
	{
		struct FScriptDelegate         LobbySettingsUpdateDelegate;
	} params;
	params.LobbySettingsUpdateDelegate = LobbySettingsUpdateDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.OnLobbySettingsUpdate
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// struct FActiveLobbyInfo        LobbyInfo                      (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::OnLobbySettingsUpdate(struct FActiveLobbyInfo* LobbyInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.OnLobbySettingsUpdate");

	struct
	{
		struct FActiveLobbyInfo        LobbyInfo;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyInfo != nullptr)
		*LobbyInfo = params.LobbyInfo;
}


// Function Engine.OnlineLobbyInterface.SetLobbyUserSetting
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 Key                            (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Value                          (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::SetLobbyUserSetting(const struct FString& Key, const struct FString& Value, struct FUniqueLobbyId* LobbyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.SetLobbyUserSetting");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		struct FString                 Key;
		struct FString                 Value;
		bool                           ReturnValue;
	} params;
	params.Key = Key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.LeaveLobby
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::LeaveLobby(struct FUniqueLobbyId* LobbyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.LeaveLobby");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.ClearJoinLobbyCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         JoinLobbyCompleteDelegate      (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::ClearJoinLobbyCompleteDelegate(const struct FScriptDelegate& JoinLobbyCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.ClearJoinLobbyCompleteDelegate");

	struct
	{
		struct FScriptDelegate         JoinLobbyCompleteDelegate;
	} params;
	params.JoinLobbyCompleteDelegate = JoinLobbyCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.AddJoinLobbyCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         JoinLobbyCompleteDelegate      (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::AddJoinLobbyCompleteDelegate(const struct FScriptDelegate& JoinLobbyCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.AddJoinLobbyCompleteDelegate");

	struct
	{
		struct FScriptDelegate         JoinLobbyCompleteDelegate;
	} params;
	params.JoinLobbyCompleteDelegate = JoinLobbyCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.OnJoinLobbyComplete
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FActiveLobbyInfo        LobbyInfo                      (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::OnJoinLobbyComplete(bool bWasSuccessful, const struct FString& Error, struct FActiveLobbyInfo* LobbyInfo, struct FUniqueLobbyId* LobbyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.OnJoinLobbyComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FActiveLobbyInfo        LobbyInfo;
		struct FUniqueLobbyId          LobbyId;
		struct FString                 Error;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyInfo != nullptr)
		*LobbyInfo = params.LobbyInfo;
	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;
}


// Function Engine.OnlineLobbyInterface.JoinLobby
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            LocalPlayerNum                 (CPF_Parm)
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::JoinLobby(int LocalPlayerNum, struct FUniqueLobbyId* LobbyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.JoinLobby");

	struct
	{
		int                            LocalPlayerNum;
		struct FUniqueLobbyId          LobbyId;
		bool                           ReturnValue;
	} params;
	params.LocalPlayerNum = LocalPlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.ClearFindLobbiesCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         FindLobbiesCompleteDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::ClearFindLobbiesCompleteDelegate(const struct FScriptDelegate& FindLobbiesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.ClearFindLobbiesCompleteDelegate");

	struct
	{
		struct FScriptDelegate         FindLobbiesCompleteDelegate;
	} params;
	params.FindLobbiesCompleteDelegate = FindLobbiesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.AddFindLobbiesCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         FindLobbiesCompleteDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::AddFindLobbiesCompleteDelegate(const struct FScriptDelegate& FindLobbiesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.AddFindLobbiesCompleteDelegate");

	struct
	{
		struct FScriptDelegate         FindLobbiesCompleteDelegate;
	} params;
	params.FindLobbiesCompleteDelegate = FindLobbiesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.OnFindLobbiesComplete
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// TArray<struct FBasicLobbyInfo> LobbyList                      (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::OnFindLobbiesComplete(bool bWasSuccessful, TArray<struct FBasicLobbyInfo>* LobbyList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.OnFindLobbiesComplete");

	struct
	{
		bool                           bWasSuccessful;
		TArray<struct FBasicLobbyInfo> LobbyList;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyList != nullptr)
		*LobbyList = params.LobbyList;
}


// Function Engine.OnlineLobbyInterface.UpdateFoundLobbies
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FUniqueLobbyId          LobbyId                        (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::UpdateFoundLobbies(const struct FUniqueLobbyId& LobbyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.UpdateFoundLobbies");

	struct
	{
		struct FUniqueLobbyId          LobbyId;
		bool                           ReturnValue;
	} params;
	params.LobbyId = LobbyId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.FindLobbies
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            MaxResults                     (CPF_OptionalParm, CPF_Parm)
// TArray<struct FLobbyFilter>    Filters                        (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// TArray<struct FLobbySortFilter> SortFilters                    (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// int                            MinSlots                       (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class ELobbyDistance> Distance                       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::FindLobbies(int MaxResults, TArray<struct FLobbyFilter> Filters, TArray<struct FLobbySortFilter> SortFilters, int MinSlots, TEnumAsByte<enum class ELobbyDistance> Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.FindLobbies");

	struct
	{
		int                            MaxResults;
		TArray<struct FLobbyFilter>    Filters;
		TArray<struct FLobbySortFilter> SortFilters;
		int                            MinSlots;
		TEnumAsByte<enum class ELobbyDistance> Distance;
		bool                           ReturnValue;
	} params;
	params.MaxResults = MaxResults;
	params.Filters = Filters;
	params.SortFilters = SortFilters;
	params.MinSlots = MinSlots;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineLobbyInterface.ClearCreateLobbyCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         CreateLobbyCompleteDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::ClearCreateLobbyCompleteDelegate(const struct FScriptDelegate& CreateLobbyCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.ClearCreateLobbyCompleteDelegate");

	struct
	{
		struct FScriptDelegate         CreateLobbyCompleteDelegate;
	} params;
	params.CreateLobbyCompleteDelegate = CreateLobbyCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.AddCreateLobbyCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         CreateLobbyCompleteDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::AddCreateLobbyCompleteDelegate(const struct FScriptDelegate& CreateLobbyCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.AddCreateLobbyCompleteDelegate");

	struct
	{
		struct FScriptDelegate         CreateLobbyCompleteDelegate;
	} params;
	params.CreateLobbyCompleteDelegate = CreateLobbyCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineLobbyInterface.OnCreateLobbyComplete
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FUniqueLobbyId          LobbyId                        (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void UOnlineLobbyInterface::OnCreateLobbyComplete(bool bWasSuccessful, const struct FString& Error, struct FUniqueLobbyId* LobbyId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.OnCreateLobbyComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FUniqueLobbyId          LobbyId;
		struct FString                 Error;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LobbyId != nullptr)
		*LobbyId = params.LobbyId;
}


// Function Engine.OnlineLobbyInterface.CreateLobby
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            LocalPlayerNum                 (CPF_Parm)
// int                            MaxPlayers                     (CPF_Parm)
// TEnumAsByte<enum class ELobbyVisibility> Type                           (CPF_OptionalParm, CPF_Parm)
// TArray<struct FLobbyMetaData>  InitialSettings                (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineLobbyInterface::CreateLobby(int LocalPlayerNum, int MaxPlayers, TEnumAsByte<enum class ELobbyVisibility> Type, TArray<struct FLobbyMetaData> InitialSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineLobbyInterface.CreateLobby");

	struct
	{
		int                            LocalPlayerNum;
		int                            MaxPlayers;
		TEnumAsByte<enum class ELobbyVisibility> Type;
		TArray<struct FLobbyMetaData>  InitialSettings;
		bool                           ReturnValue;
	} params;
	params.LocalPlayerNum = LocalPlayerNum;
	params.MaxPlayers = MaxPlayers;
	params.Type = Type;
	params.InitialSettings = InitialSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePurchaseInterface.ClearMicroTxnResponseDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ResponseMicroTxnDelegate       (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePurchaseInterface::ClearMicroTxnResponseDelegate(const struct FScriptDelegate& ResponseMicroTxnDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePurchaseInterface.ClearMicroTxnResponseDelegate");

	struct
	{
		struct FScriptDelegate         ResponseMicroTxnDelegate;
	} params;
	params.ResponseMicroTxnDelegate = ResponseMicroTxnDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePurchaseInterface.AddMicroTxnResponseDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ResponseMicroTxnDelegate       (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePurchaseInterface::AddMicroTxnResponseDelegate(const struct FScriptDelegate& ResponseMicroTxnDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePurchaseInterface.AddMicroTxnResponseDelegate");

	struct
	{
		struct FScriptDelegate         ResponseMicroTxnDelegate;
	} params;
	params.ResponseMicroTxnDelegate = ResponseMicroTxnDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePurchaseInterface.OnMicroTxnResponse
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bAuthorized                    (CPF_Parm)

void UOnlinePurchaseInterface::OnMicroTxnResponse(bool bAuthorized)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePurchaseInterface.OnMicroTxnResponse");

	struct
	{
		bool                           bAuthorized;
	} params;
	params.bAuthorized = bAuthorized;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePurchaseInterface.FormatCurrency
// (FUNC_Public)
// Parameters:
// struct FString                 Currency                       (CPF_Parm, CPF_NeedCtorLink)
// int                            Price                          (CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UOnlinePurchaseInterface::FormatCurrency(const struct FString& Currency, int Price)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePurchaseInterface.FormatCurrency");

	struct
	{
		struct FString                 Currency;
		int                            Price;
		struct FString                 ReturnValue;
	} params;
	params.Currency = Currency;
	params.Price = Price;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePurchaseInterface.GetAppPriceInfo
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            PlayerID                       (CPF_Const, CPF_Parm, CPF_OutParm)
// TArray<struct FName>           AppNames                       (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FScriptDelegate         Callback                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePurchaseInterface::GetAppPriceInfo(const struct FScriptDelegate& Callback, struct FUniqueNetId* PlayerID, TArray<struct FName>* AppNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePurchaseInterface.GetAppPriceInfo");

	struct
	{
		struct FUniqueNetId            PlayerID;
		TArray<struct FName>           AppNames;
		struct FScriptDelegate         Callback;
		bool                           ReturnValue;
	} params;
	params.Callback = Callback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlayerID != nullptr)
		*PlayerID = params.PlayerID;
	if (AppNames != nullptr)
		*AppNames = params.AppNames;

	return params.ReturnValue;
}


// Function Engine.OnlinePurchaseInterface.EventGetAppPriceInfoComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   AppName                        (CPF_Parm)
// struct FString                 Price                          (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 DiscountPrice                  (CPF_Parm, CPF_NeedCtorLink)
// int                            DiscountPercentage             (CPF_Parm)

void UOnlinePurchaseInterface::EventGetAppPriceInfoComplete(const struct FName& AppName, const struct FString& Price, const struct FString& DiscountPrice, int DiscountPercentage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePurchaseInterface.EventGetAppPriceInfoComplete");

	struct
	{
		struct FName                   AppName;
		struct FString                 Price;
		struct FString                 DiscountPrice;
		int                            DiscountPercentage;
	} params;
	params.AppName = AppName;
	params.Price = Price;
	params.DiscountPrice = DiscountPrice;
	params.DiscountPercentage = DiscountPercentage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.ClearGamePlayersChangedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         GamePlayersChangedDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearGamePlayersChangedDelegate(const struct FScriptDelegate& GamePlayersChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearGamePlayersChangedDelegate");

	struct
	{
		struct FScriptDelegate         GamePlayersChangedDelegate;
	} params;
	params.GamePlayersChangedDelegate = GamePlayersChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddGamePlayersChangedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         GamePlayersChangedDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddGamePlayersChangedDelegate(const struct FScriptDelegate& GamePlayersChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddGamePlayersChangedDelegate");

	struct
	{
		struct FScriptDelegate         GamePlayersChangedDelegate;
	} params;
	params.GamePlayersChangedDelegate = GamePlayersChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnGamePlayersChanged
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// TArray<struct FUniqueNetId>    Players                        (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::OnGamePlayersChanged(const struct FName& SessionName, TArray<struct FUniqueNetId> Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnGamePlayersChanged");

	struct
	{
		struct FName                   SessionName;
		TArray<struct FUniqueNetId>    Players;
	} params;
	params.SessionName = SessionName;
	params.Players = Players;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.ClearJoinMigratedOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         JoinMigratedOnlineGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearJoinMigratedOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinMigratedOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearJoinMigratedOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         JoinMigratedOnlineGameCompleteDelegate;
	} params;
	params.JoinMigratedOnlineGameCompleteDelegate = JoinMigratedOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddJoinMigratedOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         JoinMigratedOnlineGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddJoinMigratedOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinMigratedOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddJoinMigratedOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         JoinMigratedOnlineGameCompleteDelegate;
	} params;
	params.JoinMigratedOnlineGameCompleteDelegate = JoinMigratedOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnJoinMigratedOnlineGameComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineGameInterface::OnJoinMigratedOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnJoinMigratedOnlineGameComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.JoinMigratedOnlineGame
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  PlayerNum                      (CPF_Parm)
// struct FName                   SessionName                    (CPF_Parm)
// struct FOnlineGameSearchResult DesiredGame                    (CPF_Const, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::JoinMigratedOnlineGame(unsigned char PlayerNum, const struct FName& SessionName, struct FOnlineGameSearchResult* DesiredGame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.JoinMigratedOnlineGame");

	struct
	{
		unsigned char                  PlayerNum;
		struct FName                   SessionName;
		struct FOnlineGameSearchResult DesiredGame;
		bool                           ReturnValue;
	} params;
	params.PlayerNum = PlayerNum;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DesiredGame != nullptr)
		*DesiredGame = params.DesiredGame;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearMigrateOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         MigrateOnlineGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearMigrateOnlineGameCompleteDelegate(const struct FScriptDelegate& MigrateOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearMigrateOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         MigrateOnlineGameCompleteDelegate;
	} params;
	params.MigrateOnlineGameCompleteDelegate = MigrateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddMigrateOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         MigrateOnlineGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddMigrateOnlineGameCompleteDelegate(const struct FScriptDelegate& MigrateOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddMigrateOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         MigrateOnlineGameCompleteDelegate;
	} params;
	params.MigrateOnlineGameCompleteDelegate = MigrateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnMigrateOnlineGameComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineGameInterface::OnMigrateOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnMigrateOnlineGameComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.MigrateOnlineGame
// (FUNC_Public)
// Parameters:
// unsigned char                  HostingPlayerNum               (CPF_Parm)
// struct FName                   SessionName                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::MigrateOnlineGame(unsigned char HostingPlayerNum, const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.MigrateOnlineGame");

	struct
	{
		unsigned char                  HostingPlayerNum;
		struct FName                   SessionName;
		bool                           ReturnValue;
	} params;
	params.HostingPlayerNum = HostingPlayerNum;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearRecalculateSkillRatingCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         RecalculateSkillRatingGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearRecalculateSkillRatingCompleteDelegate(const struct FScriptDelegate& RecalculateSkillRatingGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearRecalculateSkillRatingCompleteDelegate");

	struct
	{
		struct FScriptDelegate         RecalculateSkillRatingGameCompleteDelegate;
	} params;
	params.RecalculateSkillRatingGameCompleteDelegate = RecalculateSkillRatingGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddRecalculateSkillRatingCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         RecalculateSkillRatingCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddRecalculateSkillRatingCompleteDelegate(const struct FScriptDelegate& RecalculateSkillRatingCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddRecalculateSkillRatingCompleteDelegate");

	struct
	{
		struct FScriptDelegate         RecalculateSkillRatingCompleteDelegate;
	} params;
	params.RecalculateSkillRatingCompleteDelegate = RecalculateSkillRatingCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnRecalculateSkillRatingComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineGameInterface::OnRecalculateSkillRatingComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnRecalculateSkillRatingComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.RecalculateSkillRating
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// TArray<struct FUniqueNetId>    Players                        (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::RecalculateSkillRating(const struct FName& SessionName, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.RecalculateSkillRating");

	struct
	{
		struct FName                   SessionName;
		TArray<struct FUniqueNetId>    Players;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.AcceptGameInvite
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FName                   SessionName                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::AcceptGameInvite(unsigned char LocalUserNum, const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AcceptGameInvite");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FName                   SessionName;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearGameInviteAcceptedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         GameInviteAcceptedDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearGameInviteAcceptedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& GameInviteAcceptedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearGameInviteAcceptedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         GameInviteAcceptedDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.GameInviteAcceptedDelegate = GameInviteAcceptedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddGameInviteAcceptedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         GameInviteAcceptedDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddGameInviteAcceptedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& GameInviteAcceptedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddGameInviteAcceptedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         GameInviteAcceptedDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.GameInviteAcceptedDelegate = GameInviteAcceptedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnGameInviteAccepted
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// struct FOnlineGameSearchResult InviteResult                   (CPF_Const, CPF_Parm, CPF_OutParm)
// struct FString                 ErrorString                    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::OnGameInviteAccepted(const struct FString& ErrorString, struct FOnlineGameSearchResult* InviteResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnGameInviteAccepted");

	struct
	{
		struct FOnlineGameSearchResult InviteResult;
		struct FString                 ErrorString;
	} params;
	params.ErrorString = ErrorString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InviteResult != nullptr)
		*InviteResult = params.InviteResult;
}


// Function Engine.OnlineGameInterface.GetArbitratedPlayers
// (FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// TArray<struct FOnlineArbitrationRegistrant> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

TArray<struct FOnlineArbitrationRegistrant> UOnlineGameInterface::GetArbitratedPlayers(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetArbitratedPlayers");

	struct
	{
		struct FName                   SessionName;
		TArray<struct FOnlineArbitrationRegistrant> ReturnValue;
	} params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearArbitrationRegistrationCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearArbitrationRegistrationCompleteDelegate(const struct FScriptDelegate& ArbitrationRegistrationCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearArbitrationRegistrationCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate;
	} params;
	params.ArbitrationRegistrationCompleteDelegate = ArbitrationRegistrationCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddArbitrationRegistrationCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddArbitrationRegistrationCompleteDelegate(const struct FScriptDelegate& ArbitrationRegistrationCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddArbitrationRegistrationCompleteDelegate");

	struct
	{
		struct FScriptDelegate         ArbitrationRegistrationCompleteDelegate;
	} params;
	params.ArbitrationRegistrationCompleteDelegate = ArbitrationRegistrationCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnArbitrationRegistrationComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineGameInterface::OnArbitrationRegistrationComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnArbitrationRegistrationComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.RegisterForArbitration
// (FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::RegisterForArbitration(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.RegisterForArbitration");

	struct
	{
		struct FName                   SessionName;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearEndOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         EndOnlineGameCompleteDelegate  (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearEndOnlineGameCompleteDelegate(const struct FScriptDelegate& EndOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearEndOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         EndOnlineGameCompleteDelegate;
	} params;
	params.EndOnlineGameCompleteDelegate = EndOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddEndOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         EndOnlineGameCompleteDelegate  (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddEndOnlineGameCompleteDelegate(const struct FScriptDelegate& EndOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddEndOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         EndOnlineGameCompleteDelegate;
	} params;
	params.EndOnlineGameCompleteDelegate = EndOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnEndOnlineGameComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineGameInterface::OnEndOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnEndOnlineGameComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.EndOnlineGame
// (FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::EndOnlineGame(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.EndOnlineGame");

	struct
	{
		struct FName                   SessionName;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearStartOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         StartOnlineGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearStartOnlineGameCompleteDelegate(const struct FScriptDelegate& StartOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearStartOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         StartOnlineGameCompleteDelegate;
	} params;
	params.StartOnlineGameCompleteDelegate = StartOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddStartOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         StartOnlineGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddStartOnlineGameCompleteDelegate(const struct FScriptDelegate& StartOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddStartOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         StartOnlineGameCompleteDelegate;
	} params;
	params.StartOnlineGameCompleteDelegate = StartOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnStartOnlineGameComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineGameInterface::OnStartOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnStartOnlineGameComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.StartOnlineGame
// (FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::StartOnlineGame(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.StartOnlineGame");

	struct
	{
		struct FName                   SessionName;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearUnregisterPlayerCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         UnregisterPlayerCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearUnregisterPlayerCompleteDelegate(const struct FScriptDelegate& UnregisterPlayerCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearUnregisterPlayerCompleteDelegate");

	struct
	{
		struct FScriptDelegate         UnregisterPlayerCompleteDelegate;
	} params;
	params.UnregisterPlayerCompleteDelegate = UnregisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddUnregisterPlayerCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         UnregisterPlayerCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddUnregisterPlayerCompleteDelegate(const struct FScriptDelegate& UnregisterPlayerCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddUnregisterPlayerCompleteDelegate");

	struct
	{
		struct FScriptDelegate         UnregisterPlayerCompleteDelegate;
	} params;
	params.UnregisterPlayerCompleteDelegate = UnregisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnUnregisterPlayerComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineGameInterface::OnUnregisterPlayerComplete(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnUnregisterPlayerComplete");

	struct
	{
		struct FName                   SessionName;
		struct FUniqueNetId            PlayerID;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.UnregisterPlayers
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// TArray<struct FUniqueNetId>    Players                        (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::UnregisterPlayers(const struct FName& SessionName, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.UnregisterPlayers");

	struct
	{
		struct FName                   SessionName;
		TArray<struct FUniqueNetId>    Players;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.UnregisterPlayer
// (FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::UnregisterPlayer(const struct FName& SessionName, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.UnregisterPlayer");

	struct
	{
		struct FName                   SessionName;
		struct FUniqueNetId            PlayerID;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearRegisterPlayerCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         RegisterPlayerCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearRegisterPlayerCompleteDelegate(const struct FScriptDelegate& RegisterPlayerCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearRegisterPlayerCompleteDelegate");

	struct
	{
		struct FScriptDelegate         RegisterPlayerCompleteDelegate;
	} params;
	params.RegisterPlayerCompleteDelegate = RegisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddRegisterPlayerCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         RegisterPlayerCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddRegisterPlayerCompleteDelegate(const struct FScriptDelegate& RegisterPlayerCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddRegisterPlayerCompleteDelegate");

	struct
	{
		struct FScriptDelegate         RegisterPlayerCompleteDelegate;
	} params;
	params.RegisterPlayerCompleteDelegate = RegisterPlayerCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnRegisterPlayerComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineGameInterface::OnRegisterPlayerComplete(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnRegisterPlayerComplete");

	struct
	{
		struct FName                   SessionName;
		struct FUniqueNetId            PlayerID;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.RegisterPlayers
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// TArray<struct FUniqueNetId>    Players                        (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::RegisterPlayers(const struct FName& SessionName, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.RegisterPlayers");

	struct
	{
		struct FName                   SessionName;
		TArray<struct FUniqueNetId>    Players;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.RegisterPlayer
// (FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           bWasInvited                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::RegisterPlayer(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasInvited)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.RegisterPlayer");

	struct
	{
		struct FName                   SessionName;
		struct FUniqueNetId            PlayerID;
		bool                           bWasInvited;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;
	params.PlayerID = PlayerID;
	params.bWasInvited = bWasInvited;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.GetResolvedConnectString
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// struct FString                 ConnectInfo                    (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::GetResolvedConnectString(const struct FName& SessionName, struct FString* ConnectInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetResolvedConnectString");

	struct
	{
		struct FName                   SessionName;
		struct FString                 ConnectInfo;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ConnectInfo != nullptr)
		*ConnectInfo = params.ConnectInfo;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearJoinOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         JoinOnlineGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearJoinOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearJoinOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         JoinOnlineGameCompleteDelegate;
	} params;
	params.JoinOnlineGameCompleteDelegate = JoinOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddJoinOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         JoinOnlineGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddJoinOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddJoinOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         JoinOnlineGameCompleteDelegate;
	} params;
	params.JoinOnlineGameCompleteDelegate = JoinOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnJoinOnlineGameComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineGameInterface::OnJoinOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnJoinOnlineGameComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.JoinOnlineGame
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  PlayerNum                      (CPF_Parm)
// struct FName                   SessionName                    (CPF_Parm)
// struct FOnlineGameSearchResult DesiredGame                    (CPF_Const, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::JoinOnlineGame(unsigned char PlayerNum, const struct FName& SessionName, struct FOnlineGameSearchResult* DesiredGame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.JoinOnlineGame");

	struct
	{
		unsigned char                  PlayerNum;
		struct FName                   SessionName;
		struct FOnlineGameSearchResult DesiredGame;
		bool                           ReturnValue;
	} params;
	params.PlayerNum = PlayerNum;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DesiredGame != nullptr)
		*DesiredGame = params.DesiredGame;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.QueryNonAdvertisedData
// (FUNC_Public)
// Parameters:
// int                            StartAt                        (CPF_Parm)
// int                            NumberToQuery                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::QueryNonAdvertisedData(int StartAt, int NumberToQuery)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.QueryNonAdvertisedData");

	struct
	{
		int                            StartAt;
		int                            NumberToQuery;
		bool                           ReturnValue;
	} params;
	params.StartAt = StartAt;
	params.NumberToQuery = NumberToQuery;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.FreeSearchResults
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UOnlineGameSearch*       Search                         (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::FreeSearchResults(class UOnlineGameSearch* Search)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.FreeSearchResults");

	struct
	{
		class UOnlineGameSearch*       Search;
		bool                           ReturnValue;
	} params;
	params.Search = Search;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.GetGameSearch
// (FUNC_Public)
// Parameters:
// class UOnlineGameSearch*       ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UOnlineGameSearch* UOnlineGameInterface::GetGameSearch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetGameSearch");

	struct
	{
		class UOnlineGameSearch*       ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.BindPlatformSpecificSessionToSearch
// (FUNC_Public)
// Parameters:
// unsigned char                  SearchingPlayerNum             (CPF_Parm)
// class UOnlineGameSearch*       SearchSettings                 (CPF_Parm)
// unsigned char                  PlatformSpecificInfo           (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::BindPlatformSpecificSessionToSearch(unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, unsigned char PlatformSpecificInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.BindPlatformSpecificSessionToSearch");

	struct
	{
		unsigned char                  SearchingPlayerNum;
		class UOnlineGameSearch*       SearchSettings;
		unsigned char                  PlatformSpecificInfo;
		bool                           ReturnValue;
	} params;
	params.SearchingPlayerNum = SearchingPlayerNum;
	params.SearchSettings = SearchSettings;
	params.PlatformSpecificInfo = PlatformSpecificInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfoBySessionName
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// unsigned char                  PlatformSpecificInfo           (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::ReadPlatformSpecificSessionInfoBySessionName(const struct FName& SessionName, unsigned char* PlatformSpecificInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfoBySessionName");

	struct
	{
		struct FName                   SessionName;
		unsigned char                  PlatformSpecificInfo;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PlatformSpecificInfo != nullptr)
		*PlatformSpecificInfo = params.PlatformSpecificInfo;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfo
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FOnlineGameSearchResult DesiredGame                    (CPF_Const, CPF_Parm, CPF_OutParm)
// unsigned char                  PlatformSpecificInfo           (CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::ReadPlatformSpecificSessionInfo(struct FOnlineGameSearchResult* DesiredGame, unsigned char* PlatformSpecificInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ReadPlatformSpecificSessionInfo");

	struct
	{
		struct FOnlineGameSearchResult DesiredGame;
		unsigned char                  PlatformSpecificInfo;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DesiredGame != nullptr)
		*DesiredGame = params.DesiredGame;
	if (PlatformSpecificInfo != nullptr)
		*PlatformSpecificInfo = params.PlatformSpecificInfo;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearQosStatusChangedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         QosStatusChangedDelegate       (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearQosStatusChangedDelegate(const struct FScriptDelegate& QosStatusChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearQosStatusChangedDelegate");

	struct
	{
		struct FScriptDelegate         QosStatusChangedDelegate;
	} params;
	params.QosStatusChangedDelegate = QosStatusChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddQosStatusChangedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         QosStatusChangedDelegate       (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddQosStatusChangedDelegate(const struct FScriptDelegate& QosStatusChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddQosStatusChangedDelegate");

	struct
	{
		struct FScriptDelegate         QosStatusChangedDelegate;
	} params;
	params.QosStatusChangedDelegate = QosStatusChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnQosStatusChanged
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// int                            NumComplete                    (CPF_Parm)
// int                            NumTotal                       (CPF_Parm)

void UOnlineGameInterface::OnQosStatusChanged(int NumComplete, int NumTotal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnQosStatusChanged");

	struct
	{
		int                            NumComplete;
		int                            NumTotal;
	} params;
	params.NumComplete = NumComplete;
	params.NumTotal = NumTotal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.ClearCancelFindOnlineGamesCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearCancelFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& CancelFindOnlineGamesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearCancelFindOnlineGamesCompleteDelegate");

	struct
	{
		struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate;
	} params;
	params.CancelFindOnlineGamesCompleteDelegate = CancelFindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddCancelFindOnlineGamesCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddCancelFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& CancelFindOnlineGamesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddCancelFindOnlineGamesCompleteDelegate");

	struct
	{
		struct FScriptDelegate         CancelFindOnlineGamesCompleteDelegate;
	} params;
	params.CancelFindOnlineGamesCompleteDelegate = CancelFindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnCancelFindOnlineGamesComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineGameInterface::OnCancelFindOnlineGamesComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnCancelFindOnlineGamesComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.CancelFindOnlineGames
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::CancelFindOnlineGames()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.CancelFindOnlineGames");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearFindOnlineGamesCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         FindOnlineGamesCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& FindOnlineGamesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearFindOnlineGamesCompleteDelegate");

	struct
	{
		struct FScriptDelegate         FindOnlineGamesCompleteDelegate;
	} params;
	params.FindOnlineGamesCompleteDelegate = FindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddFindOnlineGamesCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         FindOnlineGamesCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& FindOnlineGamesCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddFindOnlineGamesCompleteDelegate");

	struct
	{
		struct FScriptDelegate         FindOnlineGamesCompleteDelegate;
	} params;
	params.FindOnlineGamesCompleteDelegate = FindOnlineGamesCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnFindOnlineGamesComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineGameInterface::OnFindOnlineGamesComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnFindOnlineGamesComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.FindOnlineGames
// (FUNC_Public)
// Parameters:
// unsigned char                  SearchingPlayerNum             (CPF_Parm)
// class UOnlineGameSearch*       SearchSettings                 (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::FindOnlineGames(unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.FindOnlineGames");

	struct
	{
		unsigned char                  SearchingPlayerNum;
		class UOnlineGameSearch*       SearchSettings;
		bool                           ReturnValue;
	} params;
	params.SearchingPlayerNum = SearchingPlayerNum;
	params.SearchSettings = SearchSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearDestroyOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         DestroyOnlineGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearDestroyOnlineGameCompleteDelegate(const struct FScriptDelegate& DestroyOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearDestroyOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         DestroyOnlineGameCompleteDelegate;
	} params;
	params.DestroyOnlineGameCompleteDelegate = DestroyOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddDestroyOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         DestroyOnlineGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddDestroyOnlineGameCompleteDelegate(const struct FScriptDelegate& DestroyOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddDestroyOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         DestroyOnlineGameCompleteDelegate;
	} params;
	params.DestroyOnlineGameCompleteDelegate = DestroyOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnDestroyOnlineGameComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineGameInterface::OnDestroyOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnDestroyOnlineGameComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.DestroyOnlineGame
// (FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::DestroyOnlineGame(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.DestroyOnlineGame");

	struct
	{
		struct FName                   SessionName;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.GetGameSettings
// (FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// class UOnlineGameSettings*     ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UOnlineGameSettings* UOnlineGameInterface::GetGameSettings(const struct FName& SessionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.GetGameSettings");

	struct
	{
		struct FName                   SessionName;
		class UOnlineGameSettings*     ReturnValue;
	} params;
	params.SessionName = SessionName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearUpdateOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         UpdateOnlineGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearUpdateOnlineGameCompleteDelegate(const struct FScriptDelegate& UpdateOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearUpdateOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         UpdateOnlineGameCompleteDelegate;
	} params;
	params.UpdateOnlineGameCompleteDelegate = UpdateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddUpdateOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         UpdateOnlineGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddUpdateOnlineGameCompleteDelegate(const struct FScriptDelegate& UpdateOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddUpdateOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         UpdateOnlineGameCompleteDelegate;
	} params;
	params.UpdateOnlineGameCompleteDelegate = UpdateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnUpdateOnlineGameComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineGameInterface::OnUpdateOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnUpdateOnlineGameComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.UpdateOnlineGame
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// class UOnlineGameSettings*     UpdatedGameSettings            (CPF_Parm)
// bool                           bShouldRefreshOnlineData       (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::UpdateOnlineGame(const struct FName& SessionName, class UOnlineGameSettings* UpdatedGameSettings, bool bShouldRefreshOnlineData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.UpdateOnlineGame");

	struct
	{
		struct FName                   SessionName;
		class UOnlineGameSettings*     UpdatedGameSettings;
		bool                           bShouldRefreshOnlineData;
		bool                           ReturnValue;
	} params;
	params.SessionName = SessionName;
	params.UpdatedGameSettings = UpdatedGameSettings;
	params.bShouldRefreshOnlineData = bShouldRefreshOnlineData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.ClearCreateOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         CreateOnlineGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearCreateOnlineGameCompleteDelegate(const struct FScriptDelegate& CreateOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearCreateOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         CreateOnlineGameCompleteDelegate;
	} params;
	params.CreateOnlineGameCompleteDelegate = CreateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddCreateOnlineGameCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         CreateOnlineGameCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddCreateOnlineGameCompleteDelegate(const struct FScriptDelegate& CreateOnlineGameCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddCreateOnlineGameCompleteDelegate");

	struct
	{
		struct FScriptDelegate         CreateOnlineGameCompleteDelegate;
	} params;
	params.CreateOnlineGameCompleteDelegate = CreateOnlineGameCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.OnCreateOnlineGameComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlineGameInterface::OnCreateOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.OnCreateOnlineGameComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.CreateOnlineGame
// (FUNC_Public)
// Parameters:
// unsigned char                  HostingPlayerNum               (CPF_Parm)
// struct FName                   SessionName                    (CPF_Parm)
// class UOnlineGameSettings*     NewGameSettings                (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineGameInterface::CreateOnlineGame(unsigned char HostingPlayerNum, const struct FName& SessionName, class UOnlineGameSettings* NewGameSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.CreateOnlineGame");

	struct
	{
		unsigned char                  HostingPlayerNum;
		struct FName                   SessionName;
		class UOnlineGameSettings*     NewGameSettings;
		bool                           ReturnValue;
	} params;
	params.HostingPlayerNum = HostingPlayerNum;
	params.SessionName = SessionName;
	params.NewGameSettings = NewGameSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineGameInterface.SetFriendJoinLocation
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            JoinablePlayerID               (CPF_Parm)
// struct FString                 ServerAddress                  (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class ELobbyVisibility> Visibility                     (CPF_Parm)

void UOnlineGameInterface::SetFriendJoinLocation(const struct FUniqueNetId& JoinablePlayerID, const struct FString& ServerAddress, TEnumAsByte<enum class ELobbyVisibility> Visibility)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.SetFriendJoinLocation");

	struct
	{
		struct FUniqueNetId            JoinablePlayerID;
		struct FString                 ServerAddress;
		TEnumAsByte<enum class ELobbyVisibility> Visibility;
	} params;
	params.JoinablePlayerID = JoinablePlayerID;
	params.ServerAddress = ServerAddress;
	params.Visibility = Visibility;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.ClearReportMatchmakingInfoDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         OldDelegate                    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::ClearReportMatchmakingInfoDelegate(const struct FScriptDelegate& OldDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.ClearReportMatchmakingInfoDelegate");

	struct
	{
		struct FScriptDelegate         OldDelegate;
	} params;
	params.OldDelegate = OldDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.AddReportMatchmakingInfoDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         NewDelegate                    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::AddReportMatchmakingInfoDelegate(const struct FScriptDelegate& NewDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.AddReportMatchmakingInfoDelegate");

	struct
	{
		struct FScriptDelegate         NewDelegate;
	} params;
	params.NewDelegate = NewDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineGameInterface.EventReportMatchmakingInfo
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FString                 NewInfo                        (CPF_Parm, CPF_NeedCtorLink)

void UOnlineGameInterface::EventReportMatchmakingInfo(const struct FString& NewInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineGameInterface.EventReportMatchmakingInfo");

	struct
	{
		struct FString                 NewInfo;
	} params;
	params.NewInfo = NewInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.UpdateSessionStatusFromPlayers
// (FUNC_Public)
// Parameters:
// int                            CurrentPlayerCount             (CPF_Parm)
// int                            numBotPlayers                  (CPF_Parm)

void UOnlineSystemInterface::UpdateSessionStatusFromPlayers(int CurrentPlayerCount, int numBotPlayers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.UpdateSessionStatusFromPlayers");

	struct
	{
		int                            CurrentPlayerCount;
		int                            numBotPlayers;
	} params;
	params.CurrentPlayerCount = CurrentPlayerCount;
	params.numBotPlayers = numBotPlayers;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.HandleBootMessage
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSystemInterface::HandleBootMessage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.HandleBootMessage");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.ClearErrorDialogClosedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearErrorDialogClosedDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearErrorDialogClosedDelegate");

	struct
	{
		struct FScriptDelegate         InDelegate;
	} params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddErrorDialogClosedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::AddErrorDialogClosedDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddErrorDialogClosedDelegate");

	struct
	{
		struct FScriptDelegate         InDelegate;
	} params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnErrorDialogClosed
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// int                            LocalUserNum                   (CPF_Parm)

void UOnlineSystemInterface::OnErrorDialogClosed(int LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnErrorDialogClosed");

	struct
	{
		int                            LocalUserNum;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.ClearCommerceDialogClosedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearCommerceDialogClosedDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearCommerceDialogClosedDelegate");

	struct
	{
		struct FScriptDelegate         InDelegate;
	} params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddCommerceDialogClosedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::AddCommerceDialogClosedDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddCommerceDialogClosedDelegate");

	struct
	{
		struct FScriptDelegate         InDelegate;
	} params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnCommerceDialogClosed
// (FUNC_Public, FUNC_Delegate)

void UOnlineSystemInterface::OnCommerceDialogClosed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnCommerceDialogClosed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.ClearCloseKickPlayerDialogDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearCloseKickPlayerDialogDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearCloseKickPlayerDialogDelegate");

	struct
	{
		struct FScriptDelegate         InDelegate;
	} params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddCloseKickPlayerDialogDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::AddCloseKickPlayerDialogDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddCloseKickPlayerDialogDelegate");

	struct
	{
		struct FScriptDelegate         InDelegate;
	} params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnCloseKickPlayerDialog
// (FUNC_Public, FUNC_Delegate)

void UOnlineSystemInterface::OnCloseKickPlayerDialog()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnCloseKickPlayerDialog");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.ClearTrialStatusChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearTrialStatusChangeDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearTrialStatusChangeDelegate");

	struct
	{
		struct FScriptDelegate         InDelegate;
	} params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddTrialStatusChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::AddTrialStatusChangeDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddTrialStatusChangeDelegate");

	struct
	{
		struct FScriptDelegate         InDelegate;
	} params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.IsTrialVersion
// (FUNC_Simulated, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSystemInterface::IsTrialVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.IsTrialVersion");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.OnTrialStatusChange
// (FUNC_Public, FUNC_Delegate)

void UOnlineSystemInterface::OnTrialStatusChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnTrialStatusChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.ClearUnlockedDLCChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearUnlockedDLCChangeDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearUnlockedDLCChangeDelegate");

	struct
	{
		struct FScriptDelegate         InDelegate;
	} params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddUnlockedDLCChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         InDelegate                     (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::AddUnlockedDLCChangeDelegate(const struct FScriptDelegate& InDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddUnlockedDLCChangeDelegate");

	struct
	{
		struct FScriptDelegate         InDelegate;
	} params;
	params.InDelegate = InDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.GetUnlockedDLC
// (FUNC_Public)
// Parameters:
// TArray<struct FName>           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

TArray<struct FName> UOnlineSystemInterface::GetUnlockedDLC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.GetUnlockedDLC");

	struct
	{
		TArray<struct FName>           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.OnUnlockedDLCChange
// (FUNC_Public, FUNC_Delegate)

void UOnlineSystemInterface::OnUnlockedDLCChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnUnlockedDLCChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.GetOverlayEnabled
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSystemInterface::GetOverlayEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.GetOverlayEnabled");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.GetDLCPurchaseTime
// (FUNC_Public)
// Parameters:
// struct FName                   AppName                        (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UOnlineSystemInterface::GetDLCPurchaseTime(const struct FName& AppName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.GetDLCPurchaseTime");

	struct
	{
		struct FName                   AppName;
		int                            ReturnValue;
	} params;
	params.AppName = AppName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.GetLocale
// (FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UOnlineSystemInterface::GetLocale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.GetLocale");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         StorageDeviceChangeDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearStorageDeviceChangeDelegate");

	struct
	{
		struct FScriptDelegate         StorageDeviceChangeDelegate;
	} params;
	params.StorageDeviceChangeDelegate = StorageDeviceChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         StorageDeviceChangeDelegate    (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::AddStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddStorageDeviceChangeDelegate");

	struct
	{
		struct FScriptDelegate         StorageDeviceChangeDelegate;
	} params;
	params.StorageDeviceChangeDelegate = StorageDeviceChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnStorageDeviceChange
// (FUNC_Public, FUNC_Delegate)

void UOnlineSystemInterface::OnStorageDeviceChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnStorageDeviceChange");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.GetNATType
// (FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ENATType> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class ENATType> UOnlineSystemInterface::GetNATType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.GetNATType");

	struct
	{
		TEnumAsByte<enum class ENATType> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ConnectionStatusDelegate       (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearConnectionStatusChangeDelegate");

	struct
	{
		struct FScriptDelegate         ConnectionStatusDelegate;
	} params;
	params.ConnectionStatusDelegate = ConnectionStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ConnectionStatusDelegate       (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::AddConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddConnectionStatusChangeDelegate");

	struct
	{
		struct FScriptDelegate         ConnectionStatusDelegate;
	} params;
	params.ConnectionStatusDelegate = ConnectionStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnConnectionStatusChange
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// TEnumAsByte<enum class EOnlineServerConnectionStatus> ConnectionStatus               (CPF_Parm)

void UOnlineSystemInterface::OnConnectionStatusChange(TEnumAsByte<enum class EOnlineServerConnectionStatus> ConnectionStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnConnectionStatusChange");

	struct
	{
		TEnumAsByte<enum class EOnlineServerConnectionStatus> ConnectionStatus;
	} params;
	params.ConnectionStatus = ConnectionStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.GetCurrentConnectionStatus
// (FUNC_Public)
// Parameters:
// TEnumAsByte<enum class EOnlineServerConnectionStatus> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EOnlineServerConnectionStatus> UOnlineSystemInterface::GetCurrentConnectionStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.GetCurrentConnectionStatus");

	struct
	{
		TEnumAsByte<enum class EOnlineServerConnectionStatus> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.AnyPlayerChatRestricted
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSystemInterface::AnyPlayerChatRestricted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AnyPlayerChatRestricted");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.InitializeTrophyAPI
// (FUNC_Public)

void UOnlineSystemInterface::InitializeTrophyAPI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.InitializeTrophyAPI");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OpenStoreForItems
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TArray<struct FString>         Targets                        (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::OpenStoreForItems(unsigned char LocalUserNum, TArray<struct FString> Targets)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OpenStoreForItems");

	struct
	{
		unsigned char                  LocalUserNum;
		TArray<struct FString>         Targets;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.Targets = Targets;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OpenStoreForDLC
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FName                   DLC                            (CPF_Parm)

void UOnlineSystemInterface::OpenStoreForDLC(unsigned char LocalUserNum, const struct FName& DLC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OpenStoreForDLC");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FName                   DLC;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.DLC = DLC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OpenErrorDialog
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EPS4ErrorDialog> ErrorCode                      (CPF_Parm)

void UOnlineSystemInterface::OpenErrorDialog(unsigned char LocalUserNum, TEnumAsByte<enum class EPS4ErrorDialog> ErrorCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OpenErrorDialog");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EPS4ErrorDialog> ErrorCode;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ErrorCode = ErrorCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OpenPS4DisplayMode
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EPS4DisplayMode> DisplayMode                    (CPF_Parm)
// TArray<struct FString>         Targets                        (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// int                            ServiceLabel                   (CPF_OptionalParm, CPF_Parm)

void UOnlineSystemInterface::OpenPS4DisplayMode(unsigned char LocalUserNum, TEnumAsByte<enum class EPS4DisplayMode> DisplayMode, TArray<struct FString> Targets, int ServiceLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OpenPS4DisplayMode");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EPS4DisplayMode> DisplayMode;
		TArray<struct FString>         Targets;
		int                            ServiceLabel;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.DisplayMode = DisplayMode;
	params.Targets = Targets;
	params.ServiceLabel = ServiceLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.ResetControllerColor
// (FUNC_Public)
// Parameters:
// int                            ControllerId                   (CPF_Parm)

void UOnlineSystemInterface::ResetControllerColor(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ResetControllerColor");

	struct
	{
		int                            ControllerId;
	} params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.SetControllerColor
// (FUNC_Public)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// struct FColor                  NewColor                       (CPF_Parm)

void UOnlineSystemInterface::SetControllerColor(int ControllerId, const struct FColor& NewColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.SetControllerColor");

	struct
	{
		int                            ControllerId;
		struct FColor                  NewColor;
	} params;
	params.ControllerId = ControllerId;
	params.NewColor = NewColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.IsControllerConnected
// (FUNC_Public)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSystemInterface::IsControllerConnected(int ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.IsControllerConnected");

	struct
	{
		int                            ControllerId;
		bool                           ReturnValue;
	} params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.ClearUserRestoredDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         UserRestoredDelegate           (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearUserRestoredDelegate(const struct FScriptDelegate& UserRestoredDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearUserRestoredDelegate");

	struct
	{
		struct FScriptDelegate         UserRestoredDelegate;
	} params;
	params.UserRestoredDelegate = UserRestoredDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddUserRestoredDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         UserRestoredDelegate           (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::AddUserRestoredDelegate(const struct FScriptDelegate& UserRestoredDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddUserRestoredDelegate");

	struct
	{
		struct FScriptDelegate         UserRestoredDelegate;
	} params;
	params.UserRestoredDelegate = UserRestoredDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnUserRestored
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  ControllerId                   (CPF_Parm)

void UOnlineSystemInterface::OnUserRestored(unsigned char ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnUserRestored");

	struct
	{
		unsigned char                  ControllerId;
	} params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.ClearUserOrphanedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         UserOrphanedDelegate           (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearUserOrphanedDelegate(const struct FScriptDelegate& UserOrphanedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearUserOrphanedDelegate");

	struct
	{
		struct FScriptDelegate         UserOrphanedDelegate;
	} params;
	params.UserOrphanedDelegate = UserOrphanedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddUserOrphanedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         UserOrphanedDelegate           (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::AddUserOrphanedDelegate(const struct FScriptDelegate& UserOrphanedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddUserOrphanedDelegate");

	struct
	{
		struct FScriptDelegate         UserOrphanedDelegate;
	} params;
	params.UserOrphanedDelegate = UserOrphanedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnUserOrphaned
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  ControllerId                   (CPF_Parm)

void UOnlineSystemInterface::OnUserOrphaned(unsigned char ControllerId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnUserOrphaned");

	struct
	{
		unsigned char                  ControllerId;
	} params;
	params.ControllerId = ControllerId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.ClearControllerChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ControllerChangeDelegate       (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearControllerChangeDelegate");

	struct
	{
		struct FScriptDelegate         ControllerChangeDelegate;
	} params;
	params.ControllerChangeDelegate = ControllerChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddControllerChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ControllerChangeDelegate       (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::AddControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddControllerChangeDelegate");

	struct
	{
		struct FScriptDelegate         ControllerChangeDelegate;
	} params;
	params.ControllerChangeDelegate = ControllerChangeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnControllerChange
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// int                            ControllerId                   (CPF_Parm)
// bool                           bIsConnected                   (CPF_Parm)

void UOnlineSystemInterface::OnControllerChange(int ControllerId, bool bIsConnected)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnControllerChange");

	struct
	{
		int                            ControllerId;
		bool                           bIsConnected;
	} params;
	params.ControllerId = ControllerId;
	params.bIsConnected = bIsConnected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.SetNetworkNotificationPosition
// (FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ENetworkNotificationPosition> NewPos                         (CPF_Parm)

void UOnlineSystemInterface::SetNetworkNotificationPosition(TEnumAsByte<enum class ENetworkNotificationPosition> NewPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.SetNetworkNotificationPosition");

	struct
	{
		TEnumAsByte<enum class ENetworkNotificationPosition> NewPos;
	} params;
	params.NewPos = NewPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.GetNetworkNotificationPosition
// (FUNC_Public)
// Parameters:
// TEnumAsByte<enum class ENetworkNotificationPosition> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class ENetworkNotificationPosition> UOnlineSystemInterface::GetNetworkNotificationPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.GetNetworkNotificationPosition");

	struct
	{
		TEnumAsByte<enum class ENetworkNotificationPosition> ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ExternalUIDelegate             (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearExternalUIChangeDelegate");

	struct
	{
		struct FScriptDelegate         ExternalUIDelegate;
	} params;
	params.ExternalUIDelegate = ExternalUIDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddExternalUIChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ExternalUIDelegate             (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::AddExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddExternalUIChangeDelegate");

	struct
	{
		struct FScriptDelegate         ExternalUIDelegate;
	} params;
	params.ExternalUIDelegate = ExternalUIDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnExternalUIChange
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bIsOpening                     (CPF_Parm)

void UOnlineSystemInterface::OnExternalUIChange(bool bIsOpening)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnExternalUIChange");

	struct
	{
		bool                           bIsOpening;
	} params;
	params.bIsOpening = bIsOpening;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LinkStatusDelegate             (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::ClearLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.ClearLinkStatusChangeDelegate");

	struct
	{
		struct FScriptDelegate         LinkStatusDelegate;
	} params;
	params.LinkStatusDelegate = LinkStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         LinkStatusDelegate             (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSystemInterface::AddLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.AddLinkStatusChangeDelegate");

	struct
	{
		struct FScriptDelegate         LinkStatusDelegate;
	} params;
	params.LinkStatusDelegate = LinkStatusDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.OnLinkStatusChange
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bIsConnected                   (CPF_Parm)

void UOnlineSystemInterface::OnLinkStatusChange(bool bIsConnected)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.OnLinkStatusChange");

	struct
	{
		bool                           bIsConnected;
	} params;
	params.bIsConnected = bIsConnected;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSystemInterface.HasLinkConnection
// (FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSystemInterface::HasLinkConnection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSystemInterface.HasLinkConnection");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineMarketplaceInterface.ClearConsumeInventoryItemCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ConsumeInventoryItemCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineMarketplaceInterface::ClearConsumeInventoryItemCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ConsumeInventoryItemCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.ClearConsumeInventoryItemCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ConsumeInventoryItemCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ConsumeInventoryItemCompleteDelegate = ConsumeInventoryItemCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineMarketplaceInterface.AddConsumeInventoryItemCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ConsumeInventoryItemCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineMarketplaceInterface::AddConsumeInventoryItemCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ConsumeInventoryItemCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.AddConsumeInventoryItemCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ConsumeInventoryItemCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ConsumeInventoryItemCompleteDelegate = ConsumeInventoryItemCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineMarketplaceInterface.OnConsumeInventoryItemComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FString                 ProductID                      (CPF_Parm, CPF_NeedCtorLink)
// bool                           bDidSucceed                    (CPF_Parm)
// int                            NewQuantity                    (CPF_Parm)

void UOnlineMarketplaceInterface::OnConsumeInventoryItemComplete(const struct FString& ProductID, bool bDidSucceed, int NewQuantity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.OnConsumeInventoryItemComplete");

	struct
	{
		struct FString                 ProductID;
		bool                           bDidSucceed;
		int                            NewQuantity;
	} params;
	params.ProductID = ProductID;
	params.bDidSucceed = bDidSucceed;
	params.NewQuantity = NewQuantity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineMarketplaceInterface.ConsumeInventoryItem
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 ProductID                      (CPF_Parm, CPF_NeedCtorLink)
// int                            Quantity                       (CPF_Parm)
// struct FString                 TransactionId                  (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineMarketplaceInterface::ConsumeInventoryItem(unsigned char LocalUserNum, const struct FString& ProductID, int Quantity, const struct FString& TransactionId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.ConsumeInventoryItem");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 ProductID;
		int                            Quantity;
		struct FString                 TransactionId;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ProductID = ProductID;
	params.Quantity = Quantity;
	params.TransactionId = TransactionId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineMarketplaceInterface.ResetInventoryItems
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EMediaItemType> MediaType                      (CPF_Parm)

void UOnlineMarketplaceInterface::ResetInventoryItems(unsigned char LocalUserNum, TEnumAsByte<enum class EMediaItemType> MediaType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.ResetInventoryItems");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EMediaItemType> MediaType;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.MediaType = MediaType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineMarketplaceInterface.GetInventoryItems
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EMediaItemType> MediaType                      (CPF_Parm)
// TArray<struct FMarketplaceInventoryItem> InventoryItems                 (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EOnlineEnumerationReadState> UOnlineMarketplaceInterface::GetInventoryItems(unsigned char LocalUserNum, TEnumAsByte<enum class EMediaItemType> MediaType, TArray<struct FMarketplaceInventoryItem>* InventoryItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.GetInventoryItems");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EMediaItemType> MediaType;
		TArray<struct FMarketplaceInventoryItem> InventoryItems;
		TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.MediaType = MediaType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InventoryItems != nullptr)
		*InventoryItems = params.InventoryItems;

	return params.ReturnValue;
}


// Function Engine.OnlineMarketplaceInterface.ClearReadInventoryItemsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadInventoryItemsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineMarketplaceInterface::ClearReadInventoryItemsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadInventoryItemsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.ClearReadInventoryItemsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadInventoryItemsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadInventoryItemsCompleteDelegate = ReadInventoryItemsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineMarketplaceInterface.AddReadInventoryItemsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadInventoryItemsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineMarketplaceInterface::AddReadInventoryItemsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadInventoryItemsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.AddReadInventoryItemsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadInventoryItemsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadInventoryItemsCompleteDelegate = ReadInventoryItemsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineMarketplaceInterface.OnReadInventoryItemsComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// TEnumAsByte<enum class EMediaItemType> MediaType                      (CPF_Parm)

void UOnlineMarketplaceInterface::OnReadInventoryItemsComplete(TEnumAsByte<enum class EMediaItemType> MediaType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.OnReadInventoryItemsComplete");

	struct
	{
		TEnumAsByte<enum class EMediaItemType> MediaType;
	} params;
	params.MediaType = MediaType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineMarketplaceInterface.ReadInventoryItems
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EMediaItemType> MediaType                      (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineMarketplaceInterface::ReadInventoryItems(unsigned char LocalUserNum, TEnumAsByte<enum class EMediaItemType> MediaType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.ReadInventoryItems");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EMediaItemType> MediaType;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.MediaType = MediaType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineMarketplaceInterface.ClearReadAdditionalProductDetailsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadAdditionalProductDetailsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineMarketplaceInterface::ClearReadAdditionalProductDetailsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadAdditionalProductDetailsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.ClearReadAdditionalProductDetailsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadAdditionalProductDetailsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadAdditionalProductDetailsCompleteDelegate = ReadAdditionalProductDetailsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineMarketplaceInterface.AddReadAdditionalProductDetailsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadAdditionalProductDetailsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineMarketplaceInterface::AddReadAdditionalProductDetailsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadAdditionalProductDetailsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.AddReadAdditionalProductDetailsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadAdditionalProductDetailsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadAdditionalProductDetailsCompleteDelegate = ReadAdditionalProductDetailsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineMarketplaceInterface.OnReadAdditionalProductDetailsComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// TEnumAsByte<enum class EMediaItemType> MediaType                      (CPF_Parm)

void UOnlineMarketplaceInterface::OnReadAdditionalProductDetailsComplete(TEnumAsByte<enum class EMediaItemType> MediaType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.OnReadAdditionalProductDetailsComplete");

	struct
	{
		TEnumAsByte<enum class EMediaItemType> MediaType;
	} params;
	params.MediaType = MediaType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineMarketplaceInterface.ReadAdditionalDetailsForProducts
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EMediaItemType> MediaType                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineMarketplaceInterface::ReadAdditionalDetailsForProducts(unsigned char LocalUserNum, TEnumAsByte<enum class EMediaItemType> MediaType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.ReadAdditionalDetailsForProducts");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EMediaItemType> MediaType;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.MediaType = MediaType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineMarketplaceInterface.ResetAvailableProducts
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EMediaItemType> MediaType                      (CPF_Parm)

void UOnlineMarketplaceInterface::ResetAvailableProducts(unsigned char LocalUserNum, TEnumAsByte<enum class EMediaItemType> MediaType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.ResetAvailableProducts");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EMediaItemType> MediaType;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.MediaType = MediaType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineMarketplaceInterface.GetAvailableProducts
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TEnumAsByte<enum class EMediaItemType> MediaType                      (CPF_Parm)
// TArray<struct FMarketplaceProductDetails> AvailableProducts              (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

TEnumAsByte<enum class EOnlineEnumerationReadState> UOnlineMarketplaceInterface::GetAvailableProducts(unsigned char LocalUserNum, TEnumAsByte<enum class EMediaItemType> MediaType, TArray<struct FMarketplaceProductDetails>* AvailableProducts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.GetAvailableProducts");

	struct
	{
		unsigned char                  LocalUserNum;
		TEnumAsByte<enum class EMediaItemType> MediaType;
		TArray<struct FMarketplaceProductDetails> AvailableProducts;
		TEnumAsByte<enum class EOnlineEnumerationReadState> ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.MediaType = MediaType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (AvailableProducts != nullptr)
		*AvailableProducts = params.AvailableProducts;

	return params.ReturnValue;
}


// Function Engine.OnlineMarketplaceInterface.ClearReadAvailableProductsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadAvailableProductsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineMarketplaceInterface::ClearReadAvailableProductsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadAvailableProductsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.ClearReadAvailableProductsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadAvailableProductsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadAvailableProductsCompleteDelegate = ReadAvailableProductsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineMarketplaceInterface.AddReadAvailableProductsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadAvailableProductsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineMarketplaceInterface::AddReadAvailableProductsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadAvailableProductsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.AddReadAvailableProductsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadAvailableProductsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadAvailableProductsCompleteDelegate = ReadAvailableProductsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineMarketplaceInterface.OnReadAvailableProductsComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// TEnumAsByte<enum class EMediaItemType> MediaType                      (CPF_Parm)

void UOnlineMarketplaceInterface::OnReadAvailableProductsComplete(TEnumAsByte<enum class EMediaItemType> MediaType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.OnReadAvailableProductsComplete");

	struct
	{
		TEnumAsByte<enum class EMediaItemType> MediaType;
	} params;
	params.MediaType = MediaType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineMarketplaceInterface.ReadAvailableProducts
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 ParentId                       (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class EMediaItemType> ParentMediaType                (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class EMediaItemType> ChildMediaType                 (CPF_OptionalParm, CPF_Parm)
// TEnumAsByte<enum class ECatalogSortOrder> SortOrder                      (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineMarketplaceInterface::ReadAvailableProducts(unsigned char LocalUserNum, const struct FString& ParentId, TEnumAsByte<enum class EMediaItemType> ParentMediaType, TEnumAsByte<enum class EMediaItemType> ChildMediaType, TEnumAsByte<enum class ECatalogSortOrder> SortOrder)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineMarketplaceInterface.ReadAvailableProducts");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 ParentId;
		TEnumAsByte<enum class EMediaItemType> ParentMediaType;
		TEnumAsByte<enum class EMediaItemType> ChildMediaType;
		TEnumAsByte<enum class ECatalogSortOrder> SortOrder;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ParentId = ParentId;
	params.ParentMediaType = ParentMediaType;
	params.ChildMediaType = ChildMediaType;
	params.SortOrder = SortOrder;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.WordFilterSanitizeString
// (FUNC_Public)
// Parameters:
// struct FString                 Comment                        (CPF_Const, CPF_Parm, CPF_NeedCtorLink)
// struct FScriptDelegate         SanitizeDelegate               (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::WordFilterSanitizeString(const struct FString& Comment, const struct FScriptDelegate& SanitizeDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.WordFilterSanitizeString");

	struct
	{
		struct FString                 Comment;
		struct FScriptDelegate         SanitizeDelegate;
		bool                           ReturnValue;
	} params;
	params.Comment = Comment;
	params.SanitizeDelegate = SanitizeDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.OnSanitizeStringComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// struct FString                 Original                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Sanitized                      (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterfaceEx::OnSanitizeStringComplete(const struct FString& Original, const struct FString& Sanitized)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.OnSanitizeStringComplete");

	struct
	{
		struct FString                 Original;
		struct FString                 Sanitized;
	} params;
	params.Original = Original;
	params.Sanitized = Sanitized;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.RecordPlayersRecentlyMet
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TArray<struct FUniqueNetId>    Players                        (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 GameDescription                (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::RecordPlayersRecentlyMet(unsigned char LocalUserNum, const struct FString& GameDescription, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.RecordPlayersRecentlyMet");

	struct
	{
		unsigned char                  LocalUserNum;
		TArray<struct FUniqueNetId>    Players;
		struct FString                 GameDescription;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.GameDescription = GameDescription;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ClearSaveDataNoSpaceDialogCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         DeviceDelegate                 (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterfaceEx::ClearSaveDataNoSpaceDialogCompleteDelegate(const struct FScriptDelegate& DeviceDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ClearSaveDataNoSpaceDialogCompleteDelegate");

	struct
	{
		struct FScriptDelegate         DeviceDelegate;
	} params;
	params.DeviceDelegate = DeviceDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.AddSaveDataNoSpaceDialogCompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         DeviceDelegate                 (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterfaceEx::AddSaveDataNoSpaceDialogCompleteDelegate(const struct FScriptDelegate& DeviceDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.AddSaveDataNoSpaceDialogCompleteDelegate");

	struct
	{
		struct FScriptDelegate         DeviceDelegate;
	} params;
	params.DeviceDelegate = DeviceDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.OnSaveDataNoSpaceDialogComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bContinueWithoutSave           (CPF_Parm)

void UOnlinePlayerInterfaceEx::OnSaveDataNoSpaceDialogComplete(bool bContinueWithoutSave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.OnSaveDataNoSpaceDialogComplete");

	struct
	{
		bool                           bContinueWithoutSave;
	} params;
	params.bContinueWithoutSave = bContinueWithoutSave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.GetSyncedAchievements
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TArray<unsigned long>          ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

TArray<unsigned long> UOnlinePlayerInterfaceEx::GetSyncedAchievements(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.GetSyncedAchievements");

	struct
	{
		unsigned char                  LocalUserNum;
		TArray<unsigned long>          ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.UnlockAchievement
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            AchievementId                  (CPF_Parm)
// float                          PercentComplete                (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::UnlockAchievement(unsigned char LocalUserNum, int AchievementId, float PercentComplete)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.UnlockAchievement");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            AchievementId;
		float                          PercentComplete;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.AchievementId = AchievementId;
	params.PercentComplete = PercentComplete;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.UpdateStat
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FName                   StatName                       (CPF_Parm)
// int                            Points                         (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::UpdateStat(unsigned char LocalUserNum, const struct FName& StatName, int Points)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.UpdateStat");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FName                   StatName;
		int                            Points;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.StatName = StatName;
	params.Points = Points;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.AddInGamePost
// (FUNC_Public)
// Parameters:
// struct FString                 InPostID                       (CPF_Parm, CPF_NeedCtorLink)
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TArray<struct FString>         StringReplaceList              (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::AddInGamePost(const struct FString& InPostID, unsigned char LocalUserNum, TArray<struct FString> StringReplaceList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.AddInGamePost");

	struct
	{
		struct FString                 InPostID;
		unsigned char                  LocalUserNum;
		TArray<struct FString>         StringReplaceList;
		bool                           ReturnValue;
	} params;
	params.InPostID = InPostID;
	params.LocalUserNum = LocalUserNum;
	params.StringReplaceList = StringReplaceList;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.SetRichPresence
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 PresenceString                 (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 GameDataString                 (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterfaceEx::SetRichPresence(unsigned char LocalUserNum, const struct FString& PresenceString, const struct FString& GameDataString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.SetRichPresence");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 PresenceString;
		struct FString                 GameDataString;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PresenceString = PresenceString;
	params.GameDataString = GameDataString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowCustomMessageUI
// (FUNC_HasOptionalParms, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TArray<struct FUniqueNetId>    Recipients                     (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 MessageTitle                   (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 NonEditableMessage             (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 EditableMessage                (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowCustomMessageUI(unsigned char LocalUserNum, const struct FString& MessageTitle, const struct FString& NonEditableMessage, const struct FString& EditableMessage, TArray<struct FUniqueNetId>* Recipients)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowCustomMessageUI");

	struct
	{
		unsigned char                  LocalUserNum;
		TArray<struct FUniqueNetId>    Recipients;
		struct FString                 MessageTitle;
		struct FString                 NonEditableMessage;
		struct FString                 EditableMessage;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.MessageTitle = MessageTitle;
	params.NonEditableMessage = NonEditableMessage;
	params.EditableMessage = EditableMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Recipients != nullptr)
		*Recipients = params.Recipients;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ClearCrossTitleProfileSettings
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            TitleId                        (CPF_Parm)

void UOnlinePlayerInterfaceEx::ClearCrossTitleProfileSettings(unsigned char LocalUserNum, int TitleId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ClearCrossTitleProfileSettings");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            TitleId;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.TitleId = TitleId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.GetCrossTitleProfileSettings
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            TitleId                        (CPF_Parm)
// class UOnlineProfileSettings*  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UOnlineProfileSettings* UOnlinePlayerInterfaceEx::GetCrossTitleProfileSettings(unsigned char LocalUserNum, int TitleId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.GetCrossTitleProfileSettings");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            TitleId;
		class UOnlineProfileSettings*  ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.TitleId = TitleId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ClearReadCrossTitleProfileSettingsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterfaceEx::ClearReadCrossTitleProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ClearReadCrossTitleProfileSettingsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadProfileSettingsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadProfileSettingsCompleteDelegate = ReadProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.AddReadCrossTitleProfileSettingsCompleteDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ReadProfileSettingsCompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterfaceEx::AddReadCrossTitleProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.AddReadCrossTitleProfileSettingsCompleteDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ReadProfileSettingsCompleteDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ReadProfileSettingsCompleteDelegate = ReadProfileSettingsCompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.OnReadCrossTitleProfileSettingsComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            TitleId                        (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterfaceEx::OnReadCrossTitleProfileSettingsComplete(unsigned char LocalUserNum, int TitleId, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.OnReadCrossTitleProfileSettingsComplete");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            TitleId;
		bool                           bWasSuccessful;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.TitleId = TitleId;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.ReadCrossTitleProfileSettings
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            TitleId                        (CPF_Parm)
// class UOnlineProfileSettings*  ProfileSettings                (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::ReadCrossTitleProfileSettings(unsigned char LocalUserNum, int TitleId, class UOnlineProfileSettings* ProfileSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ReadCrossTitleProfileSettings");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            TitleId;
		class UOnlineProfileSettings*  ProfileSettings;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.TitleId = TitleId;
	params.ProfileSettings = ProfileSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.UnlockAvatarAward
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            AvatarItemId                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::UnlockAvatarAward(unsigned char LocalUserNum, int AvatarItemId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.UnlockAvatarAward");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            AvatarItemId;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.AvatarItemId = AvatarItemId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowCustomPlayersUI
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// TArray<struct FUniqueNetId>    Players                        (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 Title                          (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Description                    (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowCustomPlayersUI(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowCustomPlayersUI");

	struct
	{
		unsigned char                  LocalUserNum;
		TArray<struct FUniqueNetId>    Players;
		struct FString                 Title;
		struct FString                 Description;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.Title = Title;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowPlayersUI
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowPlayersUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowPlayersUI");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowFriendsInviteUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowFriendsInviteUI");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            PlayerID;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ProfileDataChangedDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterfaceEx::ClearProfileDataChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ClearProfileDataChangedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ProfileDataChangedDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ProfileDataChangedDelegate = ProfileDataChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         ProfileDataChangedDelegate     (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterfaceEx::AddProfileDataChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.AddProfileDataChangedDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         ProfileDataChangedDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.ProfileDataChangedDelegate = ProfileDataChangedDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged
// (FUNC_Public, FUNC_Delegate)

void UOnlinePlayerInterfaceEx::OnProfileDataChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.OnProfileDataChanged");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            PictureId                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::UnlockGamerPicture(unsigned char LocalUserNum, int PictureId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.UnlockGamerPicture");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            PictureId;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PictureId = PictureId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.IsDeviceValid
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            DeviceID                       (CPF_Parm)
// int                            SizeNeeded                     (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::IsDeviceValid(int DeviceID, int SizeNeeded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.IsDeviceValid");

	struct
	{
		int                            DeviceID;
		int                            SizeNeeded;
		bool                           ReturnValue;
	} params;
	params.DeviceID = DeviceID;
	params.SizeNeeded = SizeNeeded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 DeviceName                     (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UOnlinePlayerInterfaceEx::GetDeviceSelectionResults(unsigned char LocalUserNum, struct FString* DeviceName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.GetDeviceSelectionResults");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 DeviceName;
		int                            ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DeviceName != nullptr)
		*DeviceName = params.DeviceName;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         DeviceDelegate                 (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterfaceEx::ClearDeviceSelectionDoneDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& DeviceDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ClearDeviceSelectionDoneDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         DeviceDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceDelegate = DeviceDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FScriptDelegate         DeviceDelegate                 (CPF_Parm, CPF_NeedCtorLink)

void UOnlinePlayerInterfaceEx::AddDeviceSelectionDoneDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& DeviceDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.AddDeviceSelectionDoneDelegate");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FScriptDelegate         DeviceDelegate;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.DeviceDelegate = DeviceDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)

void UOnlinePlayerInterfaceEx::OnDeviceSelectionComplete(bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.OnDeviceSelectionComplete");

	struct
	{
		bool                           bWasSuccessful;
	} params;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            SizeNeeded                     (CPF_Parm)
// bool                           bManageStorage                 (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowDeviceSelectionUI(unsigned char LocalUserNum, int SizeNeeded, bool bManageStorage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowDeviceSelectionUI");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            SizeNeeded;
		bool                           bManageStorage;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.SizeNeeded = SizeNeeded;
	params.bManageStorage = bManageStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowMembershipMarketplaceUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowMembershipMarketplaceUI");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// int                            CategoryMask                   (CPF_OptionalParm, CPF_Parm)
// int                            OfferId                        (CPF_OptionalParm, CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowContentMarketplaceUI(unsigned char LocalUserNum, int CategoryMask, int OfferId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowContentMarketplaceUI");

	struct
	{
		unsigned char                  LocalUserNum;
		int                            CategoryMask;
		int                            OfferId;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.CategoryMask = CategoryMask;
	params.OfferId = OfferId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowInviteUI
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 InviteText                     (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowInviteUI(unsigned char LocalUserNum, const struct FString& InviteText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowInviteUI");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 InviteText;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.InviteText = InviteText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowAchievementsUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowAchievementsUI");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowMessagesUI
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowMessagesUI(unsigned char LocalUserNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowMessagesUI");

	struct
	{
		unsigned char                  LocalUserNum;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_OptionalParm, CPF_Parm)
// struct FString                 PlayerName                     (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowGamerCardUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID, const struct FString& PlayerName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowGamerCardUI");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            PlayerID;
		struct FString                 PlayerName;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;
	params.PlayerName = PlayerName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI
// (FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FUniqueNetId            PlayerID                       (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlinePlayerInterfaceEx::ShowFeedbackUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlinePlayerInterfaceEx.ShowFeedbackUI");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FUniqueNetId            PlayerID;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAccountInterface.GetLocalAccountNames
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FString>         Accounts                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAccountInterface::GetLocalAccountNames(TArray<struct FString>* Accounts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.GetLocalAccountNames");

	struct
	{
		TArray<struct FString>         Accounts;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Accounts != nullptr)
		*Accounts = params.Accounts;

	return params.ReturnValue;
}


// Function Engine.OnlineAccountInterface.DeleteLocalAccount
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 UserName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Password                       (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAccountInterface::DeleteLocalAccount(const struct FString& UserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.DeleteLocalAccount");

	struct
	{
		struct FString                 UserName;
		struct FString                 Password;
		bool                           ReturnValue;
	} params;
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAccountInterface.RenameLocalAccount
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 NewUserName                    (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 OldUserName                    (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Password                       (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAccountInterface::RenameLocalAccount(const struct FString& NewUserName, const struct FString& OldUserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.RenameLocalAccount");

	struct
	{
		struct FString                 NewUserName;
		struct FString                 OldUserName;
		struct FString                 Password;
		bool                           ReturnValue;
	} params;
	params.NewUserName = NewUserName;
	params.OldUserName = OldUserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAccountInterface.CreateLocalAccount
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 UserName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Password                       (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAccountInterface::CreateLocalAccount(const struct FString& UserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.CreateLocalAccount");

	struct
	{
		struct FString                 UserName;
		struct FString                 Password;
		bool                           ReturnValue;
	} params;
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         AccountCreateDelegate          (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAccountInterface::ClearCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.ClearCreateOnlineAccountCompletedDelegate");

	struct
	{
		struct FScriptDelegate         AccountCreateDelegate;
	} params;
	params.AccountCreateDelegate = AccountCreateDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         AccountCreateDelegate          (CPF_Parm, CPF_NeedCtorLink)

void UOnlineAccountInterface::AddCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.AddCreateOnlineAccountCompletedDelegate");

	struct
	{
		struct FScriptDelegate         AccountCreateDelegate;
	} params;
	params.AccountCreateDelegate = AccountCreateDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// TEnumAsByte<enum class EOnlineAccountCreateStatus> ErrorStatus                    (CPF_Parm)

void UOnlineAccountInterface::OnCreateOnlineAccountCompleted(TEnumAsByte<enum class EOnlineAccountCreateStatus> ErrorStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.OnCreateOnlineAccountCompleted");

	struct
	{
		TEnumAsByte<enum class EOnlineAccountCreateStatus> ErrorStatus;
	} params;
	params.ErrorStatus = ErrorStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineAccountInterface.CreateOnlineAccount
// (FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// struct FString                 UserName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Password                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 EmailAddress                   (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ProductKey                     (CPF_OptionalParm, CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineAccountInterface::CreateOnlineAccount(const struct FString& UserName, const struct FString& Password, const struct FString& EmailAddress, const struct FString& ProductKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineAccountInterface.CreateOnlineAccount");

	struct
	{
		struct FString                 UserName;
		struct FString                 Password;
		struct FString                 EmailAddress;
		struct FString                 ProductKey;
		bool                           ReturnValue;
	} params;
	params.UserName = UserName;
	params.Password = Password;
	params.EmailAddress = EmailAddress;
	params.ProductKey = ProductKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.IsPendingAuth
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FUniqueNetId            PlayerUID                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AAccessControl::IsPendingAuth(const struct FUniqueNetId& PlayerUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.IsPendingAuth");

	struct
	{
		struct FUniqueNetId            PlayerUID;
		bool                           ReturnValue;
	} params;
	params.PlayerUID = PlayerUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.Cleanup
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// bool                           bExit                          (CPF_OptionalParm, CPF_Parm)

void AAccessControl::Cleanup(bool bExit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.Cleanup");

	struct
	{
		bool                           bExit;
	} params;
	params.bExit = bExit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.NotifyExit
// (FUNC_Defined, FUNC_Public)

void AAccessControl::NotifyExit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.NotifyExit");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.NotifyGameEnding
// (FUNC_Defined, FUNC_Public)

void AAccessControl::NotifyGameEnding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.NotifyGameEnding");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.NotifyServerTravel
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bSeamless                      (CPF_Parm)

void AAccessControl::NotifyServerTravel(bool bSeamless)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.NotifyServerTravel");

	struct
	{
		bool                           bSeamless;
	} params;
	params.bSeamless = bSeamless;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.OnDestroyOnlineGameComplete
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FName                   SessionName                    (CPF_Parm)
// bool                           bWasSuccessful                 (CPF_Parm)

void AAccessControl::OnDestroyOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.OnDestroyOnlineGameComplete");

	struct
	{
		struct FName                   SessionName;
		bool                           bWasSuccessful;
	} params;
	params.SessionName = SessionName;
	params.bWasSuccessful = bWasSuccessful;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.StaticOnClientConnectionClose
// (FUNC_Final, FUNC_Defined, FUNC_Static, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class UPlayer*                 ClientConnection               (CPF_Parm)

void AAccessControl::STATIC_StaticOnClientConnectionClose(class UPlayer* ClientConnection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.StaticOnClientConnectionClose");

	struct
	{
		class UPlayer*                 ClientConnection;
	} params;
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.OnClientConnectionClose
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class UPlayer*                 ClientConnection               (CPF_Parm)

void AAccessControl::OnClientConnectionClose(class UPlayer* ClientConnection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.OnClientConnectionClose");

	struct
	{
		class UPlayer*                 ClientConnection;
	} params;
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.ListenHostAuthTimeout
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)

void AAccessControl::ListenHostAuthTimeout()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ListenHostAuthTimeout");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.EndListenHostAuth
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)

void AAccessControl::EndListenHostAuth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.EndListenHostAuth");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.ContinueListenHostAuth
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)

void AAccessControl::ContinueListenHostAuth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ContinueListenHostAuth");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.BeginListenHostAuth
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// bool                           bRetry                         (CPF_OptionalParm, CPF_Parm)

void AAccessControl::BeginListenHostAuth(bool bRetry)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.BeginListenHostAuth");

	struct
	{
		bool                           bRetry;
	} params;
	params.bRetry = bRetry;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.ProcessServerAuthRetryRequest
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class UPlayer*                 ClientConnection               (CPF_Parm)

void AAccessControl::ProcessServerAuthRetryRequest(class UPlayer* ClientConnection)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ProcessServerAuthRetryRequest");

	struct
	{
		class UPlayer*                 ClientConnection;
	} params;
	params.ClientConnection = ClientConnection;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.ProcessServerAuthRequest
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class UPlayer*                 ClientConnection               (CPF_Parm)
// struct FUniqueNetId            ClientUID                      (CPF_Parm)
// struct FIpAddr                 ClientIP                       (CPF_Parm)
// int                            ClientPort                     (CPF_Parm)

void AAccessControl::ProcessServerAuthRequest(class UPlayer* ClientConnection, const struct FUniqueNetId& ClientUID, const struct FIpAddr& ClientIP, int ClientPort)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ProcessServerAuthRequest");

	struct
	{
		class UPlayer*                 ClientConnection;
		struct FUniqueNetId            ClientUID;
		struct FIpAddr                 ClientIP;
		int                            ClientPort;
	} params;
	params.ClientConnection = ClientConnection;
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;
	params.ClientPort = ClientPort;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.OnClientAuthComplete
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// bool                           bSuccess                       (CPF_Parm)
// struct FUniqueNetId            ClientUID                      (CPF_Parm)
// class UPlayer*                 ClientConnection               (CPF_Parm)
// struct FString                 ExtraInfo                      (CPF_Parm, CPF_NeedCtorLink)

void AAccessControl::OnClientAuthComplete(bool bSuccess, const struct FUniqueNetId& ClientUID, class UPlayer* ClientConnection, const struct FString& ExtraInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.OnClientAuthComplete");

	struct
	{
		bool                           bSuccess;
		struct FUniqueNetId            ClientUID;
		class UPlayer*                 ClientConnection;
		struct FString                 ExtraInfo;
	} params;
	params.bSuccess = bSuccess;
	params.ClientUID = ClientUID;
	params.ClientConnection = ClientConnection;
	params.ExtraInfo = ExtraInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.ProcessClientAuthResponse
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FUniqueNetId            ClientUID                      (CPF_Parm)
// struct FIpAddr                 ClientIP                       (CPF_Parm)
// int                            AuthTicketUID                  (CPF_Parm)

void AAccessControl::ProcessClientAuthResponse(const struct FUniqueNetId& ClientUID, const struct FIpAddr& ClientIP, int AuthTicketUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ProcessClientAuthResponse");

	struct
	{
		struct FUniqueNetId            ClientUID;
		struct FIpAddr                 ClientIP;
		int                            AuthTicketUID;
	} params;
	params.ClientUID = ClientUID;
	params.ClientIP = ClientIP;
	params.AuthTicketUID = AuthTicketUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.OnAuthReady
// (FUNC_Defined, FUNC_Public)

void AAccessControl::OnAuthReady()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.OnAuthReady");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.PendingAuthTimer
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)

void AAccessControl::PendingAuthTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.PendingAuthTimer");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.PostLogin
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       NewPlayer                      (CPF_Parm)

void AAccessControl::PostLogin(class APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.PostLogin");

	struct
	{
		class APlayerController*       NewPlayer;
	} params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.PreLogin
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasOutParms, FUNC_HasDefaults)
// Parameters:
// struct FString                 Options                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Address                        (CPF_Parm, CPF_NeedCtorLink)
// struct FUniqueNetId            UniqueId                       (CPF_Const, CPF_Parm)
// bool                           bSupportsAuth                  (CPF_Parm)
// struct FString                 OutError                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           bSpectator                     (CPF_Parm)

void AAccessControl::PreLogin(const struct FString& Options, const struct FString& Address, const struct FUniqueNetId& UniqueId, bool bSupportsAuth, bool bSpectator, struct FString* OutError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.PreLogin");

	struct
	{
		struct FString                 Options;
		struct FString                 Address;
		struct FUniqueNetId            UniqueId;
		bool                           bSupportsAuth;
		struct FString                 OutError;
		bool                           bSpectator;
	} params;
	params.Options = Options;
	params.Address = Address;
	params.UniqueId = UniqueId;
	params.bSupportsAuth = bSupportsAuth;
	params.bSpectator = bSpectator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutError != nullptr)
		*OutError = params.OutError;
}


// Function Engine.AccessControl.ClearAuthDelegates
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           bExiting                       (CPF_Parm)

void AAccessControl::ClearAuthDelegates(bool bExiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ClearAuthDelegates");

	struct
	{
		bool                           bExiting;
	} params;
	params.bExiting = bExiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.RegisterAuthDelegates
// (FUNC_Defined, FUNC_Public)

void AAccessControl::RegisterAuthDelegates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.RegisterAuthDelegates");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.InitAuthHooks
// (FUNC_Defined, FUNC_Public)

void AAccessControl::InitAuthHooks()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.InitAuthHooks");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.IsIDBanned
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            NetId                          (CPF_Const, CPF_Parm, CPF_OutParm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AAccessControl::IsIDBanned(struct FUniqueNetId* NetId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.IsIDBanned");

	struct
	{
		struct FUniqueNetId            NetId;
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NetId != nullptr)
		*NetId = params.NetId;

	return params.ReturnValue;
}


// Function Engine.AccessControl.CheckIPPolicy
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 Address                        (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AAccessControl::CheckIPPolicy(const struct FString& Address)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.CheckIPPolicy");

	struct
	{
		struct FString                 Address;
		bool                           ReturnValue;
	} params;
	params.Address = Address;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.ValidLogin
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 UserName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Password                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AAccessControl::ValidLogin(const struct FString& UserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ValidLogin");

	struct
	{
		struct FString                 UserName;
		struct FString                 Password;
		bool                           ReturnValue;
	} params;
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.ParseAdminOptions
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 Options                        (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AAccessControl::ParseAdminOptions(const struct FString& Options)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ParseAdminOptions");

	struct
	{
		struct FString                 Options;
		bool                           ReturnValue;
	} params;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.AdminExited
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       P                              (CPF_Parm)

void AAccessControl::AdminExited(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminExited");

	struct
	{
		class APlayerController*       P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.AdminEntered
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       P                              (CPF_Parm)

void AAccessControl::AdminEntered(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminEntered");

	struct
	{
		class APlayerController*       P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.AdminLogout
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AAccessControl::AdminLogout(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminLogout");

	struct
	{
		class APlayerController*       P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.AdminLogin
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       P                              (CPF_Parm)
// struct FString                 Password                       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AAccessControl::AdminLogin(class APlayerController* P, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminLogin");

	struct
	{
		class APlayerController*       P;
		struct FString                 Password;
		bool                           ReturnValue;
	} params;
	params.P = P;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.KickPlayer
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       C                              (CPF_Parm)
// struct FString                 KickReason                     (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AAccessControl::KickPlayer(class APlayerController* C, const struct FString& KickReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.KickPlayer");

	struct
	{
		class APlayerController*       C;
		struct FString                 KickReason;
		bool                           ReturnValue;
	} params;
	params.C = C;
	params.KickReason = KickReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.ForceKickPlayer
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       C                              (CPF_Parm)
// struct FString                 KickReason                     (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AAccessControl::ForceKickPlayer(class APlayerController* C, const struct FString& KickReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ForceKickPlayer");

	struct
	{
		class APlayerController*       C;
		struct FString                 KickReason;
		bool                           ReturnValue;
	} params;
	params.C = C;
	params.KickReason = KickReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.KickBan
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 Target                         (CPF_Parm, CPF_NeedCtorLink)

void AAccessControl::KickBan(const struct FString& Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.KickBan");

	struct
	{
		struct FString                 Target;
	} params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.Kick
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 Target                         (CPF_Parm, CPF_NeedCtorLink)

void AAccessControl::Kick(const struct FString& Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.Kick");

	struct
	{
		struct FString                 Target;
	} params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.GetControllerFromString
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 Target                         (CPF_Parm, CPF_NeedCtorLink)
// class AController*             ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AController* AAccessControl::GetControllerFromString(const struct FString& Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.GetControllerFromString");

	struct
	{
		struct FString                 Target;
		class AController*             ReturnValue;
	} params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.RequiresPassword
// (FUNC_Defined, FUNC_Public)
// Parameters:
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AAccessControl::RequiresPassword()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.RequiresPassword");

	struct
	{
		bool                           ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.SetGamePassword
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 P                              (CPF_Parm, CPF_NeedCtorLink)

void AAccessControl::SetGamePassword(const struct FString& P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.SetGamePassword");

	struct
	{
		struct FString                 P;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.SetAdminPassword
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 P                              (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AAccessControl::SetAdminPassword(const struct FString& P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.SetAdminPassword");

	struct
	{
		struct FString                 P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.IsAdmin
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class APlayerController*       P                              (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool AAccessControl::IsAdmin(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.IsAdmin");

	struct
	{
		class APlayerController*       P;
		bool                           ReturnValue;
	} params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.Destroyed
// (FUNC_Defined, FUNC_Public)

void AAccessControl::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.Destroyed");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.PostBeginPlay
// (FUNC_Defined, FUNC_Public)

void AAccessControl::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.ServerSwitch
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)

void AAdmin::ServerSwitch(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerSwitch");

	struct
	{
		struct FString                 URL;
	} params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.Switch
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 URL                            (CPF_Parm, CPF_NeedCtorLink)

void AAdmin::Switch(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.Switch");

	struct
	{
		struct FString                 URL;
	} params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.ServerRestartMap
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)

void AAdmin::ServerRestartMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerRestartMap");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.RestartMap
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void AAdmin::RestartMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.RestartMap");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.PlayerList
// (FUNC_Defined, FUNC_Exec, FUNC_Public)

void AAdmin::PlayerList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.PlayerList");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.ServerKick
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)
// Parameters:
// struct FString                 S                              (CPF_Parm, CPF_NeedCtorLink)

void AAdmin::ServerKick(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerKick");

	struct
	{
		struct FString                 S;
	} params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.Kick
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 S                              (CPF_Parm, CPF_NeedCtorLink)

void AAdmin::Kick(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.Kick");

	struct
	{
		struct FString                 S;
	} params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.ServerKickBan
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)
// Parameters:
// struct FString                 S                              (CPF_Parm, CPF_NeedCtorLink)

void AAdmin::ServerKickBan(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerKickBan");

	struct
	{
		struct FString                 S;
	} params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.KickBan
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 S                              (CPF_Parm, CPF_NeedCtorLink)

void AAdmin::KickBan(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.KickBan");

	struct
	{
		struct FString                 S;
	} params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.ServerAdmin
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)
// Parameters:
// struct FString                 CommandLine                    (CPF_Parm, CPF_NeedCtorLink)

void AAdmin::ServerAdmin(const struct FString& CommandLine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.ServerAdmin");

	struct
	{
		struct FString                 CommandLine;
	} params;
	params.CommandLine = CommandLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.Admin
// (FUNC_Defined, FUNC_Exec, FUNC_Public)
// Parameters:
// struct FString                 CommandLine                    (CPF_Parm, CPF_NeedCtorLink)

void AAdmin::Admin(const struct FString& CommandLine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.Admin");

	struct
	{
		struct FString                 CommandLine;
	} params;
	params.CommandLine = CommandLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void AAdmin::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterSpawnable.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AEmitterSpawnable::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterSpawnable.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterSpawnable.SetTemplate
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class UParticleSystem*         NewTemplate                    (CPF_Parm)
// bool                           bDestroyOnFinish               (CPF_OptionalParm, CPF_Parm)

void AEmitterSpawnable::SetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterSpawnable.SetTemplate");

	struct
	{
		class UParticleSystem*         NewTemplate;
		bool                           bDestroyOnFinish;
	} params;
	params.NewTemplate = NewTemplate;
	params.bDestroyOnFinish = bDestroyOnFinish;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_ControlMovieTexture.Activated
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void USeqAct_ControlMovieTexture::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ControlMovieTexture.Activated");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ClientReceiveLinkDisabledState
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// int                            Index                          (CPF_Parm)
// class ACoverLink*              Link                           (CPF_Parm)
// bool                           bLinkDisabled                  (CPF_Parm)

void ACoverReplicator::ClientReceiveLinkDisabledState(int Index, class ACoverLink* Link, bool bLinkDisabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveLinkDisabledState");

	struct
	{
		int                            Index;
		class ACoverLink*              Link;
		bool                           bLinkDisabled;
	} params;
	params.Index = Index;
	params.Link = Link;
	params.bLinkDisabled = bLinkDisabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendLinkDisabledState
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)
// Parameters:
// int                            Index                          (CPF_Parm)

void ACoverReplicator::ServerSendLinkDisabledState(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendLinkDisabledState");

	struct
	{
		int                            Index;
	} params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.NotifyLinkDisabledStateChange
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class ACoverLink*              Link                           (CPF_Parm)

void ACoverReplicator::NotifyLinkDisabledStateChange(class ACoverLink* Link)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifyLinkDisabledStateChange");

	struct
	{
		class ACoverLink*              Link;
	} params;
	params.Link = Link;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ClientReceiveManualCoverTypeSlots
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// int                            Index                          (CPF_Parm)
// class ACoverLink*              Link                           (CPF_Parm)
// unsigned char                  NumCoverTypesChanged           (CPF_Parm)
// struct FManualCoverTypeInfo    SlotsCoverTypeChanged          (CPF_Parm)
// bool                           bDone                          (CPF_Parm)

void ACoverReplicator::ClientReceiveManualCoverTypeSlots(int Index, class ACoverLink* Link, unsigned char NumCoverTypesChanged, const struct FManualCoverTypeInfo& SlotsCoverTypeChanged, bool bDone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveManualCoverTypeSlots");

	struct
	{
		int                            Index;
		class ACoverLink*              Link;
		unsigned char                  NumCoverTypesChanged;
		struct FManualCoverTypeInfo    SlotsCoverTypeChanged;
		bool                           bDone;
	} params;
	params.Index = Index;
	params.Link = Link;
	params.NumCoverTypesChanged = NumCoverTypesChanged;
	params.SlotsCoverTypeChanged = SlotsCoverTypeChanged;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendManualCoverTypeSlots
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer, FUNC_HasDefaults)
// Parameters:
// int                            Index                          (CPF_Parm)

void ACoverReplicator::ServerSendManualCoverTypeSlots(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendManualCoverTypeSlots");

	struct
	{
		int                            Index;
	} params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.NotifySetManualCoverTypeForSlots
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class ACoverLink*              Link                           (CPF_Parm)
// TArray<int>                    SlotIndices                    (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// TEnumAsByte<enum class ECoverType> NewCoverType                   (CPF_Parm)

void ACoverReplicator::NotifySetManualCoverTypeForSlots(class ACoverLink* Link, TEnumAsByte<enum class ECoverType> NewCoverType, TArray<int>* SlotIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifySetManualCoverTypeForSlots");

	struct
	{
		class ACoverLink*              Link;
		TArray<int>                    SlotIndices;
		TEnumAsByte<enum class ECoverType> NewCoverType;
	} params;
	params.Link = Link;
	params.NewCoverType = NewCoverType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;
}


// Function Engine.CoverReplicator.ClientReceiveAdjustedSlots
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// int                            Index                          (CPF_Parm)
// class ACoverLink*              Link                           (CPF_Parm)
// unsigned char                  NumSlotsAdjusted               (CPF_Parm)
// unsigned char                  SlotsAdjusted                  (CPF_Parm)
// bool                           bDone                          (CPF_Parm)

void ACoverReplicator::ClientReceiveAdjustedSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsAdjusted, unsigned char SlotsAdjusted, bool bDone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveAdjustedSlots");

	struct
	{
		int                            Index;
		class ACoverLink*              Link;
		unsigned char                  NumSlotsAdjusted;
		unsigned char                  SlotsAdjusted;
		bool                           bDone;
	} params;
	params.Index = Index;
	params.Link = Link;
	params.NumSlotsAdjusted = NumSlotsAdjusted;
	params.SlotsAdjusted = SlotsAdjusted;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendAdjustedSlots
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)
// Parameters:
// int                            Index                          (CPF_Parm)

void ACoverReplicator::ServerSendAdjustedSlots(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendAdjustedSlots");

	struct
	{
		int                            Index;
	} params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.NotifyAutoAdjustSlots
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class ACoverLink*              Link                           (CPF_Parm)
// TArray<int>                    SlotIndices                    (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void ACoverReplicator::NotifyAutoAdjustSlots(class ACoverLink* Link, TArray<int>* SlotIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifyAutoAdjustSlots");

	struct
	{
		class ACoverLink*              Link;
		TArray<int>                    SlotIndices;
	} params;
	params.Link = Link;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;
}


// Function Engine.CoverReplicator.ClientReceiveDisabledSlots
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// int                            Index                          (CPF_Parm)
// class ACoverLink*              Link                           (CPF_Parm)
// unsigned char                  NumSlotsDisabled               (CPF_Parm)
// unsigned char                  SlotsDisabled                  (CPF_Parm)
// bool                           bDone                          (CPF_Parm)

void ACoverReplicator::ClientReceiveDisabledSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsDisabled, unsigned char SlotsDisabled, bool bDone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveDisabledSlots");

	struct
	{
		int                            Index;
		class ACoverLink*              Link;
		unsigned char                  NumSlotsDisabled;
		unsigned char                  SlotsDisabled;
		bool                           bDone;
	} params;
	params.Index = Index;
	params.Link = Link;
	params.NumSlotsDisabled = NumSlotsDisabled;
	params.SlotsDisabled = SlotsDisabled;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendDisabledSlots
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)
// Parameters:
// int                            Index                          (CPF_Parm)

void ACoverReplicator::ServerSendDisabledSlots(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendDisabledSlots");

	struct
	{
		int                            Index;
	} params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.NotifyDisabledSlots
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class ACoverLink*              Link                           (CPF_Parm)
// TArray<int>                    SlotIndices                    (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void ACoverReplicator::NotifyDisabledSlots(class ACoverLink* Link, TArray<int>* SlotIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifyDisabledSlots");

	struct
	{
		class ACoverLink*              Link;
		TArray<int>                    SlotIndices;
	} params;
	params.Link = Link;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;
}


// Function Engine.CoverReplicator.ClientReceiveEnabledSlots
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// int                            Index                          (CPF_Parm)
// class ACoverLink*              Link                           (CPF_Parm)
// unsigned char                  NumSlotsEnabled                (CPF_Parm)
// unsigned char                  SlotsEnabled                   (CPF_Parm)
// bool                           bDone                          (CPF_Parm)

void ACoverReplicator::ClientReceiveEnabledSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char SlotsEnabled, bool bDone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveEnabledSlots");

	struct
	{
		int                            Index;
		class ACoverLink*              Link;
		unsigned char                  NumSlotsEnabled;
		unsigned char                  SlotsEnabled;
		bool                           bDone;
	} params;
	params.Index = Index;
	params.Link = Link;
	params.NumSlotsEnabled = NumSlotsEnabled;
	params.SlotsEnabled = SlotsEnabled;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendEnabledSlots
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer)
// Parameters:
// int                            Index                          (CPF_Parm)

void ACoverReplicator::ServerSendEnabledSlots(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendEnabledSlots");

	struct
	{
		int                            Index;
	} params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.NotifyEnabledSlots
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// class ACoverLink*              Link                           (CPF_Parm)
// TArray<int>                    SlotIndices                    (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void ACoverReplicator::NotifyEnabledSlots(class ACoverLink* Link, TArray<int>* SlotIndices)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.NotifyEnabledSlots");

	struct
	{
		class ACoverLink*              Link;
		TArray<int>                    SlotIndices;
	} params;
	params.Link = Link;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SlotIndices != nullptr)
		*SlotIndices = params.SlotIndices;
}


// Function Engine.CoverReplicator.ClientReceiveInitialCoverReplicationInfo
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// int                            Index                          (CPF_Parm)
// class ACoverLink*              Link                           (CPF_Parm)
// bool                           bLinkDisabled                  (CPF_Parm)
// unsigned char                  NumSlotsEnabled                (CPF_Parm)
// unsigned char                  SlotsEnabled                   (CPF_Parm)
// unsigned char                  NumSlotsDisabled               (CPF_Parm)
// unsigned char                  SlotsDisabled                  (CPF_Parm)
// unsigned char                  NumSlotsAdjusted               (CPF_Parm)
// unsigned char                  SlotsAdjusted                  (CPF_Parm)
// unsigned char                  NumCoverTypesChanged           (CPF_Parm)
// struct FManualCoverTypeInfo    SlotsCoverTypeChanged          (CPF_Parm)
// bool                           bDone                          (CPF_Parm)

void ACoverReplicator::ClientReceiveInitialCoverReplicationInfo(int Index, class ACoverLink* Link, bool bLinkDisabled, unsigned char NumSlotsEnabled, unsigned char SlotsEnabled, unsigned char NumSlotsDisabled, unsigned char SlotsDisabled, unsigned char NumSlotsAdjusted, unsigned char SlotsAdjusted, unsigned char NumCoverTypesChanged, const struct FManualCoverTypeInfo& SlotsCoverTypeChanged, bool bDone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientReceiveInitialCoverReplicationInfo");

	struct
	{
		int                            Index;
		class ACoverLink*              Link;
		bool                           bLinkDisabled;
		unsigned char                  NumSlotsEnabled;
		unsigned char                  SlotsEnabled;
		unsigned char                  NumSlotsDisabled;
		unsigned char                  SlotsDisabled;
		unsigned char                  NumSlotsAdjusted;
		unsigned char                  SlotsAdjusted;
		unsigned char                  NumCoverTypesChanged;
		struct FManualCoverTypeInfo    SlotsCoverTypeChanged;
		bool                           bDone;
	} params;
	params.Index = Index;
	params.Link = Link;
	params.bLinkDisabled = bLinkDisabled;
	params.NumSlotsEnabled = NumSlotsEnabled;
	params.SlotsEnabled = SlotsEnabled;
	params.NumSlotsDisabled = NumSlotsDisabled;
	params.SlotsDisabled = SlotsDisabled;
	params.NumSlotsAdjusted = NumSlotsAdjusted;
	params.SlotsAdjusted = SlotsAdjusted;
	params.NumCoverTypesChanged = NumCoverTypesChanged;
	params.SlotsCoverTypeChanged = SlotsCoverTypeChanged;
	params.bDone = bDone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ServerSendInitialCoverReplicationInfo
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Public, FUNC_NetServer, FUNC_HasDefaults)
// Parameters:
// int                            Index                          (CPF_Parm)

void ACoverReplicator::ServerSendInitialCoverReplicationInfo(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ServerSendInitialCoverReplicationInfo");

	struct
	{
		int                            Index;
	} params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ClientSetOwner
// (FUNC_Defined, FUNC_Net, FUNC_NetReliable, FUNC_Simulated, FUNC_Public, FUNC_NetClient)
// Parameters:
// class APlayerController*       PC                             (CPF_Parm)

void ACoverReplicator::ClientSetOwner(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ClientSetOwner");

	struct
	{
		class APlayerController*       PC;
	} params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.ReplicateInitialCoverInfo
// (FUNC_Defined, FUNC_Public)

void ACoverReplicator::ReplicateInitialCoverInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.ReplicateInitialCoverInfo");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CoverReplicator.PurgeOldEntries
// (FUNC_Defined, FUNC_Public)

void ACoverReplicator::PurgeOldEntries()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CoverReplicator.PurgeOldEntries");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameMessage.GetString
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Switch                         (CPF_OptionalParm, CPF_Parm)
// bool                           bPRI1HUD                       (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_OptionalParm, CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm, CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UGameMessage::STATIC_GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMessage.GetString");

	struct
	{
		int                            Switch;
		bool                           bPRI1HUD;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		class UObject*                 OptionalObject;
		struct FString                 ReturnValue;
	} params;
	params.Switch = Switch;
	params.bPRI1HUD = bPRI1HUD;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ToggleHUD.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_ToggleHUD::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ToggleHUD.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ToggleCinematicMode.Activated
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void USeqAct_ToggleCinematicMode::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ToggleCinematicMode.Activated");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_ConsoleCommand.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_ConsoleCommand::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ConsoleCommand.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_ConsoleCommand.VersionUpdated
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            OldVersion                     (CPF_Parm)
// int                            NewVersion                     (CPF_Parm)

void USeqAct_ConsoleCommand::VersionUpdated(int OldVersion, int NewVersion)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_ConsoleCommand.VersionUpdated");

	struct
	{
		int                            OldVersion;
		int                            NewVersion;
	} params;
	params.OldVersion = OldVersion;
	params.NewVersion = NewVersion;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_SetSoundMode.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_SetSoundMode::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetSoundMode.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetSoundMode.Activated
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void USeqAct_SetSoundMode::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetSoundMode.Activated");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNotify_PlayFaceFXAnim.Notify
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Owner                          (CPF_Parm)
// class UAnimNodeSequence*       AnimSeqInstigator              (CPF_Parm)

void UAnimNotify_PlayFaceFXAnim::Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_PlayFaceFXAnim.Notify");

	struct
	{
		class AActor*                  Owner;
		class UAnimNodeSequence*       AnimSeqInstigator;
	} params;
	params.Owner = Owner;
	params.AnimSeqInstigator = AnimSeqInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.AllowBroadcastLocalizedTeam
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            TeamIndex                      (CPF_Parm)
// class AActor*                  Sender                         (CPF_Parm)
// class UClass*                  Message                        (CPF_Parm)
// int                            Switch                         (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_OptionalParm, CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm, CPF_Parm)

void ABroadcastHandler::AllowBroadcastLocalizedTeam(int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AllowBroadcastLocalizedTeam");

	struct
	{
		int                            TeamIndex;
		class AActor*                  Sender;
		class UClass*                  Message;
		int                            Switch;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		class UObject*                 OptionalObject;
	} params;
	params.TeamIndex = TeamIndex;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.AllowBroadcastLocalized
// (FUNC_Defined, FUNC_Event, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  Sender                         (CPF_Parm)
// class UClass*                  Message                        (CPF_Parm)
// int                            Switch                         (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_OptionalParm, CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm, CPF_Parm)

void ABroadcastHandler::AllowBroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AllowBroadcastLocalized");

	struct
	{
		class AActor*                  Sender;
		class UClass*                  Message;
		int                            Switch;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		class UObject*                 OptionalObject;
	} params;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.BroadcastTeam
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AController*             Sender                         (CPF_Parm)
// struct FString                 msg                            (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// struct FName                   Type                           (CPF_OptionalParm, CPF_Parm)

void ABroadcastHandler::BroadcastTeam(class AController* Sender, const struct FString& msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.BroadcastTeam");

	struct
	{
		class AController*             Sender;
		struct FString                 msg;
		struct FName                   Type;
	} params;
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.Broadcast
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  Sender                         (CPF_Parm)
// struct FString                 msg                            (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// struct FName                   Type                           (CPF_OptionalParm, CPF_Parm)

void ABroadcastHandler::Broadcast(class AActor* Sender, const struct FString& msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.Broadcast");

	struct
	{
		class AActor*                  Sender;
		struct FString                 msg;
		struct FName                   Type;
	} params;
	params.Sender = Sender;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.BroadcastLocalized
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class AActor*                  Sender                         (CPF_Parm)
// class APlayerController*       Receiver                       (CPF_Parm)
// class UClass*                  Message                        (CPF_Parm)
// int                            Switch                         (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_OptionalParm, CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm, CPF_Parm)

void ABroadcastHandler::BroadcastLocalized(class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.BroadcastLocalized");

	struct
	{
		class AActor*                  Sender;
		class APlayerController*       Receiver;
		class UClass*                  Message;
		int                            Switch;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		class UObject*                 OptionalObject;
	} params;
	params.Sender = Sender;
	params.Receiver = Receiver;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.BroadcastText
// (FUNC_Defined, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// class APlayerReplicationInfo*  SenderPRI                      (CPF_Parm)
// class APlayerController*       Receiver                       (CPF_Parm)
// struct FString                 msg                            (CPF_Parm, CPF_CoerceParm, CPF_NeedCtorLink)
// struct FName                   Type                           (CPF_OptionalParm, CPF_Parm)

void ABroadcastHandler::BroadcastText(class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, const struct FString& msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.BroadcastText");

	struct
	{
		class APlayerReplicationInfo*  SenderPRI;
		class APlayerController*       Receiver;
		struct FString                 msg;
		struct FName                   Type;
	} params;
	params.SenderPRI = SenderPRI;
	params.Receiver = Receiver;
	params.msg = msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.AllowsBroadcast
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  broadcaster                    (CPF_Parm)
// int                            InLen                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ABroadcastHandler::AllowsBroadcast(class AActor* broadcaster, int InLen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AllowsBroadcast");

	struct
	{
		class AActor*                  broadcaster;
		int                            InLen;
		bool                           ReturnValue;
	} params;
	params.broadcaster = broadcaster;
	params.InLen = InLen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BroadcastHandler.UpdateSentText
// (FUNC_Defined, FUNC_Public)

void ABroadcastHandler::UpdateSentText()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.UpdateSentText");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HttpFactory.CreateRequest
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// class UHttpRequestInterface*   ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class UHttpRequestInterface* UHttpFactory::STATIC_CreateRequest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HttpFactory.CreateRequest");

	struct
	{
		class UHttpRequestInterface*   ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystemKVSInterface.WriteKeyValue
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            SaveSlotIndex                  (CPF_Parm)
// struct FString                 KeyName                        (CPF_Parm, CPF_NeedCtorLink)
// struct FPlatformInterfaceData  Value                          (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudSaveSystemKVSInterface::WriteKeyValue(int SaveSlotIndex, const struct FString& KeyName, struct FPlatformInterfaceData* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemKVSInterface.WriteKeyValue");

	struct
	{
		int                            SaveSlotIndex;
		struct FString                 KeyName;
		struct FPlatformInterfaceData  Value;
		bool                           ReturnValue;
	} params;
	params.SaveSlotIndex = SaveSlotIndex;
	params.KeyName = KeyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystemKVSInterface.ReadKeyValue
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            SaveSlotIndex                  (CPF_Parm)
// struct FString                 KeyName                        (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class EPlatformInterfaceDataType> Type                           (CPF_Parm)
// struct FPlatformInterfaceDelegateResult Value                          (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudSaveSystemKVSInterface::ReadKeyValue(int SaveSlotIndex, const struct FString& KeyName, TEnumAsByte<enum class EPlatformInterfaceDataType> Type, struct FPlatformInterfaceDelegateResult* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemKVSInterface.ReadKeyValue");

	struct
	{
		int                            SaveSlotIndex;
		struct FString                 KeyName;
		TEnumAsByte<enum class EPlatformInterfaceDataType> Type;
		struct FPlatformInterfaceDelegateResult Value;
		bool                           ReturnValue;
	} params;
	params.SaveSlotIndex = SaveSlotIndex;
	params.KeyName = KeyName;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystemDataBlobStoreInterface.DeleteDataBlob
// (FUNC_Public)
// Parameters:
// struct FString                 StorageID                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BlobName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FScriptDelegate         InDeleteDataBlobCallback       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudSaveSystemDataBlobStoreInterface::DeleteDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& InDeleteDataBlobCallback)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemDataBlobStoreInterface.DeleteDataBlob");

	struct
	{
		struct FString                 StorageID;
		struct FString                 BlobName;
		struct FScriptDelegate         InDeleteDataBlobCallback;
		bool                           ReturnValue;
	} params;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.InDeleteDataBlobCallback = InDeleteDataBlobCallback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudSaveSystemDataBlobStoreInterface.DeleteDataBlobCallbackDelegate
// (FUNC_Final, FUNC_Private, FUNC_Delegate)
// Parameters:
// bool                           bWasSucessfull                 (CPF_Parm)
// struct FString                 StorageID                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BlobName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void UCloudSaveSystemDataBlobStoreInterface::DeleteDataBlobCallbackDelegate(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemDataBlobStoreInterface.DeleteDataBlobCallbackDelegate");

	struct
	{
		bool                           bWasSucessfull;
		struct FString                 StorageID;
		struct FString                 BlobName;
		struct FString                 Error;
	} params;
	params.bWasSucessfull = bWasSucessfull;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CloudSaveSystemDataBlobStoreInterface.SetDataBlob
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 StorageID                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BlobName                       (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          DataBlob                       (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FScriptDelegate         InSetDataBlobCallback          (CPF_Parm, CPF_NeedCtorLink)

void UCloudSaveSystemDataBlobStoreInterface::SetDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& InSetDataBlobCallback, TArray<unsigned char>* DataBlob)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemDataBlobStoreInterface.SetDataBlob");

	struct
	{
		struct FString                 StorageID;
		struct FString                 BlobName;
		TArray<unsigned char>          DataBlob;
		struct FScriptDelegate         InSetDataBlobCallback;
	} params;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.InSetDataBlobCallback = InSetDataBlobCallback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DataBlob != nullptr)
		*DataBlob = params.DataBlob;
}


// Function Engine.CloudSaveSystemDataBlobStoreInterface.SetDataBlobCallbackDelegate
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSucessfull                 (CPF_Parm)
// struct FString                 StorageID                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BlobName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void UCloudSaveSystemDataBlobStoreInterface::SetDataBlobCallbackDelegate(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemDataBlobStoreInterface.SetDataBlobCallbackDelegate");

	struct
	{
		bool                           bWasSucessfull;
		struct FString                 StorageID;
		struct FString                 BlobName;
		struct FString                 Error;
	} params;
	params.bWasSucessfull = bWasSucessfull;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CloudSaveSystemDataBlobStoreInterface.GetDataBlob
// (FUNC_Public)
// Parameters:
// struct FString                 StorageID                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BlobName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FScriptDelegate         OnGetDataBlobComplete          (CPF_Parm, CPF_NeedCtorLink)

void UCloudSaveSystemDataBlobStoreInterface::GetDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& OnGetDataBlobComplete)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemDataBlobStoreInterface.GetDataBlob");

	struct
	{
		struct FString                 StorageID;
		struct FString                 BlobName;
		struct FScriptDelegate         OnGetDataBlobComplete;
	} params;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.OnGetDataBlobComplete = OnGetDataBlobComplete;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CloudSaveSystemDataBlobStoreInterface.GetDataBlobCallbackDelegate
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 StorageID                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BlobName                       (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          DataBlob                       (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void UCloudSaveSystemDataBlobStoreInterface::GetDataBlobCallbackDelegate(bool bWasSuccessful, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error, TArray<unsigned char>* DataBlob)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudSaveSystemDataBlobStoreInterface.GetDataBlobCallbackDelegate");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 StorageID;
		struct FString                 BlobName;
		TArray<unsigned char>          DataBlob;
		struct FString                 Error;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DataBlob != nullptr)
		*DataBlob = params.DataBlob;
}


// Function Engine.CloudStorageBaseCloudSaveSystemKVS.GenerateKeyNameForSaveSlot
// (FUNC_Final, FUNC_Defined, FUNC_Private)
// Parameters:
// int                            SaveSlotIndex                  (CPF_Parm)
// struct FString                 KeyName                        (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UCloudStorageBaseCloudSaveSystemKVS::GenerateKeyNameForSaveSlot(int SaveSlotIndex, const struct FString& KeyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBaseCloudSaveSystemKVS.GenerateKeyNameForSaveSlot");

	struct
	{
		int                            SaveSlotIndex;
		struct FString                 KeyName;
		struct FString                 ReturnValue;
	} params;
	params.SaveSlotIndex = SaveSlotIndex;
	params.KeyName = KeyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBaseCloudSaveSystemKVS.WriteKeyValue
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            SaveSlotIndex                  (CPF_Parm)
// struct FString                 KeyName                        (CPF_Parm, CPF_NeedCtorLink)
// struct FPlatformInterfaceData  Value                          (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBaseCloudSaveSystemKVS::WriteKeyValue(int SaveSlotIndex, const struct FString& KeyName, struct FPlatformInterfaceData* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBaseCloudSaveSystemKVS.WriteKeyValue");

	struct
	{
		int                            SaveSlotIndex;
		struct FString                 KeyName;
		struct FPlatformInterfaceData  Value;
		bool                           ReturnValue;
	} params;
	params.SaveSlotIndex = SaveSlotIndex;
	params.KeyName = KeyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBaseCloudSaveSystemKVS.ReadKeyValue
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// int                            SaveSlotIndex                  (CPF_Parm)
// struct FString                 KeyName                        (CPF_Parm, CPF_NeedCtorLink)
// TEnumAsByte<enum class EPlatformInterfaceDataType> Type                           (CPF_Parm)
// struct FPlatformInterfaceDelegateResult Value                          (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UCloudStorageBaseCloudSaveSystemKVS::ReadKeyValue(int SaveSlotIndex, const struct FString& KeyName, TEnumAsByte<enum class EPlatformInterfaceDataType> Type, struct FPlatformInterfaceDelegateResult* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBaseCloudSaveSystemKVS.ReadKeyValue");

	struct
	{
		int                            SaveSlotIndex;
		struct FString                 KeyName;
		TEnumAsByte<enum class EPlatformInterfaceDataType> Type;
		struct FPlatformInterfaceDelegateResult Value;
		bool                           ReturnValue;
	} params;
	params.SaveSlotIndex = SaveSlotIndex;
	params.KeyName = KeyName;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.CloudStorageBaseCloudSaveSystemKVS.Init
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// class UCloudStorageBase*       InCloudStorage                 (CPF_Parm)

void UCloudStorageBaseCloudSaveSystemKVS::Init(class UCloudStorageBase* InCloudStorage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CloudStorageBaseCloudSaveSystemKVS.Init");

	struct
	{
		class UCloudStorageBase*       InCloudStorage;
	} params;
	params.InCloudStorage = InCloudStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ColorScaleVolume.UnTouch
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AColorScaleVolume::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ColorScaleVolume.UnTouch");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ColorScaleVolume.Touch
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm, CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AColorScaleVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ColorScaleVolume.Touch");

	struct
	{
		class AActor*                  Other;
		class UPrimitiveComponent*     OtherComp;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
	} params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VolumeTimer.Timer
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AVolumeTimer::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VolumeTimer.Timer");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VolumeTimer.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AVolumeTimer::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VolumeTimer.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicPhysicsVolume.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ADynamicPhysicsVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicPhysicsVolume.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DynamicTriggerVolume.PostBeginPlay
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)

void ADynamicTriggerVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DynamicTriggerVolume.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFog.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AExponentialHeightFog::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFog.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFog.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AExponentialHeightFog::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFog.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ExponentialHeightFog.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AExponentialHeightFog::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ExponentialHeightFog.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FailedConnect.GetString
// (FUNC_Defined, FUNC_Static, FUNC_HasOptionalParms, FUNC_Public)
// Parameters:
// int                            Switch                         (CPF_OptionalParm, CPF_Parm)
// bool                           bPRI1HUD                       (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (CPF_OptionalParm, CPF_Parm)
// class APlayerReplicationInfo*  RelatedPRI_3                   (CPF_OptionalParm, CPF_Parm)
// class UObject*                 OptionalObject                 (CPF_OptionalParm, CPF_Parm)
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString UFailedConnect::STATIC_GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FailedConnect.GetString");

	struct
	{
		int                            Switch;
		bool                           bPRI1HUD;
		class APlayerReplicationInfo*  RelatedPRI_2;
		class APlayerReplicationInfo*  RelatedPRI_3;
		class UObject*                 OptionalObject;
		struct FString                 ReturnValue;
	} params;
	params.Switch = Switch;
	params.bPRI1HUD = bPRI1HUD;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.RelatedPRI_3 = RelatedPRI_3;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FailedConnect.GetFailSwitch
// (FUNC_Defined, FUNC_Static, FUNC_Public)
// Parameters:
// struct FString                 FailString                     (CPF_Parm, CPF_NeedCtorLink)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UFailedConnect::STATIC_GetFailSwitch(const struct FString& FailString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FailedConnect.GetFailSwitch");

	struct
	{
		struct FString                 FailString;
		int                            ReturnValue;
	} params;
	params.FailString = FailString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HeightFog.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AHeightFog::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeightFog.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HeightFog.ReplicatedEvent
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FName                   VarName                        (CPF_Parm)

void AHeightFog::ReplicatedEvent(const struct FName& VarName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeightFog.ReplicatedEvent");

	struct
	{
		struct FName                   VarName;
	} params;
	params.VarName = VarName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HeightFog.PostBeginPlay
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void AHeightFog::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HeightFog.PostBeginPlay");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.IPoolable.OnPoolReset
// (FUNC_Public)

void UIPoolable::OnPoolReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.IPoolable.OnPoolReset");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineEventsInterface.UpdatePlaylistPopulation
// (FUNC_Public)
// Parameters:
// int                            PlaylistId                     (CPF_Parm)
// int                            NumPlayers                     (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineEventsInterface::UpdatePlaylistPopulation(int PlaylistId, int NumPlayers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineEventsInterface.UpdatePlaylistPopulation");

	struct
	{
		int                            PlaylistId;
		int                            NumPlayers;
		bool                           ReturnValue;
	} params;
	params.PlaylistId = PlaylistId;
	params.NumPlayers = NumPlayers;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineEventsInterface.UploadGameplayEventsData
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            UniqueId                       (CPF_Parm)
// TArray<unsigned char>          Payload                        (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineEventsInterface::UploadGameplayEventsData(const struct FUniqueNetId& UniqueId, TArray<unsigned char>* Payload)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineEventsInterface.UploadGameplayEventsData");

	struct
	{
		struct FUniqueNetId            UniqueId;
		TArray<unsigned char>          Payload;
		bool                           ReturnValue;
	} params;
	params.UniqueId = UniqueId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Payload != nullptr)
		*Payload = params.Payload;

	return params.ReturnValue;
}


// Function Engine.OnlineEventsInterface.UploadPlayerData
// (FUNC_Public)
// Parameters:
// struct FUniqueNetId            UniqueId                       (CPF_Parm)
// struct FString                 PlayerNick                     (CPF_Parm, CPF_NeedCtorLink)
// class UOnlineProfileSettings*  ProfileSettings                (CPF_Parm)
// class UOnlinePlayerStorage*    PlayerStorage                  (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineEventsInterface::UploadPlayerData(const struct FUniqueNetId& UniqueId, const struct FString& PlayerNick, class UOnlineProfileSettings* ProfileSettings, class UOnlinePlayerStorage* PlayerStorage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineEventsInterface.UploadPlayerData");

	struct
	{
		struct FUniqueNetId            UniqueId;
		struct FString                 PlayerNick;
		class UOnlineProfileSettings*  ProfileSettings;
		class UOnlinePlayerStorage*    PlayerStorage;
		bool                           ReturnValue;
	} params;
	params.UniqueId = UniqueId;
	params.PlayerNick = PlayerNick;
	params.ProfileSettings = ProfileSettings;
	params.PlayerStorage = PlayerStorage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.GetCurrentPlayersListCount
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UOnlineRecentPlayersList::GetCurrentPlayersListCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.GetCurrentPlayersListCount");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.SetCurrentPlayersList
// (FUNC_Defined, FUNC_Public)
// Parameters:
// TArray<struct FCurrentPlayerMet> Players                        (CPF_Const, CPF_Parm, CPF_NeedCtorLink)

void UOnlineRecentPlayersList::SetCurrentPlayersList(TArray<struct FCurrentPlayerMet> Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.SetCurrentPlayersList");

	struct
	{
		TArray<struct FCurrentPlayerMet> Players;
	} params;
	params.Players = Players;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineRecentPlayersList.ShowCurrentPlayersList
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 Title                          (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Description                    (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineRecentPlayersList::ShowCurrentPlayersList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ShowCurrentPlayersList");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 Title;
		struct FString                 Description;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.Title = Title;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.ShowLastPartyPlayerList
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 Title                          (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Description                    (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineRecentPlayersList::ShowLastPartyPlayerList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ShowLastPartyPlayerList");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 Title;
		struct FString                 Description;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.Title = Title;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.ShowRecentPartiesPlayerList
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 Title                          (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Description                    (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineRecentPlayersList::ShowRecentPartiesPlayerList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ShowRecentPartiesPlayerList");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 Title;
		struct FString                 Description;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.Title = Title;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.ShowRecentPlayerList
// (FUNC_Defined, FUNC_Public)
// Parameters:
// unsigned char                  LocalUserNum                   (CPF_Parm)
// struct FString                 Title                          (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Description                    (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineRecentPlayersList::ShowRecentPlayerList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ShowRecentPlayerList");

	struct
	{
		unsigned char                  LocalUserNum;
		struct FString                 Title;
		struct FString                 Description;
		bool                           ReturnValue;
	} params;
	params.LocalUserNum = LocalUserNum;
	params.Title = Title;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.SetLastParty
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            PartyLeader                    (CPF_Parm)
// TArray<struct FUniqueNetId>    PartyMembers                   (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UOnlineRecentPlayersList::SetLastParty(const struct FUniqueNetId& PartyLeader, TArray<struct FUniqueNetId>* PartyMembers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.SetLastParty");

	struct
	{
		struct FUniqueNetId            PartyLeader;
		TArray<struct FUniqueNetId>    PartyMembers;
	} params;
	params.PartyLeader = PartyLeader;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PartyMembers != nullptr)
		*PartyMembers = params.PartyMembers;
}


// Function Engine.OnlineRecentPlayersList.GetTeamForCurrentPlayer
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FUniqueNetId            Player                         (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UOnlineRecentPlayersList::GetTeamForCurrentPlayer(const struct FUniqueNetId& Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.GetTeamForCurrentPlayer");

	struct
	{
		struct FUniqueNetId            Player;
		int                            ReturnValue;
	} params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.GetSkillForCurrentPlayer
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FUniqueNetId            Player                         (CPF_Parm)
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int UOnlineRecentPlayersList::GetSkillForCurrentPlayer(const struct FUniqueNetId& Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.GetSkillForCurrentPlayer");

	struct
	{
		struct FUniqueNetId            Player;
		int                            ReturnValue;
	} params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineRecentPlayersList.GetPlayersFromCurrentPlayers
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FUniqueNetId>    Players                        (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UOnlineRecentPlayersList::GetPlayersFromCurrentPlayers(TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.GetPlayersFromCurrentPlayers");

	struct
	{
		TArray<struct FUniqueNetId>    Players;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;
}


// Function Engine.OnlineRecentPlayersList.GetPlayersFromRecentParties
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FUniqueNetId>    Players                        (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UOnlineRecentPlayersList::GetPlayersFromRecentParties(TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.GetPlayersFromRecentParties");

	struct
	{
		TArray<struct FUniqueNetId>    Players;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;
}


// Function Engine.OnlineRecentPlayersList.ClearRecentParties
// (FUNC_Defined, FUNC_Public)

void UOnlineRecentPlayersList::ClearRecentParties()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ClearRecentParties");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineRecentPlayersList.AddPartyToRecentParties
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FUniqueNetId            PartyLeader                    (CPF_Parm)
// TArray<struct FUniqueNetId>    PartyMembers                   (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)

void UOnlineRecentPlayersList::AddPartyToRecentParties(const struct FUniqueNetId& PartyLeader, TArray<struct FUniqueNetId>* PartyMembers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.AddPartyToRecentParties");

	struct
	{
		struct FUniqueNetId            PartyLeader;
		TArray<struct FUniqueNetId>    PartyMembers;
	} params;
	params.PartyLeader = PartyLeader;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (PartyMembers != nullptr)
		*PartyMembers = params.PartyMembers;
}


// Function Engine.OnlineRecentPlayersList.ClearRecentPlayers
// (FUNC_Defined, FUNC_Public)

void UOnlineRecentPlayersList::ClearRecentPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.ClearRecentPlayers");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineRecentPlayersList.AddPlayerToRecentPlayers
// (FUNC_Defined, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// struct FUniqueNetId            NewPlayer                      (CPF_Parm)

void UOnlineRecentPlayersList::AddPlayerToRecentPlayers(const struct FUniqueNetId& NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineRecentPlayersList.AddPlayerToRecentPlayers");

	struct
	{
		struct FUniqueNetId            NewPlayer;
	} params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineStatsWrite_TA.SetIntStat
// (FUNC_Defined, FUNC_Public)
// Parameters:
// int                            StatId                         (CPF_Parm)
// int                            Value                          (CPF_Parm)

void UOnlineStatsWrite_TA::SetIntStat(int StatId, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineStatsWrite_TA.SetIntStat");

	struct
	{
		int                            StatId;
		int                            Value;
	} params;
	params.StatId = StatId;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSuppliedUIInterface.ShowMatchmakingUI
// (FUNC_Public)
// Parameters:
// unsigned char                  SearchingPlayerNum             (CPF_Parm)
// class UOnlineGameSearch*       SearchSettings                 (CPF_Parm)
// class UOnlineGameSettings*     GameSettings                   (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSuppliedUIInterface::ShowMatchmakingUI(unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, class UOnlineGameSettings* GameSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSuppliedUIInterface.ShowMatchmakingUI");

	struct
	{
		unsigned char                  SearchingPlayerNum;
		class UOnlineGameSearch*       SearchSettings;
		class UOnlineGameSettings*     GameSettings;
		bool                           ReturnValue;
	} params;
	params.SearchingPlayerNum = SearchingPlayerNum;
	params.SearchSettings = SearchSettings;
	params.GameSettings = GameSettings;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.OnlineSuppliedUIInterface.ClearShowOnlineStatsUICompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ShowOnlineStatsUICompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSuppliedUIInterface::ClearShowOnlineStatsUICompleteDelegate(const struct FScriptDelegate& ShowOnlineStatsUICompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSuppliedUIInterface.ClearShowOnlineStatsUICompleteDelegate");

	struct
	{
		struct FScriptDelegate         ShowOnlineStatsUICompleteDelegate;
	} params;
	params.ShowOnlineStatsUICompleteDelegate = ShowOnlineStatsUICompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSuppliedUIInterface.AddShowOnlineStatsUICompleteDelegate
// (FUNC_Public)
// Parameters:
// struct FScriptDelegate         ShowOnlineStatsUICompleteDelegate (CPF_Parm, CPF_NeedCtorLink)

void UOnlineSuppliedUIInterface::AddShowOnlineStatsUICompleteDelegate(const struct FScriptDelegate& ShowOnlineStatsUICompleteDelegate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSuppliedUIInterface.AddShowOnlineStatsUICompleteDelegate");

	struct
	{
		struct FScriptDelegate         ShowOnlineStatsUICompleteDelegate;
	} params;
	params.ShowOnlineStatsUICompleteDelegate = ShowOnlineStatsUICompleteDelegate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.OnlineSuppliedUIInterface.ShowOnlineStatsUI
// (FUNC_Public, FUNC_HasOutParms)
// Parameters:
// TArray<struct FUniqueNetId>    Players                        (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// class UOnlineStatsRead*        StatsRead                      (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UOnlineSuppliedUIInterface::ShowOnlineStatsUI(class UOnlineStatsRead* StatsRead, TArray<struct FUniqueNetId>* Players)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSuppliedUIInterface.ShowOnlineStatsUI");

	struct
	{
		TArray<struct FUniqueNetId>    Players;
		class UOnlineStatsRead*        StatsRead;
		bool                           ReturnValue;
	} params;
	params.StatsRead = StatsRead;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Players != nullptr)
		*Players = params.Players;

	return params.ReturnValue;
}


// Function Engine.OnlineSuppliedUIInterface.OnShowOnlineStatsUIComplete
// (FUNC_Public, FUNC_Delegate)

void UOnlineSuppliedUIInterface::OnShowOnlineStatsUIComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.OnlineSuppliedUIInterface.OnShowOnlineStatsUIComplete");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PathNode_Dynamic.GetDebugAbbrev
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// struct FString                 ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm, CPF_NeedCtorLink)

struct FString APathNode_Dynamic::GetDebugAbbrev()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PathNode_Dynamic.GetDebugAbbrev");

	struct
	{
		struct FString                 ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ReverbVolumeToggleable.OnToggle
// (FUNC_Defined, FUNC_Simulated, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          Action                         (CPF_Parm)

void AReverbVolumeToggleable::OnToggle(class USeqAct_Toggle* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ReverbVolumeToggleable.OnToggle");

	struct
	{
		class USeqAct_Toggle*          Action;
	} params;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_MITV_Activate.Activated
// (FUNC_Defined, FUNC_Event, FUNC_Public)

void USeqAct_MITV_Activate::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_MITV_Activate.Activated");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_MITV_Activate.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_MITV_Activate::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_MITV_Activate.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetMatInstVectorParam.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_SetMatInstVectorParam::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetMatInstVectorParam.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqAct_SetVector.Activated
// (FUNC_Defined, FUNC_Event, FUNC_Public, FUNC_HasDefaults)

void USeqAct_SetVector::Activated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_SetVector.Activated");

	struct
	{
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SeqAct_UpdatePhysBonesFromAnim.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqAct_UpdatePhysBonesFromAnim::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqAct_UpdatePhysBonesFromAnim.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SeqEvent_LOS.GetObjClassVersion
// (FUNC_Defined, FUNC_Event, FUNC_Static, FUNC_Public)
// Parameters:
// int                            ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

int USeqEvent_LOS::STATIC_GetObjClassVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SeqEvent_LOS.GetObjClassVersion");

	struct
	{
		int                            ReturnValue;
	} params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Trigger_LOS.Tick
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public, FUNC_HasDefaults)
// Parameters:
// float                          DeltaTime                      (CPF_Parm)

void ATrigger_LOS::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger_LOS.Tick");

	struct
	{
		float                          DeltaTime;
	} params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TriggeredPath.SuggestMovePreparation
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool ATriggeredPath::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TriggeredPath.SuggestMovePreparation");

	struct
	{
		class APawn*                   Other;
		bool                           ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TriggeredPath.SpecialHandling
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class APawn*                   Other                          (CPF_Parm)
// class AActor*                  ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

class AActor* ATriggeredPath::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TriggeredPath.SpecialHandling");

	struct
	{
		class APawn*                   Other;
		class AActor*                  ReturnValue;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TriggeredPath.OnToggle
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class USeqAct_Toggle*          inAction                       (CPF_Parm)

void ATriggeredPath::OnToggle(class USeqAct_Toggle* inAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TriggeredPath.OnToggle");

	struct
	{
		class USeqAct_Toggle*          inAction;
	} params;
	params.inAction = inAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TriggerStreamingLevel.Touch
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm, CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void ATriggerStreamingLevel::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TriggerStreamingLevel.Touch");

	struct
	{
		class AActor*                  Other;
		class UPrimitiveComponent*     OtherComp;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
	} params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnDeleteUserFileComplete
// (FUNC_Final, FUNC_Defined, FUNC_Private)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileCloudSaveSystemDataBlobStore::OnDeleteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnDeleteUserFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 UserId;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.DeleteDataBlob
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 StorageID                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BlobName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FScriptDelegate         InDeleteDataBlobCallback       (CPF_Parm, CPF_NeedCtorLink)
// bool                           ReturnValue                    (CPF_Parm, CPF_OutParm, CPF_ReturnParm)

bool UUserCloudFileCloudSaveSystemDataBlobStore::DeleteDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& InDeleteDataBlobCallback)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.DeleteDataBlob");

	struct
	{
		struct FString                 StorageID;
		struct FString                 BlobName;
		struct FScriptDelegate         InDeleteDataBlobCallback;
		bool                           ReturnValue;
	} params;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.InDeleteDataBlobCallback = InDeleteDataBlobCallback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnWriteUserFileComplete
// (FUNC_Final, FUNC_Defined, FUNC_Private)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileCloudSaveSystemDataBlobStore::OnWriteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnWriteUserFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 UserId;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.SetDataBlob
// (FUNC_Defined, FUNC_Public, FUNC_HasOutParms)
// Parameters:
// struct FString                 StorageID                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BlobName                       (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          DataBlob                       (CPF_Const, CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FScriptDelegate         InSetDataBlobCallback          (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileCloudSaveSystemDataBlobStore::SetDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& InSetDataBlobCallback, TArray<unsigned char>* DataBlob)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.SetDataBlob");

	struct
	{
		struct FString                 StorageID;
		struct FString                 BlobName;
		TArray<unsigned char>          DataBlob;
		struct FScriptDelegate         InSetDataBlobCallback;
	} params;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.InSetDataBlobCallback = InSetDataBlobCallback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DataBlob != nullptr)
		*DataBlob = params.DataBlob;
}


// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnReadUserFileComplete
// (FUNC_Final, FUNC_Defined, FUNC_Private)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 UserId                         (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Filename                       (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileCloudSaveSystemDataBlobStore::OnReadUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.OnReadUserFileComplete");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 UserId;
		struct FString                 Filename;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.UserId = UserId;
	params.Filename = Filename;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.GetDataBlob
// (FUNC_Defined, FUNC_Public)
// Parameters:
// struct FString                 StorageID                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BlobName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FScriptDelegate         InGetDataBlobCallback          (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileCloudSaveSystemDataBlobStore::GetDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& InGetDataBlobCallback)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.GetDataBlob");

	struct
	{
		struct FString                 StorageID;
		struct FString                 BlobName;
		struct FScriptDelegate         InGetDataBlobCallback;
	} params;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.InGetDataBlobCallback = InGetDataBlobCallback;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.Init
// (FUNC_Final, FUNC_Defined, FUNC_Public)
// Parameters:
// TScriptInterface<class UUserCloudFileInterface> InUserCloudFile                (CPF_Parm)

void UUserCloudFileCloudSaveSystemDataBlobStore::Init(const TScriptInterface<class UUserCloudFileInterface>& InUserCloudFile)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.Init");

	struct
	{
		TScriptInterface<class UUserCloudFileInterface> InUserCloudFile;
	} params;
	params.InUserCloudFile = InUserCloudFile;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.DeleteDataBlobCallbackDelegate
// (FUNC_Final, FUNC_Private, FUNC_Delegate)
// Parameters:
// bool                           bWasSucessfull                 (CPF_Parm)
// struct FString                 StorageID                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BlobName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileCloudSaveSystemDataBlobStore::DeleteDataBlobCallbackDelegate(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.DeleteDataBlobCallbackDelegate");

	struct
	{
		bool                           bWasSucessfull;
		struct FString                 StorageID;
		struct FString                 BlobName;
		struct FString                 Error;
	} params;
	params.bWasSucessfull = bWasSucessfull;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.SetDataBlobCallbackDelegate
// (FUNC_Public, FUNC_Delegate)
// Parameters:
// bool                           bWasSucessfull                 (CPF_Parm)
// struct FString                 StorageID                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BlobName                       (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileCloudSaveSystemDataBlobStore::SetDataBlobCallbackDelegate(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.SetDataBlobCallbackDelegate");

	struct
	{
		bool                           bWasSucessfull;
		struct FString                 StorageID;
		struct FString                 BlobName;
		struct FString                 Error;
	} params;
	params.bWasSucessfull = bWasSucessfull;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.GetDataBlobCallbackDelegate
// (FUNC_Public, FUNC_Delegate, FUNC_HasOutParms)
// Parameters:
// bool                           bWasSuccessful                 (CPF_Parm)
// struct FString                 StorageID                      (CPF_Parm, CPF_NeedCtorLink)
// struct FString                 BlobName                       (CPF_Parm, CPF_NeedCtorLink)
// TArray<unsigned char>          DataBlob                       (CPF_Parm, CPF_OutParm, CPF_NeedCtorLink)
// struct FString                 Error                          (CPF_Parm, CPF_NeedCtorLink)

void UUserCloudFileCloudSaveSystemDataBlobStore::GetDataBlobCallbackDelegate(bool bWasSuccessful, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error, TArray<unsigned char>* DataBlob)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserCloudFileCloudSaveSystemDataBlobStore.GetDataBlobCallbackDelegate");

	struct
	{
		bool                           bWasSuccessful;
		struct FString                 StorageID;
		struct FString                 BlobName;
		TArray<unsigned char>          DataBlob;
		struct FString                 Error;
	} params;
	params.bWasSuccessful = bWasSuccessful;
	params.StorageID = StorageID;
	params.BlobName = BlobName;
	params.Error = Error;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DataBlob != nullptr)
		*DataBlob = params.DataBlob;
}


// Function Engine.WaterVolume.PlayExitSplash
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AWaterVolume::PlayExitSplash(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.PlayExitSplash");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WaterVolume.UnTouch
// (FUNC_Defined, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AWaterVolume::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.UnTouch");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WaterVolume.PlayEntrySplash
// (FUNC_Defined, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)

void AWaterVolume::PlayEntrySplash(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.PlayEntrySplash");

	struct
	{
		class AActor*                  Other;
	} params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WaterVolume.Touch
// (FUNC_Defined, FUNC_Simulated, FUNC_Event, FUNC_Public)
// Parameters:
// class AActor*                  Other                          (CPF_Parm)
// class UPrimitiveComponent*     OtherComp                      (CPF_Parm, CPF_EditInline)
// struct FVector                 HitLocation                    (CPF_Parm)
// struct FVector                 HitNormal                      (CPF_Parm)

void AWaterVolume::Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WaterVolume.Touch");

	struct
	{
		class AActor*                  Other;
		class UPrimitiveComponent*     OtherComp;
		struct FVector                 HitLocation;
		struct FVector                 HitNormal;
	} params;
	params.Other = Other;
	params.OtherComp = OtherComp;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
